{
  "documents": [
    "BlazeSwap\nThe first open-source fully decentralized exchange on the Flare Network.\nBrought to you by the A-FTSO provider.\n\nExplore Flare's ecosystem and unlock rewards by staking, supplying, and lending with BlazeSwap",
    "Features\nTrade any token at the best rates. Provide liquidity to earn commissions and rewards.\nFast trade settlement, immediate trade finality and extremely low transaction fees.\nVote for the FTSO provider delegation and claim your rewards. The process is controlled by smart contracts and mimics the Flare distribution, no more missed rewards.\nUse F-Assets bridged tokens with confidence, the incentives are distributed to the liquidity providers pro-rata.\nLiquidity providers will be able to claim the airdropped tokens on Flare, without fear of losing their 85% airdrop.\nUse the API for advanced interactions, automated trading, flash swaps and price oracles.",
    "FAQ\n\n**Has the platform been audited?**\nYes, the platform has been audited by the specialized security firm Omniscia. No major issues have been found, and all minor issues have been addressed. The report is available here.\n\n**Is there a bug bounty program?**\nYes, we have an active bug bounty program to reward users that find severe issues in the smart contracts of the DEX. For more details, see the dedicated page.\n\n**Will I lose my FTSO rewards if I put liquidity into the BlazeSwap pools?**\nNo, you can safely put your FLR/SGB/CFLR/C2FLR into a liquidity pool and claim periodic rewards. The timings, amounts, and reward expirations mirror previous experiences—the only change is the interface for claiming.\n\n**Will I lose the Flare Airdrop (FlareDrops) if I put liquidity into the BlazeSwap pools?**\nNo, on the Flare and Coston2 networks you can claim your monthly FlareDrop. The system uses three snapshots to distribute the airdrop, ensuring consistent timings, amounts, and expirations.\n\n**What tokens can I trade?**\nAny ERC-20 compliant fungible token can be traded. A curated list of known tokens is pre-defined, but you are free to add new ones. Note that NFTs are not supported.\n\n**How can I get some free tokens to play with the DEX?**\nOn Coston/Coston2, you can exchange your CFLR/C2FLR for test tokens or mint them directly.\n\n**Is there a BlazeSwap token or NFTs?**\nNo, the platform does not issue a governance or utility token. LP tokens suffice for provider delegation and token pairing.",
    "FAQ (continued)\n\n**Will you add farming pools?**\nNo, there won’t be farming pools since there is no BlazeSwap token. Liquidity providers earn through trading fees, the main revenue source.\n\n**What are the trader and liquidity provider fees?**\nEach swap incurs a fixed 0.3% fee for traders, with liquidity providers receiving a proportional share.\n\n**What are the platform fees?**\nCurrently, the platform has no fees. If fees are activated in the future, they will be announced at least 15 days in advance. A potential swap fee of 0.05% (reducing liquidity providers’ share to 0.25%) may apply.\n\n**As a liquidity provider, may I incur an impermanent loss? What is it?**\nYes, impermanent loss is the potential loss from price divergence between when liquidity is added and removed. This loss is only realized upon withdrawal.\n\n**What wallet do you support?**\nAny web3-enabled wallet or one supporting WalletConnect v1. MetaMask, Rabby, and Bifrost/D'CENT have been tested; however, MetaMask Mobile is not recommended.\n\n**Why does the interface stop working correctly after several MetaMask transactions?**\nThis is likely due to reaching the rate limit of the public Flare RPC endpoint, as MetaMask makes numerous RPC calls per transaction.\n\n**Why don't I see my pools with custom tokens or rewards from removed liquidity when using the in-app Bifrost browser?**\nBifrost runs in incognito mode, which clears settings (like custom tokens and pool history) when the page is closed.\n\n**Is it possible to perform swaps via API without the web interface?**\nYes, you can call the smart contracts directly in a manner similar to Uniswap V2. A npm package with the contract interfaces is available, with a potential SDK in the future.",
    "Official addresses\n\nFlare\n\nFactory address:\n0x440602f459D7Dd500a74528003e6A20A46d6e2A6\n\nRouter address:\n0xe3A1b355ca63abCBC9589334B5e609583C7BAa06",
    "import ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n\n**Flare is the blockchain for data ☀️**, offering developers and users secure, decentralized access to high-integrity data from other chains and the internet. Flare's Layer-1 network uniquely supports enshrined data protocols at the network layer, making it the only EVM-compatible smart contract platform optimized for decentralized data acquisition, including price and time-series data, blockchain event and state data, and Web2 API data.\n\nBy providing broad data access at scale and minimal cost, Flare delivers a full-stack solution for building the next generation of secure, interoperable, and data-driven decentralized applications.\n\n## Getting started\n\n- [Hello World in your browser](/network/getting-started) — Build and deploy your first smart contract on Flare, using only your browser.\n\n- [Learn how to use FTSOv2](/ftso/overview) — Leverage the latest upgrades to the Flare Time Series Oracle (FTSO), with feeds now updating every ≈1.8 seconds.\n\n- Start building on Flare with programming languages you may already know\n\n  - [JavaScript](/network/guides/flare-for-javascript-developers)\n  - [Python](/network/guides/flare-for-python-developers)\n  - [Rust](/network/guides/flare-for-rust-developers)\n  - [Go](/network/guides/flare-for-go-developers)\n\n## Understand the architecture\n\nBuild a strong understanding of the core concepts that set Flare apart from other blockchains. Flare's data protocols, [Flare Time Series Oracle (FTSO)](/ftso/overview) and [Flare Data Connector (FDC)](/fdc/overview), are enshrined into the core protocol of Flare, and inherit the economic security of the entire network.\n\n<ThemedImage\n  alt=\"Flare Architecture\"\n  sources={{\n    light: useBaseUrl(\"img/flare_architecture_light.svg\"),\n    dark: useBaseUrl(\"img/flare_architecture_dark.svg\"),\n  }}\n/>\n\n## Contribute to Flare\n\n- [Contribute to Flare's open-source codebase](https://github.com/flare-foundation) — Help build the future of Flare.\n\n- [Become an FTSO data provider](/run-node/ftso-data-provider) — Support DeFi applications on Flare with high-integrity, block-latency data feeds.\n\n- [Run a Flare validator](/run-node/validator-node) — Secure Flare and earn rewards by running a validator node.",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport DocCardList from \"@theme/DocCardList\";\nimport SolidityReference from \"@site/src/components/DataTables/SolidityReference\";\n\n## Deployed Contracts\n\nexport const contracts = [\n  \"FtsoV2\",\n  \"FeeCalculator\",\n  \"FtsoFeedIdConverter\",\n  \"FastUpdater\",\n  \"FastUpdatesConfiguration\",\n  \"FastUpdateIncentiveManager\",\n];\n\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n        <SolidityReference\n            network=\"FlareMainnet\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        <SolidityReference\n            network=\"FlareTestnetCoston2\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n        <SolidityReference\n            network=\"SongbirdCanaryNetwork\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n        <SolidityReference\n            network=\"SongbirdTestnetCoston\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n</Tabs>\n\n## Interfaces\n\n<DocCardList />",
    "import Remix from \"@site/src/components/remix\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport YoutubeEmbed from \"@site/src/components/youtube\";\nimport FtsoV2FeedConsumer from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2FeedConsumer.sol\";\nimport OpenSolidityCompiler from \"/static/img/ftso-getting-started/0-open-solidity-compiler-tab.png\";\nimport SetEvmVersion from \"/static/img/ftso-getting-started/1-set-evm-version.png\";\nimport SetInjectedProvider from \"/static/img/ftso-getting-started/1-set-injected-provider.png\";\nimport CompileContract from \"/static/img/ftso-getting-started/2-compile-contract.png\";\nimport OpenDeploy from \"/static/img/ftso-getting-started/3-open-deploy.png\";\nimport DeployContract from \"/static/img/ftso-getting-started/4-deploy-contract.png\";\nimport ConfirmDeployInMetamask from \"/static/img/ftso-getting-started/5-confirm-deploy-in-metamask.png\";\nimport QueryLatestFeeds from \"/static/img/ftso-getting-started/6-query-latest-feeds.png\";\n\nYou can use FTSOv2 to connect your smart contracts with real-world data feeds. FTSOv2 leverages Flare's network of 100 independent data providers to fetch offchain data and deliver it onchain. This section demonstrates how to consume FTSOv2's block-latency feeds on Flare using an onchain Solidity contract.\n\n:::info[New to smart contract development?]\n\nLearn how to [deploy your first smart contract](/network/getting-started) before you start this guide.\n\n:::\n\n## Sample contract\n\nThis example smart contract queries the latest feed values for FLR/USD, BTC/USD, and ETH/USD from FTSOv2 on Flare Testnet Coston2.\n\n<CodeBlock language=\"solidity\" title=\"FtsoV2FeedConsumer.sol\">\n  {FtsoV2FeedConsumer}\n</CodeBlock>\n\n{/* prettier-ignore */}\n<Remix fileName=\"FtsoV2FeedConsumer.sol\">Open in Remix</Remix>\n<br></br>\n\n:::warning[Don't use test interfaces in production]\n\nThe `TestFtsoV2Interface` is for **testing only**, with all methods as `view` to allow rapid development without gas costs or state changes. For production, use [`FtsoV2Interface`](/ftso/solidity-reference/FtsoV2Interface), which includes `payable` methods required for real transactions and state modifications.\n\nMake the following changes to `FtsoV2FeedConsumer.sol`:\n\n```solidity\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\"\nimport {FtsoV2Interface} from \"@flarenetwork/flare-periphery-contracts/coston2/FtsoV2Interface.sol\";\n\ncontract FtsoV2FeedConsumer {\n   //...\n   function getFtsoV2CurrentFeedValues()\n      external\n      returns (\n         uint256[] memory _feedValues,\n         int8[] memory _decimals,\n         uint64 _timestamp\n      )\n   {\n      ftsoV2 = ContractRegistry.getFtsoV2();\n      /* Your custom feed consumption logic. In this example the values are just returned. */\n      return ftsoV2.getFeedsById(feedIds);\n   }\n}\n```\n\n:::\n\n<details>\n    <summary>Breaking down the contract.</summary>\n\n    - **Purpose**: Interacts with the Flare Network to fetch current feed values for specific cryptocurrency pairs (FLR/USD, BTC/USD, ETH/USD).\n\n    - **Dependencies**:\n\n    - `ContractRegistry.sol`: Used to get the addresses of various contracts on the Flare network.\n    - `TestFtsoV2Interface.sol`: This interface allows interaction with the FTSOv2 contract, which provides real-time price feeds for various assets.\n\n    - **State Variables**:\n\n    - `ftsoV2`: This is a state variable of type `TestFtsoV2Interface`. It will hold the address of the FTSO V2 contract once initialized.\n    - `feedIndexes`: An array of indexes corresponding to different price feeds. In this example:\n    - Index 0 corresponds to FLR/USD\n    - Index 2 corresponds to BTC/USD\n    - Index 9 corresponds to ETH/USD\n\n    - **Constructor**:\n\n    - The constructor is a special function that runs only once when the contract is deployed. It initializes the `ftsoV2` state variable by fetching the FTSO V2 contract address using the `ContractRegistry`.\n\n    - **Function `getFtsoV2CurrentFeedValues`**:\n\n    - It is marked as `external`, meaning it can be called from outside the contract.\n    - It is also marked as `payable`, allowing it to receive Ether when called, though in this example, the Ether is not used.\n    - It returns three values:\n    - `_feedValues`: The latest price values for the specified feeds.\n    - `_decimals`: The decimal precision of each feed value.\n    - `_timestamp`: The timestamp when the prices were fetched.\n\n    Inside the function:\n\n    - The `ftsoV2.getFeedsByIndex(feedIndexes)` call retrieves the latest prices for the indexes specified in `feedIndexes`.\n    - These values are then returned to the caller.\n\n</details>\n\n## Compile and deploy the contract\n\n:::info[Configure and fund your wallet]\n\nIf you have not already configured your MetaMask wallet to support Flare Testnet Coston2 and funded it with testnet C2FLR, learn how to [deploy your first smart contract](/network/getting-started). You can get testnet C2FLR from the [Coston2 Faucet](https://faucet.flare.network/coston2).\n\n:::\n\n{/* prettier-ignore */}\n1. <Remix feedName=\"FtsoV2FeedConsumer.sol\">Open contract in Remix</Remix>\n\n2. Click on `FtsoV2FeedConsumer.sol` in the file explorer to open the contract in the editor.\n\n2. On the left side of Remix, click the **Solidity Compiler** tab to view the compiler settings.\n\n   <img src={OpenSolidityCompiler} style={{ width: 300 }} />\n\n3. Expand the **Advanced Configurations** section and make sure the **EVM Version** is set to `london`.\n\n   <img src={SetEvmVersion} style={{ width: 300 }} />\n\n3. Click the **Compile FtsoV2FeedConsumer.sol** button to compile the contract.\n\n   <img src={CompileContract} style={{ width: 300 }} />\n\n4. On the left side of Remix, click the **Deploy & Run transactions** tab to view the deployment settings.\n\n   <img src={OpenDeploy} style={{ width: 300 }} />\n\n5. Select the **Injected Provider - MetaMask** environment.\n\n   <img src={SetInjectedProvider} style={{ width: 300 }} />\n\n6. Click **Deploy** to deploy the contract to Flare Testnet Coston2. MetaMask opens and asks you to confirm payment for deploying the contract. Make sure MetaMask is set to Flare Testnet Coston2 before you confirm the transaction.\n\n   <img src={DeployContract} style={{ width: 300 }} />\n\n7. In the MetaMask prompt, click **Confirm** to approve the transaction and spend your testnet C2FLR required to deploy the contract.\n\n   <img src={ConfirmDeployInMetamask} style={{ width: 300 }} />\n\n8. After a few seconds, the transaction completes and your contract appears under the **Deployed/Unpinned Contracts** list in Remix. Click the contract dropdown to view its variables and functions. Click on **getFtsoV2CurrentFeedValues** to show the latest feed values and decimals.\n\n   <img src={QueryLatestFeeds} style={{ width: 300 }} />\n\n#### Function Returns\n\n- `_feedValues`: Current integer values of FLR/USD, BTC/USD, and ETH/USD. The returns are in the same order as the input `feedIndexes` array.\n- `_decimals`: Decimal places for FLR/USD, BTC/USD, and ETH/USD.\n- `_timestamp`: Timestamp of the last feed update.\n\nThe floating point value of a feed can be calculated by dividing the `feedValue` by 10^`decimals`. For example, if the feed value of BTC/USD is `6900420` and the decimal is `2`, the floating point feed value is `69004.20`.\n\n:::tip[What's next?]\n\n[Build your first FTSOv2 app](/ftso/guides/build-first-app) using Foundry, or [read feeds offchain](/ftso/guides/read-feeds-offchain) in languages like JavaScript, Python, Rust, and Go.\n\n:::\n\n## Watch the video\n\n<YoutubeEmbed embedLink=\"Lgia7lbTSk0?si=rTkpw5Dh5E6X-DHz\"></YoutubeEmbed>",
    "import ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n\nThe **F**lare **T**ime **S**eries **O**racle **(FTSO)** is an [enshrined oracle](/support/terminology#enshrined-oracle) that provides decentralized data feeds to the Flare network. Since the release of FTSOv1 two years ago, users and applications on Flare have enjoyed consistent and reliable pricing, with zero downtime or failures. FTSOv2 builds on the robust foundation laid by its predecessor, offering several enhancements:\n\n- **Secure.** Enshrined into Flare's core protocol, every oracle feed in FTSOv2 inherits the economic security of the entire network.\n\n- **Fast.** FTSOv2 features block-latency feeds, updating with each new block on Flare, every ≈1.8 seconds.\n\n- **Scalable.** FTSOv2 supports up to 1000 feeds across various asset classes including equities, commodities, and cryptocurrencies, with access to 2 weeks of historical data.\n\n- **Decentralized.** Each FTSOv2 feed is supported by around 100 independent data providers, who are selected by Flare users through their delegated stake, imposing a strict economic cost for misbehavior.\n\n- **Cost-effective.** Block-latency feeds in FTSOv2 are completely free to query. Feeds from Scaling are also free to query and verify locally, with minimal gas costs for onchain verification.\n\n## Architecture\n\nFTSOv2 ensures fast, secure, and manipulation-resistant feeds by using a stake-weighted verifiable randomness function (VRF) to select a sample of data providers for incremental delta updates. These updates maintain long-term accuracy by anchoring to Scaling feeds, which use a full commit-reveal process and update every 90 seconds. During high market volatility, volatility incentives can increase the sample size of data providers for a quicker response to market conditions.\n\n<ThemedImage\n  alt=\"FTSO Price Comparison\"\n  sources={{\n    light: useBaseUrl(\"img/ftso-overview/ref_fast_comparison_social.svg\"),\n    dark: useBaseUrl(\"img/ftso-overview/ref_fast_comparison_social_dark.svg\"),\n  }}\n/>\n\nThe FTSOv2 architecture consists of four key components:\n\n1. **Verifiably Random Selection:** Each block on Flare triggers the selection of data providers to deliver the next feed update using a stake-weighted Verifiable Randomness Function. This ensures fairness and resistance to manipulation.\n\n2. **Incremental Delta Update:** Selected data providers submit new feed updates as fixed incremental deltas applied to the previous feed value. This maintains reliable and continuous updates, ensuring integrity and accuracy.\n\n3. **Volatility Incentive Mechanism:** To handle periods of high market volatility, FTSOv2 introduces volatility incentives, temporarily increasing the sample size of selected data providers in exchange for a fee. This permissionless mechanism ensures a faster response to significant price movements.\n\n4. **Anchoring to Scaling Feeds:** Scaling feeds, which employ a full commit-reveal process across all data providers, act as anchors to ensure long-term accuracy.\n\n:::tip[Interested in learning more?]\n\nFor a detailed explanation of the FTSOv2 mechanism, read the [FTSOv2 whitepaper](https://flare.network/wp-content/uploads/FTSOv2-White-Paper.pdf).\n\n:::\n\n### Verifiably Random Selection\n\nEvery block on Flare, generated approximately every 1.8 seconds, initiates the selection of a sample of data providers to deliver the next feed update. This selection process leverages a stake-weighted verifiable randomness function (VRF), where the likelihood of each data provider being chosen is proportional to their stake. The expected sample size is one, and data providers have no control over, nor knowledge of, when they will be selected.\n\nIn detail, each block has a unique seed value, used by FTSOv2 data providers to generate a personal random score. This score, coupled with a cryptographic proof, ensures its authenticity and verifiability, preventing prediction or manipulation by others. Data providers are chosen based on their scores: those with scores below a certain threshold are selected to make updates. The selection probability is proportional to the data provider's stake, allowing for weighted sampling where participants with a higher stake have a greater chance of being selected. This mechanism ensures fairness and resistance to manipulation.\n\nTo maintain security, the seed value itself evolves pseudo-randomly. This approach balances security and randomness, preventing adversaries from influencing the selection process. The system is designed to be statistically robust, ensuring a reliable and continuous selection of participants to uphold the integrity and accuracy of updates.\n\n### Incremental Delta Update\n\nThe selected data providers submit the new feed update, which is a fixed incremental delta applied to the previous feed value. The base increment size for all updates is `1/2^13 ≈ 0.0122%`, a value determined through extensive market analysis and approved by Flare governance. The delta can be in one of three directions:\n\n    - **Up (+)**: The new feed value is incrementally increased from the previous value.\n    - **Down (–)**: The new feed value is incrementally decreased from the previous value.\n    - **Unchanged (0)**: The new feed value remains the same as the previous value.\n\n<ThemedImage\n  alt=\"FTSO Update Architecture\"\n  sources={{\n    light: useBaseUrl(\"img/ftso-overview/ftso_update_architecture_light.svg\"),\n    dark: useBaseUrl(\"img/ftso-overview/ftso_update_architecture_dark.svg\"),\n  }}\n/>\n\n<details>\n<summary>The mathematics of incremental delta updates.</summary>\n\nThe FTSOv2 protocol utilizes block-latency feeds, denoted as $P(t)$, which are continuously updated following the formula,\n\n$$\nP(t + 1) = (1 + p)^{delta(t)}P(t)\n$$\n\nwhere,\n\n- $p$ is the protocol parameter named _precision_, and\n- $delta$ is the update provided by a data provider, with $delta(t)$ being one of the three options ${-1, 0, 1}$.\n\nThe precision parameter is set to a default value of $p = 1/2^{13} ≈  0.0122%$, which has been rigorously tested against price feeds from centralized exchanges. Another key protocol parameter is the average number of updates submitted per block, with a default value of $e = 1$. The average number of updates submitted per block $e$ can be temporarily increased in exchange for a fee using the volatility incentive mechanism.\n\n</details>\n\n### Volatility Incentive Mechanism\n\nFrom statistical analysis, FTSOv2's mechanism is capable of capturing over 99% of all price movements under normal market conditions. However, during periods of high market volatility, the small size of each increment may be slower to reflect large price movements. To address this, FTSOv2 introduces volatility incentives, which allows for a temporary increase in the sample size of data providers in exchange for a fee. The volatility incentive mechanism is permissionless, enabling anyone on Flare to trigger it by paying the required fee.\n\nTypically, the expected sample size is one. With volatility incentives, this sample size is temporarily increased, allowing for more updates and quicker responses to large price movements. Importantly, only the expected sample size increases, not the actual sample size, which further helps protect the protocol against various statistical attacks.\n\n### Anchoring to Scaling\n\nFTSOv2's block-latency feeds are designed to be statistically self-correcting. To further ensure their long-term accuracy, FTSOv2 uses the anchor feeds from [Scaling](/ftso/scaling/overview). Anchor feeds utilize a full commit-reveal process across all data providers with an inter-quartile range (IQR) band calculation, and update once every voting epoch (i.e. 90 seconds). Data providers are only rewarded if the block-latency feeds converge to within `±0.25%` of the anchor feeds every voting epoch.",
    "import CodeBlock from \"@theme/CodeBlock\";\nimport FtsoV2MigrationExample from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2MigrationExample.sol\";\n\nThis guide is for applications moving from FTSOv1 to FTSOv2. Briefly, FTSOv2 comprises of:\n\n- **[Block-Latency Feeds](/ftso/feeds)**: These feeds are updated with each new block, approximately every 1.8 seconds. They can be accessed through [FtsoV2Interface](/ftso/solidity-reference/FtsoV2Interface) and are available directly on-chain.\n- **[Anchor Feeds](/ftso/scaling/anchor-feeds)**: These feeds are provided through [Scaling](/ftso/scaling/overview) with a latency of 90 seconds. Feeds can be verified using [FtsoV2Interface](/ftso/solidity-reference/FtsoV2Interface) but are not immediately available on-chain.\n\nA key difference between the two is the introduction of a payment mechanism for data access. This system helps prevent unnecessary data requests and ensures sustainable funding. For more details, refer to the [`IFeeCalculator`](/ftso/solidity-reference/IFeeCalculator) contract, which calculates fees for data access using the [`calculateFeeByIds`](/ftso/solidity-reference/IFeeCalculator#calculatefeebyids) method.\n\nAdditionally, a new Long Term Support (LTS) system has been launched to ensure continued access to essential data and metadata within the Flare ecosystem. A series of [LTS interfaces](#lts-interfaces) have been introduced, each aligned with a specific product in the Flare ecosystem. It is strongly recommended to use these LTS contracts for data access instead of querying individual contracts or interfaces, as they are designed for long-term stability, even as underlying protocols evolve or migrate.\n\n## Deprecated contracts (v1)\n\n### PriceSubmitter\n\nThe `PriceSubmitter` contract (`IPriceSubmitter`) is being deprecated as part of the transition to the new version of the FTSO system.\n\nIf you were using `PriceSubmitter` for the following purposes, here are the recommended alternatives:\n\n- **Accessing other important contracts**: Use the [`FlareContractRegistry`](/network/solidity-reference/IFlareContractRegistry) instead.\n- **Voting-related functionalities**: These are now integrated into the new FTSO system.\n\n- **Random number generation** (`getCurrentRandom` or `getRandom`, applicable to Flare only): Switch to the new [`RandomNumberV2Interface`](#lts-interfaces). The new protocol updates random numbers every 90 seconds (aligned with the voting epoch duration, as returned by `votingEpochDurationSeconds`). This setting is immutable but could change if the protocol configuration is updated. In contrast, the old protocol updated random numbers every 180 seconds.\n\n#### Required Changes:\n\n- Use `RandomNumberV2` instead of `PriceSubmitter` (ensure you update to the new contract address and interface).\n- **Method updates**:\n  - `getCurrentRandom` → `getRandomNumber`\n  - `getRandom(epochId)` → `getRandomNumberHistorical(epochId)`\n\n### FTSO\n\nThe legacy `FTSO` contract is being deprecated and replaced. A minimal proxy will be deployed at the same address to provide basic backward compatibility. The replacement will be [`FtsoProxy`](#ftsoproxy), which will respond to a limited subset of calls that the old `FTSO` contract handled. Although the addresses will change, the `FTSORegistry` will be updated to point to the new contract addresses.\n\n#### Recommended Changes:\n\n- **Random number retrieval**: Switch to the new [`RandomNumberV2Interface`](#lts-interfaces). The proxy contract will still return current and historical random numbers, but they will be uniform across all `FTSO` contracts, and randomness will be sourced from the new provider.\n\n- **Fetching the current price**: For methods like `getCurrentPrice`, `getCurrentPriceDetails`, or `getCurrentPriceWithDecimals`, switch to the [`FTSOv2Interface`](#lts-interfaces). While the proxy interface will continue to function temporarily, it will not receive future updates.\n\n- **Fetching historical prices**: For methods such as `getEpochPrice`, or retrieving prices for specific voters or trusted data providers, the proxy contract **WILL REVERT**. It is essential to migrate to the new `FTSOv2Interface` for these functionalities.\n\n### FTSORegistry\n\nThe `FTSORegistry` (`IFTSORegistry`) is being deprecated. While you can continue to use it temporarily with its backward-compatible methods, it is strongly recommended to transition to the new interfaces as soon as possible, as `FTSORegistry` will no longer be maintained in the future.\n\n#### Recommended Changes:\n\n- **Getting FTSOs**: The methods `getFtso`, `getFtsoBySymbol`, `getFtsoIndex`, `getFtsoSymbol`, and `getSupportedIndices/Symbols/Ftsos` are now deprecated. They will still return the proxy implementation of FTSO, but these proxies will not be maintained moving forward. It is recommended to update your code to use the [FTSOv2Interface](#lts-interfaces) for price retrieval. Additional details like decimals and timestamps for individual FTSOs are now considered deprecated and can be obtained by querying prices directly through `FTSOv2`.\n\n- **Reading prices** using methods such as `getCurrentPrice(_ftso_index/_symbol)` or their array and decimal implementations is also deprecated. Although these methods will still return correct values, they will not be updated in the future. Use the [FTSOv2Interface](#lts-interfaces) instead to ensure future compatibility.\n\n- **Getting supported FTSOs**: This function will return correct results for legacy price pairs but will not be updated for new pairs introduced in the FTSOv2 system. To retrieve information about available pairs in the new system, you should transition to the [FTSOv2Interface](#lts-interfaces) interface.\n\n- **Read prices directly from `FtsoV2Interface`**: This will give you up-to-date prices and more detailed information. Additionally, the `FtsoV2Interface` is part of the Long Term Support (LTS) system, ensuring it will be maintained for an extended period.\n\n- **New system indexing and ID scheme**:\n  - The indexing and ID scheme has changed. Old indices are now invalid, so do not use the previous `getFeedByIndex` method with the old indices.\n  - IDs in the new system are 21-byte values, formatted as `\"${OLD_FEED_NAME}/USD\"` and zero-padded.\n  - Use the `getFeedById` method in the new interface to retrieve old prices with this format: `getFeedById(bytes21(bytes.concat(bytes1(1), bytes(string.concat(OLD_FEED_NAME, \"/USD\")))))`.\n\n### FTSORewardManager\n\nThe reward system is undergoing significant changes. While an implementation of the old `FTSORewardManager` contract is provided, it will only support the most basic claim types and require pre-provided reward proofs.\n\n#### Recommended Changes:\n\n- **Claiming rewards**: Switch to the new [`RewardsV2Interface`](#lts-interfaces). The proxy contract will still allow you to claim rewards from the FTSO system, but it will not support claiming fees for data providers.\n\n- **Claiming rewards when delegating by amount**: This feature is no longer supported in the new system.\n\n## LTS interfaces\n\nThe primary goal of the Long Term Support (LTS) interfaces is to offer a stable and reliable way to access essential data and metadata within the Flare ecosystem. These interfaces are designed for long-term maintenance, ensuring continuity even as underlying contracts evolve or protocols migrate to new versions. Each LTS interface is aligned with a specific product within the Flare ecosystem, providing consistency and ease of use over time.\n\n| **Interface**                                                                  | **Contract registry name** | **Notes**                                                 |\n| ------------------------------------------------------------------------------ | -------------------------- | --------------------------------------------------------- |\n| [ProtocolsV2Interface](/network/solidity-reference/ProtocolsV2Interface)       | `ProtocolsV2`              | Primary interface for managing protocol related metadata. |\n| [RewardsV2Interface](/network/solidity-reference/RewardsV2Interface)           | `RewardsV2`                | Primary interface for managing all protocol rewards.      |\n| [RandomNumberV2Interface](/network/solidity-reference/RandomNumberV2Interface) | `RandomNumberV2`           | Primary interface for random number generation.           |\n| [FtsoV2Interface](/ftso/solidity-reference/FtsoV2Interface)                    | `FtsoV2`                   | Primary interface for interacting with FTSOv2.            |\n\n:::warning\n\n- **RandomNumberV2Interface:** In addition to providing random numbers, the new methods also return a `_isSecureRandom` flag. Learn more about this flag in the guide on [Secure Random Numbers](/network/guides/secure-random-numbers).\n- **FtsoV2Interface:** Provides access to fetching block-latency feeds onchain, and verifying anchor feeds onchain. You can retrieve feeds using the [`getFeedById`](/ftso/solidity-reference/FtsoV2Interface#getfeedbyid) or [`getFeedsById`](/ftso/solidity-reference/FtsoV2Interface#getfeedsbyid) methods. These methods are now payable, and while the current fee is set to `0`, it is advisable to use [`FeeCalculator`](/ftso/solidity-reference/IFeeCalculator) to calculate the fee and be prepared for potential future changes.\n\n:::\n\n## Migration proxies\n\nFor the time being, a set of proxy contracts is provided to allow access to the old data and reward systems.\n\n:::danger[Do not use for new developments]\n\nThese proxies offer a temporary solution to ensure that previously deployed contracts can continue functioning until they are fully updated.\n\n:::\n\n### FtsoProxy\n\nThe `FtsoProxy` contract is designed to maintain backward compatibility with the old FTSO contract. While it will be deployed at different addresses from the original FTSO contract, the `FTSORegistry` will be updated to point to these new addresses.\n\n<details>\n<summary>Methods in `FtsoProxy`</summary>\n\n```solidity title=\"FtsoProxy.sol\"\n   /**\n     * Always return true, as the proxy is always active.\n     */\n    function active() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n     * Will return the current epoch id correctly as defined by FSP\n     */\n    function getCurrentEpochId() external view returns (uint256) {\n    }\n\n    /**\n     * Will return the epoch id correctly as defined by FSP.\n     * Beware, the function will produce different results than the old FTSO contract.\n     */\n    function getEpochId(uint256 _timestamp) external view returns (uint256) {\n    }\n\n    /**\n     * Will return the current random correctly\n     */\n    function getRandom(uint256 _votingRoundId) external view returns (uint256 _randomNumber) {\n    }\n\n    /**\n     * @dev Deprecated - reverts\n     */\n    function getEpochPrice(uint256) external pure returns (uint256) {\n        revert(\"not supported\");\n    }\n\n    /**\n     * Will return current price epoch data as defined by FSP\n     */\n    function getPriceEpochData() external view\n        returns (\n            uint256 _epochId,\n            uint256 _epochSubmitEndTime,\n            uint256 _epochRevealEndTime,\n            uint256 _votePowerBlock,\n            bool _fallbackMode\n        )\n    {\n    }\n\n    /**\n     * Will return the price epoch configuration as defined by FSP\n     */\n    function getPriceEpochConfiguration() external view\n        returns (\n            uint256 _firstEpochStartTs,\n            uint256 _submitPeriodSeconds,\n            uint256 _revealPeriodSeconds\n        )\n    {\n    }\n\n    /**\n     * @dev Deprecated - reverts\n     */\n    function getEpochPriceForVoter(uint256, address) external pure returns (uint256) {\n        revert(\"not supported\");\n    }\n\n    /**\n     * Will return the current price correctly\n     */\n    function getCurrentPrice() external view returns (uint256, uint256) {\n    }\n\n    /**\n     * Will return the current price with decimals correctly\n     */\n    function getCurrentPriceWithDecimals()\n        external view\n        returns (\n            uint256 _value,\n            uint256 _timestamp,\n            uint256 _decimals\n        )\n    {\n    }\n\n\n    /**\n     * Will return the current price with details correctly\n     */\n    function getCurrentPriceDetails()\n        external view\n        returns (\n            uint256,\n            uint256,\n            PriceFinalizationType,\n            uint256,\n            PriceFinalizationType\n        )\n    {\n    }\n\n    /**\n     * @dev Deprecated - reverts\n     */\n    function getCurrentPriceFromTrustedProviders() external pure returns (uint256, uint256) {\n        revert(\"not supported\");\n    }\n\n    /**\n     * @dev Deprecated - reverts\n     */\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external pure returns (uint256, uint256, uint256) {\n        revert(\"not supported\");\n    }\n\n    /**\n     * Will return the current random correctly\n     */\n    function getCurrentRandom() external view returns (uint256 _currentRandom) {\n    }\n\n```\n\n</details>\n\n### FtsoRewardManagerProxy\n\nThe `FtsoRewardManagerProxy` contract is designed to maintain backward compatibility with the old `FTSORewardManager` contract. It will be deployed at a different address than the original contract.\n\nThis proxy only supports the most basic reward claim types and requires that reward proofs be provided in advance.\n\n<details>\n<summary>Methods in `FtsoRewardManagerProxy`</summary>\n\n```solidity title=\"FtsoRewardManagerProxy.sol\"\n    /**\n     * @dev Claims rewards correctly for delegation fees, assuming the proofs were already provided.\n     */\n    function claimReward(\n        address payable _recipient,\n        uint256[] calldata _rewardEpochs\n    )\n        external\n        returns (uint256 _rewardAmount)\n    {\n    }\n\n    /**\n     * @dev Claims rewards correctly for delegation fees, assuming the proofs were already provided.\n     */\n    function claim(\n        address _rewardOwner,\n        address payable _recipient,\n        uint256 _rewardEpoch,\n        bool _wrap\n    )\n        external\n        returns (uint256 _rewardAmount)\n    {\n    }\n\n\n    /**\n     * @dev Returns the current fee percentage for the data provider.\n     */\n    function getDataProviderCurrentFeePercentage(address _dataProvider)\n        external view\n        returns (uint256 _feePercentageBIPS)\n    {\n    }\n\n    /**\n     * @dev Returns the fee percentage for the data provider for the given reward epoch.\n     */\n    function getDataProviderFeePercentage(\n        address _dataProvider,\n        uint256 _rewardEpoch\n    )\n        external view\n        returns (uint256 _feePercentageBIPS)\n    {\n    }\n\n    /**\n     * @dev Returns the fee percentage changes for the data provider.\n     */\n    function getDataProviderScheduledFeePercentageChanges(address _dataProvider) external view\n        returns (\n            uint256[] memory _feePercentageBIPS,\n            uint256[] memory _validFromEpoch,\n            bool[] memory _fixed\n        )\n    {\n    }\n\n    /**\n     * @dev Returns the epoch reward correctly\n     */\n    function getEpochReward(uint256 _rewardEpoch) external view\n        returns (uint256 _totalReward, uint256 _claimedReward)\n    {\n    }\n\n    /**\n     * @dev Returns the reward state correctly\n     */\n    function getStateOfRewards(\n        address _beneficiary,\n        uint256 _rewardEpoch\n    )\n        external view\n        returns (\n            address[] memory _dataProviders,\n            uint256[] memory _rewardAmounts,\n            bool[] memory _claimed,\n            bool _claimable\n        )\n    {\n    }\n\n    /**\n     * @dev Returns the epochs with claimable rewards correctly\n     */\n    function getEpochsWithClaimableRewards() external view\n        returns (uint256 _startEpochId, uint256 _endEpochId)\n    {\n    }\n\n    /**\n     * @dev Returns the next claimable reward epoch correctly\n     */\n    function nextClaimableRewardEpoch(address _rewardOwner) external view returns (uint256) {\n    }\n\n    /**\n     * @dev Returns the epochs with unclaimed rewards correctly\n     */\n    function getEpochsWithUnclaimedRewards(address _beneficiary) external view\n        returns (uint256[] memory _epochIds)\n    {\n    }\n\n    /**\n     * @dev Returns the claimed rewardr correctly\n     */\n    function getClaimedReward(\n        uint256 _rewardEpoch,\n        address _dataProvider,\n        address _claimer\n    )\n        external view\n        returns (\n            bool _claimed,\n            uint256 _amount\n        )\n    {\n    }\n\n    /**\n     * @dev Returns the reward epoch to expire next correctly\n     */\n    function getRewardEpochToExpireNext() external view returns (uint256) {\n    }\n\n    /**\n     * @dev Returns the reward epoch vote power block correctly\n     */\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256) {\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     */\n    function getCurrentRewardEpoch() external view returns (uint256) {\n        return rewardManager.getCurrentRewardEpochId();\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     */\n    function getInitialRewardEpoch() external view returns (uint256 _initialRewardEpoch) {\n        return rewardManager.getInitialRewardEpochId();\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     * @dev Deprecated\n     */\n    function claimRewardFromDataProviders(\n        address payable,\n        uint256[] calldata,\n        address[] calldata\n    )\n        external pure returns (uint256)\n    {\n        // return 0\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     * @dev Deprecated\n     */\n    function claimFromDataProviders(\n        address,\n        address payable,\n        uint256[] calldata,\n        address[] calldata,\n        bool\n    )\n        external pure returns (uint256)\n    {\n        // return 0\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     * @dev Deprecated - reverts\n     */\n    function autoClaim(address[] calldata, uint256) external pure {\n        revert(\"not supported, use RewardManager\");\n    }\n\n    /**\n     * @inheritdoc IFtsoRewardManager\n     * @dev Deprecated - reverts\n     */\n    function setDataProviderFeePercentage(uint256)\n        external pure\n        returns (uint256)\n    {\n        revert(\"not supported, use WNatDelegationFee\");\n    }\n\n    /**\n     * @dev Deprecated - returns empty array, empty array, false\n     */\n    function getStateOfRewardsFromDataProviders(\n        address,\n        uint256,\n        address[] calldata\n    )\n        external pure\n        returns (\n            uint256[] memory,\n            bool[] memory,\n            bool\n        )\n    {\n    }\n\n    /**\n     * Deprecated - returns 0, 0\n     */\n    function getDataProviderPerformanceInfo(\n        uint256,\n        address\n    )\n        external pure\n        returns (\n            uint256,\n            uint256\n        )\n    {\n    }\n\n```\n\n</details>\n\n## Usable existing interfaces\n\n| **Interface**                                                                 | **Description|\n| ----------------------------------------------------------------------------- ||\n| [`FlareContractRegistry`](/network/solidity-reference/IFlareContractRegistry) | Provides access to the addresses of all essential contracts within the Flare ecosystem. It is deployed at a fixed address across all networks, with updates to addresses managed through governance. This registry is the recommended entry point for contract interactions on all Flare networks. For easier use, consider utilizing the `ContractLibrary` from the [flare-periphery-contracts](https://www.npmjs.com/package/@flarenetwork/flare-periphery-contracts?activeTab=readme) package, which wraps the IFlareContractRegistry and simplifies interactions with Flare's smart contracts. |\n| [`FeeCalculator`](/ftso/solidity-reference/IFeeCalculator)                    | On-chain prices are now subject to potential fees, though initial fees are set to `0`. The `FeeCalculator` contract is designed to be flexible, allowing for the introduction of fees in future use cases. It calculates fees for accessing data using the `calculateFeeByIds` and `calculateFeeByIndices` methods. To stay prepared for future updates to the fee structure, it is advisable to use the FeeCalculator contract in relevant applications.                                                                                                                                          |\n\n## Example migration contract\n\n<CodeBlock language=\"solidity\" title=\"FtsoV2MigrationExample.sol\">\n  {FtsoV2MigrationExample}\n</CodeBlock>",
    "import FeedExplanation from \"./_feed_explanation.mdx\";\nimport NewGithubIssue from \"@site/src/components/newGithubIssue\";\nimport TabItem from \"@theme/TabItem\";\nimport Tabs from \"@theme/Tabs\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport BlockLatencyFeeds from \"@site/src/components/DataTables/BlockLatencyFeeds\";\n\nFTSOv2's block-latency feeds update incrementally with each new block on Flare, approximately every 1.8 seconds. Every feed leverages Flare's network of 100 independent data providers. These feeds primarily support cryptocurrency price data and are free to query on Flare, enabling decentralized applications to access up-to-date information without incurring additional costs.\n\nEach block-latency feed is uniquely identified by an ID composed of three components in a structured encoding process:\n\n1. **Category:** Indicates the type of asset - Crypto: `01`, Forex: `02`, Commodity: `03`, Stock: `04`\n\n2. **Hex-Encoded Feed Name:** The name of the feed is converted to a hexadecimal format.\n\n3. **Zero Padding:** The combined category and hex-encoded feed name are padded with zeros to a length of 21 bytes.\n\nThe resulting string is then prefixed with `0x`.\n\n<FeedExplanation />\n\n:::warning\n\n- Feed IDs are **not** addresses. They are `bytes21` structured encodings that combine the category and feed name to ensure each feed has a unique identifier.\n- **Do not** hardcode the number of decimals for a feed in your smart contract, as these can change as the feed value changes. You can use either of the following solutions:\n  - Check the number of decimal places every query ([`getFeedById`](/ftso/solidity-reference/FtsoV2Interface#getfeedbyid)).\n  - Use the feed value in Wei ([`getFeedByIdInWei`](/ftso/solidity-reference/FtsoV2Interface#getfeedbyidinwei)).\n\n:::\n\n<BlockLatencyFeeds />\n\n## Need more feeds?\n\nFTSOv2 can scale up to 1000 feeds. If you need additional FTSOv2 feeds beyond what is currently available, you can raise a New Feed Request Issue on GitHub. When a feed request is submitted, it is reviewed by the FTSO Management Group, which is comprised of the FTSO data providers as outlined in [FIP.08](https://proposals.flare.network/FIP/FIP_8.html#222-through-the-ftso-management-group).\n\n{/* prettier-ignore */}\n<NewGithubIssue issueType=\"feed_request\">Request New Feed</NewGithubIssue>\n<br></br>\n\n:::tip[What's next?]\n\n[Build your first FTSOv2 app](/ftso/guides/build-first-app) using Foundry, or [read feeds offchain](/ftso/guides/read-feeds-offchain) in languages like JavaScript, Python, Rust, and Go.\n\n:::",
    "import CodeBlock from \"@theme/CodeBlock\";\nimport TabItem from \"@theme/TabItem\";\nimport Tabs from \"@theme/Tabs\";\nimport GetFeedIdSol from \"!!raw-loader!/examples/developer-hub-solidity/GetFeedId.sol\";\nimport GetFeedIdPy from \"!!raw-loader!/examples/developer-hub-python/get_feed_id.py\";\nimport GetFeedIdJS from \"!!raw-loader!/examples/developer-hub-javascript/get_feed_id.js\";\nimport GetFeedIdRs from \"!!raw-loader!/examples/developer-hub-rust/src/bin/get_feed_id.rs\";\nimport GetFeedIdGo from \"!!raw-loader!/examples/developer-hub-go/get_feed_id.go\";\n\n<details>\n    <summary>Example of the structured encoding process.</summary>\n\n    Taking the feed name `FLR/USD`:\n\n    - **Category**: `01` (Crypto)\n    - **Hex-Encoded Feed Name**: `464c522f555344` (hexadecimal representation of `FLR/USD`)\n    - **Zero Padding**: The category and hex-encoded feed name combined and padded: `01464c522f55534400000000000000000000000000`\n    - **Final ID**: Adding the `0x` prefix results in `0x01464c522f55534400000000000000000000000000`\n\n    <Tabs block>\n        <TabItem value=\"Solidity\" label=\"Solidity\" default>\n\n            <CodeBlock language=\"solidity\" title=\"GetFeedId.sol\">\n                {GetFeedIdSol}\n            </CodeBlock>\n\n        </TabItem>\n        <TabItem value=\"Javascript\" label=\"Javascript\">\n\n            <CodeBlock language=\"javascript\" title=\"get_feed_id.js\">\n                {GetFeedIdJS}\n            </CodeBlock>\n\n        </TabItem>\n        <TabItem value=\"Python\" label=\"Python\">\n\n            <CodeBlock language=\"python\" title=\"get_feed_id.py\">\n                {GetFeedIdPy}\n            </CodeBlock>\n\n        </TabItem>\n        <TabItem value=\"Rust\" label=\"Rust\">\n\n            <CodeBlock language=\"rust\" title=\"get_feed_id.rs\">\n                {GetFeedIdRs}\n            </CodeBlock>\n\n        </TabItem>\n        <TabItem value=\"Go\" label=\"Go\">\n\n            <CodeBlock language=\"go\" title=\"get_feed_id.go\">\n                {GetFeedIdGo}\n            </CodeBlock>\n\n        </TabItem>\n    </Tabs>\n\n</details>\n\n<details>\n<summary>🚦 Understanding feed risks.</summary>\n\nWhen building applications, developers must carefully evaluate the quality of the data they use. As a developer, you are responsible for identifying and assessing the accuracy, availability, and overall quality of the data you choose to integrate. It is important to understand that all data feeds carry inherent risks.\n\nThe table below categorizes feeds into three risk levels based on their market integrity, ranging from lowest to highest, a feed is assigned a higher risk level if it fails to meet **all** the criteria required for classification within a lower risk level:\n\n| **Aspect**                  | 🟢 **Low Risk**                           | 🟡 **Medium Risk**                          | 🔴 **High Risk**                                       |\n| --------------------------- | ----------------------------------------- | ------------------------------------------- | ------------------------------------------------------ |\n| **Intrinsic Volatility**    | Low, stable price trends                  | Moderate price fluctuations                 | High, frequent price swings                            |\n| **Liquidity Variation**     | Abundant and consistent                   | Sufficient but variable                     | Limited and inconsistent                               |\n| **Liquidity Concentration** | Broad and well-distributed across venues  | Somewhat concentrated                       | Highly concentrated in a few sources                   |\n| **Asset Spread Risk**       | Tight spreads, minimal bid-ask gaps       | Moderate spreads, acceptable bid-ask gaps   | Wide spreads, significant bid-ask gaps                 |\n| **Cross Rate Risk**         | Low correlation, direct pricing available | Moderate correlation, indirect pricing used | High correlation, dependent on multiple intermediaries |\n\n**Other risk categories:**\n\n- ⚫ **New Feed**\n  New tokens lack historical data for proper risk assessment and stable price discovery.\n  Users must recognize these assets carry higher volatility risks and verify feed reliability independently.\n  After a monitoring period, feeds will be assigned risk levels or potentially discontinued.\n\nEach feed undergoes a rigorous assessment process prior to deployment. The evaluation criteria may vary depending on the specific type of feed being implemented and can evolve over time as our understanding of market integrity risks improves.\n\n</details>\n",
    "Interface for calculating block-latency feed fees.\n\nSourced from `IFeeCalculator.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFeeCalculator.sol).\n\n## Functions\n\n### calculateFeeByIds\n\nCalculates a fee that needs to be paid to fetch feeds' data.\n\n```solidity\nfunction calculateFeeByIds(\n    bytes21[] _feedIds\n) external view returns (\n    uint256 _fee\n);\n```\n\n#### Parameters\n\n- `_feedIds`: List of feed ids.",
    "Interface for the block-latency feed configuration.\n\nSourced from `IFastUpdatesConfiguration.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFastUpdatesConfiguration.sol).\n\n## Functions\n\n### getFeedConfigurations\n\nReturns the feed configurations, including removed ones.\n\n```solidity\nfunction getFeedConfigurations(\n) external view returns (\n    struct IFastUpdatesConfiguration.FeedConfiguration[]\n);\n```\n\n### getFeedId\n\nReturns the feed id at a given index. Removed (unused) feed index will return bytes21(0).\n\n```solidity\nfunction getFeedId(\n    uint256 _index\n) external view returns (\n    bytes21 _feedId\n);\n```\n\n#### Parameters\n\n- `_index`: The index.\n\n#### Returns\n\n- `_feedId`: The feed id.\n\n### getFeedIds\n\nReturns all feed ids. For removed (unused) feed indices, the feed id will be bytes21(0).\n\n```solidity\nfunction getFeedIds(\n) external view returns (\n    bytes21[]\n);\n```\n\n### getFeedIndex\n\nReturns the index of a feed.\n\n```solidity\nfunction getFeedIndex(\n    bytes21 _feedId\n) external view returns (\n    uint256 _index\n);\n```\n\n#### Parameters\n\n- `_feedId`: The feed id.\n\n#### Returns\n\n- `_index`: The index of the feed.\n\n### getNumberOfFeeds\n\nReturns the number of feeds, including removed ones.\n\n```solidity\nfunction getNumberOfFeeds(\n) external view returns (\n    uint256\n);\n```\n\n### getUnusedIndices\n\nReturns the unused indices - indices of removed feeds.\n\n```solidity\nfunction getUnusedIndices(\n) external view returns (\n    uint256[]\n);\n```\n\n## Events\n\n### FeedAdded\n\nEvent emitted when a feed is added.\n\n```solidity\nevent FeedAdded(\n    bytes21 feedId,\n    uint32 rewardBandValue,\n    uint24 inflationShare,\n    uint256 index\n)\n```\n\n### FeedRemoved\n\nEvent emitted when a feed is removed.\n\n```solidity\nevent FeedRemoved(\n    bytes21 feedId,\n    uint256 index\n)\n```\n\n### FeedUpdated\n\nEvent emitted when a feed is updated.\n\n```solidity\nevent FeedUpdated(\n    bytes21 feedId,\n    uint32 rewardBandValue,\n    uint24 inflationShare,\n    uint256 index\n)\n```\n\n## Structures\n\n### FeedConfiguration\n\nThe feed configuration struct.\n\n```solidity\nstruct FeedConfiguration {\n  bytes21 feedId;\n  uint32 rewardBandValue;\n  uint24 inflationShare;\n}\n```",
    "Interface for converting feed names to feed ids.\n\nSourced from `IFtsoFeedIdConverter.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFtsoFeedIdConverter.sol).\n\n## Functions\n\n### getFeedCategoryAndName\n\nReturns the feed category and name for given feed id.\n\n```solidity\nfunction getFeedCategoryAndName(\n    bytes21 _feedId\n) external pure returns (\n    uint8 _category,\n    string _name\n);\n```\n\n#### Parameters\n\n- `_feedId`: Feed id.\n\n#### Returns\n\n- `_category`: Feed category.\n- `_name`: Feed name.\n\n### getFeedId\n\nReturns the feed id for given category and name.\n\n```solidity\nfunction getFeedId(\n    uint8 _category,\n    string _name\n) external view returns (\n    bytes21\n);\n```\n\n#### Parameters\n\n- `_category`: Feed category.\n- `_name`: Feed name.\n\n#### Returns\n\n- ``: Feed id.",
    "Interface for making volatility incentive offers.\n\nSourced from `IFastUpdateIncentiveManager.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFastUpdateIncentiveManager.sol).\n\n## Functions\n\n### getBaseScale\n\nViewer for the base value of the scale itself.\n\n```solidity\nfunction getBaseScale(\n) external view returns (\n    Scale\n);\n```\n\n### getCurrentSampleSizeIncreasePrice\n\nViewer for the current value of sample size increase price.\n\n```solidity\nfunction getCurrentSampleSizeIncreasePrice(\n) external view returns (\n    Fee\n);\n```\n\n### getExpectedSampleSize\n\nViewer for the current value of the expected sample size.\n\n```solidity\nfunction getExpectedSampleSize(\n) external view returns (\n    SampleSize\n);\n```\n\n### getIncentiveDuration\n\n```solidity\nfunction getIncentiveDuration(\n) external view returns (\n    uint256\n);\n```\n\n### getPrecision\n\nViewer for the current value of the unit delta's precision (the fractional part of the scale).\n\n```solidity\nfunction getPrecision(\n) external view returns (\n    Precision\n);\n```\n\n### getRange\n\nViewer for the current value of the per-block variation range.\n\n```solidity\nfunction getRange(\n) external view returns (\n    Range\n);\n```\n\n### getScale\n\nViewer for the current value of the scale itself.\n\n```solidity\nfunction getScale(\n) external view returns (\n    Scale\n);\n```\n\n### offerIncentive\n\nThe entry point for third parties to make incentive offers. It accepts a payment and, using the contents of\n`_offer`, computes how much the expected sample size will be increased to apply the requested (but capped) range\nincrease. If the ultimate value of the range exceeds the cap, funds are returned to the sender in proportion to\nthe amount by which the increase is adjusted to reach the cap.\n\n```solidity\nfunction offerIncentive(\n    struct IFastUpdateIncentiveManager.IncentiveOffer _offer\n) external payable;\n```\n\n#### Parameters\n\n- `_offer`: The requested amount of per-block variation range increase, along with a cap for the ultimate range.\n\n### rangeIncreaseLimit\n\nThe maximum value that the range can be increased to by an incentive offer.\n\n```solidity\nfunction rangeIncreaseLimit(\n) external view returns (\n    Range\n);\n```\n\n### rangeIncreasePrice\n\nThe price for increasing the per-block range of variation by 1, prorated for the actual amount of increase.\n\n```solidity\nfunction rangeIncreasePrice(\n) external view returns (\n    Fee\n);\n```\n\n### sampleIncreaseLimit\n\nThe maximum amount by which the expected sample size can be increased by an incentive offer.\nThis is controlled by governance and forces a minimum cost to increasing the sample size greatly,\nwhich would otherwise be an attack on the protocol.\n\n```solidity\nfunction sampleIncreaseLimit(\n) external view returns (\n    SampleSize\n);\n```\n\n## Events\n\n### IncentiveOffered\n\nEvent emitted when an incentive is offered.\n\n```solidity\nevent IncentiveOffered(\n    uint24 rewardEpochId,\n    Range rangeIncrease,\n    SampleSize sampleSizeIncrease,\n    Fee offerAmount\n)\n```\n\n### InflationRewardsOffered\n\nEvent emitted when inflation rewards are offered.\n\n```solidity\nevent InflationRewardsOffered(\n    uint24 rewardEpochId,\n    struct IFastUpdatesConfiguration.FeedConfiguration[] feedConfigurations,\n    uint256 amount\n)\n```\n\n## Structures\n\n### IncentiveOffer\n\nIncentive offer structure.\n\n```solidity\nstruct IncentiveOffer {\n  Range rangeIncrease;\n  Range rangeLimit;\n}\n```",
    "Interface for updating block-latency feeds.\n\nSourced from `IFastUpdater.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFastUpdater.sol).\n\n## Functions\n\n### blockScoreCutoff\n\nInformational getter concerning the eligibility criterion for being chosen by sortition in a given block.\n\n```solidity\nfunction blockScoreCutoff(\n    uint256 _blockNum\n) external view returns (\n    uint256 _cutoff\n);\n```\n\n#### Parameters\n\n- `_blockNum`: The block for which the cutoff is requested.\n\n#### Returns\n\n- `_cutoff`: The upper endpoint of the acceptable range of \"scores\" that providers generate for sortition. A score below the cutoff indicates eligibility to submit updates in the present sortition round.\n\n### currentRewardEpochId\n\nId of the current reward epoch.\n\n```solidity\nfunction currentRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n### currentScoreCutoff\n\nInformational getter concerning the eligibility criterion for being chosen by sortition.\n\n```solidity\nfunction currentScoreCutoff(\n) external view returns (\n    uint256 _cutoff\n);\n```\n\n#### Returns\n\n- `_cutoff`: The upper endpoint of the acceptable range of \"scores\" that providers generate for sortition. A score below the cutoff indicates eligibility to submit updates in the present sortition round.\n\n### currentSortitionWeight\n\nInformational getter concerning a provider's likelihood of being chosen by sortition.\n\n```solidity\nfunction currentSortitionWeight(\n    address _signingPolicyAddress\n) external view returns (\n    uint256 _weight\n);\n```\n\n#### Parameters\n\n- `_signingPolicyAddress`: The signing policy address of the specified provider. This is different from the sender of an update transaction, due to the signature included in the `FastUpdates` type.\n\n#### Returns\n\n- `_weight`: The specified provider's weight for sortition purposes. This is derived from the provider's delegation weight for the FTSO, but rescaled against a fixed number of \"virtual providers\", indicating how many potential updates a single provider may make in a sortition round.\n\n### fetchAllCurrentFeeds\n\nPublic access to the stored data of all feeds.\n\n```solidity\nfunction fetchAllCurrentFeeds(\n) external view returns (\n    bytes21[] _feedIds,\n    uint256[] _feeds,\n    int8[] _decimals,\n    uint64 _timestamp\n);\n```\n\n#### Returns\n\n- `_feedIds`: The list of feed ids.\n- `_feeds`: The list of feeds.\n- `_decimals`: The list of decimal places for feeds.\n- `_timestamp`: The timestamp of the last update.\n\n### fetchCurrentFeeds\n\nPublic access to the stored data of each feed, allowing controlled batch access to the lengthy complete data.\nFeeds should be sorted for better performance.\n\n```solidity\nfunction fetchCurrentFeeds(\n    uint256[] _indices\n) external view returns (\n    uint256[] _feeds,\n    int8[] _decimals,\n    uint64 _timestamp\n);\n```\n\n#### Parameters\n\n- `_indices`: Index numbers of the feeds for which data should be returned, corresponding to `feedIds` in the `FastUpdatesConfiguration` contract.\n\n#### Returns\n\n- `_feeds`: The list of data for the requested feeds, in the same order as the feed indices were given (which may not be their sorted order).\n- `_decimals`: The list of decimal places for the requested feeds, in the same order as the feed indices were given (which may not be their sorted order).\n- `_timestamp`: The timestamp of the last update.\n\n### numberOfUpdates\n\nThe number of updates submitted in each block for the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`).\n\n```solidity\nfunction numberOfUpdates(\n    uint256 _historySize\n) external view returns (\n    uint256[] _noOfUpdates\n);\n```\n\n#### Parameters\n\n- `_historySize`: The number of blocks for which the number of updates should be returned.\n\n#### Returns\n\n- `_noOfUpdates`: The number of updates submitted in each block for the last `_historySize` blocks. The array is ordered from the current block to the oldest block.\n\n### numberOfUpdatesInBlock\n\nThe number of updates submitted in a block - available only for the last `MAX_BLOCKS_HISTORY` blocks.\n\n```solidity\nfunction numberOfUpdatesInBlock(\n    uint256 _blockNumber\n) external view returns (\n    uint256 _noOfUpdates\n);\n```\n\n#### Parameters\n\n- `_blockNumber`: The block number for which the number of updates should be returned.\n\n#### Returns\n\n- `_noOfUpdates`: The number of updates submitted in the specified block.\n\n### submissionWindow\n\nThe submission window is a number of blocks forming a \"grace period\" after a round of sortition starts,\nduring which providers may submit updates for that round. In other words, each block starts a new round of\nsortition and that round lasts `submissionWindow` blocks.\n\n```solidity\nfunction submissionWindow(\n) external view returns (\n    uint8\n);\n```\n\n### submitUpdates\n\nThe entry point for providers to submit an update transaction.\n\n```solidity\nfunction submitUpdates(\n    struct IFastUpdater.FastUpdates _updates\n) external;\n```\n\n#### Parameters\n\n- `_updates`: Data of an update transaction, which in addition to the actual list of updates, includes the sortition credential proving the provider's eligibility to make updates in the also-included sortition round, as well as a signature allowing a single registered provider to submit from multiple EVM accounts.\n\n## Events\n\n### FastUpdateFeedRemoved\n\nEvent emitted when a feed is removed.\n\n```solidity\nevent FastUpdateFeedRemoved(\n    uint256 index\n)\n```\n\n### FastUpdateFeedReset\n\nEvent emitted when a feed is added or reset.\n\n```solidity\nevent FastUpdateFeedReset(\n    uint256 votingRoundId,\n    uint256 index,\n    bytes21 id,\n    uint256 value,\n    int8 decimals\n)\n```\n\n### FastUpdateFeeds\n\nEvent emitted at the start of a new voting epoch - current feeds' values and decimals.\n\n```solidity\nevent FastUpdateFeeds(\n    uint256 votingEpochId,\n    uint256[] feeds,\n    int8[] decimals\n)\n```\n\n### FastUpdateFeedsSubmitted\n\nEvent emitted when a new set of updates is submitted.\n\n```solidity\nevent FastUpdateFeedsSubmitted(\n    uint32 votingRoundId,\n    address signingPolicyAddress\n)\n```\n\n## Structures\n\n### FastUpdates\n\nFast update structure\n\n```solidity\nstruct FastUpdates {\n  uint256 sortitionBlock;\n  struct SortitionCredential sortitionCredential;\n  bytes deltas;\n  struct IFastUpdater.Signature signature;\n}\n```\n\n### Signature\n\nSignature structure\n\n```solidity\nstruct Signature {\n  uint8 v;\n  bytes32 r;\n  bytes32 s;\n}\n```",
    "import Remix from \"@site/src/components/remix\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport FTSOV2FeedById from \"!!raw-loader!/examples/developer-hub-solidity/FTSOV2FeedById.sol\";\nimport FTSOV2FeedByIdWei from \"!!raw-loader!/examples/developer-hub-solidity/FTSOV2FeedByIdWei.sol\";\nimport FTSOV2FeedsById from \"!!raw-loader!/examples/developer-hub-solidity/FTSOV2FeedsById.sol\";\nimport FTSOV2FeedsByIdWei from \"!!raw-loader!/examples/developer-hub-solidity/FTSOV2FeedsByIdWei.sol\";\nimport FTSOV2VerifyProof from \"!!raw-loader!/examples/developer-hub-solidity/FTSOV2VerifyProof.sol\";\n\nPrimary interface for interacting with FTSOv2. This is a long-term support (LTS) interface, designed to ensure continuity even as underlying contracts evolve or protocols migrate to new versions.\n\nSourced from `FtsoV2Interface.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/LTS/FtsoV2Interface.sol).\n\n## Functions\n\n### getFeedById\n\nReturns stored data of a feed.\nA fee (calculated by the FeeCalculator contract) may need to be paid.\n\n```solidity\nfunction getFeedById(\n    bytes21 _feedId\n) external payable returns (\n    uint256 _value,\n    int8 _decimals,\n    uint64 _timestamp\n);\n```\n\n#### Parameters\n\n- `_feedId`: The id of the feed.\n\n#### Returns\n\n- `_value`: The value for the requested feed.\n- `_decimals`: The decimal places for the requested feed.\n- `_timestamp`: The timestamp of the last update.\n\n<details>\n<summary>Sample contract usage</summary>\n\n<CodeBlock language=\"solidity\" title=\"FTSOV2FeedById.sol\">\n  {FTSOV2FeedById}\n</CodeBlock>\n\n</details>\n\n<Remix fileName=\"FTSOV2FeedById.sol\">Open sample in Remix</Remix>\n\n### getFeedByIdInWei\n\nReturns value in wei and timestamp of a feed.\nA fee (calculated by the FeeCalculator contract) may need to be paid.\n\n```solidity\nfunction getFeedByIdInWei(\n    bytes21 _feedId\n) external payable returns (\n    uint256 _value,\n    uint64 _timestamp\n);\n```\n\n#### Parameters\n\n- `_feedId`: The id of the feed.\n\n#### Returns\n\n- `_value`: The value for the requested feed in wei (i.e. with 18 decimal places).\n- `_timestamp`: The timestamp of the last update.\n\n<details>\n<summary>Sample contract usage</summary>\n\n<CodeBlock language=\"solidity\" title=\"FTSOV2FeedByIdWei.sol\">\n  {FTSOV2FeedByIdWei}\n</CodeBlock>\n\n</details>\n\n<Remix fileName=\"FTSOV2FeedByIdWei.sol\">Open sample in Remix</Remix>\n\n### getFeedsById\n\nReturns stored data of each feed.\nA fee (calculated by the FeeCalculator contract) may need to be paid.\n\n```solidity\nfunction getFeedsById(\n    bytes21[] _feedIds\n) external payable returns (\n    uint256[] _values,\n    int8[] _decimals,\n    uint64 _timestamp\n);\n```\n\n#### Parameters\n\n- `_feedIds`: The list of feed ids.\n\n#### Returns\n\n- `_values`: The list of values for the requested feeds.\n- `_decimals`: The list of decimal places for the requested feeds.\n- `_timestamp`: The timestamp of the last update.\n\n<details>\n<summary>Sample contract usage</summary>\n\n<CodeBlock language=\"solidity\" title=\"FTSOV2FeedsById.sol\">\n  {FTSOV2FeedsById}\n</CodeBlock>\n\n</details>\n\n<Remix fileName=\"FTSOV2FeedsById.sol\">Open sample in Remix</Remix>\n\n### getFeedsByIdInWei\n\nReturns value of each feed and a timestamp.\nFor some feeds, a fee (calculated by the FeeCalculator contract) may need to be paid.\n\n```solidity\nfunction getFeedsByIdInWei(\n    bytes21[] _feedIds\n) external payable returns (\n    uint256[] _values,\n    uint64 _timestamp\n);\n```\n\n#### Parameters\n\n- `_feedIds`: Ids of the feeds.\n\n#### Returns\n\n- `_values`: The list of values for the requested feeds in wei (i.e. with 18 decimal places).\n- `_timestamp`: The timestamp of the last update.\n\n<details>\n<summary>Sample contract usage</summary>\n\n<CodeBlock language=\"solidity\" title=\"FTSOV2FeedsByIdWei.sol\">\n  {FTSOV2FeedsByIdWei}\n</CodeBlock>\n\n</details>\n\n<Remix fileName=\"FTSOV2FeedsByIdWei.sol\">Open sample in Remix</Remix>\n\n### verifyFeedData\n\nChecks if the feed data is valid (i.e. is part of the confirmed Merkle tree).\n\n```solidity\nfunction verifyFeedData(\n    struct FtsoV2Interface.FeedDataWithProof _feedData\n) external view returns (\n    bool\n);\n```\n\n#### Parameters\n\n- `_feedData`: Structure containing data about the feed (FeedData structure) and Merkle proof.\n\n#### Returns\n\n- `_0`: true if the feed data is valid.\n\n<details>\n<summary>Sample contract usage</summary>\n\n<CodeBlock language=\"solidity\" title=\"FTSOV2VerifyProof.sol\">\n  {FTSOV2VerifyProof}\n</CodeBlock>\n\n</details>\n\n<Remix fileName=\"FTSOV2VerifyProof.sol\">Open sample in Remix</Remix>\n\n## Structures\n\n### FeedData\n\nFeed data structure\n\n```solidity\nstruct FeedData {\n  uint32 votingRoundId;\n  bytes21 id;\n  int32 value;\n  uint16 turnoutBIPS;\n  int8 decimals;\n}\n```\n\n### FeedDataWithProof\n\nFeed data with proof structure\n\n```solidity\nstruct FeedDataWithProof {\n    bytes32[] proof;\n    struct FtsoV2Interface.FeedData body;\n}\n```",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport DocCardList from \"@theme/DocCardList\";\n\n## Deployed Contracts\n\n<Tabs block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n  \n    | **Contract**                | **Address**                                                                                                              | **ABI**                                                                                                                                                             |\n    | --------------------------- | ------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | FtsoFeedPublisher           | [`0x91fe21970754FAf858B976DC93c3Aa2cE7848571`](https://flarescan.com/address/0x91fe21970754FAf858B976DC93c3Aa2cE7848571) | [ABI](https://api.routescan.io/v2/network/mainnet/evm/14/etherscan/api?module=contract&action=getabi&address=0x91fe21970754FAf858B976DC93c3Aa2cE7848571&format=raw) |\n    | FtsoInflationConfigurations | [`0xc8f3BBFbAb36838a80789CF116B8cF827430E6c7`](https://flarescan.com/address/0xc8f3BBFbAb36838a80789CF116B8cF827430E6c7) | [ABI](https://api.routescan.io/v2/network/mainnet/evm/14/etherscan/api?module=contract&action=getabi&address=0xc8f3BBFbAb36838a80789CF116B8cF827430E6c7&format=raw) |\n    | FtsoRewardOffersManager     | [`0x244EA7f173895968128D5847Df2C75B1460ac685`](https://flarescan.com/address/0x244EA7f173895968128D5847Df2C75B1460ac685) | [ABI](https://api.routescan.io/v2/network/mainnet/evm/14/etherscan/api?module=contract&action=getabi&address=0x244EA7f173895968128D5847Df2C75B1460ac685&format=raw) |\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    | **Contract**                | **Address**                                                                                                                              | **ABI**                                                                                                                                                              |\n    | --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | FtsoFeedPublisher           | [`0x4fEcE851632C2A88519bE4C92eA238bbE71D882D`](https://coston2.testnet.flarescan.com/address/0x4fEcE851632C2A88519bE4C92eA238bbE71D882D) | [ABI](https://api.routescan.io/v2/network/testnet/evm/114/etherscan/api?module=contract&action=getabi&address=0x4fEcE851632C2A88519bE4C92eA238bbE71D882D&format=raw) |\n    | FtsoInflationConfigurations | [`0x14Cf71e1a73e22B1ef9b47d85eC492259D8C3C81`](https://coston2.testnet.flarescan.com/address/0x14Cf71e1a73e22B1ef9b47d85eC492259D8C3C81) | [ABI](https://api.routescan.io/v2/network/testnet/evm/114/etherscan/api?module=contract&action=getabi&address=0x14Cf71e1a73e22B1ef9b47d85eC492259D8C3C81&format=raw) |\n    | FtsoRewardOffersManager     | [`0x1b7ffab226b66b5eCBdC79a42287BC09C05bCb33`](https://coston2.testnet.flarescan.com/address/0x1b7ffab226b66b5eCBdC79a42287BC09C05bCb33) | [ABI](https://api.routescan.io/v2/network/testnet/evm/114/etherscan/api?module=contract&action=getabi&address=0x1b7ffab226b66b5eCBdC79a42287BC09C05bCb33&format=raw) |\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    | **Contract**                | **Address**                                                                                                                       | **ABI**                                                                                                                                                             |\n    | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | FtsoFeedPublisher           | [`0xD29D1AE96c5D505Bcf886d38C9DC0358b326E458`](https://songbird.flarescan.com/address/0xD29D1AE96c5D505Bcf886d38C9DC0358b326E458) | [ABI](https://api.routescan.io/v2/network/mainnet/evm/19/etherscan/api?module=contract&action=getabi&address=0xD29D1AE96c5D505Bcf886d38C9DC0358b326E458&format=raw) |\n    | FtsoInflationConfigurations | [`0xedCC74C6Dac98abB2F658D8cF6112D6B53B0E78D`](https://songbird.flarescan.com/address/0xedCC74C6Dac98abB2F658D8cF6112D6B53B0E78D) | [ABI](https://api.routescan.io/v2/network/mainnet/evm/19/etherscan/api?module=contract&action=getabi&address=0xedCC74C6Dac98abB2F658D8cF6112D6B53B0E78D&format=raw) |\n    | FtsoRewardOffersManager     | [`0x5aB9cB258a342001C4663D9526A1c54cCcF8C545`](https://songbird.flarescan.com/address/0x5aB9cB258a342001C4663D9526A1c54cCcF8C545) | [ABI](https://api.routescan.io/v2/network/mainnet/evm/19/etherscan/api?module=contract&action=getabi&address=0x5aB9cB258a342001C4663D9526A1c54cCcF8C545&format=raw) |\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    | **Contract**                | **Address**                                                                                                                             | **ABI**                                                                                                                                                             |\n    | --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | FtsoFeedPublisher           | [`0x595AbCc4f9330b30ca31966dFfF71EBE0Af2b820`](https://coston.testnet.flarescan.com/address/0x595AbCc4f9330b30ca31966dFfF71EBE0Af2b820) | [ABI](https://api.routescan.io/v2/network/testnet/evm/16/etherscan/api?module=contract&action=getabi&address=0x595AbCc4f9330b30ca31966dFfF71EBE0Af2b820&format=raw) |\n    | FtsoInflationConfigurations | [`0x4f634084483dE74cd4b69007fdF1DaeCC7354991`](https://coston.testnet.flarescan.com/address/0x4f634084483dE74cd4b69007fdF1DaeCC7354991) | [ABI](https://api.routescan.io/v2/network/testnet/evm/16/etherscan/api?module=contract&action=getabi&address=0x4f634084483dE74cd4b69007fdF1DaeCC7354991&format=raw) |\n    | FtsoRewardOffersManager     | [`0xC9534cB913150aD3e98D792857689B55e2404212`](https://coston.testnet.flarescan.com/address/0xC9534cB913150aD3e98D792857689B55e2404212) | [ABI](https://api.routescan.io/v2/network/testnet/evm/16/etherscan/api?module=contract&action=getabi&address=0xC9534cB913150aD3e98D792857689B55e2404212&format=raw) |\n\n  </TabItem>\n\n</Tabs>\n\n## Interfaces\n\n<DocCardList />",
    "import CodeBlock from \"@theme/CodeBlock\";\nimport TabItem from \"@theme/TabItem\";\nimport Tabs from \"@theme/Tabs\";\nimport Remix from \"@site/src/components/remix\";\nimport FetchAnchorFeedsJs from \"!!raw-loader!/examples/developer-hub-javascript/fetch_anchor_feeds.js\";\nimport FetchAnchorFeedsPy from \"!!raw-loader!/examples/developer-hub-python/fetch_anchor_feeds.py\";\nimport FetchAnchorFeedsGo from \"!!raw-loader!/examples/developer-hub-go/flare/fetch_anchor_feeds.go\";\nimport FetchAnchorFeedsRs from \"!!raw-loader!/examples/developer-hub-rust/src/bin/fetch_anchor_feeds.rs\";\nimport FetchAndVerifyAnchorOnchainJs from \"!!raw-loader!/examples/developer-hub-javascript/fetch_and_verify_anchor_onchain.js\";\nimport FetchAndVerifyAnchorOnchainPy from \"!!raw-loader!/examples/developer-hub-python/fetch_and_verify_anchor_onchain.py\";\nimport FetchAndVerifyAnchorOnchainRs from \"!!raw-loader!/examples/developer-hub-rust/src/bin/fetch_and_verify_anchor_onchain.rs\";\nimport FetchAndVerifyAnchorOnchainGo from \"!!raw-loader!/examples/developer-hub-go/flare/fetch_and_verify_anchor_onchain.go\";\nimport FtsoV2AnchorFeedConsumer from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2AnchorFeedConsumer.sol\";\n\nScaling enables offchain access to anchor feeds by leveraging Flare's network of 100 independent data providers and a robust commit-reveal process every 90 seconds.\n\nTo read anchor feeds on Flare, follow these key steps:\n\n1. **Fetch anchor feed data offchain:**\n\n   Use the Data Availability (DA) Layer API to retrieve anchor feeds and their associated cryptographic proofs.\n\n2. **Verify the proof onchain:**\n\n   Validate the provided proof onchain to ensure the data matches the finalized version committed by [Scaling](/ftso/scaling/overview).\n\n3. **Use the feed data onchain:**\n\n   After verification, integrate the feed data into your onchain application logic.\n\nScaling only stores **commitments to feed data** onchain. Complete feed data resides offchain but can be verified against an onchain Merkle root, ensuring data integrity and tamper resistance.\n\n## DA Layer API URLs\n\n:::warning[Rate limits]\n\nThe public DA Layer endpoints are rate-limited. To request an API key for higher limits, create an [API Key Request Issue](https://github.com/flare-foundation/developer-hub/issues/new/choose).\n\n:::\n\nThe DA Layer provides API endpoints for querying offchain data from Flare protocols.\n\n| Network                 | Base URL                                       |\n| ----------------------- | ---------------------------------------------- |\n| Flare Mainnet           | `https://flr-data-availability.flare.network/` |\n| Songbird Canary-Network | `https://sgb-data-availability.flare.network/` |\n\nAll networks have the same API structure. For a full list of endpoints see [Data Availability API Reference](/fdc/reference/data-availability-api).\n\n## Fetching anchor feed data\n\nThe DA Layer API allows querying values and proofs for multiple feeds from the same voting epoch in a single request. Use the `anchor-feeds-with-proof` POST endpoint to retrieve pricing data.\n\nTo fetch the feed values for FLR/USD, BTC/USD, and ETH/USD at the latest voting round, use the following command:\n\n<Tabs>\n  <TabItem value=\"curl\" label=\"curl\" default>\n\n    ```bash\n    curl -X 'POST' \n      'https://flr-data-availability.flare.network/api/v0/ftso/anchor-feeds-with-proof' \n      -H 'accept: application/json' \n      -H 'Content-Type: application/json' \n      -d '{\n      \"feed_ids\": [\n        \"0x01464c522f55534400000000000000000000000000\",\n        \"0x014254432f55534400000000000000000000000000\",\n        \"0x014554482f55534400000000000000000000000000\"\n      ]\n    }'\n    ```\n\n  </TabItem>\n  <TabItem value=\"javascript\" label=\"Javascript\">\n\n    <CodeBlock language=\"javascript\" title=\"fetch_anchor_feeds.js\">\n      {FetchAnchorFeedsJs}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"python\" label=\"Python\">\n\n    <CodeBlock language=\"python\" title=\"fetch_anchor_feeds.py\">\n      {FetchAnchorFeedsPy}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"go\" label=\"Go\">\n\n    <CodeBlock language=\"go\" title=\"fetch_anchor_feeds.go\">\n      {FetchAnchorFeedsGo}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"rust\" label=\"Rust\">\n\n    <CodeBlock language=\"Rust\" title=\"fetch_anchor_feeds.rs\">\n      {FetchAnchorFeedsRs}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n#### API response structure\n\nThe response contains JSON objects for each feed, with the following fields:\n\n- `votingRoundId`: The voting round ID (each round lasts 90 seconds; see the [Flare Systems Explorer](https://flare-systems-explorer.flare.network/voting-epoch)).\n- `id`: The feed ID (refer to the [list of anchor feeds](/ftso/scaling/anchor-feeds)).\n- `value`: The integer value of the feed.\n- `turnoutBIPS`: The percentage of voting weight (in basis points) that contributed to the finalized value.\n- `decimals`: The number of decimal places for the feed.\n- `proof`: The Merkle proof array for data verification.\n\n#### Example Response (for BTC/USD)\n\n```json\n[\n  {\n    \"body\": {\n      \"votingRoundId\": 823386,\n      \"id\": \"0x014254432f55534400000000000000000000000000\",\n      \"value\": 9837867,\n      \"turnoutBIPS\": 9442,\n      \"decimals\": 2\n    },\n    \"proof\": [\n      \"0x79b8a56bf66ae571ed4c0e3e1317825277c43f5ca3b5a85b834fb6407de03b63\",\n      \"...additional proof hashes...\"\n    ]\n  }\n]\n```\n\nThe floating point value of a feed can be calculated by dividing the `value` by 10^`decimals`. For example, if the feed value of BTC/USD is `6900420` and the decimal is `2`, the floating point feed value is `69004.20`.\n\n### Fetching Timestamps\n\nThe `ftso/anchor-feeds-with-proof` endpoint returns a `votingRoundId`. Each voting round lasts for a fixed duration of **90 seconds**. To determine the **starting timestamp**, use the `fsp/status` GET endpoint:\n\n```bash\ncurl -X 'GET' \n  'https://flr-data-availability.flare.network/api/v0/fsp/status' \n  -H 'accept: application/json'\n```\n\n:::warning\n\n- The timestamps returned correspond to the **start** of the voting round, which lasts for **90 seconds**.\n- Prices for a given voting round are finalized at the **end** of the round, calculated as `start_timestamp + 90s`.\n  :::\n\n#### Example Response\n\n```json\n{\n  \"active\": {\n    \"voting_round_id\": 839641,\n    \"start_timestamp\": 1733997690\n  },\n  \"latest_fdc\": {\n    \"voting_round_id\": -1,\n    \"start_timestamp\": -1\n  },\n  \"latest_ftso\": {\n    \"voting_round_id\": 839640,\n    \"start_timestamp\": 1733997600\n  }\n}\n```\n\nThe response indicates that:\n\n- The **currently active voting round** has `voting_round_id` [839641](https://flare-systems-explorer.flare.network/voting-epoch/839641), which **started at** `1733997690`.\n- The **most recently finalized FTSO voting round** has `voting_round_id` [839640](https://flare-systems-explorer.flare.network/voting-epoch/839640), which **started at** `1733997600`.\n\n## Verifying proof onchain\n\nTo verify feed data onchain, use the [`FtsoV2Interface`](/ftso/solidity-reference/FtsoV2Interface). This interface offers the [`verifyFeedData`](/ftso/solidity-reference/FtsoV2Interface#verifyfeeddata) method to validate feed data and proof against the onchain Merkle root.\nThe function requires a single input struct [`FeedDataWithProof`](/ftso/solidity-reference/FtsoV2Interface#feeddatawithproof), which includes the feed data and voting round ID within the [`FeedData`](/ftso/solidity-reference/FtsoV2Interface#feeddata) struct, and a Merkle proof.\n\nAn example contract verifying and consuming anchor feeds onchain\n\n<CodeBlock language=\"solidity\" title=\"FtsoV2AnchorFeedConsumer.sol\">\n  {FtsoV2AnchorFeedConsumer}\n</CodeBlock>\n\n{/* prettier-ignore */}\n<Remix fileName=\"FtsoV2AnchorFeedConsumer.sol\">Open in Remix</Remix>\n\n## Fetching and verifying feeds\n\nThe following example shows how to query feed and proof data from DA Layer and submit it to the onchain consumer:\n\n<Tabs>\n  <TabItem value=\"javascript\" label=\"Javascript\" default>\n\n    <CodeBlock language=\"javascript\" title=\"fetch_and_verify_anchor_onchain.js\">\n      {FetchAndVerifyAnchorOnchainJs}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"python\" label=\"Python\">\n\n    <CodeBlock language=\"python\" title=\"fetch_and_verify_anchor_onchain.py\">\n      {FetchAndVerifyAnchorOnchainPy}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"go\" label=\"Go\">\n\n    <CodeBlock language=\"go\" title=\"fetch_and_verify_anchor_onchain.go\">\n      {FetchAndVerifyAnchorOnchainGo}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"rust\" label=\"Rust\">\n\n    <CodeBlock language=\"rust\" title=\"fetch_and_verify_anchor_onchain.rs\">\n      {FetchAndVerifyAnchorOnchainRs}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>",
    "import ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n\n**Scaling** is an advanced framework designed to optimize the functionality and efficiency of FTSOv2. It operates through data providers who submit feed estimates weighted by their stake in the network. These estimates are processed using a weighted median algorithm to determine consensus feed values. Scaling offers several enhancements:\n\n- Supports up to 1000 data feeds across various asset classes, including equities, commodities, and cryptocurrencies, and offers access to 2 weeks of historical data.\n\n- Uses a commit-reveal process across approximately 100 independent data providers every 90 seconds to ensure data integrity and accuracy.\n\n- Optimizes median value computation and data storage to consume less than 5% of network bandwidth at peak usage.\n\n## Architecture\n\n<ThemedImage\n  alt=\"Phases of FTSOv2 protocol\"\n  sources={{\n    light: useBaseUrl(\"img/ftso-overview/voting_epoch_light.svg\"),\n    dark: useBaseUrl(\"img/ftso-overview/voting_epoch_dark.svg\"),\n  }}\n/>\n\nEach phase of Scaling is designed to ensure a secure, efficient, and fair consensus process. The protocol is structured into four phases:\n\n- **Commit**: Data providers compute and submit data proposals encoded in a commit hash. To maintain security, the actual feed values are not disclosed at this stage.\n\n- **Reveal**: Data providers reveal their data to one another, alongside the random numbers used to generate their commit hash.\n\n- **Sign**: Valid data reveals are used to calculate median values, which are aggregated into an efficient Merkle tree structure and published onchain.\n\n- **Finalization**: Once a sufficient weight of signatures for the same Merkle root is collected, a randomly chosen provider (or any other entity in case of a failure), can collect and submit them onchain for verification.\n\nOnce the finalization phase is complete, the Merkle root is published onchain, making it available to all other smart contracts for verification of calculation results. This structured approach not only maintains data integrity and accuracy but also incentivizes active participation from data providers, contributing to the overall efficiency and reliability of Scaling.\n\n:::tip[Interested in learning more?]\n\nFor a detailed explanation of the FTSOv2 mechanism, read the [FTSOv2 whitepaper](https://flare.network/wp-content/uploads/FTSOv2-White-Paper.pdf).\n\n:::\n\n### Weighted Median Calculation\n\nThe calculation of the weighted median in Scaling is a crucial process for ensuring accurate consensus on feed values from various data providers. This calculation begins once all valid data estimates are collected, which are then sorted in increasing order based on their feed values. Each data estimate is associated with a weight that corresponds to the voting power of the data provider, which is determined by the amount of stake each provider has. This weighted approach ensures that providers with a higher stake have a proportional impact on the final median calculation, alongside facing a stricter economic cost for misbehavior.\n\nThe next step involves calculating the total weight, which is the sum of the weights of all valid data submissions. The median threshold is then determined as half of the total weight. This threshold helps identify the point at which the cumulative weight of the sorted data meets or exceeds half of the total weight, indicating the weighted median.\n\nStarting from the smallest data estimate, the weights are accumulated in the order of the sorted estimates. The weighted median is identified as the data estimate at which the cumulative weight first meets or exceeds the median threshold.\n\n<details> \n<summary>An illustrative example clarifying the process</summary>\n\nSuppose we have the following data estimates from five providers with their corresponding weights:\n\n| **Estimate (Feed Value)** | **Weight** |\n| ------------------------- | ---------- |\n| 250                       | 4          |\n| 200                       | 2          |\n| 100                       | 1          |\n| 150                       | 3          |\n| 300                       | 1          |\n\nFirst, sort these estimates:\n\n| **Estimate (Feed Value)** | **Weight** |\n| ------------------------- | ---------- |\n| 100                       | 1          |\n| 150                       | 3          |\n| 200                       | 2          |\n| 250                       | 4          |\n| 300                       | 1          |\n\nCalculate the total weight: $W = 1 + 3 + 2 + 4 + 1 = 11$.\n\nThe median threshold $ M $ is $ frac{W}{2} = 5.5 $.\n\nAccumulate the weights:\n\n- For 100: Cumulative weight = 1\n- For 150: Cumulative weight = 1 + 3 = 4\n- For 200: Cumulative weight = 4 + 2 = 6\n\nAt this point, the cumulative weight (6) exceeds the median threshold (5.5). Therefore, the weighted median is 200.\n\n</details>\n\nThis weighted median calculation ensures that the consensus feed value reflects the most influential estimates, balancing the data based on the providers' voting power. This method is designed to be robust against outliers and manipulation, ensuring a fair and reliable consensus process.\n\n### Incentivization Mechanism\n\nThe incentivization mechanism in Scaling is designed to ensure active and accurate participation from data providers while maintaining the integrity of the data submission process. The protocol divides the total reward pool for each voting epoch into three main categories: median closeness rewards, signature rewards, and finalization rewards.\n\nRewards are calculated by comparing data submissions to the median value. Providers whose submissions fall within the interquartile range (IQR) band are eligible for median closeness rewards. If a submission is on the boundary of the IQR band, a pseudo-random selection process determines inclusion. Additional reward bands, which are defined by Flare governance and have a fixed percentage around the finalized value, further refine the distribution, ensuring fair and accurate reward allocation.\n\nPenalties are imposed for non-matching or omitted reveals to maintain data integrity. Providers with mismatched or missing reveals face reduced rewards or even negative cumulative rewards, making them non-claimable. The protocol also evaluates the quality of random numbers generated during reveals, penalizing omissions to prevent manipulation.\n\nInflation reward offers, triggered automatically for certain supported feeds, and community reward offers, submitted by any entity before a reward epoch, provide continuous and flexible incentivization. These mechanisms, managed by specific smart contracts, ensure that both common and less frequent feeds are adequately rewarded, promoting a balanced and effective participation from data providers. This comprehensive incentivization scheme encourages honest and active participation, ensuring Scaling's efficiency and reliability.",
    "import AnchorFeeds from \"@site/src/components/DataTables/AnchorFeeds\";\nimport FeedExplanation from \"../_feed_explanation.mdx\";\n\nScaling's anchor feeds update every 90 seconds with each new voting epoch on Flare. These feeds, accessible offchain, support various asset classes including equities, commodities, and cryptocurrencies.\n\nEach anchor feed is uniquely identified by an ID composed of three components in a structured encoding process:\n\n1. **Category:** Indicates the type of asset:\n\n   - Crypto: `01`\n   - Forex: `02`\n   - Commodity: `03`\n   - Stock: `04`\n\n2. **Hex-Encoded Feed Name:** The name of the feed is converted to a hexadecimal format.\n\n3. **Zero Padding:** The combined category and hex-encoded feed name are padded with zeros to a length of 21 bytes.\n\nThe resulting string is then prefixed with `0x`.\n\n<FeedExplanation />\n\n:::warning\n\nFeed IDs are not addresses. They are `bytes21` structured encodings that combine the category and feed name to ensure each feed has a unique identifier.\n\n:::\n\n<AnchorFeeds />",
    "FtsoFeedPublisher interface.\nSourced from `IFtsoFeedPublisher.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFtsoFeedPublisher.sol).\n\n## Functions\n\n### feedsHistorySize\n\nThe size of the feeds history.\n\n```solidity\nfunction feedsHistorySize(\n) external view returns (\n    uint256\n);\n```\n\n### ftsoProtocolId\n\nThe FTSO protocol id.\n\n```solidity\nfunction ftsoProtocolId(\n) external view returns (\n    uint8\n);\n```\n\n### getCurrentFeed\n\nReturns the current feed.\n\n```solidity\nfunction getCurrentFeed(\n    bytes21 _feedId\n) external view returns (\n    struct IFtsoFeedPublisher.Feed\n);\n```\n\n#### Parameters\n\n- `_feedId`: Feed id.\n\n### getFeed\n\nReturns the feed for given voting round id.\n\n```solidity\nfunction getFeed(\n    bytes21 _feedId,\n    uint256 _votingRoundId\n) external view returns (\n    struct IFtsoFeedPublisher.Feed\n);\n```\n\n#### Parameters\n\n- `_feedId`: Feed id.\n- `_votingRoundId`: Voting round id.\n\n### publish\n\nPublishes feeds.\n\n```solidity\nfunction publish(\n    struct IFtsoFeedPublisher.FeedWithProof[] _proofs\n) external;\n```\n\n#### Parameters\n\n- `_proofs`: The FTSO feeds with proofs to publish.\n\n## Events\n\n### FtsoFeedPublished\n\nEvent emitted when a new feed is published.\n\n```solidity\nevent FtsoFeedPublished(\n    uint32 votingRoundId,\n    bytes21 id,\n    int32 value,\n    uint16 turnoutBIPS,\n    int8 decimals\n)\n```\n\n## Structures\n\n### Feed\n\nThe FTSO feed struct.\n\n```solidity\nstruct Feed {\n  uint32 votingRoundId;\n  bytes21 id;\n  int32 value;\n  uint16 turnoutBIPS;\n  int8 decimals;\n}\n```\n\n### FeedWithProof\n\nThe FTSO feed with proof struct.\n\n```solidity\nstruct FeedWithProof {\n  bytes32[] merkleProof;\n  struct IFtsoFeedPublisher.Feed body;\n}\n```\n\n### Random\n\nThe FTSO random struct.\n\n```solidity\nstruct Random {\n  uint32 votingRoundId;\n  uint256 value;\n  bool isSecure;\n}\n```",
    "FtsoInflationConfigurations interface.\nSourced from `IFtsoInflationConfigurations.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFtsoInflationConfigurations.sol).\n\n## Functions\n\n### getFtsoConfiguration\n\nReturns the FTSO configuration at `_index`.\n\n```solidity\nfunction getFtsoConfiguration(\n    uint256 _index\n) external view returns (\n    struct IFtsoInflationConfigurations.FtsoConfiguration\n);\n```\n\n#### Parameters\n\n- `_index`: The index of the FTSO configuration.\n\n### getFtsoConfigurations\n\nReturns the FTSO configurations.\n\n```solidity\nfunction getFtsoConfigurations(\n) external view returns (\n    struct IFtsoInflationConfigurations.FtsoConfiguration[]\n);\n```\n\n## Structures\n\n### FtsoConfiguration\n\nThe FTSO configuration struct.\n\n```solidity\nstruct FtsoConfiguration {\n  bytes feedIds;\n  uint24 inflationShare;\n  uint16 minRewardedTurnoutBIPS;\n  uint24 primaryBandRewardSharePPM;\n  bytes secondaryBandWidthPPMs;\n  uint16 mode;\n}\n```",
    "FtsoRewardOffersManager interface.\nSourced from `IFtsoRewardOffersManager.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFtsoRewardOffersManager.sol).\n\n## Functions\n\n### minimalRewardsOfferValueWei\n\nMinimal rewards offer value (in wei).\n\n```solidity\nfunction minimalRewardsOfferValueWei(\n) external view returns (\n    uint256\n);\n```\n\n### offerRewards\n\nAllows community to offer rewards.\n\n```solidity\nfunction offerRewards(\n    uint24 _nextRewardEpochId,\n    struct IFtsoRewardOffersManager.Offer[] _offers\n) external payable;\n```\n\n#### Parameters\n\n- `_nextRewardEpochId`: The next reward epoch id.\n- `_offers`: The list of offers.\n\n## Events\n\n### InflationRewardsOffered\n\nEvent emitted when inflation rewards are offered.\n\n```solidity\nevent InflationRewardsOffered(\n    uint24 rewardEpochId,\n    bytes feedIds,\n    bytes decimals,\n    uint256 amount,\n    uint16 minRewardedTurnoutBIPS,\n    uint24 primaryBandRewardSharePPM,\n    bytes secondaryBandWidthPPMs,\n    uint16 mode\n)\n```\n\n### MinimalRewardsOfferValueSet\n\nEvent emitted when the minimal rewards offer value is set.\n\n```solidity\nevent MinimalRewardsOfferValueSet(\n    uint256 valueWei\n)\n```\n\n### RewardsOffered\n\nEvent emitted when a reward offer is received.\n\n```solidity\nevent RewardsOffered(\n    uint24 rewardEpochId,\n    bytes21 feedId,\n    int8 decimals,\n    uint256 amount,\n    uint16 minRewardedTurnoutBIPS,\n    uint24 primaryBandRewardSharePPM,\n    uint24 secondaryBandWidthPPM,\n    address claimBackAddress\n)\n```\n\n## Structures\n\n### Offer\n\nDefines a reward offer.\n\n```solidity\nstruct Offer {\n  uint120 amount;\n  bytes21 feedId;\n  uint16 minRewardedTurnoutBIPS;\n  uint24 primaryBandRewardSharePPM;\n  uint24 secondaryBandWidthPPM;\n  address claimBackAddress;\n}\n```",
    "import CodeBlock from \"@theme/CodeBlock\";\nimport FtsoV2FeedConsumer from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2FeedConsumer_foundry.sol\";\nimport FtsoV2FeedConsumerTest from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2FeedConsumer_foundry.t.sol\";\n\nThis guide is for developers who want to build an FTSOv2 application using Foundry. In this guide, you will learn how to:\n\n- Create a contract to read the price of FLR/USD from FTSOv2 using [flare-periphery-contracts](https://www.npmjs.com/package/@flarenetwork/flare-periphery-contracts).\n\n- Compile your contract using Foundry [forge](https://book.getfoundry.sh/reference/forge/).\n\n- Deploy your contract to Flare Testnet Coston2, and interact with it using Foundry [cast](https://book.getfoundry.sh/reference/cast/).\n\n## Prerequisites\n\nEnsure you have the following tools installed:\n\n- [Foundry](https://book.getfoundry.sh/getting-started/installation)\n- [Node.js](https://nodejs.org/en/download/)\n\n## Clone the Foundry template\n\n1. Clone the [flare-foundry-starter](https://github.com/flare-foundation/flare-foundry-starter) and navigate into the project directory:\n\n   ```bash\n   git clone https://github.com/flare-foundation/flare-foundry-starter.git\n   cd flare-foundry-starter\n   ```\n\n2. Install the project dependencies:\n\n   ```bash\n   forge soldeer install\n   ```\n\n3. You might need to modify `remappings.txt` so `/src` paths are read correctly, e.g.:\n\n   ```plaintext title=\"remappings.txt\"\n   @openzeppelin-contracts/=dependencies/@openzeppelin-contracts-5.2.0-rc.1/\n   flare-periphery/=dependencies/flare-periphery-0.0.1/\n   forge-std/=dependencies/forge-std-1.9.5/src/\n   forge-std/=dependencies/forge-std-1.9.5/\n   surl/=dependencies/surl-0.0.0/src/\n   surl/=dependencies/surl-0.0.0/\n   ```\n\n## Create and compile a contract\n\nNow, you can create a contract that consumes data from FTSOv2.\n\n1. Create a contract file `src/FtsoV2FeedConsumer.sol`, and add the following code to it:\n\n   <CodeBlock language=\"solidity\" title=\"src/FtsoV2FeedConsumer.sol\">\n     {FtsoV2FeedConsumer}\n   </CodeBlock>\n\n2. Set EVM version to `london` in `foundry.toml`:\n\n   ```toml title=\"foundry.toml\"\n   [profile.default]\n   ...\n   evm_version = \"london\"\n   ```\n\n3. To ensure everything is set up correctly, compile the contract by running:\n\n   ```bash\n   forge build\n   ```\n\n   The output should indicate that the compilation was successful.\n\n   ```plaintext\n   [⠊] Compiling...\n   [⠃] Compiling 27 files with Solc 0.8.27\n   [⠊] Solc 0.8.27 finished in 853.78ms\n   Compiler run successful!\n   ```\n\n## Write tests\n\nBefore deploying, it's important to write tests for your contract.\n\n1. Create a test file `test/FtsoV2FeedConsumer.t.sol`, and add the following code:\n\n   <CodeBlock language=\"solidity\" title=\"test/FtsoV2FeedConsumer.t.sol\">\n     {FtsoV2FeedConsumerTest}\n   </CodeBlock>\n\n2. Run the tests:\n\n   ```bash\n   forge test\n   ```\n\n   You should see a successful test result like this:\n\n   ```plaintext\n   [⠊] Compiling...\n   [⠘] Compiling 27 files with Solc 0.8.27\n   [⠃] Solc 0.8.27 finished in 797.51ms\n   Compiler run successful!\n\n   Ran 2 tests for test/FtsoV2FeedConsumer.t.sol:FtsoV2FeedConsumerTest\n   [PASS] testCheckFees() (gas: 21085)\n   [PASS] testGetFlrUsdPrice() (gas: 25610)\n   Logs:\n     msg.value matches fee\n     feedValue 150000\n     decimals 7\n     timestamp 1\n\n   Suite result: ok. 2 passed; 0 failed; 0 skipped; finished in 7.72ms (2.91ms CPU time)\n\n   Ran 1 test suite in 122.65ms (7.72ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)\n   ```\n\n## Deploy and interact with the contract\n\nYou can now deploy your contract to Flare Testnet Coston2.\n\n1.  Generate a new wallet using the [cast](https://book.getfoundry.sh/reference/cast/):\n\n    ```bash\n    cast wallet new\n    ```\n\n    The output will look something like:\n\n    ```plaintext\n    Successfully created new keypair.\n    Address:     0x3f6BdD26f2AE4e77AcDfA1FA24B2774ed93984B4\n    Private key: 0x84cf77b009a92777f75b49864e4166ddcaf8f3f5f119a19b226ab362a0cf7bf5\n    ```\n\n2.  Store your wallet details and the RPC URL as environment variables:\n\n    :::danger\n\n    - Never share your private keys.\n    - Never put your private keys in source code.\n    - Never commit private keys to a Git repository.\n\n    :::\n\n    ```bash\n    export ACCOUNT=<address above>\n    export ACCOUNT_PRIVATE_KEY=<private key above>\n    export RPC_URL=\"https://coston2-api.flare.network/ext/C/rpc\"\n    ```\n\n3.  Use the [Coston2 Faucet](https://faucet.flare.network/coston2) to get some testnet C2FLR tokens. You can verify that the 100 C2FLR has arrived in your wallet:\n\n    ```bash\n    cast balance $ACCOUNT -r $RPC_URL -e\n    ```\n\n4.  The final step before deploying is to set the constructor arguments with the address of [`FtsoV2`](/ftso/solidity-reference) and [`FeeCalculator`](/ftso/solidity-reference) on Flare Testnet Coston2 and the [feed ID](/ftso/feeds) of FLR/USD:\n\n    ```bash\n    export FTSOV2_COSTON2=0x3d893C53D9e8056135C26C8c638B76C8b60Df726\n    export FEECALCULATOR_COSTON2=0x88A9315f96c9b5518BBeC58dC6a914e13fAb13e2\n    export FLRUSD_FEED_ID=0x01464c522f55534400000000000000000000000000\n    ```\n\n    You can now deploy the contract:\n\n    ```bash\n    forge create src/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer --private-key $ACCOUNT_PRIVATE_KEY --rpc-url $RPC_URL --constructor-args $FTSOV2_COSTON2 $FEECALCULATOR_COSTON2 $FLRUSD_FEED_ID\n    ```\n\n    If the deployment is successful, the output will display the contract address, save that for later use:\n\n    ```plaintext\n    [⠊] Compiling...\n    [⠘] Compiling 24 files with Solc 0.8.27\n    [⠃] Solc 0.8.27 finished in 733.41ms\n    Compiler run successful!\n    Deployer: 0x3f6BdD26f2AE4e77AcDfA1FA24B2774ed93984B4\n    Deployed to: 0x80Ee4091348d9fA4B4A84Eb525c25049EbDa6152\n    Transaction hash: 0x38604a643695959dd9fa5547d95610fb0b7393c7e8358079f47ed4bdb53c9a8f\n    ```\n\n    ```bash\n    export DEPLOYMENT_ADDRESS=<deployed to address above>\n    ```\n\n5.  Use `cast` to interact with the contract, note that this command uses the environment variables defined in the sections above.:\n\n    ```bash\n    cast send --private-key $ACCOUNT_PRIVATE_KEY --rpc-url $RPC_URL -j --value 0 $DEPLOYMENT_ADDRESS \"getFlrUsdPrice()\"\n    ```\n\n    <details>\n\n    <summary>Expected output of the command above.</summary>\n\n    ```json\n    {\n      \"status\": \"0x1\",\n      \"cumulativeGasUsed\": \"0x1cbab\",\n      \"logs\": [\n        {\n          \"address\": \"0x1000000000000000000000000000000000000002\",\n          \"topics\": [\n            \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n          ],\n          \"data\": \"0x00000000000000000000000098b8e9b5830f04fe3b8d56a2f8455e337037ba280000000000000000000000000000000000000000000000000000000000004231\",\n          \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n          \"blockNumber\": \"0xb2b972\",\n          \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n          \"transactionIndex\": \"0x0\",\n          \"logIndex\": \"0x0\",\n          \"removed\": false\n        },\n        {\n          \"address\": \"0x1000000000000000000000000000000000000002\",\n          \"topics\": [\n            \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n          ],\n          \"data\": \"0x0000000000000000000000004f52e61907b0ed9f26b88f16b2510a4ca524d6d00000000000000000000000000000000000000000000000000000000000003099\",\n          \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n          \"blockNumber\": \"0xb2b972\",\n          \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n          \"transactionIndex\": \"0x0\",\n          \"logIndex\": \"0x1\",\n          \"removed\": false\n        },\n        {\n          \"address\": \"0x1000000000000000000000000000000000000002\",\n          \"topics\": [\n            \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n          ],\n          \"data\": \"0x000000000000000000000000d2a1bb23eb350814a30dd6f9de78bb2c8fdd9f1d0000000000000000000000000000000000000000000000000000000000003b68\",\n          \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n          \"blockNumber\": \"0xb2b972\",\n          \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n          \"transactionIndex\": \"0x0\",\n          \"logIndex\": \"0x2\",\n          \"removed\": false\n        },\n        {\n          \"address\": \"0x1000000000000000000000000000000000000002\",\n          \"topics\": [\n            \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n          ],\n          \"data\": \"0x0000000000000000000000006892bdbbb14e1c9bd46bf31e7bac94d038fc82a6000000000000000000000000000000000000000000000000000000000000422d\",\n          \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n          \"blockNumber\": \"0xb2b972\",\n          \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n          \"transactionIndex\": \"0x0\",\n          \"logIndex\": \"0x3\",\n          \"removed\": false\n        },\n        {\n          \"address\": \"0x1000000000000000000000000000000000000002\",\n          \"topics\": [\n            \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n          ],\n          \"data\": \"0x000000000000000000000000bd33bdff04c357f7fc019e72d0504c24cf4aa0100000000000000000000000000000000000000000000000000000000000008f11\",\n          \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n          \"blockNumber\": \"0xb2b972\",\n          \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n          \"transactionIndex\": \"0x0\",\n          \"logIndex\": \"0x4\",\n          \"removed\": false\n        },\n        {\n          \"address\": \"0x1000000000000000000000000000000000000002\",\n          \"topics\": [\n            \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n          ],\n          \"data\": \"0x000000000000000000000000a90db6d10f856799b10ef2a77ebcbf460ac71e520000000000000000000000000000000000000000000000000000000000004e9c\",\n          \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n          \"blockNumber\": \"0xb2b972\",\n          \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n          \"transactionIndex\": \"0x0\",\n          \"logIndex\": \"0x5\",\n          \"removed\": false\n        },\n        {\n          \"address\": \"0x1000000000000000000000000000000000000002\",\n          \"topics\": [\n            \"0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4\"\n          ],\n          \"data\": \"0x0000000000000000000000000b162ca3acf3482d3357972e12d794434085d839000000000000000000000000000000000000000000000000000000000000e5a6\",\n          \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n          \"blockNumber\": \"0xb2b972\",\n          \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n          \"transactionIndex\": \"0x0\",\n          \"logIndex\": \"0x6\",\n          \"removed\": false\n        }\n      ],\n      \"logsBloom\": \"0xn      \"type\": \"0x2\",\n      \"transactionHash\": \"0x3fdc9cf00456a7878476877b6f8ae5c994dd3c224ca792f965f718340fd98402\",\n      \"transactionIndex\": \"0x0\",\n      \"blockHash\": \"0x94f50404f8205caff551ef2b08d20afc4c080bd7b8231cd3941f1a7a6b1b80dd\",\n      \"blockNumber\": \"0xb2b972\",\n      \"gasUsed\": \"0x1cbab\",\n      \"effectiveGasPrice\": \"0x6fc23ac00\",\n      \"from\": \"0x3f6bdd26f2ae4e77acdfa1fa24b2774ed93984b4\",\n      \"to\": \"0x80ee4091348d9fa4b4a84eb525c25049ebda6152\",\n      \"contractAddress\": null\n    }\n    ```\n\n    </details>\n\nYou can see the transaction using the [Coston2 Explorer](https://coston2.testnet.flarescan.com/) by searching for its `transactionHash`.\n\nCongratulations! You've built your first app using FTSOv2.\n\n:::tip[What's next]\n\nLearn how to [read feeds offchain](read-feeds-offchain) using JavaScript, Python, Rust and Go, or learn how to [change quote feed](change-quote-feed) with an onchain Solidity contract.\n\n:::",
    "import TabItem from \"@theme/TabItem\";\nimport Tabs from \"@theme/Tabs\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport VolIncentiveWeb3Js from \"!!raw-loader!/examples/developer-hub-javascript/volatility_incentive_coston2_web3.js\";\nimport VolIncentiveEthersJs from \"!!raw-loader!/examples/developer-hub-javascript/volatility_incentive_coston2_ethers.js\";\nimport VolIncentiveWeb3Py from \"!!raw-loader!/examples/developer-hub-python/volatility_incentive_coston2.py\";\nimport VolIncentiveRust from \"!!raw-loader!/examples/developer-hub-rust/src/bin/volatility_incentive_coston2.rs\";\nimport VolIncentiveGo from \"!!raw-loader!/examples/developer-hub-go/coston2/volatility_incentive.go\";\n\n:::info\n\nBefore reading this guide, make sure you understand [FTSOv2's Volatility Incentive Mechanism](/ftso/overview#volatility-incentive-mechanism).\n\n:::\n\nThis guide provides code examples demonstrating how to make an FTSOv2 volatility incentive offer using various programming languages. To make a volatility incentive offer, you need three key pieces of information:\n\n1. **RPC Endpoint URL:** The RPC Endpoint URL determines which network your code will interact with. You can use a node provider service or point to your [own RPC node](/run-node/rpc-node). A comprehensive list of public and private RPC endpoints for all Flare networks is available on the [Network Configuration](/network/overview#configuration) page.\n\n2. **Contract Address:** The address for the `FastUpdateIncentiveManager` contract varies by network. You can obtain this address in two ways:\n\n   - **From the Solidity Reference page:** Find the `FastUpdateIncentiveManager` address for each network on the [Solidity Reference](/ftso/solidity-reference) page.\n\n   **OR**\n\n   - **Query the FlareContractRegistry Contract:** The `FlareContractRegistry` contract has the same address across all networks. You can query it to get the `FastUpdateIncentiveManager` contract address. Refer to the specific language guides for examples:\n     - [JavaScript](/network/guides/flare-for-javascript-developers#make-query)\n     - [Python](/network/guides/flare-for-python-developers#make-query)\n     - [Rust](/network/guides/flare-for-rust-developers#make-query)\n     - [Go](/network/guides/flare-for-go-developers#make-query)\n\n3. **Cost of Increasing the Sample Size:** FTSOv2 allows you to increase the sample size, i.e., the expected number of providers who can submit a block-latency feed update. The cost for this increases dynamically with the expected sample size. A single volatility incentive lasts for a period of 8 blocks.\n\n:::tip\n\nAll examples in this guide are available at [developer-hub/examples](https://github.com/flare-foundation/developer-hub/tree/main/examples).\n\n:::\n\n<Tabs block>\n  <TabItem value=\"web3js\" label=\"web3.js\" default>\n\n    This example uses [web3.js](https://github.com/web3/web3.js) to make an FTSOv2 volatility incentive offer on Flare Testnet Coston2.\n\n    <CodeBlock language=\"javascript\" title=\"volatility_incentive.js\">\n        {VolIncentiveWeb3Js}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"ethersjs\" label=\"ethers.js\">\n\n    This example uses [ethers.js](https://github.com/ethers-io/ethers.js/) to make an FTSOv2 volatility incentive offer on Flare Testnet Coston2.\n\n    <CodeBlock language=\"javascript\" title=\"volatility_incentive.js\">\n        {VolIncentiveEthersJs}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"web3py\" label=\"web3.py\">\n\n    This example uses [web3.py](https://github.com/ethereum/web3.py) to make an FTSOv2 volatility incentive offer on Flare Testnet Coston2.\n\n    <CodeBlock language=\"python\" title=\"volatility_incentive.py\">\n        {VolIncentiveWeb3Py}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"alloyrs\" label=\"alloy-rs\">\n\n    This example uses [alloy-rs](https://github.com/ethereum/web3.py) to make an FTSOv2 volatility incentive offer on Flare Testnet Coston2.\n\n    ```bash\n    cargo add alloy eyre tokio --features alloy/full,tokio/rt,tokio/rt-multi-thread,tokio/macros\n    ```\n\n    <CodeBlock language=\"rust\" title=\"volatility_incentive.rs\">\n        {VolIncentiveRust}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"goethereum\" label=\"go-ethereum\">\n\n    This example uses the Go API from [Geth](https://geth.ethereum.org) to make an FTSOv2 volatility incentive offer on Flare Testnet Coston2.\n\n    ```bash\n    go get github.com/ethereum/go-ethereum/ethclient\n    go get github.com/ethereum/go-ethereum/accounts\n    ```\n\n    The project structure should look like:\n\n    ```plaintext\n    developer-hub-go/\n    ├── coston2/\n    │   └── *.go\n    ├── flare/\n    │   └── *.go\n    ├── main.go\n    ├── go.mod\n    └── go.sum\n    ```\n\n    With Go, you need to manually fetch the contract's ABI and generate the Go bindings. Copy the [FastUpdatesIncentiveManager ABI](https://api.routescan.io/v2/network/testnet/evm/114/etherscan/api?module=contract&action=getabi&address=0x003e9bD18f73e0B25BED0DC8382Bde6aa999525c&format=raw) and paste it into a file named `FastUpdatesIncentiveManager.abi`, located in the root of your project, i.e. same level as `go.mod`. Then using [abigen](https://geth.ethereum.org/docs/tools/abigen), generate the Go bindings.\n\n    ```bash\n    abigen --abi FastUpdatesIncentiveManager.abi --pkg coston2 --type FastUpdatesIncentiveManager --out coston2/FastUpdatesIncentiveManager.go\n    ```\n\n    <CodeBlock language=\"go\" title=\"coston2/volatility_incentive.go\">\n        {VolIncentiveGo}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>",
    "import TabItem from \"@theme/TabItem\";\nimport Tabs from \"@theme/Tabs\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport ReadOffhainEthersJs from \"!!raw-loader!/examples/developer-hub-javascript/ftsov2_consumer_coston2_ethers.js\";\nimport ReadOffhainWeb3Js from \"!!raw-loader!/examples/developer-hub-javascript/ftsov2_consumer_coston2_web3.js\";\nimport ReadOffhainWeb3Py from \"!!raw-loader!/examples/developer-hub-python/ftsov2_consumer_coston2.py\";\nimport ReadOffhainRust from \"!!raw-loader!/examples/developer-hub-rust/src/bin/ftsov2_consumer_coston2.rs\";\nimport ReadOffhainGo from \"!!raw-loader!/examples/developer-hub-go/ftsov2_consumer_coston2.go\";\n\nThis guide provides code examples demonstrating how to read FTSOv2 feeds offchain using various programming languages. To read a block-latency feed offchain, you need three key pieces of information:\n\n1. **RPC Endpoint URL:** The RPC Endpoint URL determines which network your code will interact with. You can use a node provider service or point to your [own RPC node](/run-node/rpc-node). A comprehensive list of public and private RPC endpoints for all Flare networks is available on the [Network Configuration](/network/overview#configuration) page.\n\n2. **Contract Address:** Feeds are served on the `FtsoV2` contract, whose address varies by network. You can obtain this address in two ways:\n\n   - **From the Solidity Reference page:** Find the `FtsoV2` address for each network on the [Solidity Reference](/ftso/solidity-reference) page.\n\n     **OR**\n\n   - **Query the FlareContractRegistry Contract:** The `FlareContractRegistry` contract has the same address across all networks. You can query it to get the `FtsoV2` contract address. Refer to the specific language guides for examples:\n     - [JavaScript](/network/guides/flare-for-javascript-developers#make-query)\n     - [Python](/network/guides/flare-for-python-developers#make-query)\n     - [Rust](/network/guides/flare-for-rust-developers#make-query)\n     - [Go](/network/guides/flare-for-go-developers#make-query)\n\n3. **Feed IDs:** The feeds you want to read are uniquely identified by their ID. A list of feed IDs is provided on the [Block-Latency Feeds](/ftso/feeds) page.\n\n:::tip\n\nAll examples in this guide are available at [developer-hub/examples](https://github.com/flare-foundation/developer-hub/tree/main/examples).\n\n:::\n\n<Tabs block>\n  <TabItem value=\"web3js\" label=\"web3.js\" default>\n\n    This example uses [web3.js](https://github.com/web3/web3.js) to retrieve FTSOv2 feed data for FLR/USD, BTC/USD, and ETH/USD on Flare Testnet Coston2.\n\n    ```bash\n    npm install web3\n    ```\n\n    <CodeBlock language=\"javascript\" title=\"ftsov2_consumer.js\">\n      {ReadOffhainWeb3Js}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"ethersjs\" label=\"ethers.js\">\n    This example uses [ethers.js](https://github.com/ethers-io/ethers.js/) to retrieve FTSOv2 feed data for FLR/USD, BTC/USD, and ETH/USD on Flare Testnet Coston2.\n\n    ```bash\n    npm install ethers\n    ```\n\n    <CodeBlock language=\"javascript\" title=\"ftsov2_consumer.js\">\n      {ReadOffhainEthersJs}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"web3py\" label=\"web3.py\">\n\n    This example uses [web3.py](https://github.com/ethereum/web3.py) to retrieve FTSOv2 feed values for FLR/USD, BTC/USD, and ETH/USD on Flare Testnet Coston2.\n\n    <Tabs groupId=\"python\">\n      <TabItem value=\"uv\" label=\"uv\" default>\n        ```bash\n        uv add web3\n        ```\n\n      </TabItem>\n      <TabItem value=\"pip\" label=\"pip\">\n        ```bash\n        pip install web3\n        ```\n\n      </TabItem>\n    </Tabs>\n\n    <CodeBlock language=\"python\" title=\"ftsov2_consumer.py\">\n      {ReadOffhainWeb3Py}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"alloyrs\" label=\"alloy-rs\">\n\n    This example uses [alloy-rs](https://github.com/alloy-rs) to retrieve FTSOv2 feed data for FLR/USD, BTC/USD, and ETH/USD on Flare Testnet Coston2.\n\n    ```bash\n    cargo add alloy eyre tokio --features alloy/full,tokio/rt,tokio/rt-multi-thread,tokio/macros\n    ```\n\n    <CodeBlock language=\"rust\" title=\"ftsov2_consumer.rs\">\n      {ReadOffhainRust}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"goethereum\" label=\"go-ethereum\">\n\n    This example uses the Go API from [Geth](https://geth.ethereum.org) to retrieve FTSOv2 feed data for FLR/USD, BTC/USD, and ETH/USD from Flare Testnet Coston2.\n\n    ```bash\n    go get github.com/ethereum/go-ethereum/ethclient\n    ```\n\n    With Go, you need to manually fetch the contract's ABI and generate the Go bindings. Copy the [FtsoV2 ABI](/ftso/solidity-reference) and paste it into a file named `FtsoV2.abi`, located in the root of your project, i.e. same level as `go.mod`. Then using [abigen](https://geth.ethereum.org/docs/tools/abigen), generate the Go bindings.\n\n    ```bash\n    abigen --abi FtsoV2.abi --pkg main --type FtsoV2 --out FtsoV2.go\n    ```\n\n    <CodeBlock language=\"go\" title=\"ftsov2_consumer.go\">\n      {ReadOffhainGo}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>",
    "import Remix from \"@site/src/components/remix\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport FtsoV2ChangeQuoteFeed from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2ChangeQuoteFeed.sol\";\nimport SetEvmVersionRemix from \"/static/img/set-evm-version-remix.png\";\n\nThis guide will show you how to fetch the latest feed values for two feeds and convert them to a new quote feed while retaining the number of decimals. For example, if you need the price of `BTC/ETH`, you can fetch the latest feed values for `BTC/USD` and `ETH/USD` and calculate the price of `BTC/ETH = (BTC/USD) / (ETH/USD)`.\n\n<CodeBlock language=\"solidity\" title=\"FtsoV2ChangeQuoteFeed.sol\">\n  {FtsoV2ChangeQuoteFeed}\n</CodeBlock>\n\n{/* prettier-ignore */}\n<Remix fileName=\"FtsoV2ChangeQuoteFeed.sol\">Open in Remix</Remix>\n<br></br>\n\n:::warning[Don't use test interfaces in production]\n\nThe `TestFtsoV2Interface` is for **testing only**, with all methods as `view` to allow rapid development without gas costs or state changes. For production, use [`FtsoV2Interface`](/ftso/solidity-reference/FtsoV2Interface), which includes `payable` methods required for real transactions and state modifications.\nMake the following changes to `FtsoV2ChangeQuoteFeed.sol`:\n\n```solidity\nimport {ContractRegistry} from \"@flarenetwork/flare-periphery-contracts/coston2/ContractRegistry.sol\";\nimport {FtsoV2Interface} from \"@flarenetwork/flare-periphery-contracts/coston2/FtsoV2Interface.sol\";\n\ncontract FtsoV2ChangeQuoteFeed {\n  FtsoV2Interface internal ftsoV2;\n  constructor() {\n    ftsoV2 = ContractRegistry.getFtsoV2();\n  }\n  //...\n}\n```\n\n:::\n\n:::warning[Set EVM Version to London]\n\n- **Using Remix:** Set EVM version to `london` in the **Advanced Configurations** section of the **Solidity Compiler** tab:\n\n  {\" \"}\n\n  <img src={SetEvmVersionRemix} style={{ width: 300 }} />\n\n- **Using Hardhat or Foundry:** Set EVM version to `london` in [hardhat.config.ts](https://github.com/flare-foundation/flare-hardhat-starter/blob/master/hardhat.config.ts#L34) or [foundry.toml](https://github.com/flare-foundation/flare-foundry-starter/blob/master/foundry.toml).\n\n- **Using Standard Solidity JSON:** Set `evmVersion` to `london`:\n\n  ```json\n  {\n    \"settings\": {\n      \"optimizer\": {\n        /* ... */\n      },\n      \"evmVersion\": \"london\"\n    }\n  }\n  ```\n\n- **Using `solc` CLI:** Set `--evm-version` to `london`:\n\n  ```bash\n  solc --evm-version london <args>\n  ```\n\n:::",
    "import TabItem from \"@theme/TabItem\";\nimport Tabs from \"@theme/Tabs\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport FtsoConfigEthersJs from \"!!raw-loader!/examples/developer-hub-javascript/ftsov2_config_coston2_ethers.js\";\nimport FtsoConfigWeb3Js from \"!!raw-loader!/examples/developer-hub-javascript/ftsov2_config_coston2_web3.js\";\nimport FtsoConfigWeb3Py from \"!!raw-loader!/examples/developer-hub-python/ftsov2_config_coston2.py\";\nimport FtsoConfigRust from \"!!raw-loader!/examples/developer-hub-rust/src/bin/ftsov2_config_coston2.rs\";\nimport FtsoConfigGo from \"!!raw-loader!/examples/developer-hub-go/ftsov2_config_coston2.go\";\n\nThis guide provides code examples demonstrating how to read FTSOv2 feed configurations offchain using various programming languages. To achieve this, you need two key pieces of information:\n\n1. **RPC Endpoint URL:** The RPC Endpoint URL determines which network your code will interact with. You can either use a node provider service or point to your [own RPC node](/run-node/rpc-node). A list of public and private RPC endpoints for all Flare networks is available on the [Network Configuration](/network/overview#configuration) page.\n\n2. **Contract Address:** The address for the `FastUpdatesConfiguration` contract varies by network. You can obtain this address in two ways:\n\n   - **From the Solidity Reference page:** Find the `FastUpdatesConfiguration` address for each network on the [Solidity Reference](/ftso/solidity-reference) page.\n\n     **OR**\n\n   - **Query the FlareContractRegistry Contract:** The `FlareContractRegistry` contract has the same address across all networks. You can query it to get the `FastUpdatesConfiguration` contract address. Refer to the specific language guides for examples:\n     - [JavaScript](/network/guides/flare-for-javascript-developers#make-query)\n     - [Python](/network/guides/flare-for-python-developers#make-query)\n     - [Rust](/network/guides/flare-for-rust-developers#make-query)\n     - [Go](/network/guides/flare-for-go-developers#make-query)\n\n:::tip\n\nAll examples in this guide are available at [developer-hub/examples](https://github.com/flare-foundation/developer-hub/tree/main/examples).\n\n:::\n\n<Tabs block>\n  <TabItem value=\"web3js\" label=\"web3.js\" default>\n    This example user [web3.js](https://github.com/web3/web3.js) to retrieve FTSOv2 feed configurations on Flare Testnet Coston2.\n    \n    ```bash\n    npm install web3\n    ```\n\n    <CodeBlock language=\"javascript\" title=\"ftsov2_config.js\">\n      {FtsoConfigWeb3Js}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"ethersjs\" label=\"ethers.js\">\n    This example uses [ethers.js](https://github.com/ethers-io/ethers.js/) to retrieve FTSOv2 feed configurations on Flare Testnet Coston2.\n    \n    ```bash\n    npm install ethers\n    ```\n    \n    <CodeBlock language=\"javascript\" title=\"ftsov2_config.js\">\n      {FtsoConfigEthersJs}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"web3py\" label=\"web3.py\">\n\n    This example uses [web3.py](https://github.com/ethereum/web3.py) to retrieve FTSOv2 feed configurations on Flare Testnet Coston2.\n\n    <Tabs groupId=\"python\">\n      <TabItem value=\"uv\" label=\"uv\" default>\n\n        ```bash\n        uv add web3\n        ```\n\n      </TabItem>\n      <TabItem value=\"pip\" label=\"pip\">\n\n        ```bash\n        pip install web3\n        ```\n\n      </TabItem>\n    </Tabs>\n\n    <CodeBlock language=\"python\" title=\"ftsov2_config.py\">\n      {FtsoConfigWeb3Py}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"alloyrs\" label=\"alloy-rs\">\n\n    This example uses [alloy-rs](https://github.com/alloy-rs) to retrieve FTSOv2 feed configurations on Flare Testnet Coston2.\n\n    ```bash\n    cargo add alloy eyre tokio --features alloy/full,tokio/rt,tokio/rt-multi-thread,tokio/macros\n    ```\n    <CodeBlock language=\"rust\" title=\"src/bin/ftsov2_config.rs\">\n      {FtsoConfigRust}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"goethereum\" label=\"go-ethereum\">\n\n    This example uses the Go API from [Geth](https://geth.ethereum.org) to retrieve FTSOv2 feed configurations on Flare Testnet Coston2.\n\n    ```bash\n    go get github.com/ethereum/go-ethereum/ethclient\n    ```\n\n    With Go, you need to manually fetch the contract's ABI and generate the Go bindings. Copy the [FastUpdatesConfiguration ABI](https://api.routescan.io/v2/network/testnet/evm/114/etherscan/api?module=contract&action=getabi&address=0xE7d1D5D58cAE01a82b84989A931999Cb34A86B14&format=raw) and paste it into a file named `FastUpdatesConfiguration.abi`, located in the root of your project, i.e. same level as `go.mod`. Then using [abigen](https://geth.ethereum.org/docs/tools/abigen), generate the Go bindings.\n\n    ```bash\n    abigen --abi FastUpdatesConfiguration.abi --pkg main --type FastUpdatesConfiguration --out FastUpdatesConfiguration.go\n    ```\n\n    <CodeBlock language=\"go\" title=\"ftsov2_config.go\">\n      {FtsoConfigGo}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>",
    "import ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n\nFAssets collateral is locked in contracts that ensure the minted FAssets can always be redeemed for the underlying assets they represent or compensated by collateral.\nAlong with Flare's native token, FLR, any governance approved ERC-20 token on the Flare blockchain can be used as collateral.\n\nFAssets collateral ensures the security and redemption of minted FAssets by locking collateral in smart contracts. This guarantees that FAssets can either be redeemed for their underlying assets or compensated by collateral. Collateral can include Flare's native token (FLR) and any governance-approved ERC-20 tokens on the Flare blockchain.\n\n## Collateral Types\n\nTwo primary types of collateral secure FAssets: **Vault Collateral** and **Pool Collateral**.\n\nVault collateral is provided exclusively by agents and ensures they perform their duties.\nPool collateral is provided by agents and FLR holders who choose to contribute to the pool.\nIt is a safeguard when a sudden drop in the price of the vault collateral makes it insufficient to back the underlying assets.\n\n### Vault Collateral\n\nVault collateral consists of the types of collateral chosen by agents to store in their vault.\nFlare governance approves the valid types, which are generally stablecoins, such as USDC, USDT, or other highly liquid tokens on the Flare network.\n\nAgents choose one of the types defined by FAssets governance and use it as collateral in their vaults.\nAgents cannot switch to a different type after a vault is created, but they can create any number of vaults, with different types.\n\nEach collateral type defines an ERC-20 token to use as collateral, a series of [collateral ratios](#collateral-ratio), and information to retrieve the asset's price from the FTSO system.\nGovernance reserves the right to add new types or deprecate existing types.\nIf governance deprecates a type, agents must switch to a supported type.\n\nEach vault is associated with a single, unique address on the underlying chain called the agent's underlying address.\nIt receives underlying assets when they are minted into FAssets and sends underlying assets to the redeemer's address when they are redeemed.\n\nWhen an agent creates a vault, the underlying address is checked for validity using the Data Connector.\nOtherwise, malicious agents could provide an address that systematically blocks payments and exploit the [minting process](/fassets/minting) to their advantage.\n\n### Pool Collateral\n\nWhen the price of the vault collateral changes in such a way that the vault collateral cannot fully back all the minted FAssets, a [liquidation](/fassets/liquidation) mechanism ensures enough FAssets are burned to restore balance.\nThe pool collateral provides an additional source of backing for situations when the price fluctuates too rapidly for liquidations to correct the imbalance.\n\nPool collateral is always native FLR tokens or SGB tokens on the Songbird network and can be used as an additional source of collateral for [liquidations](/fassets/liquidation) and [failed redemptions](/fassets/redemption#redemption-payment-failure).\n\nAnyone can participate in the FAssets system by providing native tokens to this pool.\nIn return, providers receive **collateral pool tokens** (CPTs) as proof of the share of native tokens they provided to a specific pool from a specific agent.\nCPTs are ERC-20 tokens specific to both an agent and a pool.\n\nProviders can redeem their CPTs for FLR, or even transfer or trade them, after a governance-defined time period has elapsed since they entered the pool.\nThis **time lock** is necessary to reduce sandwiching attacks.\n\nAdditionally, CPT holders are entitled to a share of any fee the agent earns from minting FAssets using this pool as explained in the next section.\n\n<details>\n<summary>CPT conversion formulae and examples.</summary>\n\nThe amount of collateral pool tokens a provider $p$ receives upon entering a pool is calculated as:\n\n$$\nCPT_{p, rec} = frac{C_{p}}{C_{total}}  times CPT_{iss}\n$$\n\nwhere:\n\n- $C_{p}$ is the amount of FLR tokens that provider $p$ is adding to the pool.\n- $C_{total}$ is the amount of FLR tokens in the pool before adding the new tokens.\n- $CPT_{iss}$ is the circulating amount of collateral pool tokens.\n\nWhen a pool is first created, $CPT_{p, rec} = C_{p}$.\n\nThe amount of FLR collateral a provider receives when they redeem their CPT is calculated using the opposite formula:\n\n$$\nCPT_{p, rec} = C_{total} times { CPT_{p, red} over CPT_{iss} }\n$$\n\nwhere:\n\n- $CPT_{p, red}$ is the amount of CPT the provider is returning to the pool.\n\n---\n\nThe following example shows conversion of CPTs.\n\n|                                                                                       | FLR in pool | Issued CPTs |\n| ------------------------------------------------------------------------------------- | ----------: | ----------: |\n| An agent creates a new vault. The collateral pool is initially empty of FLR and fees. |           0 |           0 |\n| Alice deposits 100 FLR and gets 100 CPTs in return.                                   |         100 |         100 |\n| Bob deposits 200 FLR and gets 200 CPTs in return.                                     |         300 |         300 |\n| Alice redeems 50 CPTs and receives 50 FLR in return.                                  |         250 |         250 |\n\nNote that in general 1 FLR does not always correspond to 1 CPT, because of mechanisms like the [top-up](#top-up), for example.\n\n</details>\n\n## Collateral Ratio\n\nThe collateral ratio (CR) is the ratio between the value of all the tokens used as collateral and the total value of the underlying assets held by an agent at any given time.\nThe agent's vault and the collateral pool each has its own unique collateral ratio, which is constantly changing as the value of the underlying assets and the collateral change.\nThese values are obtained using the [FTSO](/ftso/overview).\n\nThe following example shows vault and pool CR:\n\n:::info[Vault and pool CR]\n\nAssume an amount of FAssets currently valued at $1000 USD, backed by $1500 worth of USDC in vault collateral and $2000 worth of FLR in pool collateral.\n\nThe resulting vault CR is: $$ frac{text{$1500}}{text{$1000}} = 1.5 $$\n\nThe resulting pool CR is: $$ frac{text{$2000}}{text{$1000}} = 2 $$\n\n:::\n\nSeveral thresholds are defined for the collateral ratio, and they are used at different times during the FAsset operations.\nSome are set by the system, and others are set by the agent:\n\n### System-Wide Thresholds\n\nThe following thresholds are set by the FAssets system's governance and are the same for all agents.\n\n#### Minimal CR\n\nThe lowest collateral ratio the agent vault and the collateral pool must maintain so that enough collateral exists to insure the minted FAssets and to compensate for redemption payments that fail. The minimal CR can be different for each type of collateral.\n\nIf an agent's CR remains below the minimal CR for longer than a governance-set amount of time, [liquidations](/fassets/liquidation) can start.\n\n#### Liquidation CR\n\n**Liquidation CR**: An agent's position is unhealthy when the agent's vault CR or pool CR fall below their minimal CR.\nHowever, as long as the CR remains above liquidation CR, the CR can briefly fall below the minimal CR.\n\nDuring this time, the agent can either deposit more collateral or self-close some backed FAssets to improve the position.\n\nHowever, if the CR falls below the liquidation CR, liquidations can start immediately.\n\nThe value of each liquidation CR is approximately 10% less than the minimal CR.\n\n:::info[Example liquidation CR]\n\nAssume the **minimal CR** is 1.4 and the **liquidation CR** is 1.3.\n\nIf the agent's vault CR drops below 1.3, the agent's position can be liquidated immediately.\nIf the agent's vault CR drops below 1.4 but not below 1.3, the agent has some time to amend the position before it can be liquidated.\n\nAdjusted for the collateral pool's minimal CR, the same example applies to the collateral pool.\n\n:::\n\n#### Safety CR\n\nIf one or both of the collateral types fall below liquidation CR or below the minimum CR for a longer period of time, liquidation occurs.\nWhen the offending collateral reaches a healthy CR again, the liquidation stops.\nTo prevent the agent from immediately reverting into liquidation after a small price change, the CR must reach the safety CR before it can start operating normally again and liquidation stops.\n\nEach of the collateral types, the agent's vault and the collateral pool, has its own unique safety CR.\n\n### Agent Thresholds\n\nThe following thresholds are set by each agent according to their own preferences.\n\n<ThemedImage\n  alt=\"FAssets Collateral Ratio\"\n  sources={{\n    light: useBaseUrl(\"img/fassets/flare_fassets_collateral_ratio_light.svg\"),\n    dark: useBaseUrl(\"img/fassets/flare_fassets_collateral_ratio_dark.svg\"),\n  }}\n/>\n\n#### Minting CR\n\nFor each mint done by an agent, the maximum amount allowed to be minted is calculated so that the CR for the agent's vault and the CR for the agent's collateral pool after the mint remain higher than the minting CR for each collateral type.\nTo reduce the threat of liquidation, agents should set the minting CR well above the minimal CR to accommodate price fluctuations that might occur before the CR falls below the minimal CR after the mint and minting is no longer possible.\n\n#### Exit CR\n\nAfter a user redeems CPTs, the pool CR must be more than the exit CR. If the pool CR is already below the exit CR, redemption cannot occur.\nThe exit CR is for the collateral pool only.\n\n#### Top-up CR\n\nTo incentivize healthy collateral pools, if the pool CR falls below the top-up CR, anyone can add collateral to the pool and receive [CPTs](#pool-collateral) at a reduced price. This [top-up mechanism](#top-up) decreases the likelihood of liquidations because of a low amount of pool collateral.\n\n## Minting Fees and Debt\n\nAs part of the minting process, users pay a [minting fee](/fassets/minting#fees) on the underlying chain.\nThe agent's share of this fee remains on the underlying chain, whereas the pool's share triggers the minting of an equivalent amount of FAssets on the Flare network.\n\nThese FAssets coming from the minting fee are added to the collateral pool, where they are shared between collateral providers in proportion to the amount of CPTs that providers have.\nAt any time, providers can claim their due share of the fees in the pool.\nWhen providers exit the collateral pool by redeeming their CPTs, any remaining unclaimed fee is automatically transferred to them.\n\nProviders are naturally only entitled to the minting fees accrued after they entered the pool.\nTherefore, providers entering a pool with preexisting fees are assigned a **fee debt**.\nThe amount of fees a provider can actually withdraw from the pool is calculated by first subtracting their debt from the total amount of fees in the pool.\nIn this way, the amount of fees that a provider can withdraw upon entering a pool is exactly zero.\n\nA provider's fee debt:\n\n| Increases when the provider                 | Decreases when the provider                    |\n| ------------------------------------------- | ---------------------------------------------- |\n| Enters a pool which already has fees in it. | Exits the pool, partially or completely.       |\n| Withdraws FAsset fees.                      | Deposits FAssets, paying off part of the debt. |\n\nIt is worth noting that:\n\n- When a provider withdraws fees, their debt increases by the same amount.\n- Since CPTs are ERC-20 tokens, a secondary market for them is expected to develop.\n  If CPTs become more valuable than the FAsset fees they represent, returning the FAssets and paying off part of their fee debt might be more lucrative for providers.\n\n<details>\n<summary>Fee entitlement formulae and examples.</summary>\n\nThe following formulas consider all the above information to calculate each provider's due share of FAsset minting fees.\n\nThe amount of debt a provider $p$ is assigned upon entering a pool is calculated as:\n\n$$\nfee_debt_p = { added_collateral_p over collateral_in_pool } times fees_in_pool\n$$\n\nwhere:\n\n- $added_collateral_p$ is the amount of FLR tokens that provider $p$ is adding to the pool.\n- $collateral_in_pool$ is the amount of FLR tokens in the pool before adding the new tokens.\n- $fees_in_pool$ is the amount of FAsset minting fees currently in the pool.\n\nThe following formulas are based on the concept of **virtual fees**, which are the fees that a provider would be entitled to if they had no fee debt.\n\nThe **total virtual fees** is the sum of all provider's virtual fees and can be expressed as:\n\n$$\ntotal_virtual_fees = fees_in_pool + total_fee_debt\n$$\n\nwhere:\n\n- $total_fee_debt$ is the sum of the fee debt held by all providers $= sum_p fee_debt_p$\n\nThen, the virtual fees due to a provider $p$, i.e., the amount of FAsset minting fees they would be entitled to if they had no debt, are:\n\n$$\nvirtual_fees_p = { CPT_p over currently_issued_CPT } times total_virtual_fees\n$$\n\nwhere:\n\n- $CPT_p$ is the amount of CPTs provider $p$ holds.\n- $currently_issued_CPT$ is the circulating amount of CPTs.\n\nFinally, the amount of fees from the pool that a provider $p$ is free to withdraw at any given time is:\n\n$$\nfree_fees_p = virtual_fees_p - fee_debt_p\n$$\n\nwhere:\n\n- $fee_debt_p$ is the amount of fee debt that provider $p$ holds.\n\n---\n\nThe following example shows fee entitlement.\n\n|                                                                       | FLR in pool | Fees in pool | Total fee debt | Total virtual fees |\n| --------------------------------------------------------------------- | ----------: | -----------: | -------------: | -----------------: |\n| An agent creates a new vault.                                         |           0 |            0 |              0 |                  0 |\n| Alice deposits 100 FLR and gets 100 CPTs in return.                   |     **100** |            0 |              0 |                  0 |\n| 10 FAssets of fees are added to the pool due to a mint.               |         100 |       **10** |              0 |             **10** |\n| Bob deposits 100 FLR and gets 100s CPT in return.                     |     **200** |           10 |         **10** |             **20** |\n| 10 more FAssets of fees are added to the pool due to another mint.    |         200 |       **20** |             10 |             **30** |\n| Alice withdraws 10 FAssets of fees.                                   |         200 |       **10** |         **20** |                 30 |\n| Bob exits the pool by returning the 100 CPTs and withdrawing 100 FLR. |     **100** |        **5** |         **10** |             **15** |\n\nAfter step **4**, Bob is not entitled to any of the fees in the pool:\n\n- Bob is assigned an initial fee debt of 10 FAssets, according to the $fee_debt_p$ formula in the box above.\n- As a result, the total virtual fees are increased to 20 FAssets. 10 of them are in fees, and 10 of them are in debt.\n- Each user now holds half the total CPTs, therefore they are allowed to withdraw half the virtual fees, this is, 10 FAssets each.\n- Alice has no debt, so she can withdraw 10 FAssets, which is all the fees in the pool, because she was the only CPT holder when these fees were accrued.\n- Conversely, Bob has 10 FAssets of debt, so he can't withdraw any of the fees.\n\nAfter step **5**, the new fees are shared between both users, and the previous 10 FAssets still belong to Alice:\n\n- The 10 FAssets in new fees increase the total virtual fees to 30.\n- Both users are entitled to half of the total, which is 15 FAssets each.\n- Alice has no debt, so she can withdraw 15 FAssets: the initial 10 plus half of the 10 that were added to the pool afterwards.\n- Bob has 10 FAssets of debt, so he can only withdraw 5, this is, his entitlement (15) minus the debt (10).\n\nAfter step **6**:\n\n- The 10 FAssets that Alice has withdrawn have converted into debt for her.\n- However, this action does not change the total virtual fees because the sum of fees in the pool and total debt remains constant.\n- Therefore, both users are still entitled to 15 FAssets each.\n- However, now Alice has 10 FAssets of debt, so she can withdraw only 5 more.\n- Nothing has changed for Bob, who can still withdraw 5 FAssets.\n\nIn step **7**:\n\n- Bob is returning 100 CPTs, which is 50% of the circulating CPTs, so he is entitled to half the total virtual fees, 15 FAssets.\n- Because he is exiting the pool, all his debt, which is 10 FAssets, must be cancelled.\n- He can withdraw the remaining 5 FAssets from the fees pool.\n- After Bob withdraws his 5 FAssets, the pool contains only 5 FAssets, which correspond to the amount that Alice can withdraw.\n\n</details>\n\n## Transferable and Locked CPTs\n\nCPTs can always be **redeemed** by exiting the pool, but only the portion above the fee debt can be **transferred** to another account; therefore, CPTs held by providers are divided into two types.\n\n### Transferable\n\nTokens whose time lock has expired and are also free of fee debt.\nThese tokens are fungible, and they can be transferred or traded just like any other ERC-20 token.\n\n### Locked\n\nThe CPTs serve only as proof of ownership of some of the collateral in the pool, and they cannot be transferred nor traded.\n\nLocked CPTs are one of the following types:\n\n- **Time-locked**: Tokens whose time lock has not expired must wait to become transferable or redeemable.\n- **Debt-locked**: Tokens corresponding to an amount of fees below the provider's fee debt cannot be transferred because they would need to carry the debt with them.\n  However, they can be [redeemed](#cpt-redemption).\n\n  As new fees arrive in the pool, some previously debt-locked tokens become transferable.\n\n  These CPTs can also become transferable by adding FAssets to the pool, which settles, either partially or completely, the fee debt.\n\n<details>\n<summary>CPT transferability formulae and examples.</summary>\n\nThe amount of CPTs that a given provider $p$ can transfer is calculated as:\n\n$$\ntransferable_CPT_p = { free_fees_p over virtual_fees_p } times CPT_p\n$$\n\nwhere:\n\n- $free_fees_p$ is the amount of fees from the pool that a provider $p$ can withdraw, as defined in the previous formula box.\n- $virtual_fees_p$ is the amount of FAsset minting fees that provider $p$ would be entitled to if they had no debt, as defined in the previous formula box.\n- $CPT_p$ is the amount of CPTs provider $p$ holds.\n\nAccordingly, the amount of CPT that is locked and cannot be transferred is calculated as:\n\n$$\nlocked_CPT_p = { fee_debt_p over virtual_fees_p } times CPT_p\n$$\n\nAs new minting fees arrive in the pool, the $transferable_CPT_p$ of all providers also increases.\n\nConversely, when a provider withdraws fees from the pool, their debt increases in the same amount, and $total_virtual_fee$ remains the same.\nTherefore, only that provider's $transferable_CPT_p$ is reduced, without affecting the rest of the providers.\n\n---\n\nThe following example shows transferability of CPTs\n\n|                                                                    | Issued CPTs | Fees in pool | Total fee debt | Total virtual fees |\n| ------------------------------------------------------------------ | ----------: | -----------: | -------------: | -----------------: |\n| An agent creates a new vault.                                      |           0 |            0 |              0 |                  0 |\n| Alice deposits 100 FLR and receives 100 CPTs.                      |     **100** |            0 |              0 |                  0 |\n| 10 FAssets of fees are added to the pool due to a mint.            |         100 |       **10** |              0 |             **10** |\n| Alice withdraws 5 FAssets of fees.                                 |         100 |        **5** |          **5** |                 10 |\n| 10 more FAssets of fees are added to the pool due to another mint. |         100 |       **15** |              5 |             **20** |\n| Alice transfers 75 CPTs to Bob.                                    |         100 |           15 |              5 |                 20 |\n| Alice exits the pool by returning her remaining 25 CPTs.           |      **75** |           15 |          **0** |             **15** |\n\nAfter step **2**, all of Alice's CPTs are transferable because she has no debt.\n\nAfter step **3**, all of Alice's CPTs continue to be transferable, and she is entitled to 100% of the fees in the pool.\nIf she transferred or traded his CPTs, the recipient of those CPTs would be entitled to the fees.\n\nAfter step **4**, only half of Alice's CPTs are transferable (50 CPTs). The other half is debt-locked.\n\nAfter step **5**, only 25% of Alice's CPTs remain locked (25 CPTs), which correspond to her 5 FAssets of debt.\n\nAfter step **6**:\n\n- Alice has 25 CPTs, which entitle her to 5 FAssets of virtual fees.\n  After subtracting her 5 FAssets of fees, her free fees are zero, which means she cannot withdraw any more fees.\n- Bob has 75 CPTs and no debt, so he is entitled to 15 FAssets of fees, which are all the fees in the pool.\n\nIn step **7**:\n\n- Alice is returning 25 CPTs, which is 25% of the circulating CPTs, so she is entitled to 25% of the total virtual fees, which is 5 FAssets.\n- Because she is exiting the pool, all her debt, which is 5 FAssets, must be cancelled.\n- Her $free_fees_p$ are 0, so she cannot take any of the remaining fees in the pool.\n- The 15 FAssets that remain in the fee pool now belong entirely to Bob, who holds 100% of all the issued CPTs, which is 75 CPTs.\n\n</details>\n\n## CPT Redemption\n\nWhen collateral providers exit the pool by redeeming their CPTs, the FAssets system burns them and returns the appropriate share of the collateral plus the share of [FAsset-minting fees minus any FAsset-fee debt](#minting-fees-and-debt).\n\nProviders also have the option to exit the pool partially, by redeeming only some of their CPTs.\nIn this case, they can choose one of the following options to manage their due FAsset fees: withdraw the fees, reduce the fee debt, or both, keeping the current fee-to-debt-ratio.\n\nHowever, providers can exit, either fully or partially, only when the [collateral ratio CR](#collateral-ratio) is high enough.\nAfter they exit, the **CR** must be higher than the **exit CR** to prevent their exit from reducing the **CR** to a dangerous level.\n\nTherefore, exits are impossible when the **CR** is below the **exit CR**.\nIn this case, if providers have enough FAssets, they can exit by **self-closing**, which burns enough of their FAssets, plus their fees, to release their collateral.\n\nProviders are mainly compensated in underlying assets for the burned FAssets, depending on the [number of lots](/fassets/minting#lots) of FAssets that need to be redeemed:\n\n- If more than 1 lot needs to be redeemed, the value of the burned FAssets is redeemed through the standard [redemption process](/fassets/redemption).\n- If less than 1 lot needs to be redeemed, the agent buys the underlying funds from the user using vault collateral, at the price reported by the [FTSO](/ftso/overview) minus a percentage defined by the agent.\n  This purchase by the agent occurs because fees on underlying chains can be expensive, which makes redemption of small quantities too expensive for the agent.\n\n  Providers can always request this option instead of receiving underlying tokens.\n  Also, if enough vault collateral is not available, pool collateral is used instead.\n\n:::warning\nIn the case where the agent does not redeem in the underlying asset, the FAssets system pays the provider in collateral from the agent's vault because the pool collateral backing the redeemed FAssets is already withdrawn.\n\n    When this type of redemption occurs, users might receive less collateral than they would have received if they had made a normal redemption.\n\n:::\n\n## Agent Stake\n\nAgents must have a stake in their collateral pools, which means they must hold the amount of CPTs proportional, by a system-defined constant, to the backed amount of FAssets.\nThe maximum amount of minting is limited by the amount of collateral pool tokens held by the agents.\nThe agents' tokens are locked, which means they cannot be redeemed or transferred, while agents back these FAssets.\n\nWhen the agent's portion of the collateral pool is below the threshold, new mintings are not allowed.\nHowever, this situation does not trigger a liquidation because only the total pool stake matters when collateral needs to be redeemed or a liquidation payment needs to be made.\n\nIf an agent's actions force a payment to be made from the collateral pool, the agent's CPTs, valued by the paid native tokens and recalculated by the collateral-pool-price formula, are burned.\nThese actions can cause the agent's CPTs to be burned:\n\n- When a redemption payment fails, when enough vault collateral to compensate the redeemer is not available, or when the system is set to automatically pay for redemption failures from the collateral pool.\n- Liquidation because the CR of the vault collateral is too low.\n- Full liquidation because of an [agent infraction](/fassets/redemption#redemption-payment-failure) during a transfer on an underlying chain.\n\n## Top-up\n\nTo reduce the likelihood of liquidations because the pool collateral is too low, the pool can be topped up at a reduced price when the **CR** is above the **top-up CR**. A top-up mechanism for vault collateral is not available. To prevent liquidation, agents can add vault collateral any time.",
    "import ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n\nFAssets is a trustless, over-collateralized bridge connecting non smart contract networks to Flare.\nIt enables the creation of wrapped tokens (`FAssets`) for assets like BTC, DOGE and XRP.\nThese tokens can participate in Flare's DeFi ecosystem or be redeemed for their original assets.\n\nFAssets are powered by Flare's enshrined data protocols:\n\n- **[Flare Time Series Oracle (FTSO)](/ftso/overview):** Provides decentralized price feeds.\n- **[Flare Data Connector (FDC)](/fdc/overview):** Verifies off-chain actions, such as transactions on other blockchains.\n\nEach FAsset is backed by a mix of collateral, including:\n\n1. Stablecoin or ETH collateral.\n2. FLR (Flare's native token) or SGB (Songbird's native token) collateral.\n\nAgents and a community-provided collateral pool ensure trustlessness through over-collateralization.\n\n## FAsset Workflow\n\n<ThemedImage\n  alt=\"FTSO Update Architecture\"\n  sources={{\n    light: useBaseUrl(\"img/fassets/flare_fassets_architecture_light.svg\"),\n    dark: useBaseUrl(\"img/fassets/flare_fassets_architecture_dark.svg\"),\n  }}\n/>\n\nAnyone on the Flare blockchain can mint FAssets, which are wrapped versions of original tokens from other blockchains, known as underlying networks. The original tokens from these chains, such as Bitcoin (BTC), Litecoin (LTC), Dogecoin (DOGE), and XRP, are referred to as underlying assets. For example, the FAsset version of Bitcoin is known as FBTC.\n\n### Minting\n\n    - A user (minter) selects an agent and pays a fee to reserve collateral.\n    - If the agent requires a handshake, the user's address is verified before proceeding with collateral reservation.\n    - The user sends the underlying asset (e.g., BTC) to the agent.\n    - The FDC verifies the transaction.\n    - The equivalent FAssets (e.g., FBTC) are minted as ERC-20 tokens on Flare.\n\n### Usage\n\nMinted FAssets can be used in DeFi applications on Flare or bridged to other chains.\n\n### Redeeming\n\nUsers can redeem FAssets for the original underlying assets at any time.\n\n## Key Participants\n\n### Agents\n\nAgents manage the infrastructure and operations of the FAssets system, including:\n\n- Holding the underlying assets.\n- Providing collateral for minting and redemption.\n- Redeeming underlying assets for users.\n\nEach agent is verified through governance and uses the following addresses:\n\n- **Work Address:** A hot wallet for executing operations.\n- **Management Address:** A cold wallet for secure administrative actions.\n\nAgents must comply with the **backing factor**, which ensures sufficient collateral is locked to back FAssets.\n\n### Users\n\nUsers interact with the system by:\n\n- **Minting:** Depositing underlying assets to mint FAssets.\n- **Redeeming:** Exchanging FAssets for the original underlying assets.\n\nEligibility:\n\n- No restrictions—anyone can mint or redeem FAssets.\n\n### Collateral Providers\n\nCollateral providers supply native FLR tokens to an agent's collateral pool and earn a share of minting fees as long as their tokens remain locked.\n\n### Liquidators\n\nLiquidators maintain system health by:\n\n- Burning FAssets in exchange for collateral when an agent's collateral drops below the required minimum.\n- Earning rewards, including premiums on the collateral received.\n\nEligibility:\n\n- Open to all—anyone can become a liquidator.\n\n### Challengers\n\nChallengers monitor agents for illegal transactions that reduce collateral below the backing factor. They:\n\n- Submit proof of illegal actions to the system.\n- Earn rewards from the agent's vault upon successful challenges.\n\nIf an agent is found in violation, they enter **full liquidation**, permanently restricting them from new minting operations.\n\n:::tip[What's next]\n\nLearn more about the different components and processes involved in FAssets - [collateral](/fassets/collateral), [minting](/fassets/minting), [redemptions](/fassets/redemption), and [liquidations](/fassets/liquidation).\n\n:::",
    "Minting FAssets is the process of wrapping underlying tokens from connected blockchains into FAssets to be used on the Flare blockchain.\nAny user can mint FAssets.\n\n## Minting Process\n\nThis is the summary of the minting process:\n\n1. The minter chooses an agent from the publicly available [agent list](/fassets/overview#agents).\n   The choice is based on the minting fee or the amount of free collateral, which must be enough to back the amount to be minted.\n2. The minter sends to the Asset Manager contract a collateral reservation transaction (CRT). The CRT includes:\n\n   - The address of the chosen agent\n   - The amount to mint, which must be a whole number of [lots](/fassets/minting#lots)\n   - The [collateral reservation fee (CRF)](#fees) to compensate for the locked collateral\n\n3. The Asset Manager contract locks the agent's collateral in the amount needed to back the whole minting until the underlying payment is proved or disproved.\n   The collateral reservation response is an event issued by the contract, which includes:\n\n   - The agent's address to which the minter must send funds on the underlying chain.\n   - The amount to be paid on the underlying chain, which corresponds to the amount to be minted plus the agent's fee.\n   - The payment reference, which is a unique 32-byte number the minter must include as a memo in the payment on the underlying chain.\n   - The last underlying block and the last underlying timestamp to pay.\n     Valid payments occur either before the last block or before the last timestamp, both inclusive.\n\n     The time to pay is measured both in the underlying chain's block numbers and block times because the underlying chain might halt for a long time.\n     In this situation, the block numbers do not increment but the block timestamps do.\n\n4. After this event is emitted, the minter must pay the full underlying amount plus the fee to the agent on the underlying chain in a certain amount of time.\n5. Using the Data Connector, the minter proves the payment on Flare.\n6. After the payment is proved, the minter executes the minting process, which sends FAssets to the minter's account.\n\nWhen minting is executed, the [minting fee](#fees) is split between the agent and the pool:\n\n- The percentage split is set by the agent.\n- The agent's share increases the free balance on the agent's underlying address.\n  The free balance is the part of the balance in an agent's underlying address that the agent can withdraw.\n  It is composed of minting fees, redemption fees, and self-closed FAssets.\n- The pool share gets minted as FAssets and credited to the collateral pool contract.\n\nAfter minting is complete, the Asset Manager creates a [redemption ticket](#redemption-tickets-and-the-redemption-queue), which includes the mint amount and the name of the agent backing the minting.\n\n## Fees\n\nThe following fees are paid to mint FAssets:\n\n### Collateral Reservation Fee\n\nThe **collateral reservation fee (CRF)** is paid in native tokens by the minter at the same time the [collateral reservation](#minting-process) is made.\nThe CRF is defined by governance as a percentage of the minted value, and the same fee applies to all agents.\n\nThe purpose of the CRF is to compensate the agent and collateral pool token (CPT) holders for the time their collateral is locked during the minting process.\n\n- If the minter does not pay on the underlying chain, the CRF is distributed to the agent and the pool in the same share as the minting fee.\n- If the minter successfully pays on the underlying chain, the CRF is also distributed to the agent and the pool in the same manner.\n\nFor underlying chains where proving payments takes longer, the CRF might be set higher to account for the extended lock-up time.\nThe CRF percentage is defined by governance and may vary based on the performance of the underlying chain.\n\n### Minting Fee\n\nThe **minting fee** is paid by the minter with the underlying currency as a percentage of the minted amount, and each agent can declare a different fee value.\nThis fee is the main source of revenue for the agent and the CPT holders.\n\nThe minting fee is further divided in two shares:\n\n#### Agent share\n\nThis share remains in the agent's underlying account but is not marked as being in use. The agent can use this balance freely.\n\n#### Pool share\n\nThis share is minted as FAssets and sent to the [collateral pool](/fassets/collateral#pool-collateral). The percentage of this share is defined by the agent and can be changed by the agent after a delay that provides time for minters to notice the change.\n\n### Trailing Fees\n\nTo ensure that agents and collateral pool providers receive steady income, the FAsset system offers an option to enable FAsset token transfer fees, also known as trailing fees.\n\nWhenever FAssets are transferred, a small proportional fee is deducted and contributed to a common pool. In a regular transfer, this fee is subtracted from the payment, meaning the sender pays the exact amount specified in the transfer request, while the receiver ends up receiving a slightly lower amount.\n\nThere is also a method where the receiver gets the exact amount specified in the call, while the sender pays more. The fee percentage is a system setting and is typically quite small.\n\nThe fees are collected over a certain period, known as an epoch, after which they are distributed among all agents in proportion to each agent's average backed amount during that epoch.\n\nAn agent can claim their portion of the fees for an epoch at any time after the epoch ends and before it expires. When making a claim, the fee is distributed between the agent and the pool in the same manner as the minting fee, based on the agent's settings.\n\n## Handshake\n\nCertain jurisdictions may require agents to confirm that those minting or redeeming assets are not engaged in illegal activities. Although the FAsset system does not impose this requirement, it does provide agents with the option to utilize an external service to verify the identities of minters and redeemers before proceeding with minting or redemption.\n\nTo enable the handshake, the agent must configure this setting in the agent settings. Once this is enabled, minting and redemption will involve an additional step.\n\n### Minting\n\nThe FAssets agent verifies the minter after the user completes the collateral reservation and pays the collateral reservation fee. The agent is responsible for confirming or rejecting the minter's status. If the agent does not respond within a certain timeframe, the minter has the option to cancel the reservation and receive a full refund of the collateral reservation fee.\n\nTo enable the agent to verify the minter, the collateral reservation must include the address (or multiple addresses, in the case of UTXO chains) from which the payment will be made. If multiple addresses are provided, all of them must be used for the payment.\n\nUsers must wait up to 60 seconds before they can cancel their request. If the agent accepts within this time, the user can proceed to mint by depositing the underlying assets. Therefore, it is important for the agent to respond quickly. If the agent does not respond in time, it will depend on whether the user is willing to wait; otherwise, the agent will simply miss the opportunity to mint, but there will be no loss of tokens.\n\nWhen the agent rejects the minter's request or the minter decides to cancel, the minter will receive a refund of the collateral reservation fee, minus a small percentage (e.g., 5%) that is burned. This burned amount is designed to prevent abuse of the agent by stopping someone from repeatedly reserving collateral from a sanctioned address. If the burned percentage were zero, an attacker could exploit the system without any cost.\n\n### Redemption\n\nThe agent has a few minutes to verify the redeemer's addresses and either approve or reject the redemption. If rejected, another agent can take over. If no one takes over, the minter receives the full amount plus a small premium from the rejecting agent, with the premium for a handshake rejection being smaller than for a redemption default.\n\n:::info\n\nAn agent may only fulfill part of a request due to insufficient minting or too many small tickets. In these situations, the system allows for a “partial takeover”, where the remaining portion can either be taken over by another agent or covered by collateral from the agent who declined the redemption.\n\n:::\n\n## Payment Failure\n\nTo finalize the minting, the minter must pay the agent on the underlying chain and prove the payment was received.\nIf the payment is not completed in the time frame defined by the underlying chain block and timestamp, the agent must prove nonpayment to release the locked collateral.\nAfter nonpayment is proved, the agent's collateral that was reserved by the [CRT](#minting-process) is released, and the agent receives the [CRF](#collateral-reservation-fee).\n\nThe [agent's registration process](/fassets/overview#agents) verifies that the agent's underlying address does not purposefully block payments and illegally collects the CRF.\n\nThe following example shows proof of nonpayment.\n\n<details>\n<summary>Proof of nonpayment example.</summary>\n\nThe following example shows how the nonpayment proof works.\n\nThe Data Connector's [payment nonexistence attestation type](https://gitlab.com/flarenetwork/state-connector-protocol/-/blob/main/specs/attestations/active-types/ReferencedPaymentNonexistence.md?ref_type=heads) proves nonpayment.\n\n1. The minter sends a request to mint FBTC.\n   At the time the request is received, the last mined block on the Bitcoin chain is number 92, with timestamp 09:00 AM.\n\n   The Asset Manager answers with the following threshold settings to complete the payment:\n\n   - Block 100\n   - Timestamp 11:00 AM\n\n2. Block 101 is mined with timestamp 10:59 AM.\n   At this point, the payment can still happen.\n3. Block 102 is mined with timestamp 11:04 AM.\n   Payment did not occur.\n   After this block is finalized, nonpayment can be proved.\n\n4. Block 109 is mined.\n   In this case, 7 blocks on the Bitcoin blockchain are enough blocks to assume finality.\n5. The agent sends a nonpayment attestation request, which includes the payment reference, the underlying amount that was expected, the last block (100), and the last timestamp (11:00).\n6. Attestation providers attest to the following facts:\n\n   - Block 102 is finalized and has both the number and timestamp larger than required.\n   - Until this block, the required payment either was not made or was not sufficient.\n\nNow, the mint-payment failure and the nonpayment proof can be submitted to the FAssets system.\n\n</details>\n\n## Edge Cases\n\n### Unresponsive minter\n\nAfter a successful payment, the minter might not provide the payment proof needed to complete the minting process.\nIn this case, the agent can present the payment proof and execute minting at any time.\nFAssets are still transferred to the minter's account, and the agent's collateral becomes redeemable.\n\n### Expired proof\n\nProofs provided by the Data Connector are available for only 24 hours, approximately.\nIf neither the minter nor the agent presents the proof of payment or nonpayment within 24 hours, the regular minting process cannot continue, and the agent's collateral could be locked indefinitely.\n\nIn this case, the agent can still recover the collateral by buying it back with native tokens.\nThe recovery is accomplished with the following procedure:\n\n    1. Request the proof from the time when the deposit should have happened.\n     The Data Connector's answer will indicate that payments proofs are no longer available for that time.\n    2. Provide the amount of FLR collateral equivalent to the price of the underlying assets that should have been deposited.\n    3. Present the proof.\n\nBecause a successful deposit cannot be proven, the FAssets system burns the amount of collateral in native tokens provided by the agent.\nAfter the burn is complete, the rest of the agent's collateral is released, both from his vault and the collateral pool.\n\n:::warning\nNote that this procedure should be used only in rare cases because providing timely payment or nonpayment proofs is always more advantageous for agents.\n:::\n\n## Duration of the Minting Process\n\nThe duration of the minting process depends mainly on the speed of the underlying chain.\nThe maximum duration of the process is the sum of:\n\n- A system-defined maximum time for deposit.\n  It is either a few blocks on the underlying chain or a few minutes, whichever is longer.\n- The underlying chain's finalization time.\n- The Data Connector proof time, which is approximately 3 - 5 minutes, independent of the underlying chain.\n\nOn fast chains like XRPL, the maximum total time is less than 10 minutes, while on Bitcoin it is approximately 1.5 hours.\nFor payment failures, the agent needs to wait the maximum time, as defined above, before the nonpayment proof can be retrieved.\n\n## Minting Payment Reference\n\nThe system generates a unique payment reference at the time of the collateral reservation request.\nThe minter must include the payment reference in a memo field when the underlying payment transaction is made.\n\nThe payment reference ensures the payment transaction cannot be used by another entity that might claim to have made the payment on the underlying chain and receive the minted FAssets in return.\nAdditionally, if the payment time expires before payment is done, the agent can prove that no payment with that reference was made.\n\nA similar payment reference for the same purposes is generated for [redemptions](/fassets/redemption).\n\n## Redemption Tickets and the Redemption Queue\n\nFor every minting operation, a redemption ticket is created.\nThis ticket references the minted amount and the agent that is backing the minting.\n\nThe redemption tickets are ordered in a queue that determines the next agent to be [redeemed](/fassets/redemption) against according to the first in, first out method (FIFO).\nIn other words, the first redemption ticket created will be the first redemption ticket processed.\nThe FIFO queue impartially ensures that all agents have the opportunity to fulfill the duties of their role.\n\nThe following example shows how the redemption queue works.\n\n<details>\n<summary>Redemption queue example.</summary>\n\n1.  Bob mints 10 FXRP with Agent 1.\n2.  Alice mints 20 FXRP with Agent 2.\n3.  Charlie mints 5 FXRP with Agent 1.\n\n    After Bob, Alice, and Charlie have minted their FAssets, the redemption queue according to the FIFO method is:\n\n    1. Agent 1 with 10 FXRP.\n    2. Agent 2 with 20 FXRP.\n    3. Agent 1 with 5 FXRP.\n\n4.  Dana redeems 25 FXRP.\n    To redeem 25 FXRP:\n\n    1. Agent 1 pays 10 FXRP.\n    2. Agent 2 pays 15 FXRP.\n\n    Now, the redemption queue according to the FIFO method is:\n\n    1. Agent 2 with 5 FXRP.\n    2. Agent 1 with 5 FXRP.\n\n</details>\n\n## Lots\n\nEvery minting and redemption must be made in a whole number of lots.\nLots serve the following purposes:\n\n- They prevent underlying transaction fees from exceeding minting or redemption fees.\n- They restrict large numbers of very small redemption tickets from being submitted, which would increase gas costs.\n\nTherefore, the amount of tokens in a lot (the _lot size_) varies for each underlying chain.\nFor example, on the XRPL chain, a lot can be as small as 10 XRP because transaction fees are low.\nOn the other hand, on the Bitcoin chain, lots might need to be as big as 0.25 BTC or more because transactions are far more expensive.\n\nOver time, the lot size can be updated to reflect price fluctuations of the underlying asset.\nOnly a governance call can update the lot size, and it can be updated only by a limited amount per day.\n\n## Dust\n\nSome processes generate a fractional number of lots:\n\n- On minting, part of the minting fee is minted as the FAsset fee to the collateral pool.\n  This value is usually less than 1 lot.\n- When the lot size is changed, redemptions close only a whole number of lots of each redemption ticket, which leaves the remainder unredeemed.\n\nThese amounts, known as dust, cannot be redeemed directly because redemption requires a whole number of lots.\n\nIn such cases, the generated dust is not included in any redemption ticket.\nInstead, each agent's dust is accumulated until the dust amounts to a whole lot.\nWhen that happens, another redemption ticket is automatically created.\n\nTherefore, the dust can be recovered or destroyed in the following ways:\n\n- If the dust exceeds 1 lot during minting, the part that is a whole multiple of a lot is automatically added to the created redemption ticket.\n- If an agent does not mint any FAssets for a while but the lot size changes and several redemptions occur, enough dust might accumulate to more than 1 lot.\n\n  In this case, the part that is a whole multiple of a lot can be converted to a redemption ticket by request.\n  To prevent an inactive agent making FAssets less fungible, this request can be made by any address.\n\n- Self-closing can work with fractional lots, so it can be used to remove dust.\n- Liquidation can work with fractional lots too, so it can also be used to remove dust.\n\n## Self-Minting\n\nAgents can also act as minters and mint FAssets from their own vaults.\nThis process is called self-minting and is simpler than regular minting because neither the CRT nor the agent's fee are necessary.\n\nWhen an agent self-mints FAssets:\n\n- The agent still needs to pay the amount to mint on the underlying chain and execute the minting.\n- The self-minting operation also adds a [ticket to the redemption queue](#redemption-tickets-and-the-redemption-queue), alongside tickets added by mints done by other users.\n  All tickets are processed by the FIFO queue.\n- Only the [pool's share of the fee](#fees) must be paid.\n\nBecause self-minting is done without a collateral reservation request, in some cases, a change between the underlying deposit and the execution, such as another collateral reservation, price change which reduces the amount of free [lots](#lots), or lot-size change, might prohibit the intended number of lots to be minted.\nIf one of these changes occurs, the agent can self-mint a smaller number of lots, even 0 lots, and the remainder of the deposited underlying assets is added to the free underlying balance.\n\nAdditionally, when agents create a vault, they can choose not to make it public, so the vault can only be used to self-mint.",
    "Liquidation is the process of selling assets to bring the FAssets system back to health after an [agent](/fassets/overview#agents) becomes undercollateralized. The following types of liquidation can occur:\n\n- **Unhealthy position liquidation**: Occurs when the [collateral ratio (CR)](/fassets/collateral#collateral-ratio) of either the agent's vault or collateral pool falls below its respective [minimal CR](/fassets/collateral#system-wide-thresholds).\n  In this case, the agent's position is liquidated until the collateral ratio reaches the [safety CR](/fassets/collateral#system-wide-thresholds) or all of the backed FAssets are liquidated.\n- **Full liquidation**: Occurs when the agent makes an [illegal payment](#illegal-payments) from the underlying chain address.\n  In this case, all the FAssets backed by the agent are liquidated, and the liquidation cannot be stopped.\n\nIn both cases, [liquidators](/fassets/overview#liquidators), who can be anyone who holds FAssets, are encouraged to sell their FAssets back to the system.\nThey will be paid with the agent's collateral plus a premium, as a penalty against the agent for unhealthy positions or misconduct.\n\n## Liquidation Process\n\nWhen liquidation starts, any liquidator can send FAssets and get paid with a combination of vault collateral and pool collateral at the current asset price multiplied by a premium factor greater than 1.\nThe maximum amount of FAssets that is accepted is the amount required to make the agent's position healthy again, rounded up to the next lot.\n\nThe premium is a system-defined percentage, and it can increase through the duration of the liquidation.\nThe premium is limited to the agent's combined collateral ratio, which is the sum of the current value of the vault collateral and pool collateral divided by the current value of the backed FAsset amount.\nHowever, if this limit is reached, all the agent's backed FAssets are liquidated, and all the vault collateral and pool collateral are paid to the liquidators.\nThe liquidation-collateral payment is divided between the agent and the collateral pool.\n\nA fixed ratio (≥ 1.0) of the payment is paid from the agent's collateral, and the remainder is paid from the pool collateral.\nIf not enough of one type of collateral exists, more is paid from the other type.\n\n:::info\n\n    Illegal payments trigger a full liquidation, which involves the following additional actions:\n\n    * The liquidated agent's vault is locked so that it cannot be used to mint again.\n        If the agent wants to continue to mint FAssets, he must create a new agent vault with a new underlying address.\n    * Ongoing mintings against this agent's locked vault continue, but the minted FAssets are immediately added to the liquidation process.\n    * Ongoing redemptions continue.\n        New redemptions can start until all the agent's redemption tickets are liquidated.\n        Unfortunately, if the agent's underlying backing is unhealthy, redeemers are more likely to be paid in native tokens from the collateral pool.\n\n    This liquidation process includes the time-increasing premium, and it only stops when all the agent's collateral is liquidated.\n\n:::\n\n## Stopping Liquidations\n\nAfter liquidation of an unhealthy position starts, it can be stopped by depositing enough collateral or self-closing FAssets to reach the [safety CR](/fassets/collateral#system-wide-thresholds).\nAlso, if a change in the price pushes the CR above the [safety CR](/fassets/collateral#system-wide-thresholds), anyone can stop the liquidation by notifying the FAssets system.\n\nTo maintain a healthy account, agents should track positions and automatically top up or self-close FAssets when liquidation approaches.\nOtherwise, the agent and the liquidators compete to try to stop the liquidation.\nTo stop a liquidation, the agent's vault must reach the [safety CR](/fassets/collateral#system-wide-thresholds), which is above the minimal CR that triggered the liquidation.\n\nThe top-up mechanism can prevent liquidations caused by a low CR in the collateral pool, but full liquidations cannot be stopped.\nHowever, an agent can still self-close positions to avoid paying a premium to liquidators.\n\n<details>\n<summary>Example with small price movement.</summary>\n\nUsing BTC as underlying and USDC as collateral, an agent creates a vault to mint FBTC FAssets.\n\n1.  Initial conditions:\n\n    - The agent is backing 1 FBTC, currently valued at $20K, according to the FTSO system.\n    - The minimal CR is **1.3** for the vault collateral and **2.5** for pool collateral.\n    - The agent must hold 20% of the pool's minimal CR.\n      In this case, 20% of 2.5 times $20K is **$10K**.\n    - The underlying backing factor is 50%, so the agent needs to hold only **0.5** BTC.\n    - The liquidation premium factor is 1.1, of which 1.0 is paid in vault collateral, and 0.1 is paid in pool collateral.\n\n    At this point, the 1 FBTC is backed by:\n\n    - 0.5 BTC underlying.\n    - $26K worth of USDC vault collateral.\n\n      The vault CR is $$ frac{text{$26K}}{text{$20K}} = 1.3 $$, equal to the vault's minimal CR.\n\n    - $60K worth of FLR in pool collateral, of which $10K belongs to the agent.\n\n      The pool CR is $$ $60K over $20K $$ = 3, above the pool's minimal CR.\n\n2.  Now the price of BTC increases from $20K to $21K.\n    As a result:\n\n    - The vault CR is $$frac{text{$26K}}{text{$21K}} approx 1.24$$, **below the vault's 1.3 minimal CR**.\n    - The pool CR is $$frac{text{$60K}}{text{$21K}} approx 2.86$$, still above the pool's 2.5 minimal CR.\n      :::warning\n      Because one of the CRs is below the minimal CR, liquidation can start after a system-defined wait period.\n\n          If any of the CRs go below the liquidation CR, liquidations can start immediately.\n\n      :::\n\n3.  A liquidator notices the CR levels and decides to liquidate $10K worth of FAssets by returning 0.48 FBTC to the FAssets system.\n\n    The liquidation premium factor is 1.1, so the liquidator receives $11K worth of assets:\n\n    - $10K worth of USDC from the agent's vault collateral.\n    - $1K worth of FLR from the agent's portion of the collateral pool.\n\n      The corresponding $1K worth of CPTs are burned, so their price is unaffected.\n\n    At this point, the agent is backing 0.52 FBTC with:\n\n    - 0.5 BTC underlying.\n\n      The ratio is $$ frac{0.5}{0.52} approx 0.96 $$, well above the 50% underlying backing factor.\n\n    - $16K worth of USDC vault collateral.\n\n      The vault CR is $$ frac{text{$16K}}{text{$11K}} approx 1.45 $$, now above the vault's minimal CR.\n\n    - $59K worth of FLR in pool collateral, of which $9K belong to the agent.\n\n      The pool CR is $$ frac{text{$59K}}{text{$11K}} approx 5.36 $$, still well above the pool's minimal CR.\n\nBoth CRs are now above the minimal CR values, but liquidation does not stop until the CRs further increase up to the safety CR.\n\nIn summary, as a result of the price increase and the liquidation, around 50% of the backed FBTC was burned.\nThe actual amount of FAssets that need to be burned, though, depends on the safety CR setting.\n\n</details>\n\n<details>\n<summary>Example with large price movement.</summary>\n\nThe same setup and initial conditions as in Example 1 are used:\nUsing BTC as underlying and USDC as collateral, an agent creates a vault to mint FBTC FAssets.\n\n1.  Initial conditions:\n\n    - The agent is backing 1 FBTC, currently valued at $20K, according to the FTSO system.\n    - The minimal CR is **1.3** for the vault collateral and **2.5** for pool collateral.\n    - The agent must hold 20% of the pool's minimal CR.\n      In this case, 20% of 2.5 times $20 K is **$10 K**.\n    - The underlying backing factor is 50%, so the agent needs to hold only **0.5** BTC.\n    - The liquidation premium factor is 1.1, of which 1.0 is paid in vault collateral, and 0.1 is paid in pool collateral.\n\n    At this point, the 1 FBTC is backed by:\n\n    - 0.5 BTC underlying.\n    - $26 K worth of USDC vault collateral.\n\n      The vault CR is $$ frac{text{$26 K}}{text{$20 K}} = 1.3 $$, equal to the vault's minimal CR.\n\n    - $60 K worth of FLR in pool collateral, of which $10 K belongs to the agent.\n\n      The pool CR is $$ frac{text{$60 K}}{text{$20 K}} = 3 $$, above the pool's minimal CR.\n\n2.  Now the price of BTC increases from $20K to $30K.\n    As a result:\n\n    - The vault CR is $$ frac{text{$26 K}}{text{$30 K}} approx 0.87 $$, **way below the vault's 1.3 minimal CR**.\n    - The pool CR is $$ frac{text{$60 K}}{text{$30 K}} = 2 $$, **below the vault's 2.5 minimal CR**.\n\n    To comply with the vault's 1.3 minimal CR, the agent needs $$ 1.3 times text{$30 K} = text{$39 K} $$ of USDC vault collateral, which he does not have.\n\n    **Warning:** At this point, all the agent's FAssets backed by this vault must be liquidated.\n\n3.  A liquidator notices this situation and decides to liquidate 1 FBTC, currently worth $30K.\n\n    The liquidation premium factor is 1.1, so the liquidator receives $33K worth of assets:\n\n    - $26 K worth of USDC, which is all of the collateral in the agent's vault.\n    - $7 K worth of FLR.\n\n    Note that the portion of payment in FLR is higher than in Example 1 because enough USDC in collateral did not exist.\n\n    At this point, the agent is backing 0 FBTC, and the remaining collateral is:\n\n    - 0.5 BTC underlying.\n    - $0 worth of USDC in vault collateral.\n    - $53 K worth of FLR in pool collateral, of which $3 K belongs to the agent.\n\n      All this collateral can be freely withdrawn by its owners.\n      Because this collateral is not backing any FAssets anymore, no part of it is locked.\n\n</details>\n\n<details>\n<summary>Example with a very large price movement.</summary>\n\nA price increment such that the vault plus the pool collateral is not enough to back the minted FAssets results in a combined CR lower than 1.\nBy design, liquidation payments will never exceed the combined CR times the liquidated amount, so, in this case, liquidation is not a profitable operation.\n\nMoreover, the collateral locked in the FAssets system might not be a strong enough deterrent for agents that want to dispose of the higher-valued underlying in an illegal way.\n\n</details>\n\n## Liquidation Triggers\n\nSome events related to liquidation are not detected automatically and must be triggered by entities external to the blockchain.\nThese entities are [liquidators](/fassets/overview#liquidators) and [challengers](/fassets/overview#challengers).\n\nAnyone can be a liquidator or a challenger and earn rewards for contributing to the correct working of the FAssets system.\n\nSome triggers put an agent in liquidation mode, and some others get agents out of liquidation mode.\n\n### Liquidation-Enabling Triggers\n\n- A valid liquidation request is submitted, triggering the liquidation automatically.\n- A liquidator triggers a liquidation manually, but does not submit a liquidation request immediately, seeking a better premium, because the premium might increase as time passes.\n- A liquidator detects that the CR is below the [CCB](/fassets/collateral#system-wide-thresholds) and sets the start time for an agent.\n  This operation does not immediately trigger the liquidation.\n  Instead, it starts a timer that enables the liquidation to be triggered after a system-defined time has elapsed.\n- A [proof of illegal activity](#illegal-payments) is presented, which immediately triggers a full liquidation.\n\n### Liquidation-Disabling Triggers\n\nAfter an agent enters the liquidation state, it remains there until its CR exceeds the [safety CR](/fassets/collateral#system-wide-thresholds) again.\n\nThe following operations can increase an agent's CR and can, therefore, potentially get the agent out of the liquidation state:\n\n- Redemptions.\n- A liquidation improves the agent's position.\n- The agent deposits more collateral.\n- The agent self-closes a position.\n- After the price has moved so that the agent's position is healthy again, the agent, or someone on the agent's behalf, manually sets the liquidation state to false.\n\nExiting the liquidation state as soon as possible is in the agent's best interest, even if the agent might re-enter it again soon.\nPremiums paid to liquidators might depend on how long the agent has been in liquidation, for example.\nAlso, exiting the liquidation state resets the CCB timer.\n\n## Tracking the Underlying Balance\n\nAgents are required to keep a certain percentage of underlying asset for each backed FAsset.\nThis percentage, called the [backing factor](/fassets/overview#agents), is stored at an address on the underlying chain controlled by the agent.\n\nThis requirement is enforced by balance-tracking in the FAsset contract.\nTo track balances, the system must receive reports for each payment sent and received at the agent's address:\n\n- Incoming payments are part of the [minting process](/fassets/minting) and are updated as the process occurs.\n- Outgoing payments are either part of the [redemption process](/fassets/redemption) or illegal payments, which are penalized.\n\nChallengers maintain the health of the FAssets system by monitoring the agent's underlying address to identify illegal operations that can make the agent's underlying backing too low.\nChallengers that correctly report illegal operations receive rewards from the agent's vault collateral.\n\nThe following subsections contain details about all the topics that must be considered when monitoring an agent's underlying balance.\n\n### Chain Fees\n\nFees for gas on the underlying chain can create issues for the FAssets system, so part of tracking an agent's underlying balance involves tracking the amount spent on fees on the underlying chain.\n\nExpensive gas fees can cause an address to have fewer assets than it should have and trigger a liquidation.\nTherefore, consider these actions:\n\n- **Cap the gas usage on underlying chains**: On smart-contract chains, the Data Connector defines a cap on the gas amount to enable any simple transaction to pass.\n  If senders limit their gas amount to this cap and a transaction still fails due to insufficient gas, the failure is considered the receiver's fault, and the transaction is labeled as blocked.\n\n  The gas cap is defined by the Data Connector, not the FAssets system, because it is the Data Connector that labels transactions as blocked.\n\n- **Maintain the underlying balance**: Agents must ensure that the payment plus the transaction fee for a redemption never reduce their balance to an amount lower than the amount required to back the FAssets.\n  Agents can ensure that redemptions do not reduce that balance in several ways:\n\n  - They can honor redemptions from some other address.\n    On UTXO chains, they can also honor redemptions from a combination of addresses.\n  - They can top up the underlying address and then send proof of payment to update the tracked balance.\n    After a redemption begins, the agent has a limited time to comply, so topping-up is time-sensitive.\n\n### Underlying Withdrawals\n\nAgents might legally withdraw part of the funds on their underlying address in several ways:\n\n- **Minting fees**: A part of a minter's payment is the [mint fee](/fassets/minting#fees) in the underlying asset.\n- **Failed redemptions**: When an address is backing assets and those assets were redeemed, but the agent [does not pay the redeemer](/fassets/redemption#redemption-payment-failure), the redeemer is paid with collateral, and the agent can withdraw the assets.\n- **Liquidated assets**: If an agent's position was partially or fully liquidated, the agent can withdraw the assets.\n- **Self-closed assets**: After an agent [self-closes](/fassets/minting#self-minting), the closed assets can be withdrawn.\n\nThe FAssets system must keep track of the agent's underlying funds, so when performing the above legal withdrawals, agents must still adhere to the following process:\n\n1. Announce the withdrawal to the FAssets system and obtain a payment reference.\n2. Perform the withdrawal, using the payment reference.\n3. Use the [FDC](/fdc/overview) to obtain a proof of payment.\n4. Present the proof of payment to the FAssets system, which clears the announcement.\n\n   If the agent does not present the proof of payment, anyone can present it after a while and receive a reward from the agent's vault.\n   Enabling nonagents to present this proof helps the FAssets system keep track of underlying balances.\n\nOnly one withdrawal announcement can be active per agent at any time to prevent the agent from overwhelming the balance-tracking system with many simultaneous small withdrawals.\n\n### Illegal Payments\n\nAny challenger can report illegal payments from an underlying address and receive rewards in return.\n\nAn illegal payment always triggers a full liquidation, which cannot be stopped.\nAn agent can still escape paying the liquidation premium by self-closing before liquidators submit their liquidation requests, but the agent's vault remains unusable and must be closed.\nTo resume operations, the agent must open a new vault with a different underlying address.\n\nThe challenge system ensures that all minted FAssets are always backed by the assets on the agent's underlying address in the required percentage.\nMalicious agents might try to remove those assets in different ways.\nTherefore, challengers can report illegal activities by using these different _challenges_:\n\n#### Illegal Payment Challenge\n\nA payment from the agent's underlying address without a payment reference or with a payment reference that does not correspond to any open [redemption](/fassets/redemption) or [announced withdrawal](#underlying-withdrawals).\n\nThis challenge is performed in the following way:\n\n1. The challenger obtains proof of the illegal payment using the FDC.\n2. The challenger presents the proof to the FAssets system, which triggers:\n\n   - A vault collateral payment from the agent's vault to the challenger's address as a reward.\n   - The agent's state for the address is set to [full liquidation](#liquidation-process).\n\n#### Double Payment Challenge\n\nAn agent might try to abuse a redemption request to pay to the redeemer and use the same payment reference to pay an amount to the agent's own address.\nAn agent might even try to pay the redeemer multiple times when he is redeeming against himself.\n\nThis activity is easy to detect after the first payment is reported in [step 6 of the redemption process](/fassets/redemption#redemption-process), because then the request is deleted and the second payment becomes illegal.\nHowever, a malicious agent might try to issue the second payment before reporting the completion of the first one.\n\nThe double payment challenge catches this attempt as soon as the payments are finalized, regardless of whether they have been reported to the FAssets system.\n\nThis challenge is performed in the following way:\n\n1. The challenger detects two seemingly legal payments from the same agent's underlying address and with equal payment reference, and obtains proofs for both using the Data Connector.\n2. The challenger presents the two proofs to the FAssets system and triggers the reward payment and full liquidation.\n\n#### Negative Balance Challenge\n\nOne or more legal payments can make the balance on the agent's underlying address too small or equivalently make the free underlying balance negative.\nThis situation can happen because gas fees might be unknown when redemptions are approved.\n\nThis situation would normally be detected after all payments are reported, but in this way it can be caught as soon as the payments are finalized on the underlying chain:\n\n1. The challenger detects one or more legal payments from the same agent's underlying address and the total outgoing amount exceeds the sum of all redemption values plus the total free balance.\n   The challenger obtains proofs for all of them using the Data Connector.\n2. The challenger presents all the proofs to the FAssets system, which checks that the transactions are from the agent's underlying address, that they have not been confirmed yet, and that their total really makes the free balance negative.\n   Then, it triggers reward payment and full liquidation.\n\n### Time Lock for Withdrawing Collateral\n\nThe agent's collateral backs minted FAssets but also pays challenge fees and possibly illegal payment penalties.\nBecause finalization on some underlying chains takes a long time, challenges can sometimes be proved to be valid only after an agent's position is already closed and enough collateral to pay them is not available.\n\nFor this reason, collateral withdrawals are locked for a certain amount of time before they become effective.\nThe amount of time varies depending on the underlying chain and the time frame required for achieving finality on that chain.\n\nFor agents, any collateral withdrawals must be announced, and then the amount is locked for some time before it can be withdrawn.\nThe locked collateral is also ineligible for minting.\n\nAgents must announce the closing of their vaults.\nThey become unusable until the lock expires, and then they can be closed.",
    "Any holder of FAssets can redeem their FAssets for the underlying original asset.\nTo do so, these holders, known as redeemers, send FAssets to the Asset Manager smart contract, and the redeemed amount is paid with the underlying asset from an agent's address.\n\n## Redemption Process\n\nThis is the summary of the redemption process:\n\n1. The redeemer starts the redemption for a whole number of lots by issuing a request to the Asset Manager smart contract.\n\n   The FAssets system chooses one or more redemption tickets from the front of the [FIFO redemption queue](/fassets/minting#redemption-tickets-and-the-redemption-queue).\n   The number of chosen redemption tickets is capped to avoid high gas consumption.\n   If the redemption amount requires too many tickets, only a partial redemption is done.\n\n2. The system burns FAssets from the redeemer's account in the amount of the total of the selected redemption tickets.\n   If the redeemer's account does not contain enough FAssets, the redemption fails immediately.\n\n3. Each chosen ticket belongs to an agent.\n   For every agent participating in the redemption, the system issues an event with the following redemption payment information:\n\n   - Redeemer's underlying address.\n\n     Agents can use the Data Connector to ensure the validity of this address.\n     Otherwise, malicious redeemers could provide an address that systematically blocks payments and exploit the redeeming process to their advantage.\n\n   - Amount to pay minus the fee that was already subtracted.\n   - [A payment reference](/fassets/minting#minting-payment-reference).\n     This payment reference is different for each agent and each redemption.\n   - The last underlying block and the last underlying timestamp to complete the payment.\n\n4. Every agent pays the redeemer on the underlying chain and includes the payment reference in the memo field of the payment transaction.\n\n   Agents can pay the redemption from any address they control on the underlying chain.\n   It does not need to be the same address where they receive minting payments.\n\n5. After the payment is finalized, the agent uses the [FDC](/fdc/overview) to prove the payment and obtain a payment proof.\n\n6. After the payment proof is presented to the FAssets system, the agent's vault collateral and pool collateral that were backing those FAssets are released.\n\n   After the collateral is released, it can either back the minting of more FAssets or be withdrawn.\n\n## Redemption-Payment Failure\n\nAgents have a limited time to pay the redeemer on the underlying chain.\nThe amount of time is defined by the last block and the last timestamp on the underlying chain.\nIf the payment is not made in time, the redeemer has to prove nonpayment to be compensated.\nAfter the redeemer presents the nonpayment proof, he is paid with the agent's collateral plus a _redemption default premium_.\nThe premium is intended to encourage the agent to complete redemptions by paying with the underlying asset instead of collateral.\n\nIf a payment fails and the failed transaction is recorded on the underlying chain, the agent must submit a proof of failed payment.\nIn this way, the gas costs of the failed transaction can be accounted for by the FAssets system.\nIf the transaction was not recorded, then no gas was spent and reporting is not necessary.\n\nIf the agent does not report the failed payment in time, anyone can report the failed payment and receive a reward from the agent's vault.\n\n:::info\n\n    When payment fails because of the redeemer, the agent can obtain a proof of the failed payment from the Data Connector and present it to the FAssets system.\n    The agent's obligation is then fulfilled, and he can keep both the collateral and the underlying.\n\n    Two different proofs can be used:\n\n    * Proof of invalid address, due to a wrong syntax or checksum, for example.\n    * Proof of blocked payment: Even if the address is valid, it might contain a contract that blocks the payment.\n        This can only happen on underlying networks supporting smart contracts.\n\n        The agent must still try to pay and, if the payment is blocked, the agent can request this proof from the Data Connector and present it to the FAssets system.\n\n:::\n\nDuring step 4 above, if any agent does not to pay on the underlying chain, the redeemer completes the following procedure separately for each nonpaying agent:\n\n1. The redeemer obtains a proof of nonpayment from the Data Connector.\n2. The redeemer presents the nonpayment proofs to the FAssets system, which triggers a redemption failure.\n3. The redeemer is paid with collateral, according to the current price plus a premium.\n4. FAssets are overcollateralized, so, even after paying the redeemer with a premium, a remainder is released.\n   This remainder is derived by the [system-wide collateral ratio settings](/fassets/collateral#system-wide-thresholds) specified by governance.\n5. The underlying assets backing the redeemed FAssets are marked as free and can be withdrawn by the agent later.\n\n## Edge Cases\n\n### Unresponsive redeemer\n\nAfter a redemption nonpayment, the redeemer might not report the failure for some reason.\nIn this case, the agent can present a nonpayment proof, and the redeemer receives collateral plus a premium.\nAfter this operation, the underlying backing collateral and the remaining local collateral are released.\n\n### Unresponsive agent\n\nAfter a successful payment, the agent might not present the payment proof.\n\nBecause the agent has already paid, the redeemer is not affected.\nHowever, the system still requires the payment proof to correctly track the agent's balance on the underlying chain.\nAfter enough time for the agent to present the proof has elapsed, anyone can present the payment proof and receive collateral from the agent's vault.\n\n### Expired proof\n\nProofs provided by the Data Connector are available for only 24 hours, approximately.\nIf neither the redeemer nor the agent presents the proof of payment or nonpayment within 24 hours, the regular redeeming process cannot continue, and the agent's collateral could be locked indefinitely.\n\nThe procedure to recover this collateral is the same as the procedure in the minting case.\n\n## Redemption Fee\n\nThe redemption fee is the amount of the underlying asset that the agent can keep for doing the redemption.\nThis fee is meant only to cover the agent's transaction fee on the underlying chain, so it is not shared with the collateral pool.\nThe fee percentage is defined by governance, is the same for all agents, and is typically smaller than the minting fee.\n\nGovernance calculates the percentage so that the fee to redeem 1 lot pays for a typical transaction fee on the underlying chain.\nTherefore, when larger amounts on a single address are redeemed, the agent accrues some extra fees because the underlying fee for small and large transactions is the same.\nHowever, when underlying fees are very high, the agent might still lose funds when a redemption for a small amount, such as 1 lot, is made.\nIf this situation occurs frequently, governance will increase the redemption-fee percentage.\n\n## Self-redemption\n\nAgents can also act as users and redeem FAssets from their own vaults.\nThis process is called self-redemption or self-closing, and it is simplified because payment on the underlying chain is not required.\n\nAs shown in the following process, agents can self-redeem for any reason, including to stop liquidations because it reduces the amount of FAssets the agent is backing.\n\n1. An agent sends FAssets to their account.\n2. FAssets are burned.\n3. The collateral that was backing those assets is released.\n4. The underlying collateral is released and can be withdrawn from the underlying address later.\n\nThe self-redeemed amount is not limited to a whole number of lots and can be less than 1 lot, which makes self-closing ideal for redeeming an agent's dust.",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nimport OperationalParameters from \"/src/components/FAssets/OperationalParameters\";\n\nThis page lists the current values for the most important parameters of the FAssets system on **Songbird Canary-Network** and **Songbird Testnet Coston**. These values are subject to change as the system is further developed and tested.\n\n## Asset Manager Operational Parameters\n\nTo get the default agent settings, you need to call the `getSettings` function on the `IAssetManager` interface. Read more about the `IAssetManager` interface [here](/fassets/reference/IAssetManager).\n\n### Minting and Redeeming\n\n<OperationalParameters sectionTitle=\"Minting and Redeeming\" />\n\n### Payment Times\n\n<OperationalParameters sectionTitle=\"Payment Times\" />\n\n### Collateral Ratios\n\n<OperationalParameters sectionTitle=\"Collateral Ratios\" />\n\n### Liquidation\n\n<OperationalParameters sectionTitle=\"Liquidation\" />\n\n### Rewarding\n\n<OperationalParameters sectionTitle=\"Rewarding\" />\n\n### Time Locks\n\n<OperationalParameters sectionTitle=\"Time Locks\" />\n\n### Emergency Pause\n\n<OperationalParameters sectionTitle=\"Emergency Pause\" />\n\n### FAssets Upgrade\n\n<OperationalParameters sectionTitle=\"FAssets Upgrade\" />\n\n### Transfer Fees\n\n<OperationalParameters sectionTitle=\"Transfer Fees\" />\n\n### Handshake\n\n<OperationalParameters sectionTitle=\"Handshake\" />\n\n## Default Agent Settings\n\nTo get the default agent settings, you need to call the `getAgentInfo` function on the `IAssetManager` interface. Read more about the `IAssetManager` interface [here](/fassets/reference/IAssetManager).\n\n<OperationalParameters sectionTitle=\"Default Agent Settings\" />",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport DocCardList from \"@theme/DocCardList\";\nimport SolidityReference from \"@site/src/components/DataTables/SolidityReference\";\n\n## Deployed Contracts\n\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n        |         **Contract** | **Address** | **Description** |\n        | -------------------: | ----------- | --------------- |\n        | `AgentOwnerRegistry` | -           | -               |\n        |               `FXRP` | -           | -               |\n        |               `USDX` | -           | -               |\n\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        |         **Contract** | **Address** | **Description** |\n        | -------------------: | ----------- | --------------- |\n        | `AgentOwnerRegistry` | -           | -               |\n        |               `FXRP` | -           | -               |\n        |               `USDX` | -           | -               |\n\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\" default>\n\n        |         **Contract** | **Address**                                                                                                                                | **Description**                                                                                                                          |\n        | -------------------: | ------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------- |\n        | `AgentOwnerRegistry` | [`0xa7f5d3C81f55f2b072FB62a0D4A03317BFd1a3c0`](https://songbird-explorer.flare.network/address/0xa7f5d3C81f55f2b072FB62a0D4A03317BFd1a3c0) | Manages agent whitelisting and allows setting and retrieving details such as work and management addresses, name, description, and icon. |\n        |   `AssetManager_XRP` | [`0x299d678f67e7ADD4efdf295Ebe0E92FCb4f75C4c`](https://songbird-explorer.flare.network/address/0x299d678f67e7ADD4efdf295Ebe0E92FCb4f75C4c) | Smart ontract that can mint and burn FXRP while managing collateral and backing funds. |\n        |               `FXRP` | [`0xF9a84f4ec903F4EaB117A9c1098BeC078BA7027d`](https://songbird-explorer.flare.network/address/0xF9a84f4ec903F4EaB117A9c1098BeC078BA7027d) | The FAsset-wrapped XRP token, ready for use on Songbird.                                                                             |\n        | `AssetManager_FDOGE` | [`0x866077dC52445167dC971643c1b2910608eD0C5A`](https://songbird-explorer.flare.network/address/0x866077dC52445167dC971643c1b2910608eD0C5A) | Smart ontract that can mint and burn FDOGE while managing collateral and backing funds. |\n        |              `FDOGE` | [`0xaa25ee3B68c515e69A463876Ab262bc4e8339030`](https://songbird-explorer.flare.network/address/0xaa25ee3B68c515e69A463876Ab262bc4e8339030) | The FAsset-wrapped DOGE token, ready for use on Songbird.                                                                             |\n        |               `USDX` | [`0x4A771Cc1a39FDd8AA08B8EA51F7Fd412e73B3d2B`](https://songbird-explorer.flare.network/address/0x4A771Cc1a39FDd8AA08B8EA51F7Fd412e73B3d2B) | ERC-20 token used by FAssets as vault collateral.                                                                                                            |\n\n    </TabItem>\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n        |         **Contract** | **Address** | **Description** |\n        | -------------------: | ----------- | --------------- |\n        | `AgentOwnerRegistry` | -           | -               |\n        |               `FXRP` | -           | -               |\n        |               `USDX` | -           | -               |\n\n    </TabItem>\n\n</Tabs>\n\n## Interfaces\n\n<DocCardList />",
    "import JiraIssueCollector from \"/src/components/JiraIssueCollector\";\n\nThe launch of FAssets on Songbird Canary-Network demonstrates system behavior while paving the way for its next deployment on Flare Mainnet. The primary goals of this test are to ensure the system operates as intended, identify edge cases, refine usability and automation, and incentivize whitehat security researchers to uncover potential code errors.\n\nThe test on Songbird Canary-Network will have the following characteristics:\n\n| Parameters                          | Description                                                                                                                                                                                                                              |\n| ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| FAsset Sequence                     | XRP will be tested first, followed by either BTC or DOGE.                                                                                                                                                                                |\n| Agent Whitelisting                  | FAssets agents must be whitelisted by Flare Labs to perform their roles.                                                                                                                                                                 |\n| Caps and Losses                     | Flare Labs will underwrite up to $300,000 in FAsset issuance to cover any losses resulting from system issues, while imposing a cap of $2 million in issuance per asset.                                                                |\n| Duration of the Test                | Each FAsset will be tested on Songbird for at least 6 weeks until no issues have been found.                                                                                                                                             |\n| FAssets Minting dApps               | FAssets system users can access the frontend web interface for minting and redeeming: <br/> - [`https://fasset.oracle-daemon.com/sgb`](https://fasset.oracle-daemon.com/sgb) <br /> - [`https://fassets.au.cc/`](https://fassets.au.cc/) |\n| System Integrity and FAsset Pricing | During the Songbird test, restrictions and incentives may cause the FAsset price to deviate from the underlying currency's value. The current focus is on testing system integrity, not price alignment.                                 |\n| Vault Collateral                    | USDX will serve as collateral for FAsset agent vaults. To ensure sufficient support for FAsset issuance and possible liquidations on Songbird, a large amount of USDX has been minted.                                                   |\n\n:::tip[Help improve FAssets]\n\nTo participate, begin by joining the Flare Network FAssets Songbird [Telegram channel](https://t.me/FlareSupport) or contact [support@flarelabs.org](mailto:support@flarelabs.org).\n\n<JiraIssueCollector />\n\n:::",
    "### How to set up FAssets agent?\n\nRefer to the [FAssets Agent Setup Guide](/fassets/guides/deploy-fassets-agent).\n\n### What are the FAssets agent icon file requirements?\n\nA link to your FAssets agent icon should end with `.png`, `.jpg`, `.svg`, etc., and **must not** be the same as the example provided by the bot.\n\n### Can an agent's logo, description, or name be changed after approval?\n\nNo, it is not.\n\n### Can I register a new management address if one is already whitelisted in my Telegram account?\n\nNo, you would need a new Telegram account.\n\n### What is a management address?\n\nIt is an EVM address you control. Ensure your seed phrase remains secure.\n\n### What is an owner's address, and is it different from a work address?\n\nWork and owner addresses are the same and are referred to as `owner.native.address` in your `secrets.json` file. This address provides collateral for your vault and pool.\n\n### How can I change the agent's fees?\n\nUse the command:\n\n```bash\nupdateAgentSetting <agentVaultAddress> <agentSettingName> <agentSettingValue>\n```\n\nAlternatively, update your `tmp.agent-settings.json` file.\n\n### Do I need my agent running all the time?\n\nYes, for an agent to stay operational, it must run continuously.\n\n### What should I do if my agent database is corrupted, lost, or deleted?\n\nDo not restart the agent, as this may result in double payments.\nThe current solution is duplicating the database and launching a new agent instance.\nYou should monitor your database closely and, if access is lost, remove the agent from the available list, self-close FAssets, and backup agent keys.\n\n### Is there a minimum history needed in the Data Availability Layer for agents?\n\nNo minimum history is required; it can be set to the latest block.\nYou need to start the [Data Availability Layer](/fdc/overview#data-availability-layer) before you can participate as an FAsset agent.",
    "import RestartDocker from \"./_restart_docker.mdx\";\n\nThe FAssets system by Flare enables non-smart contract tokens like BTC and XRP to interact trustlessly with smart contracts on the Flare network, unlocking their use in DeFi applications. It achieves this through collateralized minting, utilizing [Flare Data Connector (FDC)](/fdc/overview) and [Flare Time Series Oracle (FTSO)](/ftso/overview) for secure cross-chain functionality.\n\nAgents in the FAssets system facilitate the minting and redemption of FAssets by providing over-collateralized assets and managing transactions securely. A liquidator in the FAssets system monitors agent's collateralization levels to ensure the system's security and trustlessness.\n\nIn this guide, you will learn the preferred methods for setting up and managing the FAssets agents using the frontend interface and running the liquidator bot.\n\n## Prerequisites\n\n### Hardware\n\nThe server should have a minimum of 2 CPUs and 4 GB of RAM and be built on AMD64 architecture running a Linux operating system.\nIt also requires at least 40 GB of disk space to accommodate the FAssets agent and its dependencies\n\nRecommended Providers: Linode, DigitalOcean, AWS, GCP.\n\n### Software\n\nEnsure you have installed Docker version 25.0.4 or higher and Docker Compose version v2.24.7 or higher.\nSetting up and running the FAssets agent is accomplished by using Docker containers, so knowledge of Docker is essential.\nUsing Docker eliminates the need to manage tool versions and their compatibilities.\n\n### Financials\n\nTo participate, ensure you meet the following minimum deposit requirements:\n\n- **Songbird Tokens (SGB):** Deposit a minimum of 1,000 SGB into the `owner.native.address` specified in the `secrets.json` file.\n\n- **USDX Tokens:** Agents must deposit a USDX as vault collateral tokens into the `owner.native.address`.\n\n- **XRP Tokens:** For XRP agents, you need to deposit 500 XRP Ledger native tokens (XRP) into the `owner.XRP.address`.\n\n- **Bitcoin (BTC):** Bitcoin agents should hold at least 0.005 BTC to cover potential high transaction fees in the `owner.BTC.address`.\n\n- **Dogecoin (DOGE):** Doge agents should maintain a minimum balance of 100 DOGE to cover potential high transaction fees in the `owner.DOGE.address`.\n\nAdditionally, please ensure there is sufficient collateral for vault and pool requirements at the `owner.native.address`.\n\n### Contract Addresses\n\nSee the [FAssets Reference](/fassets/reference) for important FAssets smart contract addresses representing tokens and notable system components, provided for your convenience during the Open Beta on the Songbird network.\n\n## Setting Up\n\nFollow these steps to set up the FAssets agent using Docker:\n\n1. Clone the repository in your Linux server:\n\n   ```bash\n   git clone https://github.com/flare-labs-ltd/fasset-bots-deploy\n   cd fasset-bots-deploy\n   ```\n\n2. Set up the environment file:\n\n   ```bash\n   cp .env.template .env\n   ```\n\n3. Set up the configuration file:\n\n   ```bash\n   ./populate_config.sh\n   ```\n\n4. Login into GitHub Container Registry:\n\n   ```bash\n   docker login ghcr.io\n   ```\n\n5. Get the latest docker containers from the registry:\n\n   ```bash\n   docker compose pull\n   ```\n\n### Setting Environment Variables\n\nTo begin using the FAssets Docker infrastructure, you must configure the settings in the `.env` environment file.\n\n- Make sure to set the machine address in the `.env` file using the `MACHINE_ADDRESS` variable.\n- Set the database password `FASSET_DB_PASSWORD`.\n\n:::warning\nOnce the database is created, the password will not change if you modify it in the `.env` file.\n:::\n\n#### Optional Settings\n\nYou can configure several optional settings in the `.env` environment file.\n\n## Setting up Secret Keys\n\nThe FAsset agents require multiple keys for the Flare and underlying network chains, which must be generated to make the agent operational.\n\n1. Create a new management wallet or use an existing one, preferably a cold wallet, as the management address for your agent.\n2. Generate the secrets using this command by replacing the `MANAGEMENT_WALLET_ADDRESS` with your management wallet address:\n\n   ```bash\n   ./generate_secrets.sh MANAGEMENT_WALLET_ADDRESS\n   ```\n\n3. Copy the `secrets.new.json` to `secrets.json`:\n\n   ```bash\n   cp secrets.new.json secrets.json\n   ```\n\n4. Allow the user to read and write `secrets.json`:\n\n   ```bash\n   chmod 600 secrets.json\n   ```\n\n5. Set file ownership to user ID 1000, the default Linux user ID, for proper permissions:\n\n   ```bash\n   sudo chown 1000:1000 secrets.json\n   ```\n\n6. Make a backup of the `secrets.json` file and store it securely.\n\n## Setting the File Permissions\n\nSet the file permissions for the `log` directory:\n\n```bash\nsudo chown 1000:1000 log -R\n```\n\n## Whitelist the Management Address\n\n:::info\nGiven our current insurance mechanisms to protect users, Flare Labs will not add any more agents to the FAssets protocol on Songbird.\nAs covered in this [blog](https://flare.network/fxrp-is-live-on-songbird/), Flare Labs will cover losses up to $100,000 per asset, for a total coverage of $300,000.\nWe appreciate the interest received and look forward to onboarding agents once we have launched FAssets on Flare mainnet.\n:::\n\nTo access the FAssets system, you must be whitelisted for security reasons.\n\n1. Use the [FlareFAssetsSongbirdBot Telegram channel](https://t.me/FlareFAssetsSongbirdBot), specifically designed for registration, and provide the necessary information.\n2. Enter the information and confirm, and the Telegram bot will inform you about the successful process.\n3. You need to wait for the Flare team to approve registrations.\n4. If the information you entered is correct, the Telegram Bot will notify you that you have been whitelisted for the FAssets Songbird.\n\n### Check Whitelist Status\n\nChecking if your agent's management address has been whitelisted is straightforward. Follow these steps:\n\n1. Navigate with the block explorer to the [`AgentOwnerRegistry`](/fassets/reference#deployed-contracts) contract and open the Read Contract tab.\n2. Connect your wallet with any address to the block explorer so you can gain access to read functions from the smart contract.\n3. Execute the `isWhitelisted` function with the value of the management address. This function returns `bool`: `true` for whitelisted or `false` for not whitelisted.\n\n## Set the Work Address\n\nAfter you have completed with the whitelisting process, you need to set the work address for your agent.\nConfiguring the native address links your agent's work address to the management address and grants access.\n\n1. Navigate with the block explorer to the [`AgentOwnerRegistry`](/fassets/reference#deployed-contracts) contract and open the Write Contract tab.\n2. Connect the management address wallet you used to generate the access keys above.\n3. Register the work address by executing the `setWorkAddress` function with the value of `owner.native.address` from the `secrets.json` file.\n\n## Configure the RPCs\n\nIn order to connect to various blockchains, you need to configure the Remote Procedure Call (RPC) configurations.\n\nYou can obtain the `xrp_rpc` for the XRP Ledger, `btc_rpc` for Bitcoin, and `doge_rpc` for Dogecoin from the Flare team, configured in the `secrets.json` file under the `apiKey` key.\n\n## Configure the Server\n\nTo access the FAssets admin interface, configure the server to route requests to both the frontend and backend.\nAllow requests on the default port of `4000` for the backend and `3000` for the frontend.\n\n:::warning\n\nWhen configuring the server for FAssets, ensure all **security measures** are implemented to safeguard your system. Exposing the FAssets backend can lead to severe vulnerabilities.\n\n- **Never expose the FAssets agent interface (`/fasset-backend`) to the public network**.\n- As a rule of thumb, restrict access to the backend **only** within the local network.\n- Use firewalls and IP-based access controls to allow requests **only** from trusted IP addresses.\n- Consider enabling IP whitelisting for specific addresses to restrict access.\n\n:::\n\n## Start the FAssets Agent\n\nStart the FAssets agent using the Docker infrastructure by running the following command:\n\n```bash\ndocker compose up -d\n```\n\n## Execute FAsset Bot Commands\n\nTo run commands for the FAsset bot, please use the `cli` profile.\n\nUse the specific Docker container:\n\n- the `agent-bot` for the FAsset agent bot;\n- the `user-bot` for the FAsset user bot.\n\n### Execute Agent Bot Commands\n\nTo execute agent bot commands, use the `cli` profile with the `agent-bot` Docker container.\nFor example, to get the FAssets system running agents, use this command:\n\n```bash\ndocker compose --profile cli run agent-bot listAgents --fasset FASSET\n```\n\nFull reference for the agent bot commands can be found in the [Agent Bot CLI Reference](/fassets/reference/agent-bot).\n\n### Execute User Bot Commands\n\nTo execute user bot commands, use the `cli` profile and the `user-bot` Docker container.\nFor example, to retrieve FAsset system info, use this command:\n\n```bash\ndocker compose --profile cli run user-bot info --fasset FASSET\n```\n\n### Update the FAssets Agent\n\n<RestartDocker />\n\n## Access the Agent Frontend\n\nYou can access the FAssets agent frontend user interface by navigating to the `FRONTEND_URL` in your browser.\nYou will be prompted to enter the password set in the `.env` file.\n\nRefer to the [Create FAssets Agent via UI](/fassets/guides/create-fasset-agent-ui) guide for more information on the user interface.\n\n:::tip[What's next]\n\nIf you need to refresh your knowledge about FAssets, you can explore the various components and processes involved, such as [collateral](/fassets/collateral), [minting](/fassets/minting), [redemptions](/fassets/redemption), and [liquidations](/fassets/liquidation).\n\nAdditionally, if you have questions while setting up your FAssets agent, be sure to check out the [FAQ page](/fassets/guides/faq) for answers and guidance.\n\n:::",
    "The FAssets Bots CLI allows you to create and manage FAssets agent bots and user tools directly from the command line. It also allows you to monitor the agent bot, create FAssets agent vaults, and interact with the FAssets system efficiently.\n\nYou can access the FAssets Agent CLI after you follow the guide on how to [set up the FAssets agent](/fassets/guides/deploy-fassets-agent).\n\n:::info\n\nLearn how to use the FAssets Agent CLI as a [Docker service](/fassets/guides/deploy-fassets-agent#execute-fasset-bot-commands).\n\n:::\n\n### Configure the Agent\n\nYou need to set up your agent's parameters like name, collateral, and fund with underlying assets.\n\n1.  Prepare the agent settings `tmp.agent-settings.json` exchanging `FASSET` with `FXRP`, `FBTC` or `FDOGE` according to which underlying network you want to work on:\n\n    ```bash\n    docker compose --profile cli run agent-bot --fasset FASSET create --prepare\n    ```\n\n2.  Choose a suffix for your agent's collateral pool and fill in the `poolTokenSuffix` field in the `tmp.agent-settings.json`.\n    The `poolTokenSuffix` should only include uppercase letters, numbers, and the `-` symbol.\n    This suffix will be used for the FAsset Collateral Pool Token. For example, for `FXRP`, if you use `MY-ALPHA-AGENT-1`, it would be `FCPT-XRP-MY-ALPHA-AGENT-1`.\n\n3.  The `USDX` is used to back up the agent vault collateral.\n\n4.  In the `secrets.json` file, the `owner.XRP.address`, `owner.BTC.address`, and `owner.DOGE.address` fields represent the underlying accounts that will pay transaction fees for XRP, BTC, and DOGE, respectively.\n\n5.  Create the agent by specifying the FAsset and agent settings, noting that this operation can take up to 10 minutes because the FAssets verifies the underlying assets.\n    This command will print out your agent's address.\n    Exchange `FASSET` with `FXRP`, `FBTC` or `FDOGE` according to which underlying network you are creating the agent.\n\n        ```bash\n        docker compose --profile cli run agent-bot --fasset FASSET create tmp.agent-settings.json\n        ```\n\n### Deposit Collateral\n\nTo make your newly created agent public, it must hold enough [collateral](/fassets/collateral) to mint one lot.\nThis means its agent vault contract needs to be funded with the two collaterals (CFLR and a `USDX`) held by your `owner.native.address`.\n\nYou have two options: either deposit the vault collateral and buy pool collateral separately or use the system function to calculate the needed collateral for you.\n\n#### Deposit Collaterals Together\n\nTo deposit both vault and pool collateral together and let the tool calculate the minimum required collateral to back the lots, you can use the `depositCollateral` function to the agent, specifying your created agent address in the `AGENT_ADDRESS` and lot size in the `LOTS`, as well exchange `FASSET` with `FXRP`, `FBTC` or `FDOGE` according to which underlying network you are creating the agent:\n\n```bash\ndocker compose --profile cli run agent-bot depositCollaterals AGENT_ADDRESS LOTS --fasset FASSET\n```\n\n#### Deposit Collateral Separately\n\n1. Deposit enough vault collateral to the agent specifying your created agent address in the `AGENT_ADDRESS` and the amount of the stablecoin or wrapped ETH in the `AMOUNT` field, as well exchange `FASSET` with `FXRP`, `FBTC` or `FDOGE` according to which underlying network you are creating the agent.\n\n   ```bash\n   docker compose --profile cli run agent-bot depositVaultCollateral AGENT_ADDRESS AMOUNT --fasset FASSET\n   ```\n\n2. Buy enough pool collateral for the agent specifying your agent's address in the `AGENT_ADDRESS` and the amount of the CFLR in the `CFLR_AMOUNT` field, as well exchange `FASSET` with `FXRP`, `FBTC` or `FDOGE` according to which underlying network you are creating the agent.\n\n   ```bash\n   docker compose --profile cli run agent-bot buyPoolCollateral AGENT_ADDRESS CFLR_AMOUNT --fasset FASSET\n   ```\n\n### Register the Agent as Available\n\nYou need to make your agent available to mint and redeem FAssets.\n\n1. Register your agent as available to the network by executing this command replacing the `AGENT_ADDRESS` with your agent address, as well exchange `FASSET` with `FXRP`, `FBTC` or `FDOGE` according to which underlying network you are entering the agent:\n\n   ```bash\n   docker compose --profile cli run agent-bot enter AGENT_ADDRESS --fasset FASSET\n   ```\n\n2. If you deposited enough collateral, you should see that your agent has at least one lot available by running the command replacing `FASSET` with `FXRP`, `FBTC` or `FDOGE` according to which underlying network you are running the agent.\n\n   ```bash\n   docker compose --profile cli run user-bot agents --fasset FASSET\n   ```\n\nIf you don't have available lots, check if the vault and pool collaterals are enough.\n\n:::tip[What's next]\n\nYou can use the [FAssets Agent UI](/fassets/guides/create-fasset-agent-ui) to manage your agent vaults, monitor the agent bot, and perform various actions related to the FAssets agent.\n\n:::",
    "import FAssetsAgentInterface from \"/static/img/fassets/fassets-agent.png\";\nimport FAssetsAgentInterfaceAddVault from \"/static/img/fassets/fassets-agent-add-vault.png\";\nimport FAssetsAgentInterfaceAddVaultForm from \"/static/img/fassets/fassets-agent-add-vault-form.png\";\nimport FAssetsAgentInterfaceVaultOperations from \"/static/img/fassets/fassets-agent-vault-operations.png\";\n\nThe FAssets Agent user interface (UI) is designed to provide a seamless and intuitive experience for users managing the FAssets agent. It allows users to monitor the agent bot and create and manage FAssets agent vaults.\n\nYou can access the FAssets Agent UI after you follow the guide how to [set up the FAssets agent](/fassets/guides/deploy-fassets-agent).\n\n<img src={FAssetsAgentInterface} />\n\n## Creating Agent Vault\n\nTo create a new agent vault, click on the three dots under the Actions menu in the Agent Bots list, then select the \"Add Vault\" button.\n\n<img src={FAssetsAgentInterfaceAddVault} />\n\nYou will be prompted to enter the required information for the vault.\n\n<img src={FAssetsAgentInterfaceAddVaultForm} />\n\nOnce you have saved the information and initiated the process, please allow some time for the Flare Data Connector (FDC) to verify the details and create the vault. This can take up to five minutes. You can monitor the status of the vault creation in the Agent Bots list.\n\n## Changing Agent Vault Settings\n\n1. In the **Vaults** section on the dashboard, locate the agent vault you want to modify, and click the three dots icon in the **Actions** column.\n   The **Vault options** menu is displayed.\n\n   <img src={FAssetsAgentInterfaceVaultOperations} />\n\n2. In the **Vaults** section on the dashboard, locate the agent vault you want to modify, and click the three dots icon in the **Actions** column.\n   The **Vault options** menu is displayed.\n\n3. Click **Edit** at the top of the page.\n\n4. Update your settings.\n   These settings always have time locks to minimize abuse.\n   During the Open Beta, the time-locks are further reduced so that you can try different configurations.\n   Before you save your updates, ensure you understand the time-locks associated with settings you are changing.\n\n5. Click **Save and execute**.\n\n## Depositing Vault Collateral\n\n1. In the **Vaults** section on the dashboard, locate the vault you want to update, and click the three dots icon in the **Actions** column.\n   The **Vault options** menu is displayed.\n\n2. In the **Agent Vault Operations** section you have three options:\n\n   - **Deposit Collateral (Lots)**: Deposit collateral into the vault in lots.\n   - **Deposit Vault Collateral**: Deposit collateral into the agent vault.\n   - **Deposit Pool Collateral**: Deposit collateral into the agent pool.\n\n## Activating Vault\n\nActivating a vault makes it publicly available for minting FAssets.\nTo be activated, a vault must contain at least 1 [lot](/fassets/minting#lots) for minting. To activate a vault:\n\n1. On the dashboard, locate the vault you want to activate, and click the three dots icon in the **Actions** column.\n   The **Vault options** menu is displayed.\n2. In the **Agent Vault Operations** section, click **Activate Vault (Enter)**.\n   The **Activate Vault** window is displayed.\n3. Read the message in the **Activate Vault** window about minting requirements, ensure your vault contains at least 1 lot to meet the requirement, and then click **Confirm** to activate the vault.\n   A confirmation message is displayed.\n\n## Closing Vaults\n\nClosing a vault makes it unavailable for minting FAssets. To close a vault:\n\n    1. On the dashboard, locate the vault you want to close, and click the three dots icon in the **Actions** column.\n        The **Vault options** menu is displayed.\n    2. In the **Agent Vault Operations** section, click **Close Vault (Exit)**.\n        The **Deactivate Vault** window is displayed.\n    3. Ensure you want to close the vault, and click **Confirm** to close it.\n        A confirmation message is displayed.\n\n:::tip[What's next]\n\nYou can use the FAssets Agent UI to manage your agent vaults, monitor the agent bot, and perform various actions related to the FAssets agent.\n\n:::",
    "To restart and update the FAssets agent, execute the following commands, replacing `FASSET` with the name of the FAsset (FXRP, FDOGE, or FBTC):\n\n```bash\ndocker compose down\ngit pull\ndocker compose pull\ndocker compose --profile cli run agent-bot listAgents --fasset FASSET\ndocker compose up -d\n```\n",
    "This guide explains how to export the private keys for the FAssets agent's underlying address by specifying the export file in the Docker container setup. This process is essential if you need to migrate your FAssets agent after full liquidation.\n\n1. Create a directory named `export` to export the private keys.\n2. Assign ownership of the directory to user ID 1000 by setting the appropriate permissions:\n\n   ```bash\n   sudo chown 1000:1000 export -R\n   ```\n\n3. Execute the following command to export the private keys and mount the export path to the Docker container:\n\n   ```bash\n   docker-compose --profile cli run -v $(pwd)/export:/export agent-bot exportPrivateKeys /export/keys.tmp --fasset FXRP\n   ```",
    "The agent bot can send notifications to a Telegram bot or API endpoint.\nIt helps monitor the health of the agent and the network.\n\n## Agent Bot Notifications Configuration\n\n1. Add the following configuration to the `apiNotifierConfigs` list in the `config.json` file:\n\n   ```json\n   {\n     \"apiUrl\": \"NOTIFICATIONS_API_URL\",\n     \"apiKey\": \"API_KEY\",\n     \"level\": \"danger\"\n   }\n   ```\n\n   If the level field is omitted inside configuration, the bot will default it to `danger`.\n\n2. The `apiUrl` field specifies the URL to send the notifications to.\n   The bot will send the notifications as POST requests to the `/api/agent/botAlert` endpoint.\n\n3. The `apiKey` is sent in the header under `x-apikey`.\n   The `level` field specifies the minimum level of alerts to send.\n   If the `level` field is omitted, the bot will default it to `danger`.\n\n4. The agent bot can send notifications as POST requests to the endpoint `apiUrl/api/agent/botAlert` with the following body:\n\n   ```typescript\n   PostAlert = {\n     bot_type: string,\n     address: string,\n     level: string,\n     title: string,\n     description: string,\n   };\n   ```\n\n## Flare Hosted Telegram Notifications Alert Configuration\n\n1. Get the API key from the [FAssets Telegram Bot](http://t.me/FlareFAssetsSongbirdBot) by sending `/events` and selecting `Subscribe to Events`.\n2. Add the following configuration to the `apiNotifierConfigs` list in the `config.json` file, replacing `API_KEY` with the key obtained from the bot.\n\n   ```json\n   {\n     \"apiUrl\": \"https://fasset-tg-bot-songbird.flare.network\",\n     \"apiKey\": \"API_KEY\",\n     \"level\": \"danger\"\n   }\n   ```\n\n   Notifications will only be sent out for `danger` and `critical` levels, regardless of the configured level.\n   This is enforced by the Telegram bot, which delivers priority messages due to heavy load.",
    "import RestartDocker from \"./_restart_docker.mdx\";\n\nBy default, the FAsset bot operates on Flare infrastructure.\nThis guide explains how to configure it to utilize your own infrastructure for enhanced performance and reliability.\n\n## Prerequisites\n\n- [Running an RPC node](/run-node/rpc-node)\n- [Configure FTSO data provider](/run-node/ftso-data-provider)\n- [Configuring FDC attestation provider](/run-node/fdc-attestation-provider)\n- [Setting up DAL](https://github.com/flare-foundation/data-availability)\n\n## Setting Up\n\n1.  Update `config.json`\n\n    Update the `config.json` file to include your own URLs for the data access layer, RPC, and verifier.\n\n    Replace the following URLs with your own:\n\n        - Substitute the Data Availability Layer URL with the URL for your Data Access Layer.\n        - Update the Songbird RPC URL with your RPC endpoint.\n        - Replace your verifier URL with your verifier endpoint both for FXRP and FDOGE.\n\n    ```json\n    {\n      \"dataAccessLayerUrls\": [\n        \"Data Availability Layer URL\",\n        \"https://sgb-data-availability.flare.network\"\n      ],\n      \"rpcUrl\": \"Songbird RPC URL\",\n      \"fAssets\": {\n        \"FXRP\": {\n          \"indexerUrls\": [\n            \"Verifier URL\",\n            \"https://fdc-verifiers-mainnet.flare.network/verifier/xrp\"\n          ]\n        },\n        \"FDOGE\": {\n          \"indexerUrls\": [\n            \"Verifier URL\",\n            \"https://fdc-verifiers-mainnet.flare.network/verifier/doge\"\n          ]\n        }\n      }\n    }\n    ```\n\n2.  Update `secrets.json`\n\n    Ensure your API keys are correctly set in the `secrets.json` file:\n\n    ```json\n    {\n      \"indexer\": [\"Your API key\", \"Flare API key\"],\n      \"data_access_layer\": [\"Your API key\", \"Flare API key\"],\n      \"native_rpc\": \"your Songbird API key\"\n    }\n    ```\n\n    Replace the following: - Substitute your API key with your own custom API key(s) for indexers and data access layers. - Replace your Songbird API key with your RPC API key.\n\n    :::warning\n\n        The API keys must align with the corresponding URLs in dataAccessLayerUrls and indexerUrls. For example, the first API key in indexer should match the first verifier URL in indexerUrls.\n\n        Currently, only a single RPC URL is supported.\n        Multiple RPC URLs are not supported yet.\n\n3.  Restart Docker Containers\n\n    <RestartDocker />",
    "The [Handshake](/fassets/minting#handshake) in the FAsset system is an optional step where an agent verifies the minter's or redeemer's address using an external service to ensure compliance (e.g., sanctions checks) before proceeding with minting or redemption. If enabled, the agent must approve the provided address within a set time; failure to respond allows the user to cancel or proceed based on system rules.\n\nFAssets agents can establish custom handshake mechanisms for verifying minters and redeemers. The most straightforward approach is to create a separate web service that exposes an API which accepts two parameters:\n\n- API service URL\n- Address that requires verification\n\nYou need to configure the `kyc` block in the `secrets.json` file.\n\n```json\n\"kyc\": {\n    \"url\": \"\",\n    \"api_key\": \"\"\n}\n```\n\nThe `url` field represents the web service link, while the `api_key` field is sent as a custom header using the variable `Token`.\n\n:::info\n\nYou can check [`HandshakeAddressVerifier.ts`](https://github.com/flare-labs-ltd/fasset-bots/blob/main/packages/fasset-bots-core/src/actors/plugins/HandshakeAddressVerifier.ts) for implementation details related to the `ChainalysisClient` class in the [fasset-bots](https://github.com/flare-labs-ltd/fasset-bots) repo.\n\n:::",
    "Command line reference for managing and interacting with FAssets `IAssetManager`.\n\nSourced from `IAssetManager.sol` on [GitHub](https://github.com/flare-labs-ltd/fassets/blob/main/contracts/userInterfaces/IAssetManager.sol).\n\n## Functions\n\n### `getSettings`\n\nReturns the complete asset manager settings.\nReturns the [`AssetManagerSettings`](https://github.com/flare-labs-ltd/fassets/blob/main/contracts/userInterfaces/data/AssetManagerSettings.sol) struct.\n\n```solidity\nfunction getSettings()\n    external view\n    returns (AssetManagerSettings.Data memory);\n```\n\n### `getAgentInfo`\n\nReturn detailed info about an agent.\nReturns the [`AgentInfo`](https://github.com/flare-labs-ltd/fassets/blob/main/contracts/userInterfaces/data/AgentInfo.sol) struct.\nNeed to provide the agent vault address.\n\n```solidity\nfunction getAgentInfo(address _agentVault)\n    external view\n    returns (AgentInfo.Info memory);\n```",
    "Command line reference for managing and interacting with FAssets user bot. It allows users to mint and redeem FAssets, manage collateral pools, and query system information.\n\nSourced from `user-bot.ts` on [GitHub](https://github.com/flare-labs-ltd/fasset-bots/blob/main/packages/fasset-bots-cli/src/cli/user-bot.ts).\n\n## Setup\n\nBefore running user-bot, ensure it is properly set up using the [FAsset agent deploy](/fassets/guides/deploy-fassets-agent) with Docker and then learn [how to execute the command line commands](/fassets/guides/deploy-fassets-agent#execute-fasset-bot-commands).\n\n## Usage\n\nTo run the user-bot command line interface, use the `yarn user-bot` command with the desired command and arguments and add the `--fasset` flag with the FAsset symbol.\n\n```bash\nyarn user-bot [command] <args> --fasset [fAssetSymbol]\n```\n\nTo list all available commands:\n\n```bash\nyarn user-bot help\n```\n\nTo execute a specific command using the [Docker container](/fassets/guides/deploy-fassets-agent#execute-fasset-bot-commands) change `yarn user-bot` with `docker compose --profile cli run user-bot`:\n\n```bash\ndocker compose --profile cli run user-bot [command] <args> --fasset [fAssetSymbol]\n```\n\n## General Commands\n\n## System Info\n\nDisplay information about the FAssets system.\n\n```bash\nyarn user-bot info\n```\n\n### List Agents\n\nList available FAssets agents.\n\n```bash\nyarn user-bot agents\n```\n\n### Agent Information\n\nDisplay information about a specific FAssets agent by providing the agent vault address.\n\n```bash\nyarn user-bot agentInfo <agentVaultAddress>\n```\n\n### Minting\n\n### Mint\n\nMint the specified number of FAsset lots, specifying the number of lots to mint.\n\n```bash\nyarn user-bot mint <numberOfLots>\n```\n\nWhen executing the `mint` command, the following custom flags can be specified:\n\n- **`-a <agentVaultAddress>`**  \n  Specifies the agent for minting. If omitted, the bot automatically selects the agent with the lowest fee and sufficient capacity.\n\n- **`--executor <executorAddress>`** _(Optional)_  \n  Specifies the executor's native address.\n\n- **`--executorFee <executorFee>`** _(Optional)_  \n  Specifies the executor's fee in NAT.\n\n- **`--noWait`**  \n   Reserves and pays for minting without waiting for proof.\n\n### Mint Execute\n\nThe `mintExecute` function is essential for completing the minting process.\nIt handles the minting of FAssets, distributes fees, and unlocks collateral.\n\nThis function ensures the following:\n\n- The minter receives their minted FAssets after payment is confirmed.\n- Agents and collateral providers are compensated for their involvement.\n- System stability is maintained by requiring proof of underlying payments.\n\nUsing this function need to specify the `requestId` of the minting request.\n\n```bash\nyarn user-bot mintExecute <requestId>\n```\n\n### Mint Status\n\nThe `mintStatus` function provides information about the current state of a minting request.\nIt helps to track the progress of the minting process.\n\n```bash\nyarn user-bot mintStatus\n```\n\n### Update Mintings\n\nThe `updateMintings` function updates the status of all open minting requests in the FAsset system.\nIt ensures that the system remains up-to-date by resolving minting requests based on their current state or conditions, such as time expiration or payment verification.\n\n```bash\nyarn user-bot updateMintings\n```\n\n## Redemption\n\n### Redeem\n\nThe `redeem` function enables FAsset holders to burn their FAssets in exchange for the equivalent amount of the underlying asset.\nThis ensures that FAssets can be converted to their original value on the underlying blockchain.\nTo redeem, specify the number of FAsset lots you wish to exchange.\n\n```bash\nyarn user-bot redeem <numberOfLots>\n```\n\nWhen executing the `redeem` command, the following custom flags can be specified:\n\n- **`--executor <executorAddress>`** _(Optional)_  \n   Specifies the executor's native address.\n\n- **`--executorFee <executorFee>`** _(Optional)_  \n   Specifies the executor's fee in NAT.\n\n### Redemption Default\n\nThe `redemptionDefault` function is invoked when an agent fails to fulfill their obligation to deliver the underlying asset during a redemption process.\nThis function ensures that the redeemer is compensated, system integrity is maintained, and the agent is penalized for failing to meet their commitment.\n\nSpecify the `requestId` of the redemption request.\n\n```bash\nyarn user-bot redemptionDefault <requestId>\n```\n\nAdditionally the custom flag can be specified:\n\n- **`--noWait`***\n  Does not wait for non-payment proof. don't wait for non-payment proof, but immediately exit with exitcode 10 if the proof isn't available\n\n### Redemption Status\n\nThe `redemptionStatus` function provides information about the current state of a redemption request in the FAsset system. It lists all open redemptions and their statuses.\n\nStatus can be one of the following:\n\n- `PENDING`\n- `SUCCESS`\n- `DEFAULT`\n- `EXPIRED`\n\n```bash\nyarn user-bot redemptionStatus\n```\n\nAdditionally, the custom flag can be specified:\n\n- **`--request-id <requestId>`**  \n  Specifies the request ID of the redemption.\n\n### Update Redemptions\n\nThe `updateRedemptions` function updates the status of one or more open redemption requests. It ensures that these requests are processed efficiently and appropriately addresses any unresolved or overdue requests. This function is essential for automating the entire redemption lifecycle.\n\n```bash\nyarn user-bot updateRedemptions\n```\n\n## Collateral Pool Management\n\n### List Collateral Pools\n\nLists all available collateral pools, including:\n\n- Pool address\n- Token symbol\n- Token price (CFLR)\n- Collateral (CFLR)\n- Fees (FXRP)\n- Collateral Ratio\n\n```bash\nyarn user-bot pools\n```\n\n### Pool Holdings\n\nThe 'poolHoldings' function provides detailed information about the pools that user has holdings, listing:\n\n- Pool address\n- Token symbol\n- Pool tokens\n\n```bash\nyarn user-bot poolHoldings\n```\n\n### Enter Pool\n\nThe `enterPool` function allows users to deposit collateral into a specific collateral pool and become a participant by specifying the collateral pool ID and collateral amount.\n\n```bash\nyarn user-bot enterPool <poolId> <collateralAmount>\n```\n\n### Exit Pool\n\nThe `exitPool` function allows participants to withdraw their share of collateral from a collateral pool by burning their Collateral Pool Tokens (CPTs) and receiving collateral. Specify the pool ID and the amount of collateral to withdraw.\n\n```bash\nyarn user-bot exitPool <poolId> <amount|all>\n```\n\n## Balance Management\n\n## Balance\n\nDisplays balance for relevant tokens like FAssets, underlying, native, wrapped native, and vault collateral.\n\n```bash\nyarn user-bot balance\n```\n\n## Secrets Management\n\n### Generate Secrets\n\nThe function `generateSecrets' generates a secret JSON file for user addresses and private keys.\n\n```bash\nyarn user-bot generateSecrets --user\n```\n\nWhen executing the `generateSecrets` command, the following custom flag can be specified:\n\n- **`-o <filename>`** (Optional)\n  Saves the secrets to a specified file; otherwise, they are printed to the console.",
    "Command line reference for managing and interacting with FAssets agent bots.\n\nSourced from `agent-bot.ts` on [GitHub](https://github.com/flare-labs-ltd/fasset-bots/blob/main/packages/fasset-bots-cli/src/cli/agent-bot.ts).\n\n## Setup\n\nBefore running agent-bot, ensure it is properly set up using the [FAsset agent deploy](/fassets/guides/deploy-fassets-agent) with Docker and then learn [how to execute the command line commands](/fassets/guides/deploy-fassets-agent#execute-fasset-bot-commands).\n\n## Usage\n\nTo run the agent-bot command line interface, use the `yarn agent-bot` command with the desired command and arguments and add the `--fasset` flag with the FAsset symbol.\n\n```bash\nyarn agent-bot [command] <args> --fasset [fAssetSymbol]\n```\n\nTo list all available commands:\n\n```bash\nyarn agent-bot help\n```\n\nTo execute a specific command using the [Docker container](/fassets/guides/deploy-fassets-agent#execute-fasset-bot-commands) change `yarn agent-bot` with `docker compose --profile cli run agent-bot`:\n\n```bash\ndocker compose --profile cli run agent-bot [command] <args> --fasset [fAssetSymbol]\n```\n\n## Owner and Agent Management\n\n### Validate Owner\n\nValidate the setup of an agent owner for the FAsset by checking address whitelisting, proper registrations, and sufficient balances on management, work, and test asset addresses.\nIt confirms that all configurations and balances meet the requirements for the agent owner.\n\n```bash\nyarn agent-bot validateOwner\n```\n\n### Create\n\nCreate a new agent vault. Use `--prepare` to generate a settings template, or pass the settings as a file path argument.\n\n```bash\nyarn agent-bot create [agentSettingsPath]\n```\n\n### List Agents\n\nList your active FAsset agents active agents from the persistent state.\n\n```bash\nyarn agent-bot listAgents\n```\n\n### Get Info\n\nOutput your FAsset agent information by specifying the agent vault address.\nUse `--raw` to get direct output.\n\n```bash\nyarn agent-bot info <agentVaultAddress>\n```\n\n## Collateral Management\n\n### Deposit Collaterals\n\nDeposit enough vault and pool collateral for minting by specifying the FAsset agent vault address and amount of lots.\n\n```bash\nyarn agent-bot depositCollaterals <agentVaultAddress> <lots>\n```\n\n### Deposit Vault Collateral\n\nDeposit vault collateral for minting by specifying the FAsset agent vault address and amount.\n\n```bash\nyarn agent-bot depositVaultCollateral <agentVaultAddress> <amount>\n```\n\n### Add Pool Collateral\n\nAdd pool collateral and get the FAsset agent's pool tokens by specifying the FAsset agent vault address and amount.\n\n```bash\nyarn agent-bot buyPoolCollateral <agentVaultAddress> <amount>\n```\n\n### Withdraw Vault Collateral\n\nStart vault collateral withdrawal.\nAutomatically executed by the running bot later.\nSpecify the FAsset agent vault address and amount.\n\n```bash\nyarn agent-bot withdrawVaultCollateral <agentVaultAddress> <amount>\n```\n\n### Cancel Vault Collateral Withdrawal\n\nCancel vault collateral withdrawal.\nSpecify the FAsset agent vault address.\n\n```bash\nyarn agent-bot cancelVaultCollateralWithdrawal <agentVaultAddress>\n```\n\n### Redeem Collateral Pool Tokens\n\nStart pool tokens redemption process.\nAutomatically executed by the running bot later. Specify the FAsset agent vault address and amount.\n\n```bash\nyarn agent-bot redeemCollateralPoolTokens <agentVaultAddress> <amount>\n```\n\n### Cancel Collateral Pool Token Redemption\n\nCancel collateral pool token redemption.\nSpecify the FAsset agent vault address.\n\n```bash\nyarn agent-bot cancelCollateralPoolTokenRedemption <agentVaultAddress>\n```\n\n### Withdraw Vault Collateral\n\nStart vault collateral withdrawal.\nAutomatically executed by the running bot later.\nSpecify the FAsset agent vault address and amount.\n\n```bash\nyarn agent-bot withdrawVaultCollateral <agentVaultAddress> <amount>\n```\n\n### Pool Fees Balance\n\nGet pool fees balance of the FAssets agent by specifying the agent vault address.\n\n```bash\nyarn agent-bot poolFeesBalance <agentVaultAddress>\n```\n\n### Top Up Underlying\n\nSends additional underlying assets to the FAssets agent, increasing the assets backing their minted FAssets.\nSpecify the FAsset agent vault address and amount.\n\n```bash\nyarn agent-bot topUpUnderlying <agentVaultAddress> <amount>\n```\n\n### Withdraw Underlying\n\nWithdrawing underlying assets in the FAssets system allows agents to reclaim original assets stored on their underlying address, provided they no longer back any FAssets.\nThe process includes announcing the withdrawal, paying a fee, and obtaining a transaction hash while ensuring no risk to redeemers or collateral providers.\nAgents must comply with system rules, such as avoiding illegal payments or liquidations, to perform the withdrawal successfully.\nSpecify the FAsset agent vault address, amount, and destination address.\n\n```bash\nyarn agent-bot withdrawUnderlying <agentVaultAddress> <amount> <destinationAddress>\n```\n\n### Cancel Underlying Withdrawal\n\nCancel underlying withdrawal announcement by specifying the FAsset agent vault address.\n\n```bash\nyarn agent-bot cancelUnderlyingWithdrawal <agentVaultAddress>\n```\n\n### Delegate Pool Collateral\n\nCollateral providers or agents can delegate native pool collateral to the Flare Time Series Oracle (FTSO) by specifying the agent vault address, recipient, and share (ranging from 0 to 1, where 1 represents 100%).\nThis enables the locked collateral to earn rewards while maintaining system security and liquidity.\nThis feature enhances incentives by providing passive income without affecting the collateral's ability to back FAssets.\n\n```bash\nyarn agent-bot delegatePoolCollateral <agentVaultAddress> <recipient> <share>\n```\n\n### Undelegate Pool Collateral\n\nRemove pool collateral delegation by specifying the FAsset agent vault address.\n\n```bash\nyarn agent-bot undelegatePoolCollateral <agentVaultAddress>\n```\n\n### Create Underlying Account\n\nCreate an underlying account for the FAssets agent.\n\n```bash\nyarn agent-bot createUnderlyingAccount\n```\n\n### Free Vault Collateral\n\nFree vault collateral that is not currently locked to back FAssets by specifying the FAsset agent vault address.\n\n```bash\nyarn agent-bot freeVaultCollateral <agentVaultAddress>\n```\n\n### Free Pool Collateral\n\nFree pool collateral by specifying the agent vault address.\n\n```bash\nyarn agent-bot freePoolCollateral <agentVaultAddress>\n```\n\n### Free Underlying Balance\n\nRelease the underlying balance assets on an agent's address that are not currently locked to back FAssets.\nSpecify the FAssets agent vault address.\n\n```bash\nyarn agent-bot freeUnderlyingBalance <agentVaultAddress>\n```\n\n### Switch Vault Collateral\n\nSwitch the vault collateral by specifying the agent vault address and the new token, using `--deposit` to auto-deposit equivalent tokens.\n\n```bash\nyarn agent-bot switchVaultCollateral <agentVaultAddress> <token>\n```\n\n### Self Mint FAsset\n\nMint FAssets using the agent vault without requiring the agent to be publicly available by specifying the agent vault address and amount.\n\n```bash\nyarn agent-bot selfMintFAsset <agentVaultAddress> <amount>\n```\n\n### Self Mint From Underlying\n\nMint FAssets directly using newly deposited underlying assets by specifying the agent vault address and amount, without requiring the agent to be publicly available.\n\n```bash\nyarn agent-bot selfMintFromUnderlying <agentVaultAddress> <numberOfLots>\n```\n\n## Status Management\n\n### Enter Available\n\nEnter the available FAssets agent list by specifying the FAsset agent vault address to register the agent vault and collateral pool, making them publicly accessible for minting by other users.\n\n```bash\nyarn agent-bot enter <agentVaultAddress>\n```\n\n### Exit Available\n\nExit the available agent list to automatically remove the agent vault and collateral pool from public availability, preventing users (minters) from selecting the agent to mint new FAssets.\nSpecify the agent vault address.\n\n```bash\nyarn agent-bot exit <agentVaultAddress>\n```\n\n### Execute Exit Available\n\nManually execute the exit from the available agent list that was previously announced, as this is typically unnecessary since the running bot can handle it automatically.\n\n```bash\nyarn agent-bot executeExit <agentVaultAddress>\n```\n\n### Self Close\n\nSelf-close means reducing the FAsset agent's obligations by burning FAssets and releasing the equivalent amount of underlying assets and/or collateral back to themselves by specifying the agent vault address and amount.\n\n```bash\nyarn agent-bot selfClose <agentVaultAddress> <amount>\n```\n\n### Close Agent Vault\n\nShut down the FAsset agent vault, ending all operations related to minting and backing FAssets by specifying the agent vault address.\nThe closing will be executed automatically later.\n\n```bash\nyarn agent-bot close <agentVaultAddress>\n```\n\n## Agent Settings Management\n\n### Get Agent Settings\n\nRetrieve the configuration parameters by specifying the agent vault address.\n\n```bash\nyarn agent-bot getAgentSettings <agentVaultAddress>\n```\n\n### Update Agent Setting\n\nModify specific operational parameters for the agent vault by specifying the agent vault address, name, and value.\n\n```bash\nyarn agent-bot updateAgentSetting <agentVaultAddress> <name> <value>\n```\n\n## Account Management\n\n### Upgrade WNat\n\nUpgrade the Wrapped Native Token (WNat) contract used in the FAsset agent collateral pool by specifying the agent vault address.\n\n```bash\nyarn agent-bot upgradeWnat <agentVaultAddress>\n```\n\n### Export Private Keys\n\nExport the private keys for the FAssets agent underlying address by specifying the export file.\n\n```bash\nyarn agent-bot exportPrivateKeys <exportFile>\n```",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport DocCardList from \"@theme/DocCardList\";\nimport SolidityReference from \"@site/src/components/DataTables/SolidityReference\";\n\n## Deployed Contracts\n\nexport const contracts = [\n  \"FlareContractRegistry\",\n  \"ProtocolsV2\",\n  \"RandomNumberV2\",\n  \"RewardsV2\",\n  \"ClaimSetupManager\",\n  \"DistributionToDelegators\",\n  \"WNat\",\n  \"RNat\",\n];\n\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n        <SolidityReference\n            network=\"FlareMainnet\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        <SolidityReference\n            network=\"FlareTestnetCoston2\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n        <SolidityReference\n            network=\"SongbirdCanaryNetwork\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n\n        <SolidityReference\n            network=\"SongbirdTestnetCoston\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n</Tabs>\n\n:::tip\n\n`FlareContractRegistry` has the same address across all four networks.\nYou can query the [`getAllContracts`](/network/solidity-reference/IFlareContractRegistry#getallcontracts) method to fetch all protocol contract addresses on that network.\n\n:::\n\n## Interfaces\n\n<DocCardList />",
    "import Remix from \"@site/src/components/remix\";\nimport YoutubeEmbed from \"@site/src/components/youtube\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport HelloWorld from \"!!raw-loader!/examples/developer-hub-solidity/HelloWorld.sol\";\nimport OpenMetamask from \"/static/img/deploy-first-contract/0-open-metamask.png\";\nimport AddCoston2 from \"/static/img/deploy-first-contract/1-add-coston2.png\";\nimport ApproveCoston2 from \"/static/img/deploy-first-contract/2-approve-coston2.png\";\nimport SwitchNetwork from \"/static/img/deploy-first-contract/3-switch-networks.png\";\nimport CopyAddress from \"/static/img/deploy-first-contract/4-copy-address.png\";\nimport PasteAddress from \"/static/img/deploy-first-contract/5-paste-address.png\";\nimport AfterFaucetConfirmation from \"/static/img/deploy-first-contract/6-after-faucet-confirmation.png\";\nimport OpenSolidityCompiler from \"/static/img/deploy-first-contract/7-open-solidity-compiler.png\";\nimport SetEvmVersion from \"/static/img/deploy-first-contract/8-set-evm-version.png\";\nimport CompileContract from \"/static/img/deploy-first-contract/9-compile-contract.png\";\nimport DeployAndRunTxs from \"/static/img/deploy-first-contract/10-deploy-and-run-transactions.png\";\nimport SetInjectedProvider from \"/static/img/deploy-first-contract/11-set-injected-provider.png\";\nimport ConnectToMetamask from \"/static/img/deploy-first-contract/12-connect-to-metamask.png\";\nimport ConfirmPermissions from \"/static/img/deploy-first-contract/13-confirm-permissions.png\";\nimport MessageWhenDeploying from \"/static/img/deploy-first-contract/14-message-when-deploying.png\";\nimport ConfirmDeployInMetamask from \"/static/img/deploy-first-contract/15-confirm-deploy-in-metamask.png\";\nimport ClickOnMessage from \"/static/img/deploy-first-contract/16-click-on-message.png\";\nimport UpdateMessage from \"/static/img/deploy-first-contract/17-update-message.png\";\nimport ConfirmMetamaskUpdateMessage from \"/static/img/deploy-first-contract/18-confirm-metamask-update-message.png\";\nimport QueryUpdatedMessage from \"/static/img/deploy-first-contract/19-query-updated-message.png\";\n\nYou can deploy your first smart contract and run it in your browser without prior knowledge of Flare. This guide demonstrates how easy it is to develop smart contracts using the [Solidity language](https://soliditylang.org/), a [MetaMask wallet](https://metamask.io/) and the [Remix Development Environment](https://remix.ethereum.org/). All these tools are accessible in your browser for free, without requiring any sign-up.\n\n## Goals\n\nYou will create and deploy a simple \"Hello World\" smart contract following these steps:\n\n1. **Write:** Draft a smart contract outlining its logic, updating a simple string state variable.\n\n2. **Compile:** Convert your human-readable smart contract code into bytecode, comprehensible to the Flare blockchain.\n\n3. **Deploy:** Send the compiled smart contract to the blockchain, where its code becomes immutable.\n\n4. **Call functions:** Execute the functions defined in your contract, triggering changes in the state of the blockchain.\n\n## Steps\n\n<details>\n<summary>**1. Install, configure and fund your MetaMask wallet**</summary>\n\n1. [Install the MetaMask browser extension wallet](https://metamask.io/download/)\n\n2. After installing, open MetaMask from your browser extensions.\n\n   <img src={OpenMetamask} style={{ width: 300 }} />\n\n3. Follow the instructions to create a new wallet. During setup, you'll receive a 12-word mnemonic phrase. Safeguard this phrase in a secure location, as it's crucial for accessing your wallet in the future.\n\n4. Add the Flare Testnet Coston2 to your MetaMask wallet. Go to the [Coston2 Explorer](https://coston2.testnet.flarescan.com/), scroll to the footer of the page and click on **Add Flare Testnet Coston2**.\n\n   <img src={AddCoston2} style={{ width: 300 }} />\n\n5. A MetaMask prompt will open asking you to approve adding the network. Click on **Approve**.\n\n   <img src={ApproveCoston2} style={{ width: 300 }} />\n\n6. Once approved, MetaMask will ask you to switch to Flare Testnet Coston2. Click on **Switch network**.\n\n   <img src={SwitchNetwork} style={{ width: 300 }} />\n\n7. Copy your MetaMask address.\n\n   <img src={CopyAddress} style={{ width: 300 }} />\n\n8. Paste your address in the [Coston2 Faucet](https://faucet.flare.network/coston2) and click on **Request C2FLR**.\n\n   <img src={PasteAddress} style={{ width: 400 }} />\n\n9. After the faucet completes the transaction, which can take a few seconds, you should find testnet C2FLR in your MetaMask wallet.\n\n   <img src={AfterFaucetConfirmation} style={{ width: 300 }} />\n\nWith your wallet configured and funded, you're ready to write, compile, and deploy your contract.\n\n</details>\n\n<details>\n<summary>**2. Write, compile and deploy your first smart contract**</summary>\n\nStart with a simple HelloWorld.sol example. This contract illustrates setting and retrieving variables within a smart contract onchain.\n\n<CodeBlock language=\"solidity\" title=\"HelloWorld.sol\">\n  {HelloWorld}\n</CodeBlock>\n\n<details>\n<summary>Didn't understand the Solidity code?</summary>\n\nLet's break down the `HelloWorld` contract:\n\n1.  **Pragma Directive:** The `pragma solidity >=0.8.0 <0.9.0;` statement specifies the version of the Solidity compiler the contract should use. In this case, the contract is compatible with any version of Solidity above (including) 0.8.0 and below 0.9.0.\n\n2.  **Contract Declaration:** The `contract HelloWorld { ... }` statement defines a new Solidity contract named `HelloWorld`.\n\n3.  **State Variable:** `string public message`; declares a state variable named `message`, which is of type `string` and is publicly accessible (due to the `public` visibility modifier). This variable will store a message that can be read by any external entity.\n\n4.  **Constructor:** The `constructor(string memory initialMessage) { ... }` function is a special function that is executed only once when the contract is deployed. It initializes the `message` state variable with the value passed as `initialMessage` when the contract is deployed.\n\n5.  **Function `updateMessage`:** This function allows anyone to update the `message` state variable. It takes a `newMessage` parameter of type `string`, updates the `message` variable with the new value, and is publicly accessible (`public` visibility modifier).\n\n</details>\n\n{/* prettier-ignore */}\n1. <Remix fileName=\"HelloWorld.sol\">Open contract in Remix</Remix>\n\n2. Click on `HelloWorld.sol` in the file explorer to open the contract in the Remix editor.\n\n3. Navigate to the **Solidity compiler** tab on the left to view the compiler settings.\n\n   <img src={OpenSolidityCompiler} style={{ width: 300 }} />\n\n4. Expand the **Advanced Configurations** section and make sure the **EVM Version** is set to `london`.\n\n   <img src={SetEvmVersion} style={{ width: 300 }} />\n\n4. Click the **Compile HelloWorld.sol** button to compile the contract. This converts the contract from human-readable Solidity code into bytecode that the Flare blockchain can understand.\n\n   <img src={CompileContract} style={{ width: 300 }} />\n\n5. After Remix compiles the contract, deploy it. On the left side of Remix, click the **Deploy & Run Transactions** tab to view the deployment settings.\n\n   <img src={DeployAndRunTxs} style={{ width: 300 }} />\n\n6. In the deployment settings, select the **Injected Provider - MetaMask** environment. This tells Remix that you want to deploy your contract to the blockchain that you configured in MetaMask.\n\n   <img src={SetInjectedProvider} style={{ width: 300 }} />\n\n7. Next to the **Deploy** button, enter a message that you want to send with the smart contract when you deploy it. This contract has a constructor that sets an initial message when you deploy the contract.\n\n   <img src={MessageWhenDeploying} style={{ width: 300 }} />\n\n8. Click the **Deploy** button to deploy the contract and its initial message to the blockchain. MetaMask opens and asks you to confirm payment to deploy the contract. Make sure MetaMask is set to the Flare Testnet Coston2 network before you accept the transaction. Click on **Confirm**.\n\n   <img src={ConfirmDeployInMetamask} style={{ width: 300 }} />\n\n9. After a few seconds, the transaction completes and your contract appears under the **Deployed/Unpinned Contracts** list in Remix. Click the contract dropdown to view its variables and functions. Click the **message** button. Remix retrieves and prints the initial message that you set.\n\n   <img src={ClickOnMessage} style={{ width: 300 }} />\n\nThe contract has an address just like your wallet address. To see details about your deployed contract, copy the contract address from the list in Remix and search for it in the [Coston2 Explorer](https://coston2.testnet.flarescan.com/).\n\n</details>\n\n<details>\n<summary>**3. Call functions in your contract**</summary>\n\nSince you deployed the contract to a blockchain, multiple nodes on the test network have confirmed your payment for the smart contract. The contract, along with its variables and functions, is now permanently stored on the blockchain. To change the `message` variable within your contract, simply run the `updateMessage` function.\n\n1. In your deployed contract, enter a new message next to the updateMessage function. Click the **updateMessage** button to set the new message in the contract data.\n\n   <img src={UpdateMessage} style={{ width: 300 }} />\n\n2. A MetaMask prompt will open and ask you to confirm payment to update the state of your contract. Click **Confirm** to approve the transaction.\n\n   <img src={ConfirmMetamaskUpdateMessage} style={{ width: 300 }} />\n\n3. Click the **message** button again to see the updated value.\n\n   <img src={QueryUpdatedMessage} style={{ width: 300 }} />\n\n</details>\n\nNow you know how to deploy and call example contracts on Flare's testnet. You can write your own contracts and test them using this same process.\n\n## Watch the video\n\n<YoutubeEmbed embedLink=\"1t-JrzkcVsc?si=tzSVnrpte_p_4eN1\"></YoutubeEmbed>\n\n:::tip[What's next?]\n\nRead FTSOv2's [Getting Started](/ftso/getting-started) guide to learn how to connect your smart contracts to Flare's enshrined oracle and retrieve onchain data feeds.\n\n:::",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport IconExternalLink from \"@theme/Icon/ExternalLink\";\nimport IconCopy from \"@theme/Icon/Copy\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport BlockNumCostonJS from \"!!raw-loader!/examples/developer-hub-javascript/block_number_coston.js\";\nimport BlockNumFlareJS from \"!!raw-loader!/examples/developer-hub-javascript/block_number_flare.js\";\nimport BlockNumCoston2JS from \"!!raw-loader!/examples/developer-hub-javascript/block_number_coston2.js\";\nimport BlockNumSongbirdJS from \"!!raw-loader!/examples/developer-hub-javascript/block_number_songbird.js\";\nimport BlockNumCostonPy from \"!!raw-loader!/examples/developer-hub-python/block_number_coston.py\";\nimport BlockNumFlarePy from \"!!raw-loader!/examples/developer-hub-python/block_number_flare.py\";\nimport BlockNumCoston2Py from \"!!raw-loader!/examples/developer-hub-python/block_number_coston2.py\";\nimport BlockNumSongbirdPy from \"!!raw-loader!/examples/developer-hub-python/block_number_songbird.py\";\nimport BlockNumCostonRs from \"!!raw-loader!/examples/developer-hub-rust/src/bin/block_number_coston.rs\";\nimport BlockNumFlareRs from \"!!raw-loader!/examples/developer-hub-rust/src/bin/block_number_flare.rs\";\nimport BlockNumCoston2Rs from \"!!raw-loader!/examples/developer-hub-rust/src/bin/block_number_coston2.rs\";\nimport BlockNumSongbirdRs from \"!!raw-loader!/examples/developer-hub-rust/src/bin/block_number_songbird.rs\";\nimport BlockNumCostonGo from \"!!raw-loader!/examples/developer-hub-go/coston/block_number.go\";\nimport BlockNumFlareGo from \"!!raw-loader!/examples/developer-hub-go/flare/block_number.go\";\nimport BlockNumCoston2Go from \"!!raw-loader!/examples/developer-hub-go/coston2/block_number.go\";\nimport BlockNumSongbirdGo from \"!!raw-loader!/examples/developer-hub-go/songbird/block_number.go\";\n\nFlare has four networks, each serving different purposes, so choosing the right one is crucial. All of these networks operate on a permissionless basis and are EVM compatible:\n\n- **Flare Mainnet.** The production network where all the action happens. Transactions cost real money here.\n\n- **Flare Testnet Coston2.** Test your applications without spending real money. This should be your first choice when developing applications.\n\n- **Songbird Canary-Network.** Experimental proving ground for Flare.\n\n- **Songbird Testnet Coston.** The testnet for Songbird Canary-Network.\n\nThe most common development tracks are:\n\n- **Flare Testnet Coston2 → Flare Mainnet**: Recommended track for application developers.\n\n- **Songbird Testnet Coston → Songbird Canary-Network → Flare Testnet Coston2 → Flare Mainnet**: Required track for all protocol level changes.\n\n## Configuration\n\nConfiguration for all Flare networks, along with public and private RPCs, blockchain explorers, and faucets.\n\n<Tabs block groupId=\"network\">\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    | Network name         | Flare Mainnet                                                                                                                                        |\n    | :------------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | RPCs (HTTPS)         | `https://flare-api.flare.network/ext/C/rpc` <br/> `https://stylish-light-theorem.flare-mainnet.quiknode.pro/ext/bc/C/rpc`                            |\n    | RPCs (WSS)           | `wss://flare-api.flare.network/ext/C/ws` <br/> `wss://stylish-light-theorem.flare-mainnet.quiknode.pro/ext/bc/C/ws`                               |\n    | Chain ID             | 14                                                                                                                                                   |\n    | Currency symbol      | FLR                                                                                                                                                  |\n    | Currency decimals    | 18                                                                                                                                                   |\n    | Blockchain Explorers | [`https://flarescan.com`](https://flarescan.com) <br/> [`https://flare-explorer.flare.network`](https://flare-explorer.flare.network)            |\n    | Private RPCs         | [API Portal](https://api-portal.flare.network/apis/flare-api)                                                                                        |\n    | Faucets              | -                                                                                                                                                    |\n    | Bootstrapping nodes  | `https://flare-bootstrap.flare.network` <br/> `https://flare-bootstrap-1.staking.production.figment.io` <br/> `https://flare.senseinode.com` |\n    | {Safe}Wallet       | [`https://multisig.flare.network`](https://multisig.flare.network)                                                                                   |\n\n    :::tip[RPC Connection code snippet]\n    <Tabs block>\n      <TabItem value=\"curl\" label=\"curl\" default>\n\n        ```bash\n        curl https://flare-api.flare.network/ext/C/rpc -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n        ```\n\n      </TabItem>\n      <TabItem value=\"web3js\" label=\"web3.js\">\n\n        <CodeBlock language=\"javascript\">\n          {BlockNumFlareJS}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"web3py\" label=\"web3.py\">\n\n        <CodeBlock language=\"python\">\n          {BlockNumFlarePy}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"goethereum\" label=\"go-ethereum\">\n\n        <CodeBlock language=\"go\">\n          {BlockNumFlareGo}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"alloyrs\" label=\"alloy-rs\">\n\n        <CodeBlock language=\"rust\">\n          {BlockNumFlareRs}\n        </CodeBlock>\n\n      </TabItem>\n    </Tabs>\n    :::\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    | Network name          | Flare Testnet Coston2                                                                                                                                                         |\n    | :-------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | RPCs (HTTPS)          | `https://coston2-api.flare.network/ext/C/rpc` <br/> `https://falling-skilled-uranium.flare-coston2.quiknode.pro/ext/bc/C/rpc`                                                                                                                              |\n    | RPCs (WSS)            | `wss://coston2-api.flare.network/ext/C/ws` <br/> `wss://falling-skilled-uranium.flare-coston2.quiknode.pro/ext/bc/C/ws`                                                                                                                              |\n    | Chain ID              | 114                                                                                                                                                                           |\n    | Currency symbol       | C2FLR                                                                                                                                                                         |\n    | Currency decimals     | 18                                                                                                                                                                            |\n    | Blockchain Explorers  | [`https://coston2.testnet.flarescan.com`](https://coston2.testnet.flarescan.com) <br/> [`https://coston2-explorer.flare.network`](https://coston2-explorer.flare.network) |\n    | Private RPCs          | [API Portal](https://api-portal.flare.network/apis/coston2-api)                                                                                                               |\n    | Faucets               | [Coston2 Faucet](https://faucet.flare.network/coston2)                                                                                                                        |\n    | Bootstrapping nodes   | `https://coston2-bootstrap.flare.network`                                                                                                                                     |\n\n    :::tip[RPC Connection code snippet]\n    <Tabs block>\n      <TabItem value=\"curl\" label=\"curl\" default>\n\n        ```bash\n        curl https://coston2-api.flare.network/ext/C/rpc -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n        ```\n\n      </TabItem>\n      <TabItem value=\"web3js\" label=\"web3.js\">\n\n        <CodeBlock language=\"javascript\">\n          {BlockNumCoston2JS}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"web3py\" label=\"web3.py\">\n\n        <CodeBlock language=\"python\">\n          {BlockNumCoston2Py}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"goethereum\" label=\"go-ethereum\">\n\n        <CodeBlock language=\"go\">\n          {BlockNumCoston2Go}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"alloyrs\" label=\"alloy-rs\">\n\n        <CodeBlock language=\"rust\">\n          {BlockNumCoston2Rs}\n        </CodeBlock>\n\n      </TabItem>\n    </Tabs>\n    :::\n\n  </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    | Network name         | Songbird Canary-Network                                                                                                                                           |\n    | :------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | RPC (HTTPS)          | `https://songbird-api.flare.network/ext/C/rpc`                                                                                                                    |\n    | RPC (WSS)            | `wss://songbird-api.flare.network/ext/C/ws`                                                                                                                    |\n    | Chain ID             | 19                                                                                                                                                                |\n    | Currency symbol      | SGB                                                                                                                                                               |\n    | Currency decimals    | 18                                                                                                                                                                |\n    | Blockchain Explorers | [`https://songbird.flarescan.com`](https://songbird.flarescan.com) <br/> [`https://songbird-explorer.flare.network`](https://songbird-explorer.flare.network) |\n    | Private RPCs         | [API Portal](https://api-portal.flare.network/apis/songbird-api)                                                                                                  |\n    | Faucets              | -                                                                                                                                                                 |\n    | Bootstrapping nodes  | `https://songbird-bootstrap.flare.network`                                                                                                                        |\n\n    :::tip[RPC Connection code snippet]\n    <Tabs block>\n      <TabItem value=\"curl\" label=\"curl\" default>\n\n        ```bash\n        curl https://songbird-api.flare.network/ext/C/rpc -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n        ```\n\n      </TabItem>\n      <TabItem value=\"web3js\" label=\"web3.js\">\n\n        <CodeBlock language=\"javascript\">\n          {BlockNumSongbirdJS}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"web3py\" label=\"web3.py\">\n\n        <CodeBlock language=\"python\">\n          {BlockNumSongbirdPy}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"goethereum\" label=\"go-ethereum\">\n\n        <CodeBlock language=\"go\">\n          {BlockNumSongbirdGo}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"alloyrs\" label=\"alloy-rs\">\n\n        <CodeBlock language=\"rust\">\n          {BlockNumSongbirdRs}\n        </CodeBlock>\n\n      </TabItem>\n    </Tabs>\n    :::\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n  \n    | Network name         | Songbird Testnet Coston                                                                                                                                                   |\n    | :------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | RPC (HTTPS)          | `https://coston-api.flare.network/ext/C/rpc`                                                                                                                              |\n    | RPC (WSS)            | `wss://coston-api.flare.network/ext/C/ws`                                                                                                                              |\n    | Chain ID             | 16                                                                                                                                                                        |\n    | Currency symbol      | CFLR                                                                                                                                                                      |\n    | Currency decimals    | 18                                                                                                                                                                        |\n    | Blockchain Explorers | [`https://coston.testnet.flarescan.com`](https://coston.testnet.flarescan.com) <br/> [`https://coston-explorer.flare.network`](https://coston-explorer.flare.network) |\n    | Private RPCs         | [API Portal](https://api-portal.flare.network/apis/coston-api)                                                                                                            |\n    | Faucets              | [Coston Faucet](https://faucet.flare.network/coston)                                                                                                                      |\n    | Bootstrapping nodes  | `https://coston-bootstrap.flare.network`                                                                                                                                  |\n\n    :::tip[RPC Connection code snippet]\n    <Tabs block>\n      <TabItem value=\"curl\" label=\"curl\" default>\n\n        ```bash\n        curl https://coston-api.flare.network/ext/C/rpc -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}'\n        ```\n\n      </TabItem>\n      <TabItem value=\"web3js\" label=\"web3.js\">\n\n        <CodeBlock language=\"javascript\">\n          {BlockNumCostonJS}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"web3py\" label=\"web3.py\">\n\n        <CodeBlock language=\"python\">\n          {BlockNumCostonPy}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"goethereum\" label=\"go-ethereum\">\n\n        <CodeBlock language=\"go\">\n          {BlockNumCostonGo}\n        </CodeBlock>\n\n      </TabItem>\n      <TabItem value=\"alloyrs\" label=\"alloy-rs\">\n\n        <CodeBlock language=\"rust\">\n          {BlockNumCostonRs}\n        </CodeBlock>\n\n      </TabItem>\n    </Tabs>\n    :::\n\n  </TabItem>\n\n</Tabs>\n\n## Community tools\n\nDeveloper tools for Flare built by the community including RPCs, bridges, indexers, account abstraction, wallet SDKs, and more.\n\n<Tabs block groupId=\"network\">\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    | RPCs                 | [QuickNode](https://www.quicknode.com/chains/flare), [Ankr](https://www.ankr.com/rpc/flare/), [Thirdweb](https://14.rpc.thirdweb.com), [ChainList<IconExternalLink/>](https://ChainList.org/chain/14)                                                                                                                                                                                                                                                                                                   |\n    | :------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Bridging             | [LayerZero V2](https://docs.layerzero.network/v2/developers/evm/technical-reference/deployed-contracts#flare), [Stargate V2](https://stargateprotocol.gitbook.io/stargate/v/v2-developer-docs/technical-reference/mainnet-contracts#flare) ([OFTs](https://stargateprotocol.gitbook.io/stargate/v/v2-developer-docs/technical-reference/v2-supported-networks-and-assets#flare)), [zkBridge](https://docs.zkbridge.com/layerzero-zklightclient-configurations/layerzero-v2-zklightclient-dvn-addresses) |\n    | Indexers             | [Goldsky](https://docs.goldsky.com/chains/supported-networks), [SubQuery](https://github.com/subquery/flare-subql-starter/tree/main/Flare/flare-starter), [sqd](https://docs.sqd.dev/subsquid-network/reference/networks/#evm--ethereum-compatible)                                                                                                                                                                                                                                                     |\n    | OAuth Login          | [Web3Auth](https://web3auth.io/docs/connect-blockchain/evm/flare)                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n    | Account Abstraction  | [Etherspot Prime SDK](https://etherspot.fyi/prime-sdk/intro)                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n    | Wallet SDK           | [Wagmi](https://wagmi.sh/react/chains), [RainbowKit](https://www.rainbowkit.com/docs/introduction)                                                                                                                                                                                                                                                                                                                                                                                                      |\n    | Full-stack Dev Infra | [Tenderly](https://tenderly.co)                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n\n  </TabItem>\n\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    |                 RPCs | [QuickNode](https://www.quicknode.com/chains/flare), [Ankr](https://www.ankr.com/rpc/flare/), [Thirdweb](https://114.rpc.thirdweb.com), [ChainList<IconExternalLink/>](https://ChainList.org/chain/114) |\n    | :------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    |             Bridging | [LayerZero V2](https://docs.layerzero.network/v2/developers/evm/technical-reference/deployed-contracts#flare-testnet)                                                                                   |\n    |             Indexers | [Goldsky](https://docs.goldsky.com/chains/supported-networks)                                                                                                                                           |\n    |          OAuth Login | [Web3Auth](https://web3auth.io/docs/connect-blockchain/evm/flare)                                                                                                                                       |\n    |  Account Abstraction | [Etherspot Prime SDK](https://etherspot.fyi/prime-sdk/intro)                                                                                                                                            |\n    |           Wallet SDK | [Wagmi](https://wagmi.sh/react/chains), [RainbowKit](https://www.rainbowkit.com/docs/introduction)                                                                                                      |\n    | Full-stack Dev Infra | [Tenderly](https://tenderly.co)                                                                                                                                                                         |\n\n  </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    | RPCs                 | [Ankr](https://www.ankr.com/rpc/flare/), [Thirdweb](https://19.rpc.thirdweb.com), [ChainList<IconExternalLink/>](https://ChainList.org/chain/19) |\n    | :------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Bridging             | -                                                                                                                                                |\n    | Indexers             | [SubQuery](https://github.com/subquery/flare-subql-starter/tree/main/Flare/songbird-starter)                                                     |\n    | OAuth Login          | [Web3Auth](https://web3auth.io/docs/connect-blockchain/evm/songbird/)                                                                            |\n    | Account Abstraction  | -                                                                                                                                                |\n    | Wallet SDK           | [Wagmi](https://wagmi.sh/react/chains), [RainbowKit](https://www.rainbowkit.com/docs/introduction)                                               |\n    | Full-stack Dev Infra | [Tenderly](https://tenderly.co)                                                                                                                  |\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    | RPCs                 | [Ankr](https://www.ankr.com/rpc/flare/), [Thirdweb](https://16.rpc.thirdweb.com), [ChainList<IconExternalLink/>](https://ChainList.org/chain/16) |\n    | :------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Bridging             | -                                                                                                                                                |\n    | Indexers             | -                                                                                                                                                |\n    | OAuth Login          | [Web3Auth](https://web3auth.io/docs/connect-blockchain/evm/songbird/)                                                                            |\n    | Account Abstraction  | -                                                                                                                                                |\n    | Wallet SDK           | [Wagmi](https://wagmi.sh/react/chains), [RainbowKit](https://www.rainbowkit.com/docs/introduction)                                               |\n    | Full-stack Dev Infra | [Tenderly](https://tenderly.co)                                                                                                                  |\n\n  </TabItem>\n\n</Tabs>\n\n## Supported wallets\n\nSeveral desktop, browser and mobile app based wallets support Flare. Discover suitable options for your needs on the [Flare Wallets](https://flare.network/wallets/) page.\n\n## Transaction format\n\n- **Address space:** Matches Ethereum, 20-byte addresses using ECDSA.\n\n- **Transaction format:** Matches Ethereum, complies with [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718), encoded with [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/).\n\n- **Transaction fees:**\n\n  - **Type0** (Legacy) - Fee is calculated as `gasUsed * gasPrice`.\n\n  - **Type2** (EIP-1559) - Fee is calculated as `(baseFee + priorityFee) * gas`. Both the base and priority fees are burned.\n\n## Smart contracts\n\n- **RPC-API:** [Ethereum RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/)\n\n- **Supported opcodes:** All [opcodes](https://www.evm.codes/?fork=london) up to the London hard fork are supported.\n\n## Block verification\n\n- **Header:** [Verifying block header in Go](https://github.com/flare-foundation/go-flare/blob/main/coreth/consensus/dummy/consensus.go#L187).\n\n- **Body:** [Validating block body in Go](https://github.com/flare-foundation/go-flare/blob/main/coreth/core/block_validator.go#L62).\n\n- **Verify transaction in block:** Merkle Patricia Trie verification against the receipt root.\n\n## Consensus\n\n- **Sybil resistance mechanism:** Proof-of-Stake (PoS)\n\n- **Delegation:** In-protocol\n\n- **Block time:** ≈1.8 seconds\n\n- **Finality:** Single-slot. Once a block is validated through the gossip protocol, it is finalized.\n\n- **Transaction ordering:** Leaders' discretion, default behaviour is priority gas auction.\n\n- **Consensus mechanism:** Snowman++ (from [Avalanche](https://docs.avax.network)) offers a high-throughput, totally ordered consensus mechanism alongside a leader protocol to minimize MEV.\n\n- **Consensus participants:** Validators vote on block proposals and serve as leaders. To serve as a validator, a node must meet a governance defined [minimum self-bond](https://proposals.flare.network/FIP/FIP_5.html). Validators are randomly selected as leaders to propose new blocks. The probability of being elected leader is proportional to the validator's stake.\n\n- **Enshrined protocols:** In addition to consensus, Flare validators are also data providers for [FTSO](/ftso/overview) and attestation providers for [FDC](/fdc/overview).\n\n- **Stake distribution:** Network comprises [over 90 validators](https://flarescan.com/validators) with a median stake of ≈0.7% and a maximum stake of ≈3.3%. This includes both self-bonded and delegated stakes.\n\n:::note[Adding Flare's native token FLR to your exchange]\n\nFlare is just like Ethereum. To add it to your exchange:\n\n- Set up an [RPC node](/run-node/rpc-node)\n- Use the appropriate [network configuration](#configuration) for Flare Mainnet\n\nAdditional info: [Media & Branding](https://flare.network/media/), [Flare source code](https://github.com/flare-foundation/go-flare)\n\n:::",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport DocCardList from \"@theme/DocCardList\";\nimport SolidityReference from \"@site/src/components/DataTables/SolidityReference\";\nimport ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n\nThe **F**lare **S**ystems **P**rotocol (**FSP**) is a foundational infrastructure designed to support Flare's enshrined protocols (technically referred to as sub-protocols).\nIts primary goal is to facilitate secure, efficient, and decentralized consensus mechanisms through weighted voting by a select group of entities known as voters.\nThese voters are off-chain participants who accrue vote power from the Flare community via delegations of wrapped FLR tokens (WFLR) or stakes.\n\nFSP ensures that agreements on off-chain data or calculations are reached securely and fairly, enabling the reliable operation of sub-protocols\nlike the [Flare Time Series Oracle](/ftso/overview) and the [Flare Data Connector](/fdc/overview).\n\n**Key FSP Features:**\n\n- **Decentralized Governance**: Through a weighted voting system involving a diverse set of voters.\n- **Efficient Data Management**: By offloading complex calculations off-chain and minimizing on-chain storage requirements.\n- **Robust Reward Mechanisms**: Incentivizing participation and penalizing delays or non-compliance to maintain network health.\n- **Extensibility**: Designed to support additional sub-protocols and future enhancements like C-chain staking.\n- **Security**: Implements mechanisms to prevent malicious behavior and ensures data integrity through Merkle proofs.\n\n<ThemedImage\n  alt=\"FSP Architecture\"\n  sources={{\n    light: useBaseUrl(\"img/fsp/fsp_light.svg\"),\n    dark: useBaseUrl(\"img/fsp/fsp_dark.svg\"),\n  }}\n/>\n\n<DocCardList />",
    "Primary interface for managing protocol related metadata. This is a long-term support (LTS) interface, designed to ensure continuity even as underlying contracts evolve or protocols migrate to new versions.\n\nSourced from `ProtocolsV2Interface.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/LTS/ProtocolsV2Interface.sol).\n\n## Functions\n\n### firstRewardEpochStartTs\n\nTimestamp when the first reward epoch started, in seconds since UNIX epoch.\n\n```solidity\nfunction firstRewardEpochStartTs(\n) external view returns (\n    uint64\n);\n```\n\n### firstVotingRoundStartTs\n\nTimestamp when the first voting epoch started, in seconds since UNIX epoch.\n\n```solidity\nfunction firstVotingRoundStartTs(\n) external view returns (\n    uint64\n);\n```\n\n### getCurrentRewardEpochId\n\nReturns the current reward epoch id.\n\n```solidity\nfunction getCurrentRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n### getCurrentVotingEpochId\n\nReturns the current voting epoch id.\n\n```solidity\nfunction getCurrentVotingEpochId(\n) external view returns (\n    uint32\n);\n```\n\n### getStartVotingRoundId\n\nReturns the start voting round id for given reward epoch id.\n\n```solidity\nfunction getStartVotingRoundId(\n    uint256 _rewardEpochId\n) external view returns (\n    uint32\n);\n```\n\n### getVotePowerBlock\n\nReturns the vote power block for given reward epoch id.\n\n```solidity\nfunction getVotePowerBlock(\n    uint256 _rewardEpochId\n) external view returns (\n    uint64 _votePowerBlock\n);\n```\n\n### rewardEpochDurationSeconds\n\nDuration of reward epoch, in seconds.\n\n```solidity\nfunction rewardEpochDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\n### votingEpochDurationSeconds\n\nDuration of voting epoch, in seconds.\n\n```solidity\nfunction votingEpochDurationSeconds(\n) external view returns (\n    uint64\n);\n```",
    "Interface for managing rFLR.\n\nSourced from `IRNat.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IRNat.sol).\n\n## Functions\n\n### allowance\n\nReturns the remaining number of tokens that `spender` will be\nallowed to spend on behalf of `owner` through transferFrom. This is\nzero by default.\n\nThis value changes when approve or transferFrom are called.\n\n```solidity\nfunction allowance(\n    address owner,\n    address spender\n) external view returns (\n    uint256\n);\n```\n\n### approve\n\nSets a `value` amount of tokens as the allowance of `spender` over the\ncaller's tokens.\n\nReturns a boolean value indicating whether the operation succeeded.\n\nIMPORTANT: Beware that changing an allowance with this method brings the risk\nthat someone may use both the old and the new allowance by unfortunate\ntransaction ordering. One possible solution to mitigate this race\ncondition is to first reduce the spender's allowance to 0 and set the\ndesired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\nEmits an Approval event.\n\n```solidity\nfunction approve(\n    address spender,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n### balanceOf\n\nReturns the value of tokens owned by `account`.\n\n```solidity\nfunction balanceOf(\n    address account\n) external view returns (\n    uint256\n);\n```\n\n### claimRewards\n\nClaim rewards for a list of projects up to the given month.\n\n```solidity\nfunction claimRewards(\n    uint256[] _projectIds,\n    uint256 _month\n) external returns (\n    uint128 _claimedRewardsWei\n);\n```\n\n#### Parameters\n\n- `_projectIds`: The ids of the projects.\n- `_month`: The month up to which (including) rewards will be claimed.\n\n#### Returns\n\n- `_claimedRewardsWei`: The total amount of rewards claimed (in wei).\n\n### decimals\n\nReturns the decimals places of the token.\n\n```solidity\nfunction decimals(\n) external view returns (\n    uint8\n);\n```\n\n### distributeRewards\n\nDistributes the rewards of a project for a given month to a list of recipients.\nIt must be called by the project's distributor.\nIt can only be called for the last or current month (if enabled).\n\n```solidity\nfunction distributeRewards(\n    uint256 _projectId,\n    uint256 _month,\n    address[] _recipients,\n    uint128[] _amountsWei\n) external;\n```\n\n#### Parameters\n\n- `_projectId`: The id of the project.\n- `_month`: The month of the rewards.\n- `_recipients`: The addresses of the recipients.\n- `_amountsWei`: The amounts of rewards to distribute to each recipient (in wei).\n\n### firstMonthStartTs\n\nReturns the timestamp of the start of the first month.\n\n```solidity\nfunction firstMonthStartTs(\n) external view returns (\n    uint256\n);\n```\n\n### getBalancesOf\n\nGets owner's balances of `WNat`, `RNat` and locked tokens.\n\n```solidity\nfunction getBalancesOf(\n    address _owner\n) external view returns (\n    uint256 _wNatBalance,\n    uint256 _rNatBalance,\n    uint256 _lockedBalance\n);\n```\n\n#### Parameters\n\n- `_owner`: The address of the owner.\n\n#### Returns\n\n- `_wNatBalance`: The balance of `WNat` (in wei).\n- `_rNatBalance`: The balance of `RNat` (in wei).\n- `_lockedBalance`: The locked/vested balance (in wei).\n\n### getClaimableRewards\n\nGets the claimable rewards of a project for a given owner.\n\n```solidity\nfunction getClaimableRewards(\n    uint256 _projectId,\n    address _owner\n) external view returns (\n    uint128\n);\n```\n\n#### Parameters\n\n- `_projectId`: The id of the project.\n- `_owner`: The address of the owner.\n\n#### Returns\n\n- ``: The amount of rewards claimable by the owner (in wei).\n\n### getCurrentMonth\n\nGets the current month.\n\n```solidity\nfunction getCurrentMonth(\n) external view returns (\n    uint256\n);\n```\n\n#### Returns\n\n- ``: The current month.\n\n### getOwnerRewardsInfo\n\nGets the rewards information of a project for a given month and owner.\n\n```solidity\nfunction getOwnerRewardsInfo(\n    uint256 _projectId,\n    uint256 _month,\n    address _owner\n) external view returns (\n    uint128 _assignedRewards,\n    uint128 _claimedRewards,\n    bool _claimable\n);\n```\n\n#### Parameters\n\n- `_projectId`: The id of the project.\n- `_month`: The month of the rewards.\n- `_owner`: The address of the owner.\n\n#### Returns\n\n- `_assignedRewards`: The amount of rewards assigned to the owner for the month (in wei).\n- `_claimedRewards`: The amount of rewards claimed by the owner for the month (in wei).\n- `_claimable`: Whether the rewards are claimable by the owner.\n\n### getProjectInfo\n\nGets the information of a project.\n\n```solidity\nfunction getProjectInfo(\n    uint256 _projectId\n) external view returns (\n    string _name,\n    address _distributor,\n    bool _currentMonthDistributionEnabled,\n    bool _distributionDisabled,\n    bool _claimingDisabled,\n    uint128 _totalAssignedRewards,\n    uint128 _totalDistributedRewards,\n    uint128 _totalClaimedRewards,\n    uint128 _totalUnassignedUnclaimedRewards,\n    uint256[] _monthsWithRewards\n);\n```\n\n#### Parameters\n\n- `_projectId`: The id of the project.\n\n#### Returns\n\n- `_name`: The name of the project.\n- `_distributor`: The address of the distributor.\n- `_currentMonthDistributionEnabled`: Whether distribution is enabled for the current month.\n- `_distributionDisabled`: Whether distribution is disabled.\n- `_claimingDisabled`: Whether claiming is disabled.\n- `_totalAssignedRewards`: The total amount of rewards assigned to the project (in wei).\n- `_totalDistributedRewards`: The total amount of rewards distributed by the project (in wei).\n- `_totalClaimedRewards`: The total amount of rewards claimed from the project (in wei).\n- `_totalUnassignedUnclaimedRewards`: The total amount of unassigned unclaimed rewards (in wei).\n- `_monthsWithRewards`: The months with rewards.\n\n### getProjectRewardsInfo\n\nGets the rewards information of a project for a given month.\n\n```solidity\nfunction getProjectRewardsInfo(\n    uint256 _projectId,\n    uint256 _month\n) external view returns (\n    uint128 _assignedRewards,\n    uint128 _distributedRewards,\n    uint128 _claimedRewards,\n    uint128 _unassignedUnclaimedRewards\n);\n```\n\n#### Parameters\n\n- `_projectId`: The id of the project.\n- `_month`: The month of the rewards.\n\n#### Returns\n\n- `_assignedRewards`: The amount of rewards assigned to the project for the month (in wei).\n- `_distributedRewards`: The amount of rewards distributed by the project for the month (in wei).\n- `_claimedRewards`: The amount of rewards claimed from the project for the month (in wei).\n- `_unassignedUnclaimedRewards`: The amount of unassigned unclaimed rewards for the month (in wei).\n\n### getProjectsBasicInfo\n\nGets the basic information of all projects.\n\n```solidity\nfunction getProjectsBasicInfo(\n) external view returns (\n    string[] _names,\n    bool[] _claimingDisabled\n);\n```\n\n#### Returns\n\n- `_names`: The names of the projects.\n- `_claimingDisabled`: Whether claiming is disabled for each project.\n\n### getProjectsCount\n\nGets the total number of projects.\n\n```solidity\nfunction getProjectsCount(\n) external view returns (\n    uint256\n);\n```\n\n#### Returns\n\n- ``: The total number of projects.\n\n### getRNatAccount\n\nGets owner's RNat account. If it doesn't exist it reverts.\n\n```solidity\nfunction getRNatAccount(\n    address _owner\n) external view returns (\n    contract IRNatAccount\n);\n```\n\n#### Parameters\n\n- `_owner`: Account to query.\n\n#### Returns\n\n- ``: Address of its RNat account.\n\n### getRewardsInfo\n\nGets totals rewards information.\n\n```solidity\nfunction getRewardsInfo(\n) external view returns (\n    uint256 _totalAssignableRewards,\n    uint256 _totalAssignedRewards,\n    uint256 _totalClaimedRewards,\n    uint256 _totalWithdrawnRewards,\n    uint256 _totalWithdrawnAssignableRewards\n);\n```\n\n#### Returns\n\n- `_totalAssignableRewards`: The total amount of assignable rewards (in wei).\n- `_totalAssignedRewards`: The total amount of assigned rewards (in wei).\n- `_totalClaimedRewards`: The total amount of claimed rewards (in wei).\n- `_totalWithdrawnRewards`: The total amount of withdrawn rewards (in wei).\n- `_totalWithdrawnAssignableRewards`: The total amount of withdrawn once assignable rewards (in wei).\n\n### name\n\nReturns the name of the token.\n\n```solidity\nfunction name(\n) external view returns (\n    string\n);\n```\n\n### setClaimExecutors\n\nSets the addresses of executors and adds the owner as an executor.\n\nIf any of the executors is a registered executor, some fee needs to be paid.\n\n```solidity\nfunction setClaimExecutors(\n    address[] _executors\n) external payable;\n```\n\n#### Parameters\n\n- `_executors`: The new executors. All old executors will be deleted and replaced by these.\n\n### symbol\n\nReturns the symbol of the token.\n\n```solidity\nfunction symbol(\n) external view returns (\n    string\n);\n```\n\n### totalSupply\n\nReturns the value of tokens in existence.\n\n```solidity\nfunction totalSupply(\n) external view returns (\n    uint256\n);\n```\n\n### transfer\n\nMoves a `value` amount of tokens from the caller's account to `to`.\n\nReturns a boolean value indicating whether the operation succeeded.\n\nEmits a Transfer event.\n\n```solidity\nfunction transfer(\n    address to,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n### transferExternalToken\n\nAllows the caller to transfer ERC-20 tokens from their RNat account to the owner account.\n\nThe main use case is to move ERC-20 tokes received by mistake (by an airdrop, for example) out of the\nRNat account and move them into the main account, where they can be more easily managed.\n\nReverts if the target token is the `WNat` contract: use method `withdraw` or `withdrawAll` for that.\n\n```solidity\nfunction transferExternalToken(\n    contract IERC20 _token,\n    uint256 _amount\n) external;\n```\n\n#### Parameters\n\n- `_token`: Target token contract address.\n- `_amount`: Amount of tokens to transfer.\n\n### transferFrom\n\nMoves a `value` amount of tokens from `from` to `to` using the\nallowance mechanism. `value` is then deducted from the caller's\nallowance.\n\nReturns a boolean value indicating whether the operation succeeded.\n\nEmits a Transfer event.\n\n```solidity\nfunction transferFrom(\n    address from,\n    address to,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n### WNat\n\nReturns the `WNat` contract.\n\n```solidity\nfunction wNat(\n) external view returns (\n    contract IWNat\n);\n```\n\n### withdraw\n\nAllows the caller to withdraw `WNat` wrapped tokens from their RNat account to the owner account.\nIn case there are some self-destruct native tokens left on the contract,\nthey can be transferred to the owner account using this method and `_wrap = false`.\n\n```solidity\nfunction withdraw(\n    uint128 _amount,\n    bool _wrap\n) external;\n```\n\n#### Parameters\n\n- `_amount`: Amount of tokens to transfer (in wei).\n- `_wrap`: If `true`, the tokens will be sent wrapped in `WNat`. If `false`, they will be sent as `Nat`.\n\n### withdrawAll\n\nAllows the caller to withdraw `WNat` wrapped tokens from their RNat account to the owner account.\nIf some tokens are still locked, only 50% of them will be withdrawn, the rest will be burned as a penalty.\nIn case there are some self-destruct native tokens left on the contract,\nthey can be transferred to the owner account using this method and `_wrap = false`.\n\n```solidity\nfunction withdrawAll(\n    bool _wrap\n) external;\n```\n\n#### Parameters\n\n- `_wrap`: If `true`, the tokens will be sent wrapped in `WNat`. If `false`, they will be sent as `Nat`.\n\n## Events\n\n### Approval\n\nEmitted when the allowance of a `spender` for an `owner` is set by\na call to approve. `value` is the new allowance.\n\n```solidity\nevent Approval(\n    address owner,\n    address spender,\n    uint256 value\n)\n```\n\n### ClaimingPermissionUpdated\n\n```solidity\nevent ClaimingPermissionUpdated(\n    uint256[] projectIds,\n    bool disabled\n)\n```\n\n### DistributionPermissionUpdated\n\n```solidity\nevent DistributionPermissionUpdated(\n    uint256[] projectIds,\n    bool disabled\n)\n```\n\n### ProjectAdded\n\n```solidity\nevent ProjectAdded(\n    uint256 id,\n    string name,\n    address distributor,\n    bool currentMonthDistributionEnabled\n)\n```\n\n### ProjectUpdated\n\n```solidity\nevent ProjectUpdated(\n    uint256 id,\n    string name,\n    address distributor,\n    bool currentMonthDistributionEnabled\n)\n```\n\n### RNatAccountCreated\n\n```solidity\nevent RNatAccountCreated(\n    address owner,\n    contract IRNatAccount rNatAccount\n)\n```\n\n### RewardsAssigned\n\n```solidity\nevent RewardsAssigned(\n    uint256 projectId,\n    uint256 month,\n    uint128 amount\n)\n```\n\n### RewardsClaimed\n\n```solidity\nevent RewardsClaimed(\n    uint256 projectId,\n    uint256 month,\n    address owner,\n    uint128 amount\n)\n```\n\n### RewardsDistributed\n\n```solidity\nevent RewardsDistributed(\n    uint256 projectId,\n    uint256 month,\n    address[] recipients,\n    uint128[] amounts\n)\n```\n\n### RewardsUnassigned\n\n```solidity\nevent RewardsUnassigned(\n    uint256 projectId,\n    uint256 month,\n    uint128 amount\n)\n```\n\n### Transfer\n\nEmitted when `value` tokens are moved from one account (`from`) to\nanother (`to`).\n\nNote that `value` may be zero.\n\n```solidity\nevent Transfer(\n    address from,\n    address to,\n    uint256 value\n)\n```\n\n### UnassignedRewardsWithdrawn\n\n```solidity\nevent UnassignedRewardsWithdrawn(\n    address recipient,\n    uint128 amount\n)\n```\n\n### UnclaimedRewardsUnassigned\n\n```solidity\nevent UnclaimedRewardsUnassigned(\n    uint256 projectId,\n    uint256 month,\n    uint128 amount\n)\n```",
    "Interface for wrapping and unwrapping native tokens.\n\nSourced from `IWNat.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IWNat.sol).\n\n## Functions\n\n### allowance\n\nReturns the remaining number of tokens that `spender` will be\nallowed to spend on behalf of `owner` through transferFrom. This is\nzero by default.\n\nThis value changes when approve or transferFrom are called.\n\n```solidity\nfunction allowance(\n    address owner,\n    address spender\n) external view returns (\n    uint256\n);\n```\n\n### approve\n\nSets a `value` amount of tokens as the allowance of `spender` over the\ncaller's tokens.\n\nReturns a boolean value indicating whether the operation succeeded.\n\nIMPORTANT: Beware that changing an allowance with this method brings the risk\nthat someone may use both the old and the new allowance by unfortunate\ntransaction ordering. One possible solution to mitigate this race\ncondition is to first reduce the spender's allowance to 0 and set the\ndesired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\nEmits an Approval event.\n\n```solidity\nfunction approve(\n    address spender,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n### balanceOf\n\nReturns the value of tokens owned by `account`.\n\n```solidity\nfunction balanceOf(\n    address account\n) external view returns (\n    uint256\n);\n```\n\n### balanceOfAt\n\nQueries the token balance of `_owner` at a specific `_blockNumber`.\n\n```solidity\nfunction balanceOfAt(\n    address _owner,\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_owner`: The address from which the balance will be retrieved.\n- `_blockNumber`: The block number to query.\n\n#### Returns\n\n- ``: The balance at `_blockNumber`.\n\n### batchDelegate\n\nUndelegate all percentage delegations from the sender and then delegate corresponding\n`_bips` percentage of voting power from the sender to each member of the `_delegatees` array.\n\n```solidity\nfunction batchDelegate(\n    address[] _delegatees,\n    uint256[] _bips\n) external;\n```\n\n#### Parameters\n\n- `_delegatees`: The addresses of the new recipients.\n- `_bips`: The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). The sum of all `_bips` values must be at most 10000 (100%).\n\n### cleanupBlockNumber\n\nGet the current cleanup block number set with `setCleanupBlockNumber()`.\n\n```solidity\nfunction cleanupBlockNumber(\n) external view returns (\n    uint256\n);\n```\n\n#### Returns\n\n- ``: The currently set cleanup block number.\n\n### decimals\n\nReturns the number of decimals used to get its user representation.\nFor example, if `decimals` equals 2, a balance of 505 tokens should\nbe displayed to a user as 5.05 (505 / 10<sup>2</sup>).\n\nTokens usually opt for a value of 18, imitating the relationship between\nEther and wei. This is the default value returned by this function, unless\nit's overridden.\n\nNOTE: This information is only used for _display_ purposes: it in\nno way affects any of the arithmetic of the contract, including\nbalanceOf and transfer.\n\nShould be compatible with ERC20 method.\n\n```solidity\nfunction decimals(\n) external view returns (\n    uint8\n);\n```\n\n### delegate\n\nDelegate voting power to account `_to` from `msg.sender`, by percentage.\n\n```solidity\nfunction delegate(\n    address _to,\n    uint256 _bips\n) external;\n```\n\n#### Parameters\n\n- `_to`: The address of the recipient.\n- `_bips`: The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).\n\n### delegateExplicit\n\nExplicitly delegate `_amount` voting power to account `_to` from `msg.sender`.\nCompare with `delegate` which delegates by percentage.\n\n```solidity\nfunction delegateExplicit(\n    address _to,\n    uint256 _amount\n) external;\n```\n\n#### Parameters\n\n- `_to`: The address of the recipient.\n- `_amount`: An explicit vote power amount to be delegated. Not cumulative: every call resets the delegation value (and a value of 0 revokes all previous delegations).\n\n### delegatesOf\n\nGet the list of addresses to which `_who` is delegating, and their percentages.\n\n```solidity\nfunction delegatesOf(\n    address _who\n) external view returns (\n    address[] _delegateAddresses,\n    uint256[] _bips,\n    uint256 _count,\n    uint256 _delegationMode\n);\n```\n\n#### Parameters\n\n- `_who`: The address to query.\n\n#### Returns\n\n- `_delegateAddresses`: Positional array of addresses being delegated to.\n- `_bips`: Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the `_delegateAddresses` array.\n- `_count`: The number of delegates.\n- `_delegationMode`: Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).\n\n### delegatesOfAt\n\nGet the list of addresses to which `_who` is delegating, and their percentages, at the given block.\n\n```solidity\nfunction delegatesOfAt(\n    address _who,\n    uint256 _blockNumber\n) external view returns (\n    address[] _delegateAddresses,\n    uint256[] _bips,\n    uint256 _count,\n    uint256 _delegationMode\n);\n```\n\n#### Parameters\n\n- `_who`: The address to query.\n- `_blockNumber`: The block number to query.\n\n#### Returns\n\n- `_delegateAddresses`: Positional array of addresses being delegated to.\n- `_bips`: Positional array of delegation percents specified in basis points (1/100 of 1 percent). Each one matches the address in the same position in the `_delegateAddresses` array.\n- `_count`: The number of delegates.\n- `_delegationMode`: Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).\n\n### delegationModeOf\n\nGet the delegation mode for account '_who'. This mode determines whether vote power is\nallocated by percentage or by explicit amount. Once the delegation mode is set,\nit can never be changed, even if all delegations are removed.\n\n```solidity\nfunction delegationModeOf(\n    address _who\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_who`: The address to get delegation mode.\n\n#### Returns\n\n- ``: Delegation mode: 0 = NOT SET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit).\n\n### deposit\n\nDeposit Native and mint WNat ERC20.\n\n```solidity\nfunction deposit(\n) external payable;\n```\n\n### depositTo\n\nDeposit Native from msg.sender and mints WNat ERC20 to recipient address.\n\n```solidity\nfunction depositTo(\n    address recipient\n) external payable;\n```\n\n#### Parameters\n\n- `recipient`: An address to receive minted WNat.\n\n### governanceVotePower\n\nWhen set, allows token owners to participate in governance voting\nand delegating governance vote power.\n\n```solidity\nfunction governanceVotePower(\n) external view returns (\n    contract IGovernanceVotePower\n);\n```\n\n### name\n\nReturns the name of the token.\n\nShould be compatible with ERC20 method.\n\n```solidity\nfunction name(\n) external view returns (\n    string\n);\n```\n\n### readVotePowerContract\n\nReturns VPContract event interface used for read-only operations (view methods).\nThe only non-view method that might be called on it is `revokeDelegationAt`.\n\n`readVotePowerContract` is almost always equal to `writeVotePowerContract`\nexcept during an upgrade from one `VPContract` to a new version (which should happen\nrarely or never and will be announced beforehand).\n\nDo not call any methods on `VPContract` directly.\nState changing methods are forbidden from direct calls.\nAll methods are exposed via `VPToken`.\nThis is the reason that this method returns `IVPContractEvents`.\nUse it only for listening to events and revoking.\n\n```solidity\nfunction readVotePowerContract(\n) external view returns (\n    contract IVPContractEvents\n);\n```\n\n### revokeDelegationAt\n\nRevoke all delegation from sender to `_who` at given block.\nOnly affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\nBlock `_blockNumber` must be in the past.\nThis method should be used only to prevent rogue delegate voting in the current voting block.\nTo stop delegating use delegate / delegateExplicit with value of 0 or undelegateAll / undelegateAllExplicit.\n\n```solidity\nfunction revokeDelegationAt(\n    address _who,\n    uint256 _blockNumber\n) external;\n```\n\n#### Parameters\n\n- `_who`: Address of the delegatee.\n- `_blockNumber`: The block number at which to revoke delegation..\n\n### setCleanerContract\n\nSet the contract that is allowed to call history cleaning methods.\n\n```solidity\nfunction setCleanerContract(\n    address _cleanerContract\n) external;\n```\n\n#### Parameters\n\n- `_cleanerContract`: Address of the cleanup contract. Usually this will be an instance of `CleanupBlockNumberManager`.\n\n### setCleanupBlockNumber\n\nSet the cleanup block number.\nHistoric data for the blocks before `cleanupBlockNumber` can be erased.\nHistory before that block should never be used since it can be inconsistent.\nIn particular, cleanup block number must be lower than the current vote power block.\n\n```solidity\nfunction setCleanupBlockNumber(\n    uint256 _blockNumber\n) external;\n```\n\n#### Parameters\n\n- `_blockNumber`: The new cleanup block number.\n\n### symbol\n\nReturns the symbol of the token, usually a shorter version of the name.\n\nShould be compatible with ERC20 method.\n\n```solidity\nfunction symbol(\n) external view returns (\n    string\n);\n```\n\n### totalSupply\n\nReturns the value of tokens in existence.\n\n```solidity\nfunction totalSupply(\n) external view returns (\n    uint256\n);\n```\n\n### totalSupplyAt\n\nTotal amount of tokens held by all accounts at a specific block number.\n\n```solidity\nfunction totalSupplyAt(\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_blockNumber`: The block number to query.\n\n#### Returns\n\n- ``: The total amount of tokens at `_blockNumber`.\n\n### totalVotePower\n\nGet the current total vote power.\n\n```solidity\nfunction totalVotePower(\n) external view returns (\n    uint256\n);\n```\n\n#### Returns\n\n- ``: The current total vote power (sum of all accounts' vote power).\n\n### totalVotePowerAt\n\nGet the total vote power at block `_blockNumber`.\n\n```solidity\nfunction totalVotePowerAt(\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_blockNumber`: The block number to query.\n\n#### Returns\n\n- ``: The total vote power at the queried block (sum of all accounts' vote powers).\n\n### transfer\n\nMoves a `value` amount of tokens from the caller's account to `to`.\n\nReturns a boolean value indicating whether the operation succeeded.\n\nEmits a Transfer event.\n\n```solidity\nfunction transfer(\n    address to,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n### transferFrom\n\nMoves a `value` amount of tokens from `from` to `to` using the\nallowance mechanism. `value` is then deducted from the caller's\nallowance.\n\nReturns a boolean value indicating whether the operation succeeded.\n\nEmits a Transfer event.\n\n```solidity\nfunction transferFrom(\n    address from,\n    address to,\n    uint256 value\n) external returns (\n    bool\n);\n```\n\n### undelegateAll\n\nUndelegate all voting power of `msg.sender`. This effectively revokes all previous delegations.\nCan only be used with percentage delegation.\nDoes not reset delegation mode back to NOT SET.\n\n```solidity\nfunction undelegateAll(\n) external;\n```\n\n### undelegateAllExplicit\n\nUndelegate all explicit vote power by amount of `msg.sender`.\nCan only be used with explicit delegation.\nDoes not reset delegation mode back to NOT SET.\n\n```solidity\nfunction undelegateAllExplicit(\n    address[] _delegateAddresses\n) external returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_delegateAddresses`: Explicit delegation does not store delegatees' addresses, so the caller must supply them.\n\n#### Returns\n\n- ``: The amount still delegated (in case the list of delegates was incomplete).\n\n### undelegatedVotePowerOf\n\nCompute the current undelegated vote power of the `_owner` account.\n\n```solidity\nfunction undelegatedVotePowerOf(\n    address _owner\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_owner`: The address to query.\n\n#### Returns\n\n- ``: The unallocated vote power of `_owner`.\n\n### undelegatedVotePowerOfAt\n\nGet the undelegated vote power of the `_owner` account at a given block number.\n\n```solidity\nfunction undelegatedVotePowerOfAt(\n    address _owner,\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_owner`: The address to query.\n- `_blockNumber`: The block number to query.\n\n#### Returns\n\n- ``: The unallocated vote power of `_owner`.\n\n### votePowerFromTo\n\nGet current delegated vote power from delegator `_from` to delegatee `_to`.\n\n```solidity\nfunction votePowerFromTo(\n    address _from,\n    address _to\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_from`: Address of delegator.\n- `_to`: Address of delegatee.\n\n#### Returns\n\n- ``: votePower The delegated vote power.\n\n### votePowerFromToAt\n\nGet delegated vote power from delegator `_from` to delegatee `_to` at `_blockNumber`.\n\n```solidity\nfunction votePowerFromToAt(\n    address _from,\n    address _to,\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_from`: Address of delegator.\n- `_to`: Address of delegatee.\n- `_blockNumber`: The block number to query.\n\n#### Returns\n\n- ``: The delegated vote power.\n\n### votePowerOf\n\nGet the current vote power of `_owner`.\n\n```solidity\nfunction votePowerOf(\n    address _owner\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_owner`: The address to query.\n\n#### Returns\n\n- ``: Current vote power of `_owner`.\n\n### votePowerOfAt\n\nGet the vote power of `_owner` at block `_blockNumber`\n\n```solidity\nfunction votePowerOfAt(\n    address _owner,\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_owner`: The address to query.\n- `_blockNumber`: The block number to query.\n\n#### Returns\n\n- ``: Vote power of `_owner`at block number`_blockNumber`.\n\n### votePowerOfAtIgnoringRevocation\n\nGet the vote power of `_owner` at block `_blockNumber`, ignoring revocation information (and cache).\n\n```solidity\nfunction votePowerOfAtIgnoringRevocation(\n    address _owner,\n    uint256 _blockNumber\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_owner`: The address to query.\n- `_blockNumber`: The block number to query.\n\n#### Returns\n\n- ``: Vote power of `_owner`at block number`_blockNumber`. Result doesn't change if vote power is revoked.\n\n### withdraw\n\nWithdraw Native and burn WNat ERC20.\n\n```solidity\nfunction withdraw(\n    uint256 amount\n) external;\n```\n\n#### Parameters\n\n- `amount`: The amount to withdraw.\n\n### withdrawFrom\n\nWithdraw WNat from an owner and send native tokens to msg.sender given an allowance.\n\n```solidity\nfunction withdrawFrom(\n    address owner,\n    uint256 amount\n) external;\n```\n\n#### Parameters\n\n- `owner`: An address spending the Native tokens.\n- `amount`: The amount to spend. Requirements: - `owner` must have a balance of at least `amount`. - the caller must have allowance for `owners`'s tokens of at least `amount`.\n\n### writeVotePowerContract\n\nReturns VPContract event interface used for state-changing operations (non-view methods).\nThe only non-view method that might be called on it is `revokeDelegationAt`.\n\n`writeVotePowerContract` is almost always equal to `readVotePowerContract`,\nexcept during upgrade from one `VPContract` to a new version (which should happen\nrarely or never and will be announced beforehand).\nIn the case of an upgrade, `writeVotePowerContract` is replaced first to establish delegations.\nAfter some period (e.g., after a reward epoch ends), `readVotePowerContract` is set equal to it.\n\nDo not call any methods on `VPContract` directly.\nState changing methods are forbidden from direct calls.\nAll are exposed via `VPToken`.\nThis is the reason that this method returns `IVPContractEvents`\nUse it only for listening to events, delegating, and revoking.\n\n```solidity\nfunction writeVotePowerContract(\n) external view returns (\n    contract IVPContractEvents\n);\n```",
    "Registry interface with all Flare contract addresses.\n\nSourced from `IFlareContractRegistry.sol` on [GitLab](https://gitlab.com/flarenetwork/flare-smart-contracts/-/blob/master/contracts/userInterfaces/IFlareContractRegistry.sol).\n\n## Functions\n\n### getContractAddressByName\n\nReturns contract address for the given name - might be address(0)\n\n```solidity\nfunction getContractAddressByName(\n    string _name\n) external view returns (\n    address);\n```\n\n#### Parameters\n\n- `_name`: name of the contract\n\n### getContractAddressByHash\n\nReturns contract address for the given name hash - might be address(0)\n\n```solidity\nfunction getContractAddressByHash(\n    bytes32 _nameHash\n) external view returns (\n    address);\n```\n\n#### Parameters\n\n- `_nameHash`: hash of the contract name (keccak256(abi.encode(name))\n\n### getContractAddressesByName\n\nReturns contract addresses for the given names - might be address(0)\n\n```solidity\nfunction getContractAddressesByName(\n    string[] _names\n) external view returns (\n    address[]);\n```\n\n#### Parameters\n\n- `_names`: names of the contracts\n\n### getContractAddressesByHash\n\nReturns contract addresses for the given name hashes - might be address(0)\n\n```solidity\nfunction getContractAddressesByHash(\n    bytes32[] _nameHashes\n) external view returns (\n    address[]);\n```\n\n#### Parameters\n\n- `_nameHashes`: hashes of the contract names (keccak256(abi.encode(name))\n\n### getAllContracts\n\nReturns all contract names and corresponding addresses\n\n```solidity\nfunction getAllContracts(\n) external view returns (\n    string[] _names,\n    address[] _addresses);\n```",
    "Primary interface for random number generation. This is a long-term support (LTS) interface, designed to ensure continuity even as underlying contracts evolve or protocols migrate to new versions.\n\nSourced from `RandomNumberV2Interface.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/LTS/RandomNumberV2Interface.sol).\n\n## Functions\n\n### getRandomNumber\n\nReturns the current random number, its timestamp and the flag indicating if it is secure.\n\n```solidity\nfunction getRandomNumber(\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n#### Returns\n\n- `_randomNumber`: The current random number.\n- `_isSecureRandom`: The flag indicating if the random number is secure.\n- `_randomTimestamp`: The timestamp of the random number.\n\n### getRandomNumberHistorical\n\nReturns the historical random number for a given _votingRoundId,\nits timestamp and the flag indicating if it is secure.\nIf no finalization in the _votingRoundId, the function reverts.\n\n```solidity\nfunction getRandomNumberHistorical(\n    uint256 _votingRoundId\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n#### Parameters\n\n- `_votingRoundId`: The voting round id.\n\n#### Returns\n\n- `_randomNumber`: The current random number.\n- `_isSecureRandom`: The flag indicating if the random number is secure.\n- `_randomTimestamp`: The timestamp of the random number.",
    "Primary interface for managing all protocol rewards. This is a long-term support (LTS) interface, designed to ensure continuity even as underlying contracts evolve or protocols migrate to new versions.\n\nSourced from `RewardsV2Interface.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/LTS/RewardsV2Interface.sol).\n\n## Functions\n\n### active\n\nIndicates if the contract is active - claims are enabled.\n\n```solidity\nfunction active(\n) external view returns (\n    bool\n);\n```\n\n### claim\n\nClaim rewards for `_rewardOwner` and transfer them to `_recipient`.\nIt can be called by reward owner or its authorized executor.\n\n```solidity\nfunction claim(\n    address _rewardOwner,\n    address payable _recipient,\n    uint24 _rewardEpochId,\n    bool _wrap,\n    struct RewardsV2Interface.RewardClaimWithProof[] _proofs\n) external returns (\n    uint256 _rewardAmountWei\n);\n```\n\n#### Parameters\n\n- `_rewardOwner`: Address of the reward owner.\n- `_recipient`: Address of the reward recipient.\n- `_rewardEpochId`: Id of the reward epoch up to which the rewards are claimed.\n- `_wrap`: Indicates if the reward should be wrapped (deposited) to the WNat contract.\n- `_proofs`: Array of reward claims with merkle proofs.\n\n#### Returns\n\n- `_rewardAmountWei`: Amount of rewarded native tokens (wei).\n\n### getNextClaimableRewardEpochId\n\nReturns the next claimable reward epoch for a reward owner.\n\n```solidity\nfunction getNextClaimableRewardEpochId(\n    address _rewardOwner\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_rewardOwner`: Address of the reward owner to query.\n\n### getRewardEpochIdsWithClaimableRewards\n\nReturns the start and the end of the reward epoch range for which the reward is claimable.\n\n```solidity\nfunction getRewardEpochIdsWithClaimableRewards(\n) external view returns (\n    uint24 _startEpochId,\n    uint24 _endEpochId\n);\n```\n\n#### Returns\n\n- `_startEpochId`: The oldest epoch id that allows reward claiming.\n- `_endEpochId`: The newest epoch id that allows reward claiming.\n\n### getStateOfRewards\n\nReturns the state of rewards for a given address for all unclaimed reward epochs with claimable rewards.\n\n```solidity\nfunction getStateOfRewards(\n    address _rewardOwner\n) external view returns (\n    struct RewardsV2Interface.RewardState[][] _rewardStates\n);\n```\n\n#### Parameters\n\n- `_rewardOwner`: Address of the reward owner.\n\n#### Returns\n\n- `_rewardStates`: Array of reward states.\n\n## Structures\n\n### RewardClaim\n\nStruct used in Merkle tree for storing reward claims.\n\n```solidity\nstruct RewardClaim {\n  uint24 rewardEpochId;\n  bytes20 beneficiary;\n  uint120 amount;\n  enum RewardsV2Interface.ClaimType claimType;\n}\n```\n\n### RewardClaimWithProof\n\nStruct used for claiming rewards with Merkle proof.\n\n```solidity\nstruct RewardClaimWithProof {\n  bytes32[] merkleProof;\n  struct RewardsV2Interface.RewardClaim body;\n}\n```\n\n### RewardState\n\nStruct used for returning state of rewards.\n\n```solidity\nstruct RewardState {\n  uint24 rewardEpochId;\n  bytes20 beneficiary;\n  uint120 amount;\n  enum RewardsV2Interface.ClaimType claimType;\n  bool initialised;\n}\n```\n\n## Enums\n\n### ClaimType\n\nClaim type enum.\n\n```solidity\nenum ClaimType {\n  DIRECT,\n  FEE,\n  WNAT,\n  MIRROR,\n  CCHAIN\n}\n```",
    "Interface for managing reward claim setup.\n\nSourced from `IClaimSetupManager.sol` on [GitLab](https://gitlab.com/flarenetwork/flare-smart-contracts/-/blob/master/contracts/userInterfaces/IClaimSetupManager.sol).\n\n## Functions\n\n### setAutoClaiming\n\nSets the addresses of executors and optionally enables (creates) delegation account.\nIf setting registered executors some fee must be paid to them.\n\n```solidity\nfunction setAutoClaiming(\n    address[] _executors,\n    bool _enableDelegationAccount\n) external payable;\n```\n\n#### Parameters\n\n- `_executors`: The new executors. All old executors will be deleted and replaced by these.\n- `_enableDelegationAccount`:\n\n### setClaimExecutors\n\nSets the addresses of executors.\nIf setting registered executors some fee must be paid to them.\n\n```solidity\nfunction setClaimExecutors(\n    address[] _executors\n) external payable;\n```\n\n#### Parameters\n\n- `_executors`: The new executors. All old executors will be deleted and replaced by these.\n\n### setAllowedClaimRecipients\n\nSet the addresses of allowed recipients.\nApart from these, the owner is always an allowed recipient.\n\n```solidity\nfunction setAllowedClaimRecipients(\n    address[] _recipients\n) external;\n```\n\n#### Parameters\n\n- `_recipients`: The new allowed recipients. All old recipients will be deleted and replaced by these.\n\n### enableDelegationAccount\n\nEnables (creates) delegation account contract,\ni.e. all airdrop and ftso rewards will be send to delegation account when using automatic claiming.\n\n```solidity\nfunction enableDelegationAccount(\n) external returns (\n    contract IDelegationAccount);\n```\n\n#### Returns\n\n- ``: Address of delegation account contract.\n\n### disableDelegationAccount\n\nDisables delegation account contract,\ni.e. all airdrop and ftso rewards will be send to owner's account when using automatic claiming.\nAutomatic claiming will not claim airdrop and ftso rewards for delegation account anymore.\n\n```solidity\nfunction disableDelegationAccount(\n) external;\n```\n\n### registerExecutor\n\nAllows executor to register and set initial fee value.\nIf executor was already registered before (has fee set), only update fee after `feeValueUpdateOffset`.\nExecutor must pay fee in order to register - `registerExecutorFeeValueWei`.\n\n```solidity\nfunction registerExecutor(\n    uint256 _feeValue\n) external payable returns (\n    uint256);\n```\n\n#### Parameters\n\n- `_feeValue`: number representing fee value\n\n#### Returns\n\n- ``: Returns the reward epoch number when the setting becomes effective.\n\n### unregisterExecutor\n\nAllows executor to unregister.\n\n```solidity\nfunction unregisterExecutor(\n) external returns (\n    uint256);\n```\n\n#### Returns\n\n- ``: Returns the reward epoch number when the setting becomes effective.\n\n### updateExecutorFeeValue\n\nAllows registered executor to set (or update last scheduled) fee value.\n\n```solidity\nfunction updateExecutorFeeValue(\n    uint256 _feeValue\n) external returns (\n    uint256);\n```\n\n#### Parameters\n\n- `_feeValue`: number representing fee value\n\n#### Returns\n\n- ``: Returns the reward epoch number when the setting becomes effective.\n\n### delegate\n\nDelegate `_bips` of voting power to `_to` from msg.sender's delegation account\n\n```solidity\nfunction delegate(\n    address _to,\n    uint256 _bips\n) external;\n```\n\n#### Parameters\n\n- `_to`: The address of the recipient\n- `_bips`: The percentage of voting power to be delegated expressed in basis points (1/100 of one percent). Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).\n\n### batchDelegate\n\nUndelegate all percentage delegations from the msg.sender's delegation account and then delegate\ncorresponding `_bips` percentage of voting power to each member of `_delegatees`.\n\n```solidity\nfunction batchDelegate(\n    address[] _delegatees,\n    uint256[] _bips\n) external;\n```\n\n#### Parameters\n\n- `_delegatees`: The addresses of the new recipients.\n- `_bips`: The percentages of voting power to be delegated expressed in basis points (1/100 of one percent). Total of all `_bips` values must be at most 10000.\n\n### undelegateAll\n\nUndelegate all voting power for delegates of msg.sender's delegation account\n\n```solidity\nfunction undelegateAll(\n) external;\n```\n\n### revokeDelegationAt\n\nRevoke all delegation from msg.sender's delegation account to `_who` at given block.\nOnly affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\nBlock `_blockNumber` must be in the past.\nThis method should be used only to prevent rogue delegate voting in the current voting block.\nTo stop delegating use delegate with value of 0 or undelegateAll.\n\n```solidity\nfunction revokeDelegationAt(\n    address _who,\n    uint256 _blockNumber\n) external;\n```\n\n### delegateGovernance\n\nDelegate all governance vote power of msg.sender's delegation account to `_to`.\n\n```solidity\nfunction delegateGovernance(\n    address _to\n) external;\n```\n\n#### Parameters\n\n- `_to`: The address of the recipient\n\n### undelegateGovernance\n\nUndelegate governance vote power for delegate of msg.sender's delegation account\n\n```solidity\nfunction undelegateGovernance(\n) external;\n```\n\n### withdraw\n\nAllows user to transfer WNat to owner's account.\n\n```solidity\nfunction withdraw(\n    uint256 _amount\n) external;\n```\n\n#### Parameters\n\n- `_amount`: Amount of tokens to transfer\n\n### transferExternalToken\n\nAllows user to transfer balance of ERC20 tokens owned by the personal delegation contract.\nThe main use case is to transfer tokens/NFTs that were received as part of an airdrop or register\nas participant in such airdrop.\n\n```solidity\nfunction transferExternalToken(\n    contract IERC20 _token,\n    uint256 _amount\n) external;\n```\n\n#### Parameters\n\n- `_token`: Target token contract address\n- `_amount`: Amount of tokens to transfer\n\n### accountToDelegationAccount\n\nGets the delegation account of the `_owner`. Returns address(0) if not created yet.\n\n```solidity\nfunction accountToDelegationAccount(\n    address _owner\n) external view returns (\n    address);\n```\n\n### getDelegationAccountData\n\nGets the delegation account data for the `_owner`. Returns address(0) if not created yet.\n\n```solidity\nfunction getDelegationAccountData(\n    address _owner\n) external view returns (\n    contract IDelegationAccount _delegationAccount,\n    bool _enabled);\n```\n\n#### Parameters\n\n- `_owner`: owner's address\n\n#### Returns\n\n- `_delegationAccount`: owner's delegation account address - could be address(0)\n- `_enabled`: indicates if delegation account is enabled\n\n### claimExecutors\n\nGet the addresses of executors.\n\n```solidity\nfunction claimExecutors(\n    address _owner\n) external view returns (\n    address[]);\n```\n\n### allowedClaimRecipients\n\nGet the addresses of allowed recipients.\nApart from these, the owner is always an allowed recipient.\n\n```solidity\nfunction allowedClaimRecipients(\n    address _rewardOwner\n) external view returns (\n    address[]);\n```\n\n### isClaimExecutor\n\nReturns info if `_executor` is allowed to execute calls for `_owner`\n\n```solidity\nfunction isClaimExecutor(\n    address _owner,\n    address _executor\n) external view returns (\n    bool);\n```\n\n### getRegisteredExecutors\n\nGet registered executors\n\n```solidity\nfunction getRegisteredExecutors(\n    uint256 _start,\n    uint256 _end\n) external view returns (\n    address[] _registeredExecutors,\n    uint256 _totalLength);\n```\n\n### getExecutorInfo\n\nReturns some info about the `_executor`\n\n```solidity\nfunction getExecutorInfo(\n    address _executor\n) external view returns (\n    bool _registered,\n    uint256 _currentFeeValue);\n```\n\n#### Parameters\n\n- `_executor`: address representing executor\n\n#### Returns\n\n- `_registered`: information if executor is registered\n- `_currentFeeValue`: executor's current fee value\n\n### getExecutorCurrentFeeValue\n\nReturns the current fee value of `_executor`\n\n```solidity\nfunction getExecutorCurrentFeeValue(\n    address _executor\n) external view returns (\n    uint256);\n```\n\n#### Parameters\n\n- `_executor`: address representing executor\n\n### getExecutorFeeValue\n\nReturns the fee value of `_executor` at `_rewardEpoch`\n\n```solidity\nfunction getExecutorFeeValue(\n    address _executor,\n    uint256 _rewardEpoch\n) external view returns (\n    uint256);\n```\n\n#### Parameters\n\n- `_executor`: address representing executor\n- `_rewardEpoch`: reward epoch number\n\n### getExecutorScheduledFeeValueChanges\n\nReturns the scheduled fee value changes of `_executor`\n\n```solidity\nfunction getExecutorScheduledFeeValueChanges(\n    address _executor\n) external view returns (\n    uint256[] _feeValue,\n    uint256[] _validFromEpoch,\n    bool[] _fixed);\n```\n\n#### Parameters\n\n- `_executor`: address representing executor\n\n#### Returns\n\n- `_feeValue`: positional array of fee values\n- `_validFromEpoch`: positional array of reward epochs the fee settings are effective from\n- `_fixed`: positional array of boolean values indicating if settings are subjected to change\n\n## Events\n\n### DelegationAccountCreated\n\n```solidity\nevent DelegationAccountCreated(\n    address owner,\n    contract IDelegationAccount delegationAccount\n)\n```\n\n### DelegationAccountUpdated\n\n```solidity\nevent DelegationAccountUpdated(\n    address owner,\n    contract IDelegationAccount delegationAccount,\n    bool enabled\n)\n```\n\n### ClaimExecutorsChanged\n\n```solidity\nevent ClaimExecutorsChanged(\n    address owner,\n    address[] executors\n)\n```\n\n### AllowedClaimRecipientsChanged\n\n```solidity\nevent AllowedClaimRecipientsChanged(\n    address owner,\n    address[] recipients\n)\n```\n\n### ClaimExecutorFeeValueChanged\n\n```solidity\nevent ClaimExecutorFeeValueChanged(\n    address executor,\n    uint256 validFromRewardEpoch,\n    uint256 feeValueWei\n)\n```\n\n### ExecutorRegistered\n\n```solidity\nevent ExecutorRegistered(\n    address executor\n)\n```\n\n### ExecutorUnregistered\n\n```solidity\nevent ExecutorUnregistered(\n    address executor,\n    uint256 validFromRewardEpoch\n)\n```\n\n### MinFeeSet\n\n```solidity\nevent MinFeeSet(\n    uint256 minFeeValueWei\n)\n```\n\n### MaxFeeSet\n\n```solidity\nevent MaxFeeSet(\n    uint256 maxFeeValueWei\n)\n```\n\n### RegisterExecutorFeeSet\n\n```solidity\nevent RegisterExecutorFeeSet(\n    uint256 registerExecutorFeeValueWei\n)\n```\n\n### SetExecutorsExcessAmountRefunded\n\n```solidity\nevent SetExecutorsExcessAmountRefunded(\n    address owner,\n    uint256 excessAmount\n)\n```",
    "Interface for managing FlareDrop claims.\n\nSourced from `IDistributionToDelegators.sol` on [GitLab](https://gitlab.com/flarenetwork/flare-smart-contracts/-/blob/master/contracts/userInterfaces/IDistributionToDelegators.sol).\n\nManages the ongoing distribution of tokens from the Delegation Incentive Pool (the \"FlareDrop\"). The approval of [FIP.01](https://proposals.flare.network/FIP/FIP_1) created this pool, that releases its tokens every 30 days, over a period of 36 months, to all accounts holding Wrapped FLR.\n\n## Functions\n\n### claim\n\nAllows the sender to claim or wrap rewards for reward owner.\nThe caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\nthis approval is done by calling `setClaimExecutors`.\nIt is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\ncall, we allow the owner to control the timing of the calls.\nReward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\nreward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\n\n```solidity\nfunction claim(\n    address _rewardOwner,\n    address _recipient,\n    uint256 _month,\n    bool _wrap\n) external returns (\n    uint256 _rewardAmount);\n```\n\n#### Parameters\n\n- `_rewardOwner`: address of the reward owner\n- `_recipient`: address to transfer funds to\n- `_month`: last month to claim for\n- `_wrap`: should reward be wrapped immediately\n\n#### Returns\n\n- `_rewardAmount`: amount of total claimed rewards\n\n### autoClaim\n\nAllows batch claiming for the list of '_rewardOwners' up to given '_month'.\nIf reward owner has enabled delegation account, rewards are also claimed for that delegation account and\ntotal claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.\nClaimed amount is automatically wrapped.\nMethod can be used by reward owner or executor. If executor is registered with fee > 0,\nthen fee is paid to executor for each claimed address from the list.\n\n```solidity\nfunction autoClaim(\n    address[] _rewardOwners,\n    uint256 _month\n) external;\n```\n\n#### Parameters\n\n- `_rewardOwners`: list of reward owners to claim for\n- `_month`: last month to claim for\n\n### optOutOfAirdrop\n\nMethod to opt-out of receiving airdrop rewards\n\n```solidity\nfunction optOutOfAirdrop(\n) external;\n```\n\n### nextClaimableMonth\n\nReturns the next claimable month for '_rewardOwner'.\n\n```solidity\nfunction nextClaimableMonth(\n    address _rewardOwner\n) external view returns (\n    uint256);\n```\n\n#### Parameters\n\n- `_rewardOwner`: address of the reward owner\n\n### getClaimableAmount\n\nget claimable amount of wei for requesting account for specified month\n\n```solidity\nfunction getClaimableAmount(\n    uint256 _month\n) external view returns (\n    uint256 _amountWei);\n```\n\n#### Parameters\n\n- `_month`: month of interest\n\n#### Returns\n\n- `_amountWei`: amount of wei available for this account and provided month\n\n### getClaimableAmountOf\n\nget claimable amount of wei for account for specified month\n\n```solidity\nfunction getClaimableAmountOf(\n    address _account,\n    uint256 _month\n) external view returns (\n    uint256 _amountWei);\n```\n\n#### Parameters\n\n- `_account`: the address of an account we want to get the claimable amount of wei\n- `_month`: month of interest\n\n#### Returns\n\n- `_amountWei`: amount of wei available for provided account and month\n\n### getCurrentMonth\n\nReturns the current month\n\n```solidity\nfunction getCurrentMonth(\n) external view returns (\n    uint256 _currentMonth);\n```\n\n#### Returns\n\n- `_currentMonth`: Current month, 0 before entitlementStartTs\n\n### getMonthToExpireNext\n\nReturns the month that will expire next\n\n```solidity\nfunction getMonthToExpireNext(\n) external view returns (\n    uint256 _monthToExpireNext);\n```\n\n#### Returns\n\n- `_monthToExpireNext`: Month that will expire next, 36 when last month expired\n\n### getClaimableMonths\n\nReturns claimable months - reverts if none\n\n```solidity\nfunction getClaimableMonths(\n) external view returns (\n    uint256 _startMonth,\n    uint256 _endMonth);\n```\n\n#### Returns\n\n- `_startMonth`: first claimable month\n- `_endMonth`: last claimable month\n\n## Events\n\n### UseGoodRandomSet\n\n```solidity\nevent UseGoodRandomSet(\n    bool useGoodRandom,\n    uint256 maxWaitForGoodRandomSeconds\n)\n```\n\n### EntitlementStart\n\n```solidity\nevent EntitlementStart(\n    uint256 entitlementStartTs\n)\n```\n\n### AccountClaimed\n\n```solidity\nevent AccountClaimed(\n    address whoClaimed,\n    address sentTo,\n    uint256 month,\n    uint256 amountWei\n)\n```\n\n### AccountOptOut\n\n```solidity\nevent AccountOptOut(\n    address theAccount,\n    bool confirmed\n)\n```",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport DocCardList from \"@theme/DocCardList\";\nimport SolidityReference from \"@site/src/components/DataTables/SolidityReference\";\n\n## Deployed Contracts\n\nexport const contracts = [\n  \"EntityManager\",\n  \"Submission\",\n  \"FlareSystemsManager\",\n  \"Relay\",\n  \"RewardManager\",\n  \"VoterRegistry\",\n  \"FlareSystemsCalculator\",\n  \"WNatDelegationFee\",\n];\n\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n        <SolidityReference\n            network=\"FlareMainnet\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        <SolidityReference\n            network=\"FlareTestnetCoston2\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n        <SolidityReference\n            network=\"SongbirdCanaryNetwork\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n\n        <SolidityReference\n            network=\"SongbirdTestnetCoston\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n</Tabs>\n\n## Interfaces\n\n<DocCardList />",
    "The **Flare Systems Protocol** encompasses the following core system protocols:\n\n1. **P-chain Stake Voting Protocol**\n2. **Signing Policy Definition Protocol**\n3. **Validator Uptime Voting Protocol**\n4. **Reward Voting Protocol**\n5. **Random Number Generation Protocol** (dependent on the FTSOv2 Scaling)\n\nProtocols with voting frequencies tied to reward epochs are implemented directly on the [`FlareSystemsManager`](/network/fsp/solidity-reference/IFlareSystemsManager) smart contract, while others operate as sub-protocols. Each sub-protocol has a unique protocol ID, except for the system protocols mentioned above.\n\n## P-chain Stake Voting Protocol\n\n- **Protocol ID**: 1\n- **Voting Frequency**: Per voting epoch\n- **Description**: Functions similarly to sub-protocols, using the Flare Systems Client to submit signatures for Merkle tree-based protocol messages. It captures stake and delegation records from the P-chain during each voting epoch.\n- **Finalization**: Occurs on the Relay contract.\n- **Incentives**: Rewards for timely signing and finalization come from inflation. However, mirroring weights to delegators is not incentivized.\n\n**Infrastructure**: Utilizes a Flare P-chain indexer, requiring a specially configured observation node.\n\n## Signing Policy Definition Protocol\n\n- **Voting Frequency**: Per reward epoch\n- **Description**: Ensures that voter weights for the next reward epoch are locked and signed by a threshold weight of current voters. This information is relayed to other EVM chains, enabling cross-chain message relaying.\n\n  **Phases**:\n\n  - **Random Number Acquisition**: Triggered 2 hours before the end of the reward epoch. The random number is fetched via the FTSO scaling protocol.\n  - **Vote Power Block Selection**: Occurs after random number acquisition to select a block for vote power.\n  - **Voter Registration**: Lasts 30 minutes, allowing self-registration based on the selected block’s weights.\n  - **Signing Policy Snapshot**: Snapshots voter addresses, weights, and thresholds for the next reward epoch.\n  - **Signing Policy Sign Phase**: Ends when the threshold of signatures is reached. Delays beyond 20 minutes incur penalties.\n\n- **Finalization**: Via the `signNewSigningPolicy` function.\n- **Incentives**: No direct rewards; instead, delays incur penalties by burning fee claims based on the extent of delay.\n\n**Infrastructure**: Utilizes the Flare indexer.\n\n## Validator Uptime Voting Protocol\n\n- **Voting Frequency**: Per reward epoch\n- **Description**: After each reward epoch, voters submit signed lists of validator NodeIDs with sufficient uptime (≥80%). Voting concludes when a threshold weight (e.g., 60%) is reached.\n- **Finalization**: Through the `signUptimeVote` function.\n- **Incentives**: Collective penalization for delays by blocking reward claims.\n\n**Infrastructure**: Requires a connection to a local node, reusing the Flare P-chain indexer infrastructure.\n\n## Reward Voting Protocol\n\n- **Voting Frequency**: Per reward epoch\n- **Description**: After each reward epoch, and once uptime voting is complete, voters aggregate reward claims across sub-protocols into a Merkle tree. A final Merkle root is voted on, enabling the `RewardManager` contract to verify and pay out rewards.\n\n  **Process**:\n\n  - Sub-protocols submit reward claims based on participation data.\n  - The aggregated claims form a Merkle tree, with voting to confirm the root.\n\n- **Finalization**: Via the `signRewards` function.\n- **Incentives**: No special rewards; delays penalize all voters by blocking reward distribution.\n\n**Infrastructure**: Uses sub-protocol-specific scripts and data from the Flare indexer.\n\n## Random Number Generation Protocol\n\n- **Description**: Random numbers are generated by the [FTSOv2 Scaling](/ftso/scaling/overview). These are used for masking commits and are calculated from reveals during the scaling process. The random number forms part of a Merkle tree, confirmed via the Relay contract.\n\n## Additional Non-System Sub-Protocols\n\n- **Protocol ID 14**: [FTSOv2 Scaling](/ftso/scaling/overview)\n- **Protocol IDs 20+**: [FDC](/fdc/overview) Instances\n  - Multiple instances allow scaling, lower finalization thresholds, and segregation based on maturity and security considerations.",
    "## Voters\n\nVoters are off-chain participants in Flare's protocols, responsible for threshold-weighted voting across all sub-protocols. The system anticipates **100 voters**, selected among validators with the highest vote power.\n\n**Vote Power Sources**:\n\n- **P-chain Stake**: Adding FLR stake to a validator node.\n- **WNat Delegations**: Community members delegate vote power via the WNat smart contract.\n\nEach voter is identified by an **identity address** (managed securely via cold wallets), used for:\n\n- Establishing voter identity.\n- Conducting admin operations (e.g., setting fees, signing addresses, delegation addresses).\n- Enabling delegations to a voter's address for WNat and staking weight.\n\n**Signing and Prioritized Addresses**:\n\n- Voters can set a **signing address** (hot wallet) for protocol participation.\n- **Prioritized submission addresses** are used for on-chain communication, defaulting to the identity address.\n- Rewards are distributed either directly to the identity address or based on participation weights (delegation and node IDs).\n\n## Voting Periods\n\n- **Voting Epoch**: The shortest voting unit, lasting **90 seconds**. The first epoch starts at `T0` and increments by `i * 90s`.\n- **Reward Epoch**: Comprises **3360 voting epochs** (approx. 3.5 days). Identified by reward epoch IDs, with each reward epoch starting after the previous one concludes. However, reward epochs may be extended due to network delays.\n\n**Voting Rounds**:\n\n- Sub-protocols typically vote once per voting epoch.\n- System protocols may vote once per reward epoch.\n- Each voting round is identified by the ID of the epoch in which it started.\n\n## Voting Results and Finalization\n\nEach sub-protocol aims to reach consensus on a **Merkle root** for every voting round:\n\n- Voters independently compute candidate Merkle roots and submit signed roots on-chain.\n- A root is confirmed if it surpasses a **50%+ voting weight threshold**.\n- Finalization occurs when signatures exceeding the threshold are submitted to the [`Relay`](/network/fsp/solidity-reference/IRelay) contract, which verifies and stores confirmed Merkle roots. These are accessible for proof verification by other smart contracts.\n\n**Protocol Message Structure**:\n\n- (`pID`, `roundID`, `isSecureRandom`, `root`): Contains sub-protocol ID, voting round ID, random number status, and Merkle root.\n\n**Random Number Inclusion**:\n\n- Certain protocols (e.g., FTSO scaling) embed random numbers into Merkle trees, enabling secure random number generation for further use.\n\n## Using Confirmed Voting Results\n\nTo verify data on-chain:\n\n1. Smart contracts receive:\n   - Protocol data (structured as a Solidity struct).\n   - Voting round ID.\n   - Merkle proof.\n2. The smart contract encodes the data and applies the Merkle proof to match the confirmed root from the **Relay contract**.\n3. If the roots match, the data is verified.\n\n## Voting (Signing) Policies\n\nVoter eligibility and weights are determined for each **reward epoch** (~3.5 days). The **Signing Policy Definition Protocol** sets the eligible voters, their weights, and the threshold required for confirmation before each reward epoch begins.\n\n**Sources of Voting Weight**:\n\n- **P-chain Stake ($W_P$)**: Long-term staked FLR.\n- **Mirrored Stake ($W_M$)**: Roughly similar to $W_P$\n- **C-chain Stake ($W_C$)**: Planned for future use.\n- **WNat Delegations ($W_{WFLR}$)**: Community-delegated vote power on the WNat contract.\n\n**Aggregated Voting Weight**:\n\n$$\nW(v, r) = A(W_{M}(v, r), W_{C}(v, r), W_{WFLR}(v, r))\n$$\n\n- **Capped WFLR**: Limited to 2.5% of total wrapped weight.\n- **Total Voting Weight**: Calculated by summing up the weights of all eligible voters.\n\n## Weight Participation and Fees\n\n- **P-chain Stake**: Requires a node ID and declared staking fee. Delegators contribute to the weight by staking on node IDs.\n- **WNat Delegations**: Voters set delegation fees on the [`EntityManager`](/network/fsp/solidity-reference/IEntityManager) contract. Community members delegate to addresses based on yields and fees.\n- **C-chain Stake**: Participation logic is under development.\n\n## Signing Policies and Thresholds\n\nA **signing policy** includes:\n\n- `rewardEpochId`: Reward epoch ID.\n- `startVotingRoundId`: Indicates the start of a reward epoch.\n- `voters`: Canonical list of voter addresses.\n- `weights`: Compressed, normalized weights (2-byte values).\n- `threshold`: Usually set to **50%+** of total weight.\n- `seed`: Secure random seed.\n\n**Threshold Adjustments**:\n\n- Regular threshold: **50%+**\n- In case of delays: **60%+**\n\n## Signature Verification\n\nUses standard ECDSA signatures. The [`Relay`](/network/fsp/solidity-reference/IRelay) contract checks if the signing policy is supported by comparing stored hashes with the provided calldata, minimizing on-chain storage costs.\n\n## Random Number Generation\n\nRandom numbers are generated as a byproduct of [FTSOv2 Scaling](/ftso/scaling/overview) using a commit-reveal process.",
    "Flare's sub-protocols utilize a uniform signing weight for decision-making; however, reward distribution is based on the delegators' participation weights. Each sub-protocol calculates rewards for various participation weight types, allowing delegators to claim rewards according to their specific contribution shares.\n\nAll rewards are managed through the [`RewardManager`](/network/fsp/solidity-reference/IRewardManager) contract and are claimable after the reward epoch concludes. Sub-protocols implement their own contracts to gather rewarding inputs, which are passed to the Reward Manager for distribution. Funding is provided by sub-protocol-specific contracts, which may also handle inflation-based rewards through automated offers.\n\n## Claim Structure\n\nRewards are distributed through **reward claims**, which are data records indicating the allocation of rewards. Each claim consists of the following fields:\n\n- `rewardEpochId`: Identifier for the reward epoch.\n- `beneficiary`: The reward recipient, specified by address or node ID (20 bytes).\n- `amount`: Reward amount in FLR.\n- `claimType`: The category of the reward claim, which can be one of the following:\n  - `direct`: Rewards directly attributed to the beneficiary (address). Used for undistributed rewards, fund providers, burn claims, or specific rewarding approaches within sub-protocols.\n  - `fee`: Similar to 'direct' but specific to eligible voters. Covers delegation fees (WFLR) and node staking fees.\n  - `wflr`: Rewards for eligible voters, distributed to delegators based on their participation in WWFLR.\n  - `mirror`: Rewards distributed to delegators based on their participation in WM.\n  - `cchain`: Rewards for eligible voters, distributed based on their share in WC.\n\nWeight-based claims (`wflr`, `mirror`, `cchain`) represent total rewards for voters, to be distributed according to the delegators' participation in the voters' weight.\n\n## Calculation Process\n\nEach sub-protocol is responsible for calculating its partial reward claims for each reward epoch by:\n\n1. **Data Input**: Determining the relevant data sources (indexers).\n2. **Data Retrieval**: Querying data from indexers.\n3. **Reward Calculation**: Implementing reward algorithms to produce partial reward claims.\n\n**Partial reward claims** may have a negative amount if penalization is applied. The **Reward Voting Protocol** aggregates these partial claims into a single claim per beneficiary and type. The final claims are structured into a Merkle tree, and the Merkle root is confirmed through a voting process.\n\n## Claiming Process\n\nOnce the Merkle root is confirmed for a reward epoch, rewards can be claimed via the **Reward Manager contract**:\n\n- For `direct` or `fee` claims, rewards are transferred directly to the beneficiary upon proof verification.\n- For **weight-based claims**, the process involves two steps:\n  1. **Initialization**: Submission of a reward claim with a Merkle proof to initialize variables.\n  2. **Delegator Claims**: Delegators can then claim their share without needing additional proofs.\n\nOnce initialized, delegators can claim rewards through the Reward Manager contract. The reward for a delegator `x` is calculated as:\n\n$$\ntext{reward} = frac{U_{T,r,b}^{amount} times w(r, T, x, b)}{U_{T,r,b}^{weight}}\n$$\n\nwhere:\n\n{/* prettier-ignore */}\n- $ U_{T,r,b}^{weight} $ is the unclaimed delegation weight for reward epoch $r$ and beneficiary $b$.\n{/* prettier-ignore */}\n- $ U_{T,r,b}^{amount} $ is the unclaimed reward amount for reward epoch $r$ and beneficiary $b$.\n- $ w(r, T, x, b) $ is the weight delegated by $x$ to $b$ for weight type $T$ during reward epoch $r$.\n- The claimed reward reduces the unclaimed amount and weight, and the payout is made directly to $x$.\n\n## Incentivizing Fast Signing and Finalization\n\nSub-protocols are designed to encourage fast signature deposition and finalization:\n\n1. **Finalization Rewards**:\n\n   - The first entity to finalize a Merkle root earns the reward.\n   - To avoid centralization, rewards prioritize eligible voters and distribute based on their weight.\n   - A grace period (20s) allows selected data providers to finalize or attempt finalization before others.\n\n2. **Signing Deposition Rewards**:\n   - Voters submitting signatures within a grace period (10s) receive rewards.\n   - Signatures submitted until the block of finalization are also rewarded if they meet weight thresholds.\n\n### Finalization Incentives\n\nDuring the **grace period** for finalization (20s), selected data providers are rewarded based on a pseudo-random selection algorithm:\n\n- A hash value is used to determine which voters are eligible for finalization rewards based on their signing weight.\n- Voters are selected in proportion to their weights, and rewards are distributed among them.\n\nIf finalization is not completed within the grace period, the first to finalize receives the full reward, provided it happens within the extended reward window (`i + 2` voting epochs).\n\n### Claim Generation and Reward Distribution\n\nEach sub-protocol allocates rewards for:\n\n1. **Finalization**: Rewards for submitting sufficient signatures to finalize a Merkle root.\n2. **Signing Deposition**: Rewards for voters who timely submit valid signatures.\n\nThe reward amount attributed to a voter is split into:\n\n- **Fee Claims**: Deducted as delegation fees (WNat delegations).\n- **Weight Participation Claims**: Remaining rewards are distributed among delegators and stakers based on their weights.",
    "The **Flare Systems Protocol** utilizes a set of off-chain services encapsulated within the **Flare Systems Client**. These services interact with blockchain smart contracts to support various protocols. Key components include:\n\n1. **Protocol Manager Service**: Handles periodic transactions (`submit1`, `submit2`, `submitSignatures`, and future `submit3`) for each voting round by querying protocol data providers.\n2. **Reward Aggregator Service**: Submits the Merkle root of combined reward claims once per reward epoch.\n3. **Signing Policy Voter Service**: Signs new signing policies after they are defined, once per reward epoch.\n4. **Voter Registration Service**: Registers voters on the [`VoterRegistry`](/network/fsp/solidity-reference/IVoterRegistry) contract.\n5. **Finalizer Service**: Submits finalization transactions when a voter is eligible to finalize a specific sub-protocol.\n6. **Scheduler**: Coordinates transaction scheduling across services.\n7. **Uptime Voting Client**: Submits validator uptime votes once per reward epoch.\n\nEach voter runs an independent instance of the **Flare Systems Client**, which manages private keys and transaction submissions, enabling participation across multiple sub-protocols.\n\n## Protocol Manager Service\n\nThe **Protocol Manager Service** sends the following transactions within each voting epoch:\n\n- **submit1, submit2, submit3**: Data submission at scheduled times.\n- **submitSignatures**: Submits signatures once all required data is collected.\n\n**Data Flow**:\n\n1. The service queries protocol data providers via API to fetch data.\n2. The fetched data is processed, encoded, and sent in transaction calldata as:\n   ```\n   tx_data = function_selector + concatenated_data\n   ```\n   where each payload includes:\n   - `protocolId` (1 byte)\n   - `votingRoundId` (4 bytes)\n   - `size` (2 bytes)\n   - `payload` (encoded protocol data)\n\n**API Endpoints for Protocol Data Providers**:\n\n- `GET /submit1/:votingRoundId/:submitAddress`\n- `GET /submit2/:votingRoundId/:submitAddress`\n- `GET /submitSignatures/:votingRoundId/:submitSignaturesAddress`\n- `GET /submit3/:votingRoundId/:submitAddress`\n\n**Response Format**:\n\n```json\n{\n  \"status\": \"OK\",\n  \"data\": \"0x1234...\",\n  \"additionalData\": \"0x5678...\"\n}\n```\n\nThe services are voter-agnostic, requiring only `votingRoundId` and `submitAddress` as inputs.\n\n## Reward Aggregator Service\n\nThe **Reward Aggregator Service** calculates and submits the Merkle root of reward claims at the end of each reward epoch:\n\n- Fetches reward data from protocol reward calculators using C-chain and P-chain indexers.\n- Submits the final Merkle root via `signRewards`.\n\n**API for Reward Calculation**:\n\n- `GET /rewards/:rewardEpochId`\n- Response:\n  ```json\n  {\n    \"status\": \"OK\",\n    \"data\": \"0xabc123...\"\n  }\n  ```\n\n## Signing Policy Voter Service\n\nMonitors the `SigningPolicyInitialized` event on the Relay contract:\n\n- Signs the new policy using `signNewSigningPolicy`.\n- Tracks `SigningPolicySigned` events to determine if further signatures are needed.\n\n## Voter Registration Service\n\n- Listens for `VotePowerBlockSelected` events.\n- Registers the voter on the `VoterRegistry` contract before the `SigningPolicyInitialized` event signals the end of the registration period.\n\n## Finalizer Service\n\nThe **Finalizer Service** handles finalizing votes:\n\n- Collects signatures from the `submitSignatures` transaction.\n- Once a sufficient weight of signatures is gathered, submits finalization data to the Relay contract.\n- Prioritizes finalization during the grace period to maximize rewards.\n\n**Finalization Strategy**:\n\n- Finalizes within the grace period if eligible.\n- Competes for first finalization if the grace period has expired.\n\n## Data Encoding and Payloads\n\nData for `submitSignatures` is structured as follows:\n\n**Version 0**:\n\n- `type` (1 byte): Message type (0 for ECDSA).\n- `message` (38 bytes):\n  - `protocolId` (1 byte)\n  - `votingRoundId` (4 bytes)\n  - `randomQualityScore` (1 byte)\n  - `merkleRoot` (32 bytes)\n- `signature` (65 bytes): ECDSA signature components (`v`, `r`, `s`).\n- `unsignedMessage` (optional): Additional data (e.g., revealed random number).\n\n**Version 1**: Similar structure with adjusted payload format.\n\n## Data Availability and Merkle Trees\n\nEach sub-protocol assembles Merkle trees using off-chain data:\n\n- Data is obtained via the `GET /data/:votingRoundID` endpoint.\n- The API returns:\n  ```json\n  {\n      \"status\": \"OK\",\n      \"data\": [{\"abiName\": \"StructName\", \"data\": {...}}]\n  }\n  ```\n- ABI definitions are accessible via `GET /data-abis`.\n\n## Storage and Calculation Model\n\n**Data Sources**:\n\n- Events emitted by smart contracts.\n- Calldata from specific contract calls.\n- Immutable contract values, indexed by time.\n\nThe **Flare blockchain indexer** enables querying by time intervals and event types. Voters use the indexer to fetch data and perform calculations, which are then encoded into Merkle roots.\n\n**Benefits**:\n\n- Supports complex calculations beyond Solidity’s capabilities.\n- Reduces storage costs by storing only Merkle roots on-chain.\n\n## Result Availability and APIs\n\nVoters assemble Merkle roots for voting and can provide services to access confirmed data. This data can be exposed via APIs, allowing users to obtain calculation results with full Merkle proofs for on-chain verification.\n\n## Transaction Prioritization\n\nThe **Submission Smart Contract** prioritizes key transactions (`submit1`, `submit2`, `signatureDeposit`) to subsidize gas costs. Multiple sign transactions are allowed, but only one subsidized submission is permitted per voting round.",
    "Manages the registration of voters for upcoming reward epochs.\n\nSourced from `IVoterRegistry.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IVoterRegistry.sol).\n\n## Functions\n\n### chilledUntilRewardEpochId\n\nIn case of providing bad votes (e.g. ftso collusion), the beneficiary can be chilled for a few reward epochs.\nIf beneficiary is chilled, the vote power assigned to it is zero.\n\n```solidity\nfunction chilledUntilRewardEpochId(\n    bytes20 _beneficiary\n) external view returns (\n    uint256 _rewardEpochId\n);\n```\n\n#### Parameters\n\n- `_beneficiary`: The beneficiary (c-chain address or node id).\n\n#### Returns\n\n- `_rewardEpochId`: The reward epoch id until which the voter is chilled.\n\n### getNumberOfRegisteredVoters\n\nReturns the number of registered voters for a given reward epoch.\nSize can be zero if the reward epoch is not supported (before initial reward epoch or future reward epoch).\nSize for the next reward epoch can still change until the signing policy snapshot is created.\n\n```solidity\nfunction getNumberOfRegisteredVoters(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_rewardEpochId`: The reward epoch id.\n\n### getRegisteredVoters\n\nReturns the list of registered voters for a given reward epoch.\nList can be empty if the reward epoch is not supported (before initial reward epoch or future reward epoch).\nList for the next reward epoch can still change until the signing policy snapshot is created.\n\n```solidity\nfunction getRegisteredVoters(\n    uint256 _rewardEpochId\n) external view returns (\n    address[]\n);\n```\n\n#### Parameters\n\n- `_rewardEpochId`: The reward epoch id.\n\n### isVoterRegistered\n\nReturns true if a voter was (is currently) registered in a given reward epoch.\n\n```solidity\nfunction isVoterRegistered(\n    address _voter,\n    uint256 _rewardEpochId\n) external view returns (\n    bool\n);\n```\n\n#### Parameters\n\n- `_voter`: The voter address.\n- `_rewardEpochId`: The reward epoch id.\n\n### maxVoters\n\nMaximum number of voters in one reward epoch.\n\n```solidity\nfunction maxVoters(\n) external view returns (\n    uint256\n);\n```\n\n### newSigningPolicyInitializationStartBlockNumber\n\nReturns the block number of the start of the new signing policy initialisation for a given reward epoch.\nIt is a snapshot block of the voters' addresses (it is zero if the reward epoch is not supported).\n\n```solidity\nfunction newSigningPolicyInitializationStartBlockNumber(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_rewardEpochId`: The reward epoch id.\n\n### publicKeyRequired\n\nIndicates if the voter must have the public key set when registering.\n\n```solidity\nfunction publicKeyRequired(\n) external view returns (\n    bool\n);\n```\n\n### registerVoter\n\nRegisters a voter if the weight is high enough.\n\n```solidity\nfunction registerVoter(\n    address _voter,\n    struct IVoterRegistry.Signature _signature\n) external;\n```\n\n#### Parameters\n\n- `_voter`: The voter address.\n- `_signature`: The signature.\n\n## Events\n\n### BeneficiaryChilled\n\nEvent emitted when a beneficiary (c-chain address or node id) is chilled.\n\n```solidity\nevent BeneficiaryChilled(\n    bytes20 beneficiary,\n    uint256 untilRewardEpochId\n)\n```\n\n### VoterRegistered\n\nEvent emitted when a voter is registered.\n\n```solidity\nevent VoterRegistered(\n    address voter,\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address submitAddress,\n    address submitSignaturesAddress,\n    bytes32 publicKeyPart1,\n    bytes32 publicKeyPart2,\n    uint256 registrationWeight\n)\n```\n\n### VoterRemoved\n\nEvent emitted when a voter is removed.\n\n```solidity\nevent VoterRemoved(\n    address voter,\n    uint256 rewardEpochId\n)\n```\n\n## Structures\n\n### Signature\n\nSignature data.\n\n```solidity\nstruct Signature {\n  uint8 v;\n  bytes32 r;\n  bytes32 s;\n}\n```",
    "Performs calculations for weights and burn factors used by other contracts.\n\nSourced from `IFlareSystemsCalculator.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFlareSystemsCalculator.sol).\n\n## Functions\n\n### signingPolicySignNoRewardsDurationBlocks\n\nNumber of blocks (in addition to non-punishable blocks) after which all rewards are burned.\n\n```solidity\nfunction signingPolicySignNoRewardsDurationBlocks(\n) external view returns (\n    uint64\n);\n```\n\n### signingPolicySignNonPunishableDurationBlocks\n\nNumber of non-punishable blocks to sign new signing policy.\n\n```solidity\nfunction signingPolicySignNonPunishableDurationBlocks(\n) external view returns (\n    uint64\n);\n```\n\n### signingPolicySignNonPunishableDurationSeconds\n\nNon-punishable time to sign new signing policy.\n\n```solidity\nfunction signingPolicySignNonPunishableDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\n### wNatCapPPM\n\nWNat cap used in signing policy weight.\n\n```solidity\nfunction wNatCapPPM(\n) external view returns (\n    uint24\n);\n```\n\n## Events\n\n### VoterRegistrationInfo\n\nEvent emitted when the registration weight of a voter is calculated.\n\n```solidity\nevent VoterRegistrationInfo(\n    address voter,\n    uint24 rewardEpochId,\n    address delegationAddress,\n    uint16 delegationFeeBIPS,\n    uint256 wNatWeight,\n    uint256 wNatCappedWeight,\n    bytes20[] nodeIds,\n    uint256[] nodeWeights\n)\n```",
    "Manages prioritized and subsidized submissions for protocols.\n\nSourced from `ISubmission.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/ISubmission.sol).\n\n## Functions\n\n### getCurrentRandom\n\nReturns current random number. Method reverts if random number was not generated securely.\n\n```solidity\nfunction getCurrentRandom(\n) external view returns (\n    uint256 _randomNumber\n);\n```\n\n#### Returns\n\n- `_randomNumber`: Current random number.\n\n### getCurrentRandomWithQuality\n\nReturns current random number and a flag indicating if it was securely generated.\nIt is up to the caller to decide whether to use the returned random number or not.\n\n```solidity\nfunction getCurrentRandomWithQuality(\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom\n);\n```\n\n#### Returns\n\n- `_randomNumber`: Current random number.\n- `_isSecureRandom`: Indicates if current random number is secure.\n\n### getCurrentRandomWithQualityAndTimestamp\n\nReturns current random number, a flag indicating if it was securely generated and its timestamp.\nIt is up to the caller to decide whether to use the returned random number or not.\n\n```solidity\nfunction getCurrentRandomWithQualityAndTimestamp(\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n#### Returns\n\n- `_randomNumber`: Current random number.\n- `_isSecureRandom`: Indicates if current random number is secure.\n- `_randomTimestamp`: Random timestamp.\n\n### submit1\n\nSubmit1 method. Used in multiple protocols (i.e. as FTSO commit method).\n\n```solidity\nfunction submit1(\n) external returns (\n    bool\n);\n```\n\n### submit2\n\nSubmit2 method. Used in multiple protocols (i.e. as FTSO reveal method).\n\n```solidity\nfunction submit2(\n) external returns (\n    bool\n);\n```\n\n### submit3\n\nSubmit3 method. Future usage.\n\n```solidity\nfunction submit3(\n) external returns (\n    bool\n);\n```\n\n### submitAndPass\n\nSubmitAndPass method. Future usage.\n\n```solidity\nfunction submitAndPass(\n    bytes _data\n) external returns (\n    bool\n);\n```\n\n#### Parameters\n\n- `_data`: The data to pass to the submitAndPassContract.\n\n### submitSignatures\n\nSubmitSignatures method. Used in multiple protocols (i.e. as FTSO submit signature method).\n\n```solidity\nfunction submitSignatures(\n) external returns (\n    bool\n);\n```\n\n## Events\n\n### NewVotingRoundInitiated\n\nEvent emitted when a new voting round is initiated.\n\n```solidity\nevent NewVotingRoundInitiated(\n)\n```",
    "Manages voter entities, including addresses and node IDs.\n\nSourced from `IEntityManager.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IEntityManager.sol).\n\n## Functions\n\n### confirmDelegationAddressRegistration\n\nConfirms a delegation address registration (called by the delegation address).\n\n```solidity\nfunction confirmDelegationAddressRegistration(\n    address _voter\n) external;\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n### confirmSigningPolicyAddressRegistration\n\nConfirms a signing policy address registration (called by the signing policy address).\n\n```solidity\nfunction confirmSigningPolicyAddressRegistration(\n    address _voter\n) external;\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n### confirmSubmitAddressRegistration\n\nConfirms a submit address registration (called by the submit address).\n\n```solidity\nfunction confirmSubmitAddressRegistration(\n    address _voter\n) external;\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n### confirmSubmitSignaturesAddressRegistration\n\nConfirms a submit signatures address registration (called by the submit signatures address).\n\n```solidity\nfunction confirmSubmitSignaturesAddressRegistration(\n    address _voter\n) external;\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n### getDelegationAddressOf\n\nGets the delegation address of a voter at the current block number.\n\n```solidity\nfunction getDelegationAddressOf(\n    address _voter\n) external view returns (\n    address\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n#### Returns\n\n- ``: Public key.\n\n### getDelegationAddressOfAt\n\nGets the delegation address of a voter at a specific block number.\n\n```solidity\nfunction getDelegationAddressOfAt(\n    address _voter,\n    uint256 _blockNumber\n) external view returns (\n    address\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- ``: Public key.\n\n### getNodeIdsOf\n\nGets the node ids of a voter at the current block number.\n\n```solidity\nfunction getNodeIdsOf(\n    address _voter\n) external view returns (\n    bytes20[]\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n#### Returns\n\n- ``: Node ids.\n\n### getNodeIdsOfAt\n\nGets the node ids of a voter at a specific block number.\n\n```solidity\nfunction getNodeIdsOfAt(\n    address _voter,\n    uint256 _blockNumber\n) external view returns (\n    bytes20[]\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- ``: Node ids.\n\n### getPublicKeyOf\n\nGets the public key of a voter at the current block number.\n\n```solidity\nfunction getPublicKeyOf(\n    address _voter\n) external view returns (\n    bytes32,\n    bytes32\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n#### Returns\n\n- ``: Public key.\n- ``:\n\n### getPublicKeyOfAt\n\nGets the public key of a voter at a specific block number.\n\n```solidity\nfunction getPublicKeyOfAt(\n    address _voter,\n    uint256 _blockNumber\n) external view returns (\n    bytes32,\n    bytes32\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- ``: Public key.\n- ``:\n\n### getVoterAddresses\n\nGets voter's addresses at the current block number.\n\n```solidity\nfunction getVoterAddresses(\n    address _voter\n) external view returns (\n    struct IEntityManager.VoterAddresses _addresses\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n#### Returns\n\n- `_addresses`: Voter addresses.\n\n### getVoterAddressesAt\n\nGets voter's addresses at a specific block number.\n\n```solidity\nfunction getVoterAddressesAt(\n    address _voter,\n    uint256 _blockNumber\n) external view returns (\n    struct IEntityManager.VoterAddresses _addresses\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- `_addresses`: Voter addresses.\n\n### getVoterForDelegationAddress\n\nGets voter's address for a delegation address at a specific block number.\n\n```solidity\nfunction getVoterForDelegationAddress(\n    address _delegationAddress,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n#### Parameters\n\n- `_delegationAddress`: Delegation address.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- `_voter`: Voter address.\n\n### getVoterForNodeId\n\nGets voter's address for a node id at a specific block number.\n\n```solidity\nfunction getVoterForNodeId(\n    bytes20 _nodeId,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n#### Parameters\n\n- `_nodeId`: Node id.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- `_voter`: Voter address.\n\n### getVoterForPublicKey\n\nGets voter's address for a public key at a specific block number.\n\n```solidity\nfunction getVoterForPublicKey(\n    bytes32 _part1,\n    bytes32 _part2,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n#### Parameters\n\n- `_part1`: First part of the public key.\n- `_part2`: Second part of the public key.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- `_voter`: Voter address.\n\n### getVoterForSigningPolicyAddress\n\nGets voter's address for a signing policy address at a specific block number.\n\n```solidity\nfunction getVoterForSigningPolicyAddress(\n    address _signingPolicyAddress,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n#### Parameters\n\n- `_signingPolicyAddress`: Signing policy address.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- `_voter`: Voter address.\n\n### getVoterForSubmitAddress\n\nGets voter's address for a submit address at a specific block number.\n\n```solidity\nfunction getVoterForSubmitAddress(\n    address _submitAddress,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n#### Parameters\n\n- `_submitAddress`: Submit address.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- `_voter`: Voter address.\n\n### getVoterForSubmitSignaturesAddress\n\nGets voter's address for a submit signatures address at a specific block number.\n\n```solidity\nfunction getVoterForSubmitSignaturesAddress(\n    address _submitSignaturesAddress,\n    uint256 _blockNumber\n) external view returns (\n    address _voter\n);\n```\n\n#### Parameters\n\n- `_submitSignaturesAddress`: Submit signatures address.\n- `_blockNumber`: Block number.\n\n#### Returns\n\n- `_voter`: Voter address.\n\n### proposeDelegationAddress\n\nProposes a delegation address (called by the voter).\n\n```solidity\nfunction proposeDelegationAddress(\n    address _delegationAddress\n) external;\n```\n\n#### Parameters\n\n- `_delegationAddress`: Delegation address.\n\n### proposeSigningPolicyAddress\n\nProposes a signing policy address (called by the voter).\n\n```solidity\nfunction proposeSigningPolicyAddress(\n    address _signingPolicyAddress\n) external;\n```\n\n#### Parameters\n\n- `_signingPolicyAddress`: Signing policy address.\n\n### proposeSubmitAddress\n\nProposes a submit address (called by the voter).\n\n```solidity\nfunction proposeSubmitAddress(\n    address _submitAddress\n) external;\n```\n\n#### Parameters\n\n- `_submitAddress`: Submit address.\n\n### proposeSubmitSignaturesAddress\n\nProposes a submit signatures address (called by the voter).\n\n```solidity\nfunction proposeSubmitSignaturesAddress(\n    address _submitSignaturesAddress\n) external;\n```\n\n#### Parameters\n\n- `_submitSignaturesAddress`: Submit signatures address.\n\n### registerNodeId\n\nRegisters a node id.\n\n```solidity\nfunction registerNodeId(\n    bytes20 _nodeId,\n    bytes _certificateRaw,\n    bytes _signature\n) external;\n```\n\n#### Parameters\n\n- `_nodeId`: Node id.\n- `_certificateRaw`: Certificate in raw format.\n- `_signature`: Signature.\n\n### registerPublicKey\n\nRegisters a public key.\n\n```solidity\nfunction registerPublicKey(\n    bytes32 _part1,\n    bytes32 _part2,\n    bytes _verificationData\n) external;\n```\n\n#### Parameters\n\n- `_part1`: First part of the public key.\n- `_part2`: Second part of the public key.\n- `_verificationData`: Additional data used to verify the public key.\n\n### unregisterNodeId\n\nUnregisters a node id.\n\n```solidity\nfunction unregisterNodeId(\n    bytes20 _nodeId\n) external;\n```\n\n#### Parameters\n\n- `_nodeId`: Node id.\n\n### unregisterPublicKey\n\nUnregisters a public key.\n\n```solidity\nfunction unregisterPublicKey(\n) external;\n```\n\n## Events\n\n### DelegationAddressProposed\n\nEvent emitted when a delegation address is proposed.\n\n```solidity\nevent DelegationAddressProposed(\n    address voter,\n    address delegationAddress\n)\n```\n\n### DelegationAddressRegistrationConfirmed\n\nEvent emitted when a delegation address registration is confirmed.\n\n```solidity\nevent DelegationAddressRegistrationConfirmed(\n    address voter,\n    address delegationAddress\n)\n```\n\n### MaxNodeIdsPerEntitySet\n\nEvent emitted when the maximum number of node ids per entity is set.\n\n```solidity\nevent MaxNodeIdsPerEntitySet(\n    uint256 maxNodeIdsPerEntity\n)\n```\n\n### NodeIdRegistered\n\nEvent emitted when a node id is registered.\n\n```solidity\nevent NodeIdRegistered(\n    address voter,\n    bytes20 nodeId\n)\n```\n\n### NodeIdUnregistered\n\nEvent emitted when a node id is unregistered.\n\n```solidity\nevent NodeIdUnregistered(\n    address voter,\n    bytes20 nodeId\n)\n```\n\n### PublicKeyRegistered\n\nEvent emitted when a public key is registered.\n\n```solidity\nevent PublicKeyRegistered(\n    address voter,\n    bytes32 part1,\n    bytes32 part2\n)\n```\n\n### PublicKeyUnregistered\n\nEvent emitted when a public key is unregistered.\n\n```solidity\nevent PublicKeyUnregistered(\n    address voter,\n    bytes32 part1,\n    bytes32 part2\n)\n```\n\n### SigningPolicyAddressProposed\n\nEvent emitted when a signing policy address is proposed.\n\n```solidity\nevent SigningPolicyAddressProposed(\n    address voter,\n    address signingPolicyAddress\n)\n```\n\n### SigningPolicyAddressRegistrationConfirmed\n\nEvent emitted when a signing policy address registration is confirmed.\n\n```solidity\nevent SigningPolicyAddressRegistrationConfirmed(\n    address voter,\n    address signingPolicyAddress\n)\n```\n\n### SubmitAddressProposed\n\nEvent emitted when a submit address is proposed.\n\n```solidity\nevent SubmitAddressProposed(\n    address voter,\n    address submitAddress\n)\n```\n\n### SubmitAddressRegistrationConfirmed\n\nEvent emitted when a submit address registration is confirmed.\n\n```solidity\nevent SubmitAddressRegistrationConfirmed(\n    address voter,\n    address submitAddress\n)\n```\n\n### SubmitSignaturesAddressProposed\n\nEvent emitted when a submit signatures address is proposed.\n\n```solidity\nevent SubmitSignaturesAddressProposed(\n    address voter,\n    address submitSignaturesAddress\n)\n```\n\n### SubmitSignaturesAddressRegistrationConfirmed\n\nEvent emitted when a submit signatures address registration is confirmed.\n\n```solidity\nevent SubmitSignaturesAddressRegistrationConfirmed(\n    address voter,\n    address submitSignaturesAddress\n)\n```\n\n## Structures\n\n### VoterAddresses\n\nVoter addresses.\n\n```solidity\nstruct VoterAddresses {\n  address submitAddress;\n  address submitSignaturesAddress;\n  address signingPolicyAddress;\n}\n```",
    "Manages the delegation fees set by voters for WFLR delegations.\n\nSourced from `IWNatDelegationFee.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IWNatDelegationFee.sol).\n\n## Functions\n\n### defaultFeePercentageBIPS\n\nThe default fee percentage value.\n\n```solidity\nfunction defaultFeePercentageBIPS(\n) external view returns (\n    uint16\n);\n```\n\n### feePercentageUpdateOffset\n\nThe offset in reward epochs for the fee percentage value to become effective.\n\n```solidity\nfunction feePercentageUpdateOffset(\n) external view returns (\n    uint24\n);\n```\n\n### getVoterCurrentFeePercentage\n\nReturns the current fee percentage of `_voter`.\n\n```solidity\nfunction getVoterCurrentFeePercentage(\n    address _voter\n) external view returns (\n    uint16\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n### getVoterFeePercentage\n\nReturns the fee percentage of `_voter` for given reward epoch id.\n\n```solidity\nfunction getVoterFeePercentage(\n    address _voter,\n    uint256 _rewardEpochId\n) external view returns (\n    uint16\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n- `_rewardEpochId`: Reward epoch id. **NOTE:** fee percentage might still change for the `current + feePercentageUpdateOffset` reward epoch id\n\n### getVoterScheduledFeePercentageChanges\n\nReturns the scheduled fee percentage changes of `_voter`.\n\n```solidity\nfunction getVoterScheduledFeePercentageChanges(\n    address _voter\n) external view returns (\n    uint256[] _feePercentageBIPS,\n    uint256[] _validFromEpochId,\n    bool[] _fixed\n);\n```\n\n#### Parameters\n\n- `_voter`: Voter address.\n\n#### Returns\n\n- `_feePercentageBIPS`: Positional array of fee percentages in BIPS.\n- `_validFromEpochId`: Positional array of reward epoch ids the fee settings are effective from.\n- `_fixed`: Positional array of boolean values indicating if settings are subjected to change.\n\n### setVoterFeePercentage\n\nAllows voter to set (or update last) fee percentage.\n\n```solidity\nfunction setVoterFeePercentage(\n    uint16 _feePercentageBIPS\n) external returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_feePercentageBIPS`: Number representing fee percentage in BIPS.\n\n#### Returns\n\n- ``: Returns the reward epoch number when the value becomes effective.\n\n## Events\n\n### FeePercentageChanged\n\nEvent emitted when a voter fee percentage value is changed.\n\n```solidity\nevent FeePercentageChanged(\n    address voter,\n    uint16 value,\n    uint24 validFromEpochId\n)\n```",
    "Stores confirmed Merkle roots and signing policies.\n\nSourced from `IRelay.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IRelay.sol).\n\n## Functions\n\n### feeCollectionAddress\n\nReturns fee collection address.\n\n```solidity\nfunction feeCollectionAddress(\n) external view returns (\n    address payable\n);\n```\n\n### getRandomNumber\n\nReturns the current random number, its timestamp and the flag indicating if it is secure.\n\n```solidity\nfunction getRandomNumber(\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n#### Returns\n\n- `_randomNumber`: The current random number.\n- `_isSecureRandom`: The flag indicating if the random number is secure.\n- `_randomTimestamp`: The timestamp of the random number.\n\n### getRandomNumberHistorical\n\nReturns the historical random number for a given _votingRoundId,\nits timestamp and the flag indicating if it is secure.\nIf no finalization in the _votingRoundId, the function reverts.\n\n```solidity\nfunction getRandomNumberHistorical(\n    uint256 _votingRoundId\n) external view returns (\n    uint256 _randomNumber,\n    bool _isSecureRandom,\n    uint256 _randomTimestamp\n);\n```\n\n#### Parameters\n\n- `_votingRoundId`: The voting round id.\n\n#### Returns\n\n- `_randomNumber`: The current random number.\n- `_isSecureRandom`: The flag indicating if the random number is secure.\n- `_randomTimestamp`: The timestamp of the random number.\n\n### getVotingRoundId\n\nReturns the voting round id for given timestamp.\n\n```solidity\nfunction getVotingRoundId(\n    uint256 _timestamp\n) external view returns (\n    uint256 _votingRoundId\n);\n```\n\n#### Parameters\n\n- `_timestamp`: The timestamp.\n\n#### Returns\n\n- `_votingRoundId`: The voting round id.\n\n### governanceFeeSetup\n\nChecks the relay message for sufficient weight of signatures of the hash of the _config data.\nIf the check is successful, the relay contract is configured with the new _config data, which\nin particular means that fee configurations are updated.\nOtherwise the function reverts.\n\n```solidity\nfunction governanceFeeSetup(\n    bytes _relayMessage,\n    struct IRelay.RelayGovernanceConfig _config\n) external;\n```\n\n#### Parameters\n\n- `_relayMessage`: The relay message.\n- `_config`: The new relay configuration.\n\n### isFinalized\n\nReturns true if there is finalization for a given protocol id and voting round id.\n\n```solidity\nfunction isFinalized(\n    uint256 _protocolId,\n    uint256 _votingRoundId\n) external view returns (\n    bool\n);\n```\n\n#### Parameters\n\n- `_protocolId`: The protocol id.\n- `_votingRoundId`: The voting round id.\n\n### lastInitializedRewardEpochData\n\nReturns last initialized reward epoch data.\n\n```solidity\nfunction lastInitializedRewardEpochData(\n) external view returns (\n    uint32 _lastInitializedRewardEpoch,\n    uint32 _startingVotingRoundIdForLastInitializedRewardEpoch\n);\n```\n\n#### Returns\n\n- `_lastInitializedRewardEpoch`: Last initialized reward epoch.\n- `_startingVotingRoundIdForLastInitializedRewardEpoch`: Starting voting round id for it.\n\n### merkleRoots\n\nReturns the Merkle root for given protocol id and voting round id.\nThe function is reverted if signingPolicySetter is set, hence on all\ndeployments where the contract is used as a pure relay.\n\n```solidity\nfunction merkleRoots(\n    uint256 _protocolId,\n    uint256 _votingRoundId\n) external view returns (\n    bytes32 _merkleRoot\n);\n```\n\n#### Parameters\n\n- `_protocolId`: The protocol id.\n- `_votingRoundId`: The voting round id.\n\n#### Returns\n\n- `_merkleRoot`: The Merkle root.\n\n### protocolFeeInWei\n\nReturns fee in wei for one verification of a given protocol id.\n\n```solidity\nfunction protocolFeeInWei(\n    uint256 _protocolId\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_protocolId`: The protocol id.\n\n### relay\n\nFinalization function for new signing policies and protocol messages.\nIt can be used as finalization contract on Flare chain or as relay contract on other EVM chain.\nCan be called in two modes. It expects calldata that is parsed in a custom manner.\nHence the transaction calls should assemble relevant calldata in the 'data' field.\nDepending on the data provided, the contract operations in essentially two modes:\n(1) Relaying signing policy. The structure of the calldata is:\nfunction signature (4 bytes) + active signing policy + 0 (1 byte) + new signing policy,\ntotal of exactly 4423 bytes.\n(2) Relaying signed message. The structure of the calldata is:\nfunction signature (4 bytes) + signing policy + signed message (38 bytes) + ECDSA signatures with indices (67 bytes each)\nThis case splits into two subcases: - protocolMessageId = 1: Message id must be of the form (protocolMessageId, 0, 0, merkleRoot).\nThe validity of the signatures of sufficient weight is checked and if\nsuccessful, the merkleRoot from the message is returned (32 bytes) and the\nreward epoch id of the signing policy as well (additional 3 bytes) - protocolMessageId > 1: The validity of the signatures of sufficient weight is checked and if\nit is valid, the merkleRoot is published for protocolId and votingRoundId.\nReverts if relaying is not successful.\n\n```solidity\nfunction relay(\n) external returns (\n    bytes\n);\n```\n\n### startingVotingRoundIds\n\nReturns the start voting round id for given reward epoch id.\n\n```solidity\nfunction startingVotingRoundIds(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256 _startingVotingRoundId\n);\n```\n\n#### Parameters\n\n- `_rewardEpochId`: The reward epoch id.\n\n#### Returns\n\n- `_startingVotingRoundId`: The start voting round id.\n\n### toSigningPolicyHash\n\nReturns the signing policy hash for given reward epoch id.\nThe function is reverted if signingPolicySetter is set, hence on all\ndeployments where the contract is used as a pure relay.\n\n```solidity\nfunction toSigningPolicyHash(\n    uint256 _rewardEpochId\n) external view returns (\n    bytes32 _signingPolicyHash\n);\n```\n\n#### Parameters\n\n- `_rewardEpochId`: The reward epoch id.\n\n#### Returns\n\n- `_signingPolicyHash`: The signing policy hash.\n\n### verify\n\nVerifies the leaf (or intermediate node) with the Merkle proof against the Merkle root\nfor given protocol id and voting round id.\nA fee may need to be paid. It is protocol specific.\n**NOTE:** Overpayment is not refunded.\n\n```solidity\nfunction verify(\n    uint256 _protocolId,\n    uint256 _votingRoundId,\n    bytes32 _leaf,\n    bytes32[] _proof\n) external payable returns (\n    bool\n);\n```\n\n#### Parameters\n\n- `_protocolId`: The protocol id.\n- `_votingRoundId`: The voting round id.\n- `_leaf`: The leaf (or intermediate node) to verify.\n- `_proof`: The Merkle proof.\n\n#### Returns\n\n- ``: True if the verification is successful.\n\n### verifyCustomSignature\n\nChecks the relay message for sufficient weight of signatures for the _messageHash\nsigned for protocol message Merkle root of the form (1, 0, 0, _messageHash).\nIf the check is successful, reward epoch id of the signing policy is returned.\nOtherwise the function reverts.\n\n```solidity\nfunction verifyCustomSignature(\n    bytes _relayMessage,\n    bytes32 _messageHash\n) external returns (\n    uint256 _rewardEpochId\n);\n```\n\n#### Parameters\n\n- `_relayMessage`: The relay message.\n- `_messageHash`: The hash of the message.\n\n#### Returns\n\n- `_rewardEpochId`: The reward epoch id of the signing policy.\n\n## Events\n\n### ProtocolMessageRelayed\n\n```solidity\nevent ProtocolMessageRelayed(\n    uint8 protocolId,\n    uint32 votingRoundId,\n    bool isSecureRandom,\n    bytes32 merkleRoot\n)\n```\n\n### SigningPolicyInitialized\n\n```solidity\nevent SigningPolicyInitialized(\n    uint24 rewardEpochId,\n    uint32 startVotingRoundId,\n    uint16 threshold,\n    uint256 seed,\n    address[] voters,\n    uint16[] weights,\n    bytes signingPolicyBytes,\n    uint64 timestamp\n)\n```\n\n### SigningPolicyRelayed\n\n```solidity\nevent SigningPolicyRelayed(\n    uint256 rewardEpochId\n)\n```\n\n## Structures\n\n### FeeConfig\n\n```solidity\nstruct FeeConfig {\n  uint8 protocolId;\n  uint256 feeInWei;\n}\n```\n\n### RelayGovernanceConfig\n\n```solidity\nstruct RelayGovernanceConfig {\n  bytes32 descriptionHash;\n  uint256 chainId;\n  struct IRelay.FeeConfig[] newFeeConfigs;\n}\n```\n\n### RelayInitialConfig\n\n```solidity\nstruct RelayInitialConfig {\n  uint32 initialRewardEpochId;\n  uint32 startingVotingRoundIdForInitialRewardEpochId;\n  bytes32 initialSigningPolicyHash;\n  uint8 randomNumberProtocolId;\n  uint32 firstVotingRoundStartTs;\n  uint8 votingEpochDurationSeconds;\n  uint32 firstRewardEpochStartVotingRoundId;\n  uint16 rewardEpochDurationInVotingEpochs;\n  uint16 thresholdIncreaseBIPS;\n  uint32 messageFinalizationWindowInRewardEpochs;\n  address payable feeCollectionAddress;\n  struct IRelay.FeeConfig[] feeConfigs;\n}\n```",
    "Facilitates the claiming and distribution of rewards to voters, delegators, and stakers.\n\nSourced from `IRewardManager.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IRewardManager.sol).\n\n## Functions\n\n### active\n\nIndicates if the contract is active - claims are enabled.\n\n```solidity\nfunction active(\n) external view returns (\n    bool\n);\n```\n\n### autoClaim\n\nClaim rewards for `_rewardOwners` and their PDAs.\nRewards are deposited to the WNat (to reward owner or PDA if enabled).\nIt can be called by reward owner or its authorized executor.\nOnly claiming from weight based claims is supported.\n\n```solidity\nfunction autoClaim(\n    address[] _rewardOwners,\n    uint24 _rewardEpochId,\n    struct RewardsV2Interface.RewardClaimWithProof[] _proofs\n) external;\n```\n\n#### Parameters\n\n- `_rewardOwners`: Array of reward owners.\n- `_rewardEpochId`: Id of the reward epoch up to which the rewards are claimed.\n- `_proofs`: Array of reward claims with merkle proofs.\n\n### claim\n\nClaim rewards for `_rewardOwner` and transfer them to `_recipient`.\nIt can be called by reward owner or its authorized executor.\n\n```solidity\nfunction claim(\n    address _rewardOwner,\n    address payable _recipient,\n    uint24 _rewardEpochId,\n    bool _wrap,\n    struct RewardsV2Interface.RewardClaimWithProof[] _proofs\n) external returns (\n    uint256 _rewardAmountWei\n);\n```\n\n#### Parameters\n\n- `_rewardOwner`: Address of the reward owner.\n- `_recipient`: Address of the reward recipient.\n- `_rewardEpochId`: Id of the reward epoch up to which the rewards are claimed.\n- `_wrap`: Indicates if the reward should be wrapped (deposited) to the WNat contract.\n- `_proofs`: Array of reward claims with merkle proofs.\n\n#### Returns\n\n- `_rewardAmountWei`: Amount of rewarded native tokens (wei).\n\n### cleanupBlockNumber\n\nGet the current cleanup block number.\n\n```solidity\nfunction cleanupBlockNumber(\n) external view returns (\n    uint256\n);\n```\n\n#### Returns\n\n- ``: The currently set cleanup block number.\n\n### firstClaimableRewardEpochId\n\nThe first reward epoch id that was claimable.\n\n```solidity\nfunction firstClaimableRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n### getCurrentRewardEpochId\n\nReturns current reward epoch id.\n\n```solidity\nfunction getCurrentRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n### getInitialRewardEpochId\n\nReturns initial reward epoch id.\n\n```solidity\nfunction getInitialRewardEpochId(\n) external view returns (\n    uint256\n);\n```\n\n### getNextClaimableRewardEpochId\n\nReturns the next claimable reward epoch for a reward owner.\n\n```solidity\nfunction getNextClaimableRewardEpochId(\n    address _rewardOwner\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_rewardOwner`: Address of the reward owner to query.\n\n### getRewardEpochIdToExpireNext\n\nReturns the reward epoch id that will expire next once a new reward epoch starts.\n\n```solidity\nfunction getRewardEpochIdToExpireNext(\n) external view returns (\n    uint256\n);\n```\n\n### getRewardEpochIdsWithClaimableRewards\n\nReturns the start and the end of the reward epoch range for which the reward is claimable.\n\n```solidity\nfunction getRewardEpochIdsWithClaimableRewards(\n) external view returns (\n    uint24 _startEpochId,\n    uint24 _endEpochId\n);\n```\n\n#### Returns\n\n- `_startEpochId`: The oldest epoch id that allows reward claiming.\n- `_endEpochId`: The newest epoch id that allows reward claiming.\n\n### getRewardEpochTotals\n\nReturns reward epoch totals.\n\n```solidity\nfunction getRewardEpochTotals(\n    uint24 _rewardEpochId\n) external view returns (\n    uint256 _totalRewardsWei,\n    uint256 _totalInflationRewardsWei,\n    uint256 _initialisedRewardsWei,\n    uint256 _claimedRewardsWei,\n    uint256 _burnedRewardsWei\n);\n```\n\n#### Parameters\n\n- `_rewardEpochId`: Reward epoch id.\n\n#### Returns\n\n- `_totalRewardsWei`: Total rewards (inflation + community) for the epoch (wei).\n- `_totalInflationRewardsWei`: Total inflation rewards for the epoch (wei).\n- `_initialisedRewardsWei`: Initialised rewards of all claim types for the epoch (wei).\n- `_claimedRewardsWei`: Claimed rewards for the epoch (wei).\n- `_burnedRewardsWei`: Burned rewards for the epoch (wei).\n\n### getStateOfRewards\n\nReturns the state of rewards for a given address for all unclaimed reward epochs with claimable rewards.\n\n```solidity\nfunction getStateOfRewards(\n    address _rewardOwner\n) external view returns (\n    struct RewardsV2Interface.RewardState[][] _rewardStates\n);\n```\n\n#### Parameters\n\n- `_rewardOwner`: Address of the reward owner.\n\n#### Returns\n\n- `_rewardStates`: Array of reward states.\n\n### getStateOfRewardsAt\n\nReturns the state of rewards for a given address at a specific reward epoch.\n\n```solidity\nfunction getStateOfRewardsAt(\n    address _rewardOwner,\n    uint24 _rewardEpochId\n) external view returns (\n    struct RewardsV2Interface.RewardState[] _rewardStates\n);\n```\n\n#### Parameters\n\n- `_rewardOwner`: Address of the reward owner.\n- `_rewardEpochId`: Reward epoch id.\n\n#### Returns\n\n- `_rewardStates`: Array of reward states.\n\n### getTotals\n\nReturns totals.\n\n```solidity\nfunction getTotals(\n) external view returns (\n    uint256 _totalRewardsWei,\n    uint256 _totalInflationRewardsWei,\n    uint256 _totalClaimedWei,\n    uint256 _totalBurnedWei\n);\n```\n\n#### Returns\n\n- `_totalRewardsWei`: Total rewards (wei).\n- `_totalInflationRewardsWei`: Total inflation rewards (wei).\n- `_totalClaimedWei`: Total claimed rewards (wei).\n- `_totalBurnedWei`: Total burned rewards (wei).\n\n### getUnclaimedRewardState\n\nGets the unclaimed reward state for a beneficiary, reward epoch id and claim type.\n\n```solidity\nfunction getUnclaimedRewardState(\n    address _beneficiary,\n    uint24 _rewardEpochId,\n    enum RewardsV2Interface.ClaimType _claimType\n) external view returns (\n    struct IRewardManager.UnclaimedRewardState _state\n);\n```\n\n#### Parameters\n\n- `_beneficiary`: Address of the beneficiary to query.\n- `_rewardEpochId`: Id of the reward epoch to query.\n- `_claimType`: Claim type to query.\n\n#### Returns\n\n- `_state`: Unclaimed reward state.\n\n### initialiseWeightBasedClaims\n\nInitialises weight based claims.\n\n```solidity\nfunction initialiseWeightBasedClaims(\n    struct RewardsV2Interface.RewardClaimWithProof[] _proofs\n) external;\n```\n\n#### Parameters\n\n- `_proofs`: Array of reward claims with merkle proofs.\n\n### noOfInitialisedWeightBasedClaims\n\nReturns the number of weight based claims that have been initialised.\n\n```solidity\nfunction noOfInitialisedWeightBasedClaims(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_rewardEpochId`: Reward epoch id.\n\n## Events\n\n### RewardClaimed\n\nEmitted when rewards are claimed.\n\n```solidity\nevent RewardClaimed(\n    address beneficiary,\n    address rewardOwner,\n    address recipient,\n    uint24 rewardEpochId,\n    enum RewardsV2Interface.ClaimType claimType,\n    uint120 amount\n)\n```\n\n#### Parameters\n\n- `beneficiary`: Address of the beneficiary (voter or node id) that accrued the reward.\n- `rewardOwner`: Address that was eligible for the rewards.\n- `recipient`: Address that received the reward.\n- `rewardEpochId`: Id of the reward epoch where the reward was accrued.\n- `claimType`: Claim type\n- `amount`: Amount of rewarded native tokens (wei).\n\n### RewardClaimsEnabled\n\nEmitted when reward claims have been enabled.\n\n```solidity\nevent RewardClaimsEnabled(\n    uint256 rewardEpochId\n)\n```\n\n#### Parameters\n\n- `rewardEpochId`: First claimable reward epoch.\n\n### RewardClaimsExpired\n\nUnclaimed rewards have expired and are now inaccessible.\n\n`getUnclaimedRewardState()` can be used to retrieve more information.\n\n```solidity\nevent RewardClaimsExpired(\n    uint256 rewardEpochId\n)\n```\n\n#### Parameters\n\n- `rewardEpochId`: Id of the reward epoch that has just expired.\n\n## Structures\n\n### RewardClaim\n\nStruct used in Merkle tree for storing reward claims.\n\n```solidity\nstruct RewardClaim {\n  uint24 rewardEpochId;\n  bytes20 beneficiary;\n  uint120 amount;\n  enum RewardsV2Interface.ClaimType claimType;\n}\n```\n\n### RewardClaimWithProof\n\nStruct used for claiming rewards with Merkle proof.\n\n```solidity\nstruct RewardClaimWithProof {\n  bytes32[] merkleProof;\n  struct RewardsV2Interface.RewardClaim body;\n}\n```\n\n### RewardState\n\nStruct used for returning state of rewards.\n\n```solidity\nstruct RewardState {\n  uint24 rewardEpochId;\n  bytes20 beneficiary;\n  uint120 amount;\n  enum RewardsV2Interface.ClaimType claimType;\n  bool initialised;\n}\n```\n\n### UnclaimedRewardState\n\nStruct used for storing unclaimed reward data.\n\n```solidity\nstruct UnclaimedRewardState {\n  bool initialised;\n  uint120 amount;\n  uint128 weight;\n}\n```",
    "Manages system protocols like the Signing Policy Definition, Uptime Voting, and Reward Voting.\n\nSourced from `IFlareSystemsManager.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFlareSystemsManager.sol).\n\n## Functions\n\n### firstRewardEpochStartTs\n\nTimestamp when the first reward epoch started, in seconds since UNIX epoch.\n\n```solidity\nfunction firstRewardEpochStartTs(\n) external view returns (\n    uint64\n);\n```\n\n### firstVotingRoundStartTs\n\nTimestamp when the first voting epoch started, in seconds since UNIX epoch.\n\n```solidity\nfunction firstVotingRoundStartTs(\n) external view returns (\n    uint64\n);\n```\n\n### getCurrentRewardEpoch\n\nReturns the current reward epoch id (backwards compatibility).\n\n```solidity\nfunction getCurrentRewardEpoch(\n) external view returns (\n    uint256\n);\n```\n\n### getCurrentRewardEpochId\n\nReturns the current reward epoch id.\n\n```solidity\nfunction getCurrentRewardEpochId(\n) external view returns (\n    uint24\n);\n```\n\n### getCurrentVotingEpochId\n\nReturns the current voting epoch id.\n\n```solidity\nfunction getCurrentVotingEpochId(\n) external view returns (\n    uint32\n);\n```\n\n### getSeed\n\nReturns the seed for given reward epoch id.\n\n```solidity\nfunction getSeed(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256\n);\n```\n\n### getStartVotingRoundId\n\nReturns the start voting round id for given reward epoch id.\n\n```solidity\nfunction getStartVotingRoundId(\n    uint256 _rewardEpochId\n) external view returns (\n    uint32\n);\n```\n\n### getThreshold\n\nReturns the threshold for given reward epoch id.\n\n```solidity\nfunction getThreshold(\n    uint256 _rewardEpochId\n) external view returns (\n    uint16\n);\n```\n\n### getVotePowerBlock\n\nReturns the vote power block for given reward epoch id.\n\n```solidity\nfunction getVotePowerBlock(\n    uint256 _rewardEpochId\n) external view returns (\n    uint64 _votePowerBlock\n);\n```\n\n### getVoterRegistrationData\n\nReturns voter rgistration data for given reward epoch id.\n\n```solidity\nfunction getVoterRegistrationData(\n    uint256 _rewardEpochId\n) external view returns (\n    uint256 _votePowerBlock,\n    bool _enabled\n);\n```\n\n#### Parameters\n\n- `_rewardEpochId`: Reward epoch id.\n\n#### Returns\n\n- `_votePowerBlock`: Vote power block.\n- `_enabled`: Indicates if voter registration is enabled.\n\n### isVoterRegistrationEnabled\n\nIndicates if voter registration is currently enabled.\n\n```solidity\nfunction isVoterRegistrationEnabled(\n) external view returns (\n    bool\n);\n```\n\n### rewardEpochDurationSeconds\n\nDuration of reward epoch, in seconds.\n\n```solidity\nfunction rewardEpochDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\n### signNewSigningPolicy\n\nMethod for collecting signatures for the new signing policy.\n\n```solidity\nfunction signNewSigningPolicy(\n    uint24 _rewardEpochId,\n    bytes32 _newSigningPolicyHash,\n    struct IFlareSystemsManager.Signature _signature\n) external;\n```\n\n#### Parameters\n\n- `_rewardEpochId`: Reward epoch id of the new signing policy.\n- `_newSigningPolicyHash`: New signing policy hash.\n- `_signature`: Signature.\n\n### signRewards\n\nMethod for collecting signatures for the rewards.\n\n```solidity\nfunction signRewards(\n    uint24 _rewardEpochId,\n    struct IFlareSystemsManager.NumberOfWeightBasedClaims[] _noOfWeightBasedClaims,\n    bytes32 _rewardsHash,\n    struct IFlareSystemsManager.Signature _signature\n) external;\n```\n\n#### Parameters\n\n- `_rewardEpochId`: Reward epoch id of the rewards.\n- `_noOfWeightBasedClaims`: Number of weight based claims list.\n- `_rewardsHash`: Rewards hash.\n- `_signature`: Signature.\n\n### signUptimeVote\n\nMethod for collecting signatures for the uptime vote.\n\n```solidity\nfunction signUptimeVote(\n    uint24 _rewardEpochId,\n    bytes32 _uptimeVoteHash,\n    struct IFlareSystemsManager.Signature _signature\n) external;\n```\n\n#### Parameters\n\n- `_rewardEpochId`: Reward epoch id of the uptime vote.\n- `_uptimeVoteHash`: Uptime vote hash.\n- `_signature`: Signature.\n\n### submitUptimeVote\n\nMethod for submitting node ids with high enough uptime.\n\n```solidity\nfunction submitUptimeVote(\n    uint24 _rewardEpochId,\n    bytes20[] _nodeIds,\n    struct IFlareSystemsManager.Signature _signature\n) external;\n```\n\n#### Parameters\n\n- `_rewardEpochId`: Reward epoch id of the uptime vote.\n- `_nodeIds`: Node ids with high enough uptime.\n- `_signature`: Signature.\n\n### votingEpochDurationSeconds\n\nDuration of voting epoch, in seconds.\n\n```solidity\nfunction votingEpochDurationSeconds(\n) external view returns (\n    uint64\n);\n```\n\n## Events\n\n### RandomAcquisitionStarted\n\nEvent emitted when random acquisition phase starts.\n\n```solidity\nevent RandomAcquisitionStarted(\n    uint24 rewardEpochId,\n    uint64 timestamp\n)\n```\n\n### RewardEpochStarted\n\nEvent emitted when reward epoch starts.\n\n```solidity\nevent RewardEpochStarted(\n    uint24 rewardEpochId,\n    uint32 startVotingRoundId,\n    uint64 timestamp\n)\n```\n\n### RewardsSigned\n\nEvent emitted when rewards are signed.\n\n```solidity\nevent RewardsSigned(\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address voter,\n    bytes32 rewardsHash,\n    struct IFlareSystemsManager.NumberOfWeightBasedClaims[] noOfWeightBasedClaims,\n    uint64 timestamp,\n    bool thresholdReached\n)\n```\n\n### SignUptimeVoteEnabled\n\nEvent emitted when it is time to sign uptime vote.\n\n```solidity\nevent SignUptimeVoteEnabled(\n    uint24 rewardEpochId,\n    uint64 timestamp\n)\n```\n\n### SigningPolicySigned\n\nEvent emitted when signing policy is signed.\n\n```solidity\nevent SigningPolicySigned(\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address voter,\n    uint64 timestamp,\n    bool thresholdReached\n)\n```\n\n### UptimeVoteSigned\n\nEvent emitted when uptime vote is signed.\n\n```solidity\nevent UptimeVoteSigned(\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address voter,\n    bytes32 uptimeVoteHash,\n    uint64 timestamp,\n    bool thresholdReached\n)\n```\n\n### UptimeVoteSubmitted\n\nEvent emitted when uptime vote is submitted.\n\n```solidity\nevent UptimeVoteSubmitted(\n    uint24 rewardEpochId,\n    address signingPolicyAddress,\n    address voter,\n    bytes20[] nodeIds,\n    uint64 timestamp\n)\n```\n\n### VotePowerBlockSelected\n\nEvent emitted when vote power block is selected.\n\n```solidity\nevent VotePowerBlockSelected(\n    uint24 rewardEpochId,\n    uint64 votePowerBlock,\n    uint64 timestamp\n)\n```\n\n## Structures\n\n### NumberOfWeightBasedClaims\n\nNumber of weight based claims structure\n\n```solidity\nstruct NumberOfWeightBasedClaims {\n  uint256 rewardManagerId;\n  uint256 noOfWeightBasedClaims;\n}\n```\n\n### Signature\n\nSignature structure\n\n```solidity\nstruct Signature {\n  uint8 v;\n  bytes32 r;\n  bytes32 s;\n}\n```",
    "import TabItem from \"@theme/TabItem\";\nimport Tabs from \"@theme/Tabs\";\nimport Remix from \"@site/src/components/remix\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport SecureRandomConsumer from \"!!raw-loader!/examples/developer-hub-solidity/SecureRandomConsumer.sol\";\nimport SetEvmVersionRemix from \"/static/img/set-evm-version-remix.png\";\nimport SecureRandomWeb3Js from \"!!raw-loader!/examples/developer-hub-javascript/secure_random_coston2_web3.js\";\nimport SecureRandomEthersJs from \"!!raw-loader!/examples/developer-hub-javascript/secure_random_coston2_ethers.js\";\nimport SecureRandomWeb3Py from \"!!raw-loader!/examples/developer-hub-python/secure_random_coston2.py\";\nimport SecureRandomRust from \"!!raw-loader!/examples/developer-hub-rust/src/bin/secure_random_coston2.rs\";\nimport SecureRandomGo from \"!!raw-loader!/examples/developer-hub-go/coston2/secure_random.go\";\nimport RandomNumberV2Lottery from \"!!raw-loader!/examples/developer-hub-solidity/RandomNumberV2Lottery.sol\";\n\nThis guide explains how to obtain secure random numbers on Flare. Secure randomness is generated by the [Scaling](/ftso/scaling/overview) protocol, which leverages a decentralized network of approximately 100 data providers who generate random numbers every 90 seconds.\n\nThe protocol aggregates these individual random numbers to produce a final random number that is both uniform and resistant to manipulation. The uniformity of this random number is ensured as long as at least one of the data providers remains honest, i.e. 1-of-N.\nThe protocol has an in-built security mechanism to detect manipulation attempts, and will warn the end user if such an attempt is detected.\n\n<details>\n<summary>**Understand the mechanism behind secure random numbers on Flare.**</summary>\n\nAs described in the [FTSOv2 whitepaper](https://flare.network/wp-content/uploads/FTSOv2-White-Paper.pdf), the Scaling protocol consists of the following phases:\n\n1. **Commit:** During the Commit phase, data providers prepare their submissions for each of the data feeds and encode them into a 4-byte vector. Then, each data provider publishes on chain a hash commitment obtained as:\n\n   `Hash(address, voting_epoch_id, random_number, price_data)`\n\n   - **Random Number**: This commit includes a locally generated random number.\n   - **Purpose**: The random number blinds the commit hash of the user from a search attack and is used later (once revealed) to contribute to onchain randomness.\n\n2. **Reveal:** During the Reveal phase, each data provider reveals all inputs to their hash commitment. As such, all locally produced random numbers become available onchain.\n\n3. **Signing:** After the Reveal phase, data providers perform a number of local computations relevant to the Scaling protocol, which include:\n\n   - Computing the weighted median prices\n   - Calculating the rewards\n\n   All these are packaged into a Merkle root, which is published onchain together with a signature of the root.\n\n4. **Finalization:** Once enough signatures for the same Merkle root are gathered, the process is finalized.\n\n**Secure Random Numbers**\n\nFor each voting epoch (90 seconds), an overall random number is generated from the local random numbers:\n\n$$\nR = sum_{i} r_i pmod{N}\n$$\n\nwhere $r_i$ is the local random number generated by the $i^{th}$ data provider, and $ N = 2^n $ denotes the maximum possible size of the individual $n$-bit random numbers.\nThis mechanism ensures that the resultant $R$ is a uniformly generated random number as long as at least any one of the inputs was an honestly generated uniformly random number.\n\nImportantly, the Merkle root published by the data providers contains a Boolean value that tracks whether the generated random number for the current voting epoch is secure.\n\n**Security Mechanism**\n\nThe security mechanism behind the random number generator protects the protocol against withholding attacks. An adversary could wait until all submissions are known and then choose whether or not to reveal their own commit data to influence the final result. This security mechanism measures the quality of the random number as follows:\n\n- **True**: If there are no omissions of reveals for the commits provided by the data providers.\n- **False**: If any omission exists, or if a reveal does not match the committed value.\n\nIf a data provider causes an omission (or false reveal), they will be penalized, and their random number will not be included in the random number calculation for a number of voting rounds.\n\n</details>\n\n## Use secure random onchain\n\n:::tip\n\nYou can integrate secure random numbers into your application on Flare for no cost (not even gas!).\n\n:::\n\n<CodeBlock language=\"solidity\" title=\"SecureRandomConsumer.sol\">\n  {SecureRandomConsumer}\n</CodeBlock>\n\n{/* prettier-ignore */}\n<Remix fileName=\"SecureRandomConsumer.sol\">Open in Remix</Remix>\n<br></br>\n\nIn addition to the `randomNumber` itself, two other variables are retrieved:\n\n- `isSecure`: A boolean flag indicating whether the random number was generated securely. If the protocol detects any attempt to manipulate the random number, this flag is set to `false`.\n\n- `timestamp`: The UNIX timestamp marking the end of the voting epoch during which data was collected from data providers to generate the specific number. Each voting epoch lasts for a fixed 90-second window.\n\n:::warning[Set EVM Version to London]\n\n- **Using Remix:** Set EVM version to `london` in the **Advanced Configurations** section of the **Solidity Compiler** tab:\n\n  <img src={SetEvmVersionRemix} style={{ width: 300 }} />\n\n- **Using Hardhat or Foundry:** Set EVM version to `london` in [hardhat.config.ts](https://github.com/flare-foundation/flare-hardhat-starter/blob/master/hardhat.config.ts#L34) or [foundry.toml](https://github.com/flare-foundation/flare-foundry-starter/blob/master/foundry.toml).\n\n- **Using Standard Solidity JSON:** Set `evmVersion` to `london`:\n\n  ```json\n  {\n    \"settings\": {\n      \"optimizer\": {\n        /* ... */\n      },\n      \"evmVersion\": \"london\"\n    }\n  }\n  ```\n\n- **Using `solc` CLI:** Set `--evm-version` to `london`:\n\n  ```bash\n  solc --evm-version london <args>\n  ```\n\n:::\n\n### Example lottery application\n\nThis contract implements an example simple lottery system that utilizes a secure random number to select a winner.\nParticipants can enter the lottery, and the winner is drawn using the secure random number generated by `RandomNumberV2`.\n\n<CodeBlock language=\"solidity\" title=\"RandomNumberV2Lottery.sol\">\n  {RandomNumberV2Lottery}\n</CodeBlock>\n\n{/* prettier-ignore */}\n<Remix fileName=\"RandomNumberV2Lottery.sol\">Open in Remix</Remix>\n<br></br>\n\n## Use secure random offchain\n\nTo obtain a secure random number offchain, you need two key pieces of information:\n\n1. **RPC Endpoint URL:** The RPC Endpoint URL determines which network your code will interact with. You can use a node provider service or point to your [own RPC node](/run-node/rpc-node). A comprehensive list of public and private RPC endpoints for all Flare networks is available on the [Network Configuration](/network/overview#configuration) page.\n\n2. **Contract Address:** The address for the `RandomNumberV2` contract varies by network. You can obtain this address in two ways:\n\n   - **From the Solidity Reference page:** Find the `RandomNumberV2` address for each network on the [Solidity Reference](/network/solidity-reference) page.\n\n     **OR**\n\n   - **Query the FlareContractRegistry Contract:** The `FlareContractRegistry` contract has the same address across all networks. You can query it to get the `RandomNumberV2` contract address. Refer to the specific language guides for examples:\n     - [JavaScript](/network/guides/flare-for-javascript-developers#make-query)\n     - [Python](/network/guides/flare-for-python-developers#make-query)\n     - [Rust](/network/guides/flare-for-rust-developers#make-query)\n     - [Go](/network/guides/flare-for-go-developers#make-query)\n\n:::tip\n\nAll examples in this guide are available at [developer-hub/examples](https://github.com/flare-foundation/developer-hub/tree/main/examples).\n\n:::\n\n<Tabs block>\n  <TabItem value=\"web3js\" label=\"web3.js\" default>\n    \n    This example uses [web3.js](https://github.com/web3/web3.js) to retrieve a secure random number on Flare Testnet Coston2.\n\n    ```bash\n    npm install web3\n    ```\n\n    <CodeBlock language=\"javascript\" title=\"secure_random.js\">\n      {SecureRandomWeb3Js}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"ethersjs\" label=\"ethers.js\">\n    \n    This example uses [ethers.js](https://github.com/ethers-io/ethers.js/) to retrieve a secure random number on Flare Testnet Coston2.\n\n    ```bash\n    npm install ethers\n    ```\n\n    <CodeBlock language=\"javascript\" title=\"secure_random.js\">\n      {SecureRandomEthersJs}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"web3py\" label=\"web3.py\">\n\n    This example uses [web3.py](https://github.com/ethereum/web3.py) to retrieve a secure random number on Flare Testnet Coston2.\n\n    <Tabs groupId=\"python\">\n      <TabItem value=\"uv\" label=\"uv\" default>\n\n        ```bash\n        uv add web3\n        ```\n\n      </TabItem>\n      <TabItem value=\"pip\" label=\"pip\">\n\n        ```bash\n        pip install web3\n        ```\n\n      </TabItem>\n    </Tabs>\n\n    <CodeBlock language=\"python\" title=\"secure_random.py\">\n      {SecureRandomWeb3Py}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"alloyrs\" label=\"alloy-rs\">\n\n    This example uses [alloy-rs](https://github.com/alloy-rs) to retrieve a secure random number on Flare Testnet Coston2.\n\n    ```bash\n    cargo add alloy eyre tokio --features alloy/full,tokio/rt,tokio/rt-multi-thread,tokio/macros\n    ```\n    <CodeBlock language=\"rust\" title=\"secure_random.rs\">\n      {SecureRandomRust}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"goethereum\" label=\"go-ethereum\">\n    This example uses the Go API from [Geth](https://geth.ethereum.org) to retrieve FTSOv2 feed data for FLR/USD, BTC/USD, and ETH/USD from Flare Testnet Coston2.\n\n    ```bash\n    go get github.com/ethereum/go-ethereum/ethclient\n    ```\n    The project structure should look like:\n\n    ```plaintext\n    developer-hub-go/\n    ├── coston2/\n    │   └── *.go\n    ├── flare/\n    │   └── *.go\n    ├── main.go\n    ├── go.mod\n    └── go.sum\n    ```\n\n    With Go, you need to manually fetch the contract's ABI and generate the Go bindings.\n    Copy the [RandomNumberV2 ABI](https://api.routescan.io/v2/network/testnet/evm/114/etherscan/api?module=contract&action=getabi&address=0x5CdF9eAF3EB8b44fB696984a1420B56A7575D250&format=raw) and paste it into a file named `RandomNumberV2.abi`, located in the root of your project, i.e. same level as `go.mod`. Then using [abigen](https://geth.ethereum.org/docs/tools/abigen), generate the Go bindings.\n\n    ```bash\n    abigen --abi RandomNumberV2.abi --pkg coston2 --type RandomNumberV2 --out coston2/RandomNumberV2.go\n    ```\n\n    <CodeBlock language=\"go\" title=\"coston2/secure_random.go\">\n      {SecureRandomGo}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport FtsoV2FeedConsumerNoImports from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2FeedConsumer_no_imports.sol\";\nimport ChainIdCoston2 from \"!!raw-loader!/examples/developer-hub-rust/src/bin/chain_id_coston2.rs\";\nimport ChainIdFlare from \"!!raw-loader!/examples/developer-hub-rust/src/bin/chain_id_flare.rs\";\nimport CreateAccount from \"!!raw-loader!/examples/developer-hub-rust/src/bin/create_account.rs\";\nimport MakeQueryCoston2 from \"!!raw-loader!/examples/developer-hub-rust/src/bin/make_query_coston2.rs\";\nimport MakeQueryFlare from \"!!raw-loader!/examples/developer-hub-rust/src/bin/make_query_flare.rs\";\nimport DeployContractCoston2 from \"!!raw-loader!/examples/developer-hub-rust/src/bin/deploy_contract_coston2.rs\";\nimport DeployContractFlare from \"!!raw-loader!/examples/developer-hub-rust/src/bin/deploy_contract_flare.rs\";\nimport Config from \"!!raw-loader!/examples/developer-hub-rust/config.json\";\n\nThis guide is for developers who want to interact with Flare using Rust. In this guide, using Rust, you will learn how to:\n\n- Query a contract on Flare using [alloy-rs](https://github.com/alloy-rs), an async library for interacting with Ethereum-like chains.\n- Compile a Solidity contract using the CLI interface of [solc](https://github.com/ethereum/solidity), the Solidity compiler.\n- Deploy your compiled contract on Flare.\n\n:::tip\n\nAll examples in this guide are available at [developer-hub/examples](https://github.com/flare-foundation/developer-hub/tree/main/examples).\n\n:::\n\n## Getting started\n\nInstall the Solidity compiler by following the instructions in the [Solidity documentation](https://docs.soliditylang.org/en/latest/installing-solidity.html#linux-packages). The main commands are provided here:\n\n<Tabs>\n  <TabItem value=\"macos\" label=\"MacOS via Homebrew\" default>\n\n    ```bash\n    brew tap ethereum/ethereum\n    brew install solidity\n    ```\n\n  </TabItem>\n  <TabItem value=\"ubuntu\" label=\"Ubuntu via PPAs\">\n  \n    ```bash \n    sudo add-apt-repository -y ppa:ethereum/ethereum\n    sudo apt update\n    sudo apt install solc\n    ```\n    \n  </TabItem>\n</Tabs>\n\nInstall the following dependencies:\n\n```bash\ncargo add alloy eyre tokio --features alloy/full,tokio/rt,tokio/rt-multi-thread,tokio/macros\n```\n\n### Usage\n\nYou need to connect to testnet or mainnet via an RPC, any RPC listed on the [Network Configuration](/network/overview#configuration) page will work. For this guide, you can use the Public RPC.\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"rust\" title=\"src/bin/chain_id.rs\">\n      {ChainIdCoston2}\n    </CodeBlock>\n\n    </TabItem>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"rust\" title=\"src/bin/chain_id.rs\">\n      {ChainIdFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n```bash\ncargo run --bin chain_id\n```\n\n## Querying a contract\n\nTo query a contract, two pieces of information are required:\n\n- Contract address\n- Contract ABI (Application Binary Interface)\n\nFor this example, you can use the `FlareContractRegistry` contract which has the same address `0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019` across both testnet and mainnet.\n\n### Fetch ABI\n\nTo fetch a contract's ABI, copy the [FlareContractRegistry ABI](https://api.routescan.io/v2/network/testnet/evm/114/etherscan/api?module=contract&action=getabi&address=0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019&format=raw), and paste it into a file named `FlareContractRegistry.json`, located in the root of your project, i.e. same level as `Cargo.toml`.\n\n### Make query\n\nYou can now query the `FlareContractRegistry` contract to get the addresses of other Flare contracts.\n\nFor example, querying it for the address of the `WNat` contract:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"rust\" title=\"src/bin/make_query.rs\">\n      {MakeQueryCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"rust\" title=\"src/bin/make_query.rs\">\n      {MakeQueryFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n```bash\ncargo run --bin make_query\n```\n\n## Compiling a contract\n\nFor this example, you can use the `FtsoV2FeedConsumer` contract to query the FTSOv2 feeds. Copy the `FtsoV2FeedConsumer` sample contract code given below, and save the `.sol` file in the same folder as your `Cargo.toml`.\n\n<details>\n<summary>`FtsoV2FeedConsumer` sample contract</summary>\n\nNote that the contract interface dependencies have been inlined to avoid any import issues.\n\n<CodeBlock language=\"solidity\" title=\"FtsoV2FeedConsumer.sol\">\n  {FtsoV2FeedConsumerNoImports}\n</CodeBlock>\n\n</details>\n\n### Compile with solc\n\nTo compile the contract using the Solidity CLI compiler, create a file named `config.json`:\n\n<CodeBlock language=\"json\" title=\"config.json\">\n  {Config}\n</CodeBlock>\n\n```bash\nsolc --standard-json config.json  > FtsoV2FeedConsumer.json\n```\n\nThis will generate a `FtsoV2FeedConsumer.json` file with the contract's ABI and bytecode.\n\n### Modify format\n\nThings get a bit annoying here, as the alloy-rs `solc!()` macro expects a specific format for the JSON, which is not the same as the output from the Solidity compiler. To fix this, in the generated `FtsoV2FeedConsumer.json`, remove the top-level JSON fields, after you are done, the JSON should look like:\n\n```json title=\"FtsoV2FeedConsumer.json\"\n{\n  \"abi\": [\n    ...\n  ],\n  \"evm\": {\n    ...\n  }\n  \"metadata\": \"...\"\n}\n```\n\n## Create account\n\nBefore deploying a contract, you need to have an account with some testnet or mainnet gas tokens. You can create a new Flare account using `create_account.rs`:\n\n<CodeBlock language=\"rust\" title=\"src/bin/create_account.rs\">\n  {CreateAccount}\n</CodeBlock>\n\n```bash\ncargo run --bin create_account\n```\n\nThis will output a new private key and an account pair.\n\n:::danger\n\n- Never share your private keys.\n- Never put your private keys in source code.\n- Never commit private keys to a Git repository.\n\n:::\n\nYou can save the account and private key into environment variables `ACCOUNT` and `ACCOUNT_PRIVATE_KEY` respectively.\n\n:::note\n\nYou can also import the raw hex private key to MetaMask and any other wallet - the private key can be shared between your Rust code and any number of wallets.\n\n:::\n\n- For testnet, you can get free testnet C2FLR on the [Coston2 Faucet](https://faucet.flare.network/coston2).\n- For mainnet you will need to fund the account with FLR. You can buy FLR with regular currency in places like centralized exchanges, crypto on-ramps, or swap other tokens for FLR on decentralized exchanges.\n\n## Deploying with alloy-rs\n\nWith the account ready, you can now deploy the contract. In a `deploy_contract.rs` file, you can define the following code to deploy the contract:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"rust\" title=\"src/bin/deploy_contract.rs\">\n      {DeployContractCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"rust\" title=\"src/bin/deploy_contract.rs\">\n      {DeployContractFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\nYou can now run the `deploy_contract.rs` script to deploy the contract. The contract address will be printed once the deployment is successful. You can check the contract address on a Flare Blockchain explorer, linked on the [Network Configuration](/network/overview#configuration) page.\n\n```bash\ncargo run --bin deploy_contract\n```\n\nCongratulations! You have now successfully deployed a contract on Flare using 🦀.\n\n:::tip[What's next?]\n\nLearn how to interact with Flare's enshrined oracle [FTSOv2 using Rust](/ftso/guides/read-feeds-offchain).\n\n:::",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport FtsoV2FeedConsumerNoImports from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2FeedConsumer_no_imports.sol\";\nimport ChainIdCoston2 from \"!!raw-loader!/examples/developer-hub-go/coston2/chain_id.go\";\nimport ChainIdFlare from \"!!raw-loader!/examples/developer-hub-go/flare/chain_id.go\";\nimport MakeQueryCoston2 from \"!!raw-loader!/examples/developer-hub-go/coston2/make_query.go\";\nimport MakeQueryFlare from \"!!raw-loader!/examples/developer-hub-go/flare/make_query.go\";\nimport CreateAccount from \"!!raw-loader!/examples/developer-hub-go/create_account.go\";\nimport DeployContractCoston2 from \"!!raw-loader!/examples/developer-hub-go/coston2/deploy_contract.go\";\nimport DeployContractFlare from \"!!raw-loader!/examples/developer-hub-go/flare/deploy_contract.go\";\n\nThis guide is for developers who want to interact with Flare using Go. In this guide, using Go, you will learn how to:\n\n- Query a contract on Flare using the Go API for [Geth](https://github.com/ethereum/go-ethereum), a client that implements the full Ethereum JSON-RPC API.\n- Compile a Solidity contract using the CLI interface of [solc](https://github.com/ethereum/solidity), the Solidity compiler.\n- Deploy your compiled contract on Flare.\n\n:::tip\n\nAll examples in this guide are available at [developer-hub/examples](https://github.com/flare-foundation/developer-hub/tree/main/examples).\n\n:::\n\n## Getting started\n\nInstall Geth by following the instructions in the [Geth documentation](https://geth.ethereum.org/docs/getting-started/installing-geth). Also install the Solidity compiler by following the instructions in the [Solidity documentation](https://docs.soliditylang.org/en/latest/installing-solidity.html#linux-packages). The main commands are provided here:\n\n<Tabs>\n  <TabItem value=\"macos\" label=\"MacOS via Homebrew\" default>\n\n    ```bash\n    brew tap ethereum/ethereum\n    brew install ethereum solidity\n    ```\n\n  </TabItem>\n  <TabItem value=\"ubuntu\" label=\"Ubuntu via PPAs\">\n  \n    ```bash \n    sudo add-apt-repository -y ppa:ethereum/ethereum\n    sudo apt update\n    sudo apt install ethereum solc\n    ```\n    \n  </TabItem>\n</Tabs>\n\nAdd the `ethclient` and `keystore` packages to your Go project:\n\n```bash\ngo get github.com/ethereum/go-ethereum/ethclient\ngo get github.com/ethereum/go-ethereum/accounts/keystore\n```\n\nThe folder structure of your Go project should look like:\n\n```plaintext\ndeveloper-hub-go/\n├── coston2/\n│   └── *.go\n├── flare/\n│   └── *.go\n├── main.go\n├── go.mod\n└── go.sum\n```\n\n### Usage\n\nYou need to connect to testnet or mainnet via an RPC, any RPC listed on the [Network Configuration](/network/overview#configuration) page will work. For this guide, you can use the Public RPC.\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"go\" title=\"coston2/chain_id.go\">\n      {ChainIdCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"go\" title=\"flare/chain_id.go\">\n      {ChainIdFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n## Querying a contract\n\nTo query a contract, two pieces of information are required:\n\n- Contract address\n- Contract ABI (Application Binary Interface)\n\nFor this example, you can use the `FlareContractRegistry` contract which has the same address `0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019` across both testnet and mainnet.\n\n### Fetch ABI\n\nTo fetch a contract's ABI, copy the [FlareContractRegistry ABI](https://api.routescan.io/v2/network/testnet/evm/114/etherscan/api?module=contract&action=getabi&address=0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019&format=raw), and paste it into a file named `FlareContractRegistry.abi`, located in the root of your project, i.e. same level as `go.mod`.\n\nTo generate the ABI bindings, which will be saved to `FlareContractRegistry.go`:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    ```bash\n    abigen --abi FlareContractRegistry.abi --pkg coston2 --type FlareContractRegistry --out coston2/FlareContractRegistry.go\n    ```\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    ```bash\n    abigen --abi FlareContractRegistry.abi --pkg flare --type FlareContractRegistry --out flare/FlareContractRegistry.go\n    ```\n\n  </TabItem>\n</Tabs>\n\n### Make query\n\nYou can now query the `FlareContractRegistry` contract to get the addresses of other Flare contracts.\n\nFor example, querying it for the address of the `WNat` contract:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"go\" title=\"coston2/make_query.go\">\n      {MakeQueryCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n    \n    <CodeBlock language=\"go\" title=\"flare/make_query.go\">\n      {MakeQueryFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n## Compiling with solc\n\nFor this example, you can use the `FtsoV2FeedConsumer` contract to query the FTSOv2 feeds. Copy the `FtsoV2FeedConsumer` sample contract code given below, and save the `.sol` file in the same folder as your `go.mod`.\n\n<details>\n<summary>`FtsoV2FeedConsumer` sample contract</summary>\n\nNote that the contract interface dependencies have been inlined to avoid any import issues.\n\n<CodeBlock language=\"solidity\" title=\"FtsoV2FeedConsumer.sol\">\n  {FtsoV2FeedConsumerNoImports}\n</CodeBlock>\n\n</details>\n\nTo compile the contract, use the Solidity compiler:\n\n```bash\nsolc --evm-version london --abi --bin FtsoV2FeedConsumer.sol -o build\n```\n\nThe compiled contract will be saved in the `build/` folder.\n\n## Create account\n\nBefore deploying a contract, you need an account. You can create an account using the following code:\n\n<CodeBlock language=\"go\" title=\"create_account.go\">\n  {CreateAccount}\n</CodeBlock>\n\nThis will generate a new account and save the keystore file in the current directory. The account address will be printed to the console.\n\n:::danger\n\n- Never share your private keys.\n- Never put your private keys in source code.\n- Never commit private keys to a Git repository.\n\n:::\n\n- For testnet, you can get free testnet C2FLR on the [Coston2 Faucet](https://faucet.flare.network/coston2).\n- For mainnet you will need to fund the account with FLR. You can buy FLR with regular currency in places like centralized exchanges, crypto on-ramps, or swap other tokens for FLR on decentralized exchanges.\n\n## Deploying with geth\n\nTo deploy the contract, you need to first generate the contract bindings:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    ```bash\n    abigen --bin=build/FtsoV2FeedConsumer.bin --abi=build/FtsoV2FeedConsumer.abi --pkg coston2 --type FtsoV2FeedConsumer --out coston2/FtsoV2FeedConsumer.go\n    ```\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n    \n    ```bash\n    abigen --bin=build/FtsoV2FeedConsumer.bin --abi=build/FtsoV2FeedConsumer.abi --pkg flare --type FtsoV2FeedConsumer --out flare/FtsoV2FeedConsumer.go\n    ```\n\n  </TabItem>\n</Tabs>\n\nThis will generate the `FtsoV2FeedConsumer.go` file, with the function `DeployFtsoV2FeedConsumer`.\n\nCopy the contents of the generated keystore file into the `key` constant in the following code:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"go\" title=\"deploy_contract.go\">\n      {DeployContractCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"go\" title=\"deploy_contract.go\">\n      {DeployContractFlare}\n    </CodeBlock>\n\n</TabItem>\n\n</Tabs>\n\nCongratulations! You have now successfully deployed a contract on Flare using Go.\n\n:::tip[What's next?]\n\nLearn how to interact with Flare's enshrined oracle [FTSOv2 using Go](/ftso/guides/read-feeds-offchain).\n\n:::",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nThe starter kit includes a basic setup for configuring Hardhat and Foundry, along with examples on how to compile, test and deploy smart contracts on Flare.\n\n## Hardhat\n\n### Getting Started\n\nIf you're new to Hardhat, review Hardhat's documentation on [Getting Started with Hardhat](https://hardhat.org/hardhat-runner/docs/getting-started#overview).\n\nInstall the following prerequisites:\n\n- [Node.js](https://nodejs.org/en) v18.0 or higher\n- [npm](https://nodejs.org/en/learn/getting-started/an-introduction-to-the-npm-package-manager) or [yarn](https://yarnpkg.com)\n\n:::tip\n\n[Hardhat for Visual Studio Code](https://hardhat.org/hardhat-vscode) is the official Hardhat extension that adds advanced support for Solidity to VSCode. If you use VSCode, give it a try!\n\n:::\n\n:::info\n\nOpenZeppelin version `4.x` is used for this Starter Kit, ensure you refer to the correct version of the [OpenZeppelin documentation](https://docs.openzeppelin.com/contracts/4.x/).\n\n:::\n\n### Setup\n\n#### Cloning and installing dependencies\n\nClone the [template repository](https://github.com/flare-foundation/flare-hardhat-starter) and navigate into the project directory.\n\n```bash\ngit clone https://github.com/flare-foundation/flare-hardhat-starter.git\ncd flare-hardhat-starter\n```\n\nInstall the project dependencies.\n\n<Tabs groupId=\"jsmanager\">\n  <TabItem value=\"npm\" label=\"npm\" default>\n\n    ```bash\n    npm install\n    ```\n\n  </TabItem>\n  <TabItem value=\"yarn\" label=\"yarn\">\n\n    ```bash\n    yarn\n    ```\n\n    </TabItem>\n\n</Tabs>\n\n#### Setting up environment variables\n\nCopy the example environment file and update it with your settings.\n\n```bash\ncp .env.example .env\n```\n\nOpen the `.env` file and set your `PRIVATE_KEY`.\n\n```text\nPRIVATE_KEY=your_private_key_here\n```\n\n:::danger\n\n- Never share your private keys.\n- Never put your private keys in source code.\n- Never commit private keys to a Git repository.\n\n:::\n\n### Compile, test and deploy\n\nCompile the smart contracts to generate the necessary artifacts.\n\n<Tabs groupId=\"jsmanager\">\n  <TabItem value=\"npm\" label=\"npm\" default>\n\n    ```bash\n    npx hardhat compile\n    ```\n\n  </TabItem>\n  <TabItem value=\"yarn\" label=\"yarn\">\n\n    ```bash\n    yarn hardhat compile\n    ```\n\n  </TabItem>\n</Tabs>\n\nThis command compiles all `.sol` files in the `/contracts` folder and generates artifacts needed for testing.\n\n#### Testing your contracts\n\nRun the provided test suite to ensure everything is set up correctly.\n\n<Tabs groupId=\"jsmanager\">\n  <TabItem value=\"npm\" label=\"npm\" default>\n\n    ```bash\n    npx hardhat test\n    ```\n\n  </TabItem>\n  <TabItem value=\"yarn\" label=\"yarn\">\n\n    ```bash\n    yarn hardhat test\n    ```\n\n  </TabItem>\n</Tabs>\n\n#### Deploying your contracts\n\nReview and modify `hardhat.config.ts` to specify the networks you want to deploy to. The details for Flare Mainnet, Flare Testnet Coston2, Songbird Canary-Network and Songbird Testnet Coston are already included.\n\nOptionally you can add the API keys for either [Flarescan](https://flarescan.com) or [Flare Explorer](https://flarescan.com) in the `.env` file.\n\n<Tabs groupId=\"jsmanager\">\n  <TabItem value=\"npm\" label=\"npm\" default>\n\n    ```bash\n    npx hardhat run scripts/tryDeployment.ts\n    ```\n\n  </TabItem>\n  <TabItem value=\"yarn\" label=\"yarn\">\n  \n    ```bash\n    yarn npx hardhat run scripts/tryDeployment.ts\n    ```\n\n  </TabItem>\n</Tabs>\n\n## Foundry\n\n### Getting Started\n\nIf you're new to Foundry, review Foundry's documentation on [Getting Started with Foundry](https://book.getfoundry.sh).\n\nInstall the following prerequisites:\n\n- [Foundry](https://book.getfoundry.sh/getting-started/installation.html)\n\n### Setup\n\n#### Cloning and installing dependencies\n\nClone the [flare-foundry-starter](https://github.com/flare-foundation/flare-foundry-starter) and navigate into the project directory.\n\n```bash\ngit clone https://github.com/flare-foundation/flare-foundry-starter.git\ncd flare-foundry-starter\n```\n\nInstall the project dependencies.\n\n```bash\nforge soldeer install\n```\n\nYou might need to modify `remappings.txt` so `/src` paths are read correctly, e.g.:\n\n```bash\n@openzeppelin-contracts/=dependencies/@openzeppelin-contracts-5.2.0-rc.1/\nflare-periphery/=dependencies/flare-periphery-0.0.1/\nforge-std/=dependencies/forge-std-1.9.5/src/\nforge-std/=dependencies/forge-std-1.9.5/\nsurl/=dependencies/surl-0.0.0/src/\nsurl/=dependencies/surl-0.0.0/\n```\n\n#### Setting up environment variables\n\nCopy `.env.example` to `.env` and update it with your settings.\n\nAdd `PRIVATE_KEY` to your environment variables.\n\n```text\nPRIVATE_KEY=your_private_key_here\n```\n\n:::danger\n\n- Never share your private keys.\n- Never put your private keys in source code.\n- Never commit private keys to a Git repository.\n\n:::\n\nYou now need to add the information from the `.env` file to your bash profile:\n\n```bash\nsource .env\n```\n\nYou need to do this every time you open a new terminal or change the `.env` file.\n\n### Compile, test and deploy\n\nCompile the smart contracts to generate the necessary artifacts.\n\n```bash\nforge build\n```\n\nThis command compiles all `.sol` files in the `/src` folder and generates artifacts needed for testing.\n\n#### Testing contracts\n\nRun the provided test suite to ensure everything is set up correctly.\n\n```bash\nforge test\n```\n\n#### Deploying your contracts\n\nRun the deployment script using Foundry:\n\n```bash\nforge script script/Counter.s.sol --broadcast --private-key $PRIVATE_KEY --rpc-url <RPC_URL>\n```\n\nReplace `<RPC_URL>` with the RPC endpoint of the network you are deploying to. A list of RPC endpoints for Flare networks can be found in Flare's [Network Configuration](/network/overview#configuration).",
    "[FlareDrops](https://flare.network/flaredrop-guide/) are a series of 36 monthly drops totalling 24.2 billion FLR can be claimed by active Flare community members who have wrapped their Flare tokens.\nThis guide explains how to manage FlareDrop functionality in applications.\n\n<details>\n<summary>**Understanding Personal Delegation Accounts (PDAs).**</summary>\n\nDifferences between PDAs and regular accounts:\n\n- A PDA cannot have another PDA of its own.\n- PDA addresses cannot participate in governance directly, but their owners can transfer all their votes to another address (their main account or someone else's).\n- A PDA automatically converts any FLR tokens transferred to it to wrapped Flare tokens (WFLR), which are more useful for functions such as delegation.\n- Only the owner of the main account can transfer funds from the PDA and only to the main account.\n- When an executor is configured, it will claim rewards both from the main account and the PDA, and send them to the PDA.\n\n</details>\n\n<details>\n<summary>**Understanding the Registered Claim Process.**</summary>\n\nRegistration allows accounts to list themselves onchain as registered executors and post their service fees. This simplifies the process for both users and executors: users can easily find a suitable executor, and executors benefit from automatic fee transfers when user rewards are claimed. Users pay a fee to set an executor for claiming their rewards, which are then claimed automatically without user intervention. All agreements with a registered executor occur onchain.\n\nHere is how the registered claiming process works, with applications performing these actions on behalf of executors and users:\n\n1. Executors who want to be publicly available to users register as executors by paying a registration fee, which is then burned.\n2. Registered executors post their fees for claiming rewards.\n3. Users with accrued rewards who want an executor to claim on their behalf can choose from the list of registered executors.\n4. Users pay a setup fee to enable a registered executor to claim their rewards, and this fee is sent to the executor.\n5. Executors claim rewards for one or more users, with their fees automatically deducted from the claimed rewards.\n6. Executors notify users offchain if they discontinue providing this service.\n\nThroughout the process:\n\n- Users and executors can view reports on which addresses executors are claiming for and which executors are registered.\n- Registered executors can change their fees or unregister, while users can change the registered executor claiming on their behalf or disable automatic claiming.\n\n</details>\n\n## Contracts\n\nWorking with the FlareDrop requires interacting with these contracts:\n\n- `DistributionToDelegators` ([address](/network/solidity-reference), [interface](/network/solidity-reference/IDistributionToDelegators)): Manages FlareDrop claims.\n- `ClaimSetupManager` ([address](/network/solidity-reference), [interface](/network/solidity-reference/IClaimSetupManager)): Automating reward claiming.\n\n## Basic Claiming\n\nThe [`claim`](/network/solidity-reference/IDistributionToDelegators#claim) method on `DistributionToDelegators` allows claiming the FlareDrop one account at a time.\nIt transfers the FlareDrop rewards accrued by account `_rewardOwner` during the specified `_month` to the specified `_recipient`. `_wrap` controls whether the reward is transferred in native FLR tokens or wrapped in WFLR tokens.\nYou can use [`getCurrentMonth()`](/network/solidity-reference/IDistributionToDelegators#getcurrentmonth) to find out the current month (starting at 0), or [`getClaimableMonths()`](/network/solidity-reference/IDistributionToDelegators#getclaimablemonths) to get the interval of months which are currently available for claiming.\n\n```solidity\nfunction claim(\n    address _rewardOwner,\n    address _recipient,\n    uint256 _month,\n    bool _wrap\n) external returns(\n    uint256 _rewardAmount\n);\n```\n\n:::note\n\nUse [`getClaimableAmount()`](/network/solidity-reference/IDistributionToDelegators#getclaimableamount) or [`getClaimableAmountOf()`](/network/solidity-reference/IDistributionToDelegators#getclaimableamountof) to find out if a given address has pending rewards on any given month.\n\n:::\n\nThe `claim()` function returns the amount of claimed rewards. Two modes of operation are supported:\n\n- **Self-Claiming**: When `msg.sender` matches `_rewardOwner`\n\n  Here, the caller is claiming its own rewards, and the `_recipient` can be any address.\n\n- **Claiming on behalf of another account**: When `msg.sender` does not match `_rewardOwner`\n\n  Here, the caller must be a claim executor, claiming on behalf of `_rewardOwner`. If `_msg.sender` is not in the authorized list of executors for `_rewardOwner`, the call will revert.\n  Authorized executors must be set beforehand by `_rewardOwner` using [`setClaimExecutors()`](/network/solidity-reference/IClaimSetupManager#setclaimexecutors).\n  The `_recipient` must either be `_rewardOwner`, its PDA, or any of the authorized recipients previously set by `_rewardOwner` using the [`setAllowedClaimRecipients()`](/network/solidity-reference/IClaimSetupManager#setallowedclaimrecipients) on `ClaimSetupManager`.\n  The call will revert otherwise.\n\n## Batched Claiming\n\nThe [`autoClaim()`](/network/solidity-reference/IDistributionToDelegators#autoclaim) method allows claiming the FlareDrop for an arbitrary amount of accounts in a single call, with convenient default values.\nIt claims the rewards accrued by all the accounts in the `_rewardOwners` array during the specified `_month`.\nIf an account does not have an enabled PDA, the rewards are sent to the same account.\nHowever, if an account does have an enabled PDA, the rewards are sent to the PDA account.\nAny rewards accrued by the PDA account are also claimed and sent to the PDA.\nRewards claimed with this method are always wrapped.\n\n```solidity\nfunction autoClaim(\n    address[] calldata _rewardOwners,\n    uint256 _month\n) external;\n```\n\nIf the executor is a registered executor with a nonzero fee, the fee is automatically deducted from each claimed reward and sent to the executor account (unwrapped).\nIf rewards are claimed for both an address and its PDA, the fee is deducted only once.\n\nThe call reverts if:\n\n- `msg.sender` is not in the authorized list of executors for any of the `_rewardOwners`.\n- The total claimed rewards for any of the `_rewardOwners` is not high enough to cover the executor's fee.",
    "Staking works by locking funds for a period of time to support a specific network validator. The guide details out how to stake using the [flare-stake-tool](https://github.com/flare-foundation/flare-stake-tool) CLI.\n\n<details>\n<summary>Understand staking on Flare.</summary>\n\nWhen validator owners stake to their own nodes they **self-bond**, whereas all other participants are said to **delegate** their stake to that validator.\nNote that delegating your stake to a validator is different from FTSO delegation.\n\nParticipants choose how much to stake and for how long their stake will be locked.\nThe minimum values are:\n\n|                  | Self-bond | Delegation |\n| ---------------- | --------: | ---------: |\n| Minimum amount   |    1M FLR |    50K FLR |\n| Minimum duration |   60 days |    14 days |\n\nAt the end of every reward epoch (i.e. 3.5 days on Flare Mainnet), participants are rewarded according to how well their chosen validator performed in that period.\n\n**Limits**\n\nThe amount that you can stake and the rewards you can gain by staking are restricted by these limits:\n\n- **Delegation factor**: Limits the total amount that can be staked to a validator to its self-bond, which is the amount validators stake to their own nodes, times the delegation factor, which is 15.\n  For example, if a validator has a self-bond stake of 1M FLR, the total sum of all stakes, including delegations, cannot exceed 15M FLR.\n  This limit allows for 14M FLR of delegations.\n\n- **Staking cap**: Limits the reward performance of individual validators to **5% of the total staked amount**.\n  If you stake your funds on a validator with more than 5% of the total staked amount, you receive less FLR in reward.\n  To maximize your reward, delegate your staking funds to a validator with less than 5% of the total staked amount of FLR.\n\n- **Maximum number of validators**: You can stake to any number of validators, but rewards, FlareDrops, and governance vote power only apply for up to 3 different validators.\n\nGiven that the Flare network uses two independent underlying chains, there is one extra step that must be considered.\nFunds must be transferred from the C-chain, where smart contracts run, to the P-chain, where staking happens.\nAfter the staking period expires and funds are unlocked, they can be transferred back to the C-chain.\n\n</details>\n\n## Prerequisites\n\nInstall the following tools:\n\n- [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)\n\n## Setup\n\n1. Install the `flare-stake-tool` CLI:\n\n   ```bash\n   npm install @flarenetwork/flare-stake-tool -g\n   ```\n\n2. Verify installation:\n\n   ```bash\n   flare-stake-tool\n   ```\n\n   The tool's banner is displayed:\n\n   ```text\n   _____ _                  ____  _        _           ____ _     ___\n   |  ___| | __ _ _ __ ___  / ___|| |_ __ _| | _____   / ___| |   |_ _|\n   | |_  | |/ _` | '__/ _  ___ | __/ _` | |/ / _  | |   | |    | |\n   |  _| | | (_| | | |  __/  ___) | || (_| |   <  __/ | |___| |___ | |\n   |_|   |_|__,_|_|  ___| |____/ ____,_|_|____|  ____|_____|___|\n\n   Version: 3.0.2\n   ```\n\n3. You can specify the account from which staking will take place in different ways. Choose one of the following two options:\n\n<details>\n<summary> Ledger setup (recommended). </summary>\n\n**Install the Avalanche Application**\n\n1. **Connect & Unlock:**\n\n   - Connect your Ledger device to your computer.\n   - Unlock it using your PIN code.\n\n2. **Open Ledger Live:**\n\n   - Launch the [Ledger Live](https://www.ledger.com/ledger-live) application.\n   - Navigate to the **My Ledger** tab and ensure your device firmware is up-to-date.\n\n3. **Install Avalanche App:**\n   - In the **App Catalog** tab, search for **Avalanche**.\n   - Click **Install**.\n\n**Note:** The Avalanche app requires 138 KB of space on a **Ledger Nano S**. You may need to remove other apps if space is insufficient.\n\n**Select Your Desired Account**\n\n1. **Close Conflicting Applications:**\n\n   - Exit Ledger Live.\n   - Ensure the device is not connected to other applications like MetaMask.\n\n2. **Open the Avalanche App:**\n\n   - On the device, open the Avalanche app. The screen should display **\"Avalanche Ready\"**.\n\n3. **Start the Staking Tool:**\n\n   - Open a terminal and run:\n\n     ```bash\n     flare-stake-tool interactive\n     ```\n\n   - This starts the staking tool in interactive mode.\n\n4. **Connect Your Wallet:**\n\n   - After the welcome banner, the tool asks how to connect your wallet:\n\n     ```text\n     ? How do you want to connect your wallet? (Use arrow keys)\n     > Ledger\n     Public Key\n     Private Key (not recommended)\n     ```\n\n   - Select **Ledger** and press **Enter**.\n\n5. **Choose Network:**\n\n   - Next, choose the desired network:\n\n     ```text\n     ? Which network do you want to connect to? (Use arrow keys)\n     > Flare (Mainnet)\n     Coston2 (Testnet)\n     LocalHost (for development only)\n     ```\n\n   - Select **Flare (Mainnet)** and press **Enter**.\n\n   - A **\"Fetching Addresses...\"** message appears briefly.\n\n6. **Select an Address:**\n\n   - A list of addresses linked to the Ledger device is displayed.\n   - Select the desired address and press **Enter**.\n\n**Important:** Ensure this address has a positive `$FLR` balance for transaction fees and staking. Funds can be transferred later if needed.\n\n7. **Access the Main Menu:**\n\n   - The main menu appears:\n\n     ```text\n     ? What do you want to do? (Use arrow keys)\n         View chain addresses\n     >   Check on-chain balance\n         Get network info\n         Get validator info\n         Move assets from C-chain to P-chain\n         Move assets from P-chain to C-chain\n         Add a validator node\n     ```\n\n   - As an example, select **Check on-chain balance** and press **Enter**.\n\n   - The tool displays the C-chain and P-chain balances before exiting.\n\n**Account Persistence:** - After completing the setup, a `ctx.json` file is created in the current folder. - This file stores the selected account details, allowing you to skip the setup process on subsequent uses from the same folder.\n\n</details>\n\n<details>\n<summary>Private key setup (not recommended).</summary>\n\nIf you **do not have a Ledger device**, you can still use your private key for staking. However, this method is **significantly less secure** and should be used only when no other option is available. Proceed with caution and ensure maximum file security.\n\n**Create a Secure Text File**\n\n1. **Create a Text File:**\n\n   - Create a text file in a **secure folder** accessible only to you.\n   - Use any file name you prefer.\n\n2. **Add Your Private Key:**\n\n   - Open the file and insert one of the following lines based on your private key format:\n\n     ```text\n     PRIVATE_KEY_CB58=\"\"\n     PRIVATE_KEY_HEX=\"\"\n     ```\n\n   - **CB58 Format:** Use this if your key is in [CB58](https://support.avax.network/en/articles/4587395-what-is-cb58) format.\n   - **HEX Format:** Use this if your key contains 64 hexadecimal characters.\n\n   - **Important:** Paste your private key **inside the quotes** and save the file.\n\n**Verify Private Key Access**\n\n1. **Launch the Staking Tool:**\n\n   - Open a terminal and run the following command:\n\n     ```bash\n     flare-stake-tool interactive\n     ```\n\n   - This starts the staking tool in interactive mode, prompting you with configuration questions.\n\n**Connect Your Wallet**\n\n1. **Select Connection Type:**\n\n   - After the welcome banner, the following prompt appears:\n\n     ```text\n     ? How do you want to connect your wallet? (Use arrow keys)\n         Ledger\n         Public Key\n     >   Private Key (not recommended)\n     ```\n\n   - Select **Private Key** using the arrow keys and press **Enter**.\n\n2. **Enter File Path:**\n\n   - You'll see a security warning:\n\n     ```text\n     Warning: You are connecting using your private key which is not recommended\n     ? Enter Path to Private Key file (E.g. /home/wallet/pvtKeyFile):\n     ```\n\n   - Enter the full file path where your private key file is stored and press **Enter**.\n\n**Choose Network**\n\n- The following prompt appears:\n\n  ```text\n  ? Which network do you want to connect to? (Use arrow keys)\n  > Flare (Mainnet)\n      Coston2 (Testnet)\n      LocalHost (for development only)\n  ```\n\n- Select **Flare (Mainnet)** and press **Enter**.\n\n**Access the Main Menu**\n\n- The main menu appears:\n\n  ```text\n  ? What do you want to do? (Use arrow keys)\n      View chain addresses\n  >   Check on-chain balance\n      Get network info\n      Get validator info\n      Move assets from C-chain to P-chain\n      Move assets from P-chain to C-chain\n      Add a validator node\n  ```\n\n- As an example, select **Check on-chain balance** and press **Enter**.\n\n- The tool will display your account balance for both the **C-chain** and **P-chain**, then exit.\n\n**Security Reminder:**\n\n- Using a private key stored in a plain text file is inherently **insecure**.\n- Consider switching to a **Ledger device** or another secure method whenever possible.\n- **Never share your private key** or expose it to untrusted applications.\n\n</details>\n\n4. Note down the **node ID** of the validator you want to stake to:\n\n   - If you created the validator, retrieve its node ID by running:\n\n     ```bash\n     curl --location 'http://localhost:9650/ext/info' --header 'Content-Type: application/json' --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }'\n     ```\n\n   - If you want to stake to somebody else's validator, get a JSON list of all validators by running:\n\n     ```bash\n     flare-stake-tool info validators\n     ```\n\n5. Note down the desired staking **start time** and **end time**: When staking to an existing validator, both these times must be inside the period when the validator is active. If you specify a period when the validator is inactive, your transaction on the P-chain reverts.\n   To find the period when the validator is active:\n\n   ```bash\n   flare-stake-tool info validators\n   ```\n\n## Move funds to P-chain\n\n1. Check your C-chain and P-chain balances by selecting the **Check on-chain balance** option when executing:\n\n   ```bash\n   flare-stake-tool interactive\n   ```\n\n   Your currently available funds on the C-chain and P-chain are shown in the last lines. Funds currently staked are locked and are not reflected in the P-chain balance.\n   They will become automatically available when the staking period expires.\n\n   ```plaintext\n   ? How do you want to connect your wallet? Ledger\n   You already have an existing Ctx file with the following parameters -\n   Public Key: ●●●●●●●●●●●●●●●●\n   Network: flare\n   Eth Address: 0x●●●●●●●●\n   ? Do you wish to continue with this? yes\n   ? What do you want to do? Check on-chain balance\n   Using network: flare\n   Balances on the network \"flare\"\n   // highlight-next-line\n   C-chain 0x●●●●●●●●: 100000.0 FLR\n   // highlight-next-line\n   P-chain P-flare●●●●●●●●: 50000.0 FLR\n   ```\n\n   If you already have funds on the P-chain, skip the next step.\n\n2. Select the **Move assets from C-chain to P-chain** option when executing:\n\n   ```bash\n   flare-stake-tool interactive\n   ```\n\n   You are asked the amount of FLR you want to transfer:\n\n   ```plaintext\n   ? What do you want to do? Move assets from C-chain to P-chain\n   ? Enter amount (in FLR): 50000\n   ```\n\n   :::warning[Transaction Fees]\n\n   When transferring from the C-chain to the P-chain, transaction fees are wholly paid from the C-chain.\n   Make sure you leave enough funds on the C-chain after the transfer, or it will fail.\n\n   :::\n\n3. Transfers between chains are made of two operations: an **export** from the C-chain followed by an **import** to the P-chain. Therefore, you are asked to confirm two transactions.\n\n   ```plaintext\n   // highlight-next-line\n   Please approve export transaction\n   Using network: flare\n   Fetching account from ledger...\n   Creating export transaction...\n   Using fee of 0.00028075 FLR\n   Please review and sign the transaction on your ledger device...\n   Sending transaction to the node...\n   Transaction with id ●●●●●●●● sent to the node\n   // highlight-next-line\n   Please approve import transaction\n   Using network: flare\n   Fetching account from ledger...\n   Creating export transaction...\n   Please review and sign the transaction on your ledger device...\n   Sending transaction to the node...\n   Transaction with id ●●●●●●●● sent to the node\n   Finished execution\n   ```\n\nIf you encounter any issues during this process, refer to the [Troubleshooting](#troubleshooting) section.\n\n## Stake\n\n1. After you have funds on the P-chain, execute the following command and select the appropriate option:\n\n   ```bash\n   flare-stake-tool interactive\n   ```\n\n   - If you are going to delegate to your own node (self-bonding), select **Add a validator node**.\n\n   - If you are going to stake to another node (delegation), select **Delegate to a validator node** (You may need to scroll down to see this option).\n\n   :::info[First-time address registration.]\n\n   The first time you use the **Add a validator node** or **Delegate to a validator node** options you are asked to sign an additional transaction. This step is required so that staking rewards accrued on the P-chain can be claimed on the C-chain and participate in the wider ecosystem. This procedure only needs to be done once per P-chain address and it progresses like this:\n\n   ```plaintext\n   Checking Address Registration...\n   No address found for key 0x●●●●●●●●\n   Note: You need to register your wallet address before you can delegate your funds\n   // highlight-next-line\n   Please complete this registration transaction to proceed\n   Submitting txn to the chain\n   ```\n\n   :::\n\n2. You then need to provide the following information:\n\n   - **amount**: Amount must be provided in FLR units.\n   - **node ID**, **start time** and **end time**: Use the values noted down from the [setup](#setup).\n\n3. If you selected **Add a validator node**, you have to set the **delegation fee**. This is the percentage of all rewards that the node owner keeps.\n   The rest is split proportionally between the self-bond and all delegators that contributed stake. 10 means 10%, so the maximum value is 100.\n\n   ```plaintext\n   ? What do you want to do? Add a validator node\n   ? Enter amount (in FLR): 50000\n   ? Enter Node NodeId (E.g. NodeID-FQKTLuZHEsjCxPeFTFgsojsucmdyNDsz1): NodeID-●●●●●●●●\n   ? Enter start time(E.g. 1693185095): ●●●●●●●●\n   ? Enter end time(E.g. 1693185095): ●●●●●●●●\n   ? Enter delegation fee(E.g. 10): 10\n   ```\n\n4. You are then asked to confirm the staking transaction on your hardware wallet.\n\n   ```plaintext\n   Using network: flare\n   Fetching account from ledger...\n   Creating export transaction...\n   // highlight-next-line\n   Please review and sign the transaction on your ledger device...\n   Sending transaction to the node...\n   Transaction with id ●●●●●●●● sent to the node\n   Finished execution\n   ```\n\n   Your stake is now locked and will start accruing rewards after the configured start time arrives.\n   When the end time arrives, the funds will be automatically unlocked.\n\nIf you encounter any issues during this process, refer to the [Troubleshooting](#troubleshooting) section.\n\n## Check Stake\n\n1. You can now double-check that the operation has been properly registered by looking at the current list of validators:\n\n   ```bash\n   flare-stake-tool info validators > validators.txt\n   ```\n\n   This creates a file called `validators.txt`. Open it and search for the line containing the **P-chain address** of your account. If you don't remember your address run:\n\n   ```bash\n   flare-stake-tool info addresses\n   ```\n\n2. If your account has stake on any node, you will find a section similar to:\n\n   ```json\n   {\n     \"txID\": \"28Yf5yQ3xt9yaMvfZ1RP5jkCkT4y2pfD86UheZUHFVng2tFcWd\",\n     \"startTime\": \"1688569201\",\n     \"endTime\": \"1696345201\",\n     \"stakeAmount\": \"16750000000000000\",\n     \"nodeID\": \"NodeID-C6i8mruq11VdxGQ7tiUBgrRqoLBot86df\",\n     \"rewardOwner\": {\n       \"locktime\": \"0\",\n       \"threshold\": \"1\",\n       \"addresses\": [\n         // highlight-next-line\n         \"P-flare19c8zfml39x6efnw5j90nl85dmwdqhluwhrxz9g\"\n       ]\n     },\n   },\n   ```\n\n   Check that the `stakeAmount` (in wei), `nodeID`, `startTime`, and `endTime` match the values you configured. If you have multiple active stakes, your address will show up multiple times.\n\n## Move funds back to C-Chain\n\n1. Finally, you also have the option to move your P-chain funds back to the C-chain where they can participate in the wider ecosystem. You can only transfer P-chain funds that are not currently locked in any stake. Select the **Move assets from P-chain to C-chain** option when executing:\n\n   ```bash\n   flare-stake-tool interactive\n   ```\n\n2. You are asked the amount of FLR you want to transfer:\n\n   ```plaintext\n   ? What do you want to do? Move assets from P-chain to C-chain\n   ? Enter amount (in FLR): 50000\n   ```\n\n   :::warning[Transaction Fees]\n\n   When transferring from the P to the C-chain, transaction fees are paid from BOTH chains.\n   Make sure you leave enough funds on both chains after the transfer, or it will fail.\n\n   :::\n\n3. Again, the transfer between the two chains require you to confirm two transactions.\n\n   ```plaintext\n   // highlight-next-line\n   Please approve export transaction\n   Using network: flare\n   Fetching account from ledger...\n   Creating export transaction...\n   Please review and sign the transaction on your ledger device...\n   Sending transaction to the node...\n   Transaction with id ●●●●●●●● sent to the node\n   // highlight-next-line\n   Please approve import transaction\n   Using network: flare\n   Fetching account from ledger...\n   Creating export transaction...\n   Using fee of 0.00028075 FLR\n   Please review and sign the transaction on your ledger device...\n   Sending transaction to the node...\n   Transaction with id ●●●●●●●● sent to the node\n   Finished execution\n   ```\n\nIf you encounter any problem, see the [Troubleshooting](#troubleshooting) section.\n\n## Claiming rewards\n\nAt the end of every reward epoch, participants are rewarded according to how well their chosen validator performed in that period, but these rewards are not claimable yet. Every 4 reward epochs, rewards are accumulated in a dedicated smart contract and can then be claimed from the Flare Stake CLI tool:\n\n1. Select the **Claim Rewards** option when executing:\n\n   ```bash\n   flare-stake-tool interactive\n   ```\n\n   You are shown the amount of pending rewards (in wei) and are asked how much you want to claim (in FLR):\n\n   ```plaintext\n   ? What do you want to do? Claim Rewards\n   Checking your Rewards status...\n   You have unclaimed rewards worth 1000000000000000000\n   ? Enter amount to claim (in FLR): 1\n   ```\n\n2. Select **Receive with another wallet** and enter the C-chain address where you want the rewards to be sent.\n   This can be the same address from where you are staking.\n\n   ```plaintext\n   ? Where do you want to receive your rewards? Receive with another wallet\n   ? Please enter the C-address where you want to receive your rewards: 0x●●●●●●●●\n   ```\n\n   You are then asked to confirm the staking transaction on your hardware wallet.\n\n   ```text hl_lines=\"1\"\n   Please sign the transaction on your ledger\n   Submitting txn to the chain\n   Rewards successfully claimed\n   Finished execution\n   ```\n\n## Troubleshooting\n\n- **Cannot connect to Ledger device, No Device, Cannot retrieve addresses, or similar**\n\n  Make sure:\n\n  - The device is connected, the Avalanche app is opened, and it shows the \"Avalanche Ready\" message.\n  - No other application like Ledger Live or MetaMask is connected to the device.\n  - The device is not in stand-by mode.\n  - You are not running on Windows from a Linux terminal (WSL). Use a native Windows console instead.\n\n- **Insufficient funds**\n\n  Make sure enough funds will remain after a transaction to pay for the transaction fees. If too much time has elapsed between the transaction's creation and its confirmation on the Ledger, the calculated fee might be incorrect.\n  Try the operation again. The network might be congested and the calculated fees might not be high enough. Try the operation again after a while.\n\n- **Import transaction failed and the funds have vanished**\n\n  Transfer operations require [an export and an import transaction](#move-funds-to-p-chain).\n  If the export succeeds, but then the import fails, it looks like the funds have disappeared from both chains, but they are still retrievable.\n\n  Repeat the failed import operation manually:\n\n  - If you are moving funds from the C-chain to the P-chain:\n\n    ```bash\n    flare-stake-tool transaction importCP --ledger --blind\n    ```\n\n  - If you are moving funds from the P-chain to the C-chain:\n\n    ```bash\n    flare-stake-tool transaction importPC --ledger --blind\n    ```\n\n- **Unsupported digital routines**\n\n  If you get the following error message:\n\n  ```text\n  E: Error: error:0308010C:digital envelope routines::unsupported\n  ```\n\n  Make sure you are using the correct Node.js version, as advised in the [Prerequisites section](#prerequisites).\n\n  You can find out the version of Node.js you are running with the following command:\n\n  ```bash\n  node --version\n  ```\n\n- **Manual registration using the block explorer**\n\n  - Retrieve the public key that generated the accounts you want to use.\n    From a terminal, run `flare-stake-tool info addresses` and copy the long hexadecimal string starting with `0x` in the last line.\n\n    ```plaintext\n    Using network: flare\n    Addresses on the network \"flare\"\n    P-chain address: P-flare●●●●●●●●\n    C-chain address hex: 0x●●●●●●●●\n    // highlight-next-line\n    secp256k1 public key: 0x●●●●●●●●●●●●●●●●\n    ```\n\n  - You need to interact with the `AddressBinder` smart contract, so you must retrieve its address from the `FlareContractRegistry`.\n  - Enter the address of the `AddressBinder` contract in the block explorer, and go to the **Write Contract** tab.\n  - Click on **Connect Wallet**. You do not need to use the same account as the one you are binding.\n  - Locate the `registerPublicKey` method and paste the public key from step 1 into the `_publicKey` field.\n  - Click on **Write** and confirm the transaction from your wallet.\n\n  If the transaction is successful, your account's P-chain and C-chain addresses are now bound.\n\n- **Manual Reward Claiming**\n\n  Rewards can also be claimed directly from the `ValidatorRewardManager` contract that accumulates them:\n\n  - You need to interact with the `ValidatorRewardManager` smart contract, so you must retrieve its address from the `FlareContractRegistry`.\n  - Enter the address of the `ValidatorRewardManager` contract in the block explorer, and go to the **Write Contract** tab.\n  - Click on **Connect Wallet**.\n    You need to connect the account for which you are claiming.\n  - Locate the `claim` method and enter the following information:\n\n    - `_rewardOwner`: C-chain address that accrued the rewards.\n    - `_recipient`: Address where the rewards must be sent.\n    - `_rewardAmount`: Amount to claim. Find the pending amount using the `getStateOfRewards` method in the **Read Contract** tab.\n    - `_wrap`: Whether the rewards should be also wrapped, as a convenience.\n\n  - Click on **Write** and confirm the transaction from your wallet.\n\n  If the transaction is successful, the reward is transferred to the specified recipient.",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport FtsoV2FeedConsumerNoImports from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2FeedConsumer_no_imports.sol\";\nimport ChainIdCoston2 from \"!!raw-loader!/examples/developer-hub-python/chain_id_coston2.py\";\nimport ChainIdFlare from \"!!raw-loader!/examples/developer-hub-python/chain_id_flare.py\";\nimport FetchAbiCoston2 from \"!!raw-loader!/examples/developer-hub-python/fetch_abi_coston2.py\";\nimport FetchAbiFlare from \"!!raw-loader!/examples/developer-hub-python/fetch_abi_flare.py\";\nimport MakeQueryCoston2 from \"!!raw-loader!/examples/developer-hub-python/make_query_coston2.py\";\nimport MakeQueryFlare from \"!!raw-loader!/examples/developer-hub-python/make_query_flare.py\";\nimport CreateAccount from \"!!raw-loader!/examples/developer-hub-python/create_account.py\";\nimport DeployContractCoston2 from \"!!raw-loader!/examples/developer-hub-python/deploy_contract_coston2.py\";\nimport DeployContractFlare from \"!!raw-loader!/examples/developer-hub-python/deploy_contract_flare.py\";\nimport Utils from \"!!raw-loader!/examples/developer-hub-python/utils.py\";\nimport CompileContract from \"!!raw-loader!/examples/developer-hub-python/compile_contract.py\";\n\nThis guide is for developers who want to interact with Flare using Python. In this guide, using Python, you will learn how to:\n\n- Query a contract on Flare using [web3.py](https://github.com/ethereum/web3.py), an async/sync library for interacting with Ethereum-like chains.\n- Compile a Solidity contract using [py-solc-x](https://github.com/ApeWorX/py-solc-x), a wrapper around the Solidity compiler.\n- Deploy your compiled contract on Flare.\n\n:::tip\n\nAll examples in this guide are available at [developer-hub/examples](https://github.com/flare-foundation/developer-hub/tree/main/examples).\n\n:::\n\n## Getting started\n\n<Tabs groupId=\"python\">\n  <TabItem value=\"uv\" label=\"uv\" default>\n\n    ```bash\n    uv add web3 py-solc-x\n    ```\n\n  </TabItem>\n  <TabItem value=\"pip\" label=\"pip\">\n  \n    ```bash\n    pip install web3 py-solc-x\n    ```\n\n  </TabItem>\n</Tabs>\n\n### Usage\n\nYou need to connect to testnet or mainnet via an RPC, any RPC listed on the [Network Configuration](/network/overview#configuration) page will work. For this guide, you can use the Public RPC.\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"python\" title=\"chain_id.py\">\n      {ChainIdCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"python\" title=\"chain_id.py\">\n      {ChainIdFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n## Querying a contract\n\nTo query a contract, two pieces of information are required:\n\n- Contract address\n- Contract ABI (Application Binary Interface)\n\nFor this example, you can query the `FlareContractRegistry` contract which has the same address `0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019` across both testnet and mainnet.\n\n### Fetch ABI\n\nTo fetch a contract's ABI programmatically, you can query the [Flare Blockchain Explorer API](https://flare-explorer.flare.network/api-docs):\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"python\" title=\"fetch_abi.py\">\n      {FetchAbiCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n \n    <CodeBlock language=\"python\" title=\"fetch_abi.py\">\n      {FetchAbiFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n### Make query\n\nYou can now query the `FlareContractRegistry` contract to get the addresses of other Flare contracts.\n\nFor example, querying it for the address of the `WNat` contract:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n \n    <CodeBlock language=\"python\" title=\"make_query.py\">\n      {MakeQueryCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"python\" title=\"make_query.py\">\n      {MakeQueryFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n## Compiling a contract\n\nFor this example, you can use the `FtsoV2FeedConsumer` contract to query the FTSOv2 feeds. Copy the `FtsoV2FeedConsumer` sample contract code given below, and save the `.sol` file in the same folder as your Python script.\n\n<details>\n<summary>`FtsoV2FeedConsumer` sample contract</summary>\n\nNote that the contract interface dependencies have been inlined to avoid any import issues.\n\n<CodeBlock language=\"solidity\" title=\"FtsoV2FeedConsumer.sol\">\n  {FtsoV2FeedConsumerNoImports}\n</CodeBlock>\n\n</details>\n\n### Set up utils\n\nTo compile the contracts, you need to first set up some basic helper functions to read the `.sol` file and write the compiled output to a `.json` file. In a `utils.py` file, you can define the following functions:\n\n<CodeBlock language=\"python\" title=\"utils.py\">\n  {Utils}\n</CodeBlock>\n\n### Compile with py-solc-x\n\nWith these functions ready, you can now compile the contract. In a `compile_contract.py` file, you can define the following code to install the correct version of the Solidity compiler and compile the contract:\n\n<CodeBlock language=\"python\" title=\"compile_contract.py\">\n  {CompileContract}\n</CodeBlock>\n\nYou can now run the `compile_contract.py` script to compile the contract. The compiled output will be saved to `FtsoV2FeedConsumer.json`.\n\n<Tabs groupId=\"python\">\n  <TabItem value=\"uv\" label=\"uv\" default>\n\n    ```bash\n    uv run compile_contract.py\n    ```\n\n  </TabItem>\n  <TabItem value=\"pip\" label=\"pip\">\n    ```bash \n    python compile_contract.py \n    ```\n\n  </TabItem>\n</Tabs>\n\n## Create account\n\nBefore deploying a contract, you need to have an account with some testnet or mainnet gas tokens. You can create a new Flare account from the CLI:\n\n<CodeBlock language=\"python\" title=\"create_account.py\">\n  {CreateAccount}\n</CodeBlock>\n\nThis will output a new private key and an account pair.\n\n:::danger\n\n- Never share your private keys.\n- Never put your private keys in source code.\n- Never commit private keys to a Git repository.\n\n:::\n\nYou can save the account and private key into environment variables `ACCOUNT` and `ACCOUNT_PRIVATE_KEY` respectively.\n\n```bash\nexport ACCOUNT=<address above>\nexport ACCOUNT_PRIVATE_KEY=<private key above>\n```\n\n:::note\n\nYou can also import the raw hex private key to MetaMask and any other wallet - the private key can be shared between your Python code and any number of wallets.\n\n:::\n\n- For testnet, you can get free testnet C2FLR on the [Coston2 Faucet](https://faucet.flare.network/coston2).\n- For mainnet you will need to fund the account with FLR. You can buy FLR with regular currency in places like centralized exchanges, crypto on-ramps, or swap other tokens for FLR on decentralized exchanges.\n\n## Deploying with web3.py\n\nWith the functions and account ready, you can now deploy the contract. In a `deploy_contract.py` file, you can define the following code to deploy the contract:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"python\" title=\"deploy_contract.py\">\n      {DeployContractCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"python\" title=\"deploy_contract.py\">\n      {DeployContractFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\nYou can now run the `deploy_contract.py` script to deploy the contract. The contract address will be printed once the deployment is successful. You can check the contract address on a Flare Blockchain Explorer, linked on the [Network Configuration](/network/overview#configuration) page.\n\n<Tabs groupId=\"python\">\n  <TabItem value=\"uv\" label=\"uv\" default>\n    ```bash \n    uv run deploy_contract.py \n    ```\n\n  </TabItem>\n  <TabItem value=\"pip\" label=\"pip\">\n    ```bash \n    python deploy_contract.py \n    ```\n    \n  </TabItem>\n</Tabs>\n\nCongratulations! You have now successfully deployed a contract on Flare using Python 🐍.\n\n:::tip[What's next?]\n\nLearn how to interact with Flare's enshrined oracle [FTSOv2 using Python](/ftso/guides/read-feeds-offchain).\n\n:::",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport FtsoV2FeedConsumerNoImports from \"!!raw-loader!/examples/developer-hub-solidity/FtsoV2FeedConsumer_no_imports.sol\";\nimport ChainIdCoston2 from \"!!raw-loader!/examples/developer-hub-javascript/chain_id_coston2.js\";\nimport ChainIdFlare from \"!!raw-loader!/examples/developer-hub-javascript/chain_id_flare.js\";\nimport FetchAbiCoston2 from \"!!raw-loader!/examples/developer-hub-javascript/fetch_abi_coston2.js\";\nimport FetchAbiFlare from \"!!raw-loader!/examples/developer-hub-javascript/fetch_abi_flare.js\";\nimport MakeQueryCoston2 from \"!!raw-loader!/examples/developer-hub-javascript/make_query_coston2.js\";\nimport MakeQueryFlare from \"!!raw-loader!/examples/developer-hub-javascript/make_query_flare.js\";\nimport CreateAccount from \"!!raw-loader!/examples/developer-hub-javascript/create_account.js\";\nimport DeployContractCoston2 from \"!!raw-loader!/examples/developer-hub-javascript/deploy_contract_coston2.js\";\nimport DeployContractFlare from \"!!raw-loader!/examples/developer-hub-javascript/deploy_contract_flare.js\";\n\nThis guide is for developers who want to interact with Flare using JavaScript. In this guide, using JavaScript, you will learn how to:\n\n- Query a contract on Flare using [web3.js](https://github.com/web3/web3.js), an async/sync library for interacting with Ethereum-like chains.\n- Compile a Solidity contract using the CLI interface of [solc](https://github.com/ethereum/solidity), the Solidity compiler.\n- Deploy your compiled contract on Flare.\n\n:::tip\n\nAll examples in this guide are available at [developer-hub/examples](https://github.com/flare-foundation/developer-hub/tree/main/examples).\n\n:::\n\n## Getting started\n\nInstall the Solidity compiler by following the instructions in the [Solidity documentation](https://docs.soliditylang.org/en/latest/installing-solidity.html#linux-packages). The main commands are provided here:\n\n<Tabs>\n  <TabItem value=\"macos\" label=\"MacOS via Homebrew\" default>\n\n    ```bash\n    brew tap ethereum/ethereum\n    brew install solidity\n    ```\n\n  </TabItem>\n  <TabItem value=\"ubuntu\" label=\"Ubuntu via PPAs\">\n\n    ```bash\n    sudo add-apt-repository -y ppa:ethereum/ethereum\n    sudo apt update\n    sudo apt install solc\n    ```\n\n  </TabItem>\n</Tabs>\n\nInstall web3.js using either `npm` or `yarn`:\n\n<Tabs groupId=\"js\">\n  <TabItem value=\"npm\" label=\"npm\" default>\n\n    ```bash\n    npm install web3\n    ```\n\n  </TabItem>\n  <TabItem value=\"yarn\" label=\"yarn\">\n  \n    ```bash\n    yarn add web3\n    ```\n\n  </TabItem>\n</Tabs>\n\n### Usage\n\nYou need to connect to testnet or mainnet via an RPC, any RPC listed on the [Network Configuration](/network/overview#configuration) page will work. For this guide, you can use the Public RPC.\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"javascript\" title=\"chainId.js\">\n      {ChainIdCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"javascript\" title=\"chainId.js\">\n      {ChainIdFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n## Querying a contract\n\nTo query a contract, two pieces of information are required:\n\n- Contract address\n- Contract ABI (Application Binary Interface)\n\nFor this example, you can query the `FlareContractRegistry` contract which has the same address `0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019` across both testnet and mainnet.\n\n### Fetch ABI\n\nTo fetch a contract's ABI programmatically, you can query the [Flare Blockchain Explorer API](https://flare-explorer.flare.network/api-docs):\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"javascript\" title=\"fetchAbi.js\">\n      {FetchAbiCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"javascript\" title=\"fetchAbi.js\">\n      {FetchAbiFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n### Make query\n\nYou can now query the `FlareContractRegistry` contract to get the addresses of other Flare contracts.\n\nFor example, querying it for the address of the `WNat` contract:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"javascript\" title=\"makeQuery.js\">\n      {MakeQueryCoston2}\n    </CodeBlock>\n\n  </TabItem>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"javascript\" title=\"makeQuery.js\">\n      {MakeQueryFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\n## Compiling with solc\n\nFor this example, you can use the `FtsoV2FeedConsumer` contract to query the FTSOv2 feeds. Copy the `FtsoV2FeedConsumer` sample contract code given below, and save the `.sol` file in the same folder as your `package.json`.\n\n<details>\n<summary>`FtsoV2FeedConsumer` sample contract</summary>\n\nNote that the contract interface dependencies have been inlined to avoid any import issues.\n\n<CodeBlock language=\"solidity\" title=\"FtsoV2FeedConsumer.sol\">\n  {FtsoV2FeedConsumerNoImports}\n</CodeBlock>\n\n</details>\n\n```bash\nsolc --evm-version london FtsoV2FeedConsumer.sol --abi --bin -o build\n```\n\nThis will generate two files `build/FtsoV2FeedConsumer.abi` and `build/FtsoV2FeedConsumer.bin` files with the contract's ABI and bytecode. Rename `FtsoV2FeedConsumer.abi` to `FtsoV2FeedConsumer.json`.\n\n## Create account\n\nBefore deploying a contract, you need to have an account with some testnet or mainnet gas tokens. You can create a new Flare account using `createAccount.js`:\n\n<CodeBlock language=\"javascript\" title=\"createAccount.js\">\n  {CreateAccount}\n</CodeBlock>\n\nThis will output a new private key and an account pair.\n\n:::danger\n\n- Never share your private keys.\n- Never put your private keys in source code.\n- Never commit private keys to a Git repository.\n\n:::\n\nYou can save the account and private key into environment variables `ACCOUNT` and `ACCOUNT_PRIVATE_KEY` respectively.\n\n:::note\n\nYou can also import the raw hex private key to MetaMask and any other wallet - the private key can be shared between your JavaScript code and any number of wallets.\n\n:::\n\n- For testnet, you can get free testnet C2FLR on the [Coston2 Faucet](https://faucet.flare.network/coston2).\n- For mainnet you will need to fund the account with FLR. You can buy FLR with regular currency in places like centralized exchanges, crypto on-ramps, or swap other tokens for FLR on decentralized exchanges.\n\n## Deploying with web3.js\n\nWith the account ready, you can now deploy the contract. In a `deployContract.js` file, you can define the following code to deploy the contract:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    <CodeBlock language=\"javascript\" title=\"deployContract.js\">\n      {DeployContractCoston2}\n    </CodeBlock>\n\n    </TabItem>\n\n  <TabItem value=\"flare\" label=\"Flare Mainnet\">\n\n    <CodeBlock language=\"javascript\" title=\"deployContract.js\">\n      {DeployContractFlare}\n    </CodeBlock>\n\n  </TabItem>\n</Tabs>\n\nYou can now run the `deployContract.js` script to deploy the contract. The contract address will be printed once the deployment is successful. You can check the contract address on a Flare Blockchain Explorer, linked on the [Network Configuration](/network/overview#configuration) page.\n\nCongratulations! You have now successfully deployed a contract on Flare using JavaScript.\n\n:::tip[What's next?]\n\nLearn how to interact with Flare's enshrined oracle [FTSOv2 using JavaScript](/ftso/guides/read-feeds-offchain).\n\n:::",
    "import ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport AccessGranted from \"/static/img/verifiable-ai-hackathon/access-granted.png\";\nimport ChooseTemplate from \"/static/img/verifiable-ai-hackathon/choose-template.png\";\nimport GeminiKey from \"/static/img/verifiable-ai-hackathon/gemini-key.png\";\nimport OnboardingChecklist from \"@site/src/components/hackathon/OnboardingChecklist\";\nimport CreateKey from \"/static/img/verifiable-ai-hackathon/create-key.png\";\nimport PackageSetting from \"/static/img/verifiable-ai-hackathon/package-setting.png\";\nimport PackageView from \"/static/img/verifiable-ai-hackathon/package-view.png\";\nimport ChangeVisibility from \"/static/img/verifiable-ai-hackathon/change-visibility.png\";\n\n# Onboarding\n\nWelcome to the **Verifiable AI Hackathon**! 🎉\n\nThis guide walks you through the **four-step setup** to ensure you have the necessary access and tools to start building.\n\n<OnboardingChecklist />\n\n## Before You Begin\n\n- **Estimated Time:** ~15-20 minutes\n- **Need Help?** Join our [Telegram Support Group](https://t.me/+StI5VEIvtIg2ODlh)\n\n## Step 1: Set up your Google account\n\n### Prerequisites\n\n- A Google account (existing or newly created) - this will be your access point for all hackathon resources\n\n### Registration & access\n\n1. Submit your Google account email during hackathon registration (i.e. the Google Form you submitted)\n2. Access to the `verifiable-ai-hackathon` Google Cloud project will be granted on **March 6th** (i.e. one day before the hackathon)\n3. Verify your access by visiting the [Google Cloud Console](https://console.cloud.google.com/welcome?project=verifiable-ai-hackathon), when access is granted you will see the following confirmation:\n\n   <img src={AccessGranted} style={{ width: 600 }} />\n\n## Step 2: Set up API credentials\n\n### Gemini API Keys\n\n1. Log into your registered Google account after you receive access to the `verifiable-ai-hackathon` Google Cloud project\n2. Visit the [Get a Gemini API key](https://aistudio.google.com/app/apikey) page\n3. Click on **Create API key** and select `verifiable-ai-hackathon` from the dropdown\n\n   <img src={GeminiKey} style={{ width: 600 }} />\n\n4. Click **Create API key in existing project**\n\n   <img src={CreateKey} style={{ width: 600 }} />\n\n5. **Store your API key securely**\n\n<details>\n<summary>OpenRouter API Keys (Consensus Learning Track Only)</summary>\n\nIf you're participating in the Consensus Learning track:\n\n1. Visit [OpenRouter](https://openrouter.ai) and create a free account\n2. Navigate to the [Settings page](https://openrouter.ai/settings/keys) to generate your free API keys\n3. **Need higher limits?** Contact the Flare team on [Telegram](https://t.me/+StI5VEIvtIg2ODlh) with your team and VM instance name\n\n</details>\n\n## Step 3: Install & configure gcloud CLI\n\n### Install gcloud CLI\n\n1. Follow the [gcloud CLI installation guide](https://cloud.google.com/sdk/docs/install) for Windows, macOS, or Linux.\n\n2. **Check installation:**\n\n   ```bash\n   gcloud version\n   ```\n\n### Authenticate & verify access\n\n1. **Authenticate your CLI**\n\n   Authenticate using the same Google account used for hackathon registration:\n\n   ```bash\n   gcloud auth login\n   ```\n\n2. **Verify project access:**\n\n   ```bash\n   gcloud projects list\n   ```\n\n   The output should include `verifiable-ai-hackathon`\n\n## Step 4: Select your track template\n\n### Prerequisites\n\nEnsure you have the following tools installed:\n\n- [git](https://git-scm.com/downloads)\n- [uv](https://docs.astral.sh/uv/getting-started/installation/) (Python dependency management)\n- [Docker](https://www.docker.com) (for containerization)\n- [npm](https://nodejs.org/en/download) (for Social AI Agents & AI x DeFi tracks only)\n\n### Choose your template\n\n| Track              | Template Repository                                                                         |\n| ------------------ | ------------------------------------------------------------------------------------------- |\n| Social AI Agents   | [`flare-foundation/flare-ai-social`](https://github.com/flare-foundation/flare-ai-social)   |\n| RAG Knowledge      | [`flare-foundation/flare-ai-rag`](https://github.com/flare-foundation/flare-ai-rag)         |\n| AI x DeFi (DeFAI)  | [`flare-foundation/flare-ai-defai`](https://github.com/flare-foundation/flare-ai-defai)     |\n| Consensus Learning | [`flare-research/flare-ai-consensus`](https://github.com/flare-research/flare-ai-consensus) |\n\n### Clone & start building\n\n1. Navigate to the template, and click on **Use this template** → **Create a new repository**\n\n   <img src={ChooseTemplate} style={{ width: 300 }} />\n\n2. After creating a new repository, wait for package build to complete (a few minutes). Then click on the built package in the right sidebar:\n\n   <img src={PackageView} style={{ width: 300 }} />\n\n3. Click **Package Settings** in the right sidebar:\n\n   <img src={PackageSetting} style={{ width: 300 }} />\n\n4. Under **Danger Zone**, click **Change Visibility** and set to **Public**:\n\n   <img src={ChangeVisibility} style={{ width: 800 }} />\n\n5. **Clone the repo:**\n\n   ```bash\n   git clone https://github.com/YOUR_REPO\n   cd YOUR_REPO\n   ```\n\n6. Follow the **README** in your chosen template for track-specific setup instructions\n\n**Happy building!**\n\n:::danger[Using hackathon compute resources]\n\nVM instances in `verifiable-ai-hackathon` are continuously monitored.\n\n**Any attempt** to use compute resources for activities outside the hackathon will result in immediate instance termination and possible suspension or permanent ban of account access privileges.\n\n:::\n\n## Troubleshooting\n\n- **Unable to create Gemini API Key in `verifiable-ai-hackathon`:**\n\n  - Ensure you're logged into the exact Google account you registered with (i.e. the Google Form you submitted)\n  - Wait 5-10 minutes after receiving project access before attempting\n  - Clear browser cache or try in a private/incognito window\n\n- **gcloud CLI Authentication Problems:**\n\n  - If the browser auth flow fails:\n\n    ```bash\n    gcloud auth login --no-launch-browser\n    ```\n\n  - Check if you have multiple Google accounts in your browser and select the correct one\n\n- **Windows-specific gcloud issues**\n\n  - On Windows, when installing the gcloud CLI, gcloud installs its own basic shell as well.\n  - We recommend using [git BASH](https://gitforwindows.org) for access to a full set of linux commands.\n\n- **Multiple GCP Projects**\n\n  - Set `verifiable-ai-hackathon` as default GCP project:\n\n    ```bash\n    gcloud config set project verifiable-ai-hackathon\n    ```\n\n  - Set quota to use `verifiable-ai-hackathon`:\n\n    ```bash\n    gcloud auth application-default set-quota-project verifiable-ai-hackathon\n    ```\n\n## Need Help?\n\nIf you're stuck, reach out to the Flare team on [Telegram](https://t.me/+StI5VEIvtIg2ODlh). Include:\n\n- Your **team name**\n- Your **VM instance name**\n- Screenshots of errors\n- Steps you've already attempted",
    "import ConfidentialVMBuilder from \"@site/src/components/hackathon/ConfidentialVMBuilder\";\n\nReference for commands you will encounter when interacting with Confidential VMs.\n\n## Confidential Space command builder\n\nUse this interactive builder to generate the exact Confidential Space VM deploy command you need.\n\n:::warning[Source your .env file]\n\nBefore running the following gcloud command don't forget to source your `.env` file:\n\n```bash\nsource .env\n```\n\n:::\n\n<ConfidentialVMBuilder />\n\n## Restarting VMs\n\nDuring testing, you often need to restart a VM to pull updated docker images.\n\nUse the following two commands (ensure you have the `gcloud` CLI installed and configured):\n\n1. **Stop the VM:**\n\n   ```bash\n   gcloud compute instances stop $INSTANCE_NAME\n   ```\n\n2. **Start the VM:**\n\n   ```bash\n   gcloud compute instances start $INSTANCE_NAME\n   ```\n\n   - Replace `$INSTANCE_NAME` with the actual name of your VM instance.\n\n## Reading logs\n\nWhen you need to read logs for a single Google Compute Engine (GCE) VM instance using the `gcloud` CLI, you'll primarily interact with Cloud Logging. Here's how you can do it, combining filtering with the appropriate `gcloud` commands:\n\n```bash\ngcloud logging read \"resource.type=gce_instance AND resource.labels.instance_id=YOUR_INSTANCE_ID\" --project=verifiable-ai-hackathon\n```\n\n- Replace `YOUR_INSTANCE_ID` with the actual instance ID of your VM.\n- Replace `YOUR_VM_NAME` with the name of your VM.\n- Replace `YOUR_ZONE` with the zone your VM is in.\n\n:::tip[Using GCP Console]\n\nYou can also view logs in the Google Cloud Console by navigating to the Logging section and selecting your project.\n\n:::\n\n## Deploying on AMD SEV\n\nThis command creates a Confidential Space VM instance using AMD SEV ([Secure Encrypted Virtualization](https://www.amd.com/content/dam/amd/en/documents/epyc-business-docs/white-papers/memory-encryption-white-paper.pdf)), with a specific image, network configuration, and security settings.\nThe metadata section is critical for configuring the Trusted Execution Environment (TEE).\nThe command is broken down in the following sections.\n\n```bash\n# highlight-next-line\ngcloud compute instances create $INSTANCE_NAME \n  --project=verifiable-ai-hackathon \n  --zone=us-central1-c \n  --machine-type=n2d-standard-2 \n  --network-interface=network-tier=PREMIUM,nic-type=GVNIC,stack-type=IPV4_ONLY,subnet=default \n  # highlight-next-line\n  --metadata=tee-image-reference=$TEE_IMAGE_REFERENCE,\n  # highlight-next-line\n  tee-container-log-redirect=true,\n  # highlight-next-line\n  tee-env-<ENV_VAR_NAME1>=<ENV_VAR_VALUE1>,tee-env-<ENV_VAR_NAME2>=<ENV_VAR_VALUE2>\n  --maintenance-policy=MIGRATE \n  --provisioning-model=STANDARD \n  --service-account=confidential-sa@flare-network-sandbox.iam.gserviceaccount.com \n  --scopes=https://www.googleapis.com/auth/cloud-platform \n  --min-cpu-platform=\"AMD Milan\" \n  --tags=flare-ai-core,http-server,https-server \n  --create-disk=auto-delete=yes,boot=yes,\n  device-name=$INSTANCE_NAME,\n  # highlight-next-line\n  image=projects/confidential-space-images/global/images/confidential-space-debug-250100,mode=rw,size=11,type=pd-standard \n  --shielded-secure-boot \n  --shielded-vtpm \n  --shielded-integrity-monitoring \n  --labels=goog-ec-src=vm_add-gcloud \n  --reservation-affinity=any \n  # highlight-next-line\n  --confidential-compute-type=SEV\n```\n\n### Core command & instance name\n\n```bash\ngcloud compute instances create $INSTANCE_NAME \n```\n\n- `gcloud compute instances create`: This is the base command for creating a new Compute Engine virtual machine (VM) instance.\n- `$INSTANCE_NAME`: You need to replace this with the desired name for your VM instance.\n\n### Project and zone\n\n```bash\n  --project=verifiable-ai-hackathon \n  --zone=us-central1-c \n```\n\n- `--project=verifiable-ai-hackathon`: Specifies the Google Cloud project where the VM will be created.\n- `--zone=us-central1-c`: Defines the zone within the `us-central1` region where the instance will reside. Choosing a zone is important for latency and resource availability.\n\n### Machine type & network configuration\n\n```bash\n  --machine-type=n2d-standard-2 \n  --network-interface=network-tier=PREMIUM,nic-type=GVNIC,stack-type=IPV4_ONLY,subnet=default \n```\n\n- `--machine-type=n2d-standard-2`: Selects the machine type, which determines the CPU, memory, and other hardware resources allocated to the VM. `n2d-standard-2` indicates a machine with 2 vCPUs and a balanced amount of memory, using AMD processors.\n- `--network-interface=network-tier=PREMIUM,nic-type=GVNIC,stack-type=IPV4_ONLY,subnet=default`: Configures the network interface:\n  - `network-tier=PREMIUM`: Uses Google's premium network tier for better performance.\n  - `nic-type=GVNIC`: Uses Google Virtual NIC for better network performance.\n  - `stack-type=IPV4_ONLY`: Specifies that the instance will use IPv4 only.\n  - `subnet=default`: Attaches the instance to the default subnet in the specified zone's VPC network.\n\n### Metadata (crucial for Confidential Computing)\n\n```bash\n  --metadata=tee-image-reference=$TEE_IMAGE_REFERENCE,tee-container-log-redirect=true,tee-env-<ENV_VAR_NAME1>=<ENV_VAR_VALUE1>,tee-env-<ENV_VAR_NAME2>=<ENV_VAR_VALUE2>\n```\n\n- This section is very important for Confidential Computing. Metadata is used to pass configuration data to the VM.\n  - `tee-image-reference=$TEE_IMAGE_REFERENCE`: Specifies the URL of the Trusted Execution Environment (TEE) image. This is essential for enabling confidential computing. Replace `$TEE_IMAGE_REFERENCE` with the actual image URL.\n  - `tee-container-log-redirect=true`: Enables redirecting container logs to both Cloud Logging and serial logging, which can be helpful for debugging.\n  - `tee-env-<ENV_VAR_NAME1>=<ENV_VAR_VALUE1>,tee-env-<ENV_VAR_NAME2>=<ENV_VAR_VALUE2>`: Sets environment variables within the TEE environment. Replace `<ENV_VAR_NAME1>`, `<ENV_VAR_VALUE1>`, `<ENV_VAR_NAME2>`, and `<ENV_VAR_VALUE2>` with your desired environment variable names and values. This is how you would pass secrets or other configuration data to the application running inside the TEE.\n\n### Other instance settings\n\n```bash\n  --maintenance-policy=MIGRATE \n  --provisioning-model=STANDARD \n  --service-account=confidential-sa@flare-network-sandbox.iam.gserviceaccount.com \n  --scopes=https://www.googleapis.com/auth/cloud-platform \n  --min-cpu-platform=\"AMD Milan\" \n  --tags=flare-ai-core,http-server,https-server \n```\n\n- `--maintenance-policy=MIGRATE`: Specifies that the VM should be migrated to another host during maintenance events.\n- `--provisioning-model=STANDARD`: Uses the standard provisioning model for the VM.\n- `--service-account=confidential-sa@flare-network-sandbox.iam.gserviceaccount.com`: Attaches a service account to the VM, granting it specific permissions.\n- `--scopes=https://www.googleapis.com/auth/cloud-platform`: Grants the VM full access to all Google Cloud Platform APIs. **Use with caution** and prefer more granular scopes if possible.\n- `--min-cpu-platform=\"AMD Milan\"`: Ensures that the VM runs on a host with an AMD Milan CPU, which is required for Confidential Computing with SEV.\n- `--tags=flare-ai-core,http-server,https-server`: Applies network tags to the VM, which can be used for firewall rules and network routing.\n\n### Boot disk configuration\n\n```bash\n  --create-disk=auto-delete=yes,boot=yes,\n  device-name=$INSTANCE_NAME,\n  image=projects/confidential-space-images/global/images/confidential-space-debug-250100,mode=rw,size=11,type=pd-standard \n```\n\n- `--create-disk=...`: Configures the boot disk for the VM.\n  - `auto-delete=yes`: The disk will be deleted when the VM is deleted.\n  - `boot=yes`: This is the boot disk.\n  - `device-name=<INSTANCE_NAME>`: Sets the device name of the disk to the instance name.\n  - `image=projects/confidential-space-images/global/images/confidential-space-debug-250100`: Specifies the image to use for the boot disk. This is a confidential space image.\n  - `mode=rw`: The disk is mounted in read-write mode.\n  - `size=11`: The disk size is 11 GB.\n  - `type=pd-standard`: Uses a standard persistent disk.\n\n### Shielded VM options\n\n```bash\n  --shielded-secure-boot \n  --shielded-vtpm \n  --shielded-integrity-monitoring \n```\n\n- These options enable Shielded VM features, which enhance the security of the VM.\n  - `--shielded-secure-boot`: Enables secure boot.\n  - `--shielded-vtpm`: Enables virtual Trusted Platform Module (vTPM).\n  - `--shielded-integrity-monitoring`: Enables integrity monitoring.\n\n### Labels, reservation affinity, and confidential compute\n\n```bash\n  --labels=goog-ec-src=vm_add-gcloud \n  --reservation-affinity=any \n  --confidential-compute-type=SEV\n```\n\n- `--labels=goog-ec-src=vm_add-gcloud`: Adds a label to the VM for tracking purposes.\n- `--reservation-affinity=any`: If you have reservations, this allows the VM to use any available reservation.\n- `--confidential-compute-type=SEV`: Enables AMD SEV (Secure Encrypted Virtualization) Confidential Computing. This is the core flag that makes this instance a confidential VM.\n\n## Deploying on Intel TDX\n\nThis command creates a Confidential Space VM instance using Intel TDX ([Trust Domain Extensions](https://www.intel.com/content/www/us/en/developer/tools/trust-domain-extensions/documentation.html)), with a specific image, network configuration, and security settings.\nThe command instructions differing from [Deploying AMD SEV Confidential VMs](#deploying-on-amd-sev) are highlighted.\n\n```bash\ngcloud compute instances create $INSTANCE_NAME \n  --project=verifiable-ai-hackathon \n  --zone=us-central1-a \n  # highlight-next-line\n  --machine-type=c3-standard-4 \n  --network-interface=network-tier=PREMIUM,nic-type=GVNIC,stack-type=IPV4_ONLY,subnet=default \n  --metadata=tee-image-reference=$TEE_IMAGE_REFERENCE,\n  tee-container-log-redirect=true,\n  tee-env-<ENV_VAR_NAME1>=<ENV_VAR_VALUE1>,tee-env-<ENV_VAR_NAME2>=<ENV_VAR_VALUE2>\n  # highlight-next-line\n  --maintenance-policy=TERMINATE \n  --provisioning-model=STANDARD \n  --service-account=confidential-sa@verifiable-ai-hackathon.iam.gserviceaccount.com \n  --scopes=https://www.googleapis.com/auth/cloud-platform \n  --tags=flare-ai,http-server,https-server \n  --create-disk=auto-delete=yes,\nboot=yes,\ndevice-name=$INSTANCE_NAME,\n# highlight-next-line\nimage=projects/confidential-space-images/global/images/confidential-space-debug-0-tdxpreview-c38b622,\nmode=rw,\nsize=11,\n# highlight-next-line\ntype=pd-balanced \n  --shielded-secure-boot \n  --shielded-vtpm \n  --shielded-integrity-monitoring \n  --reservation-affinity=any \n  # highlight-next-line\n  --confidential-compute-type=TDX\n```\n\n**Differences:**\n\n- Use the `c3-standard-*` series of machines running on Intel Sapphire Rapids\n- Set the maintenance policy to `TERMINATE`, as TDX does not support migration\n- Use the preview TDX images of Confidential Space, to see all Confidential Space images run:\n\n  ```bash\n  gcloud compute images list --project=confidential-space-images --no-standard-images\n  ```\n\n- Set the boot disk to `pd-balanced` as required by `c3-standard-*` series of machines\n- Set the confidential compute type to `TDX`\n\n## Setting Up a Static IP for Your Instance\n\nFor any questions or assistance with setting up a static IP, please reach out to the Flare team on [Telegram](https://t.me/+StI5VEIvtIg2ODlh).",
    "import WhitepapersGrid from \"@site/src/components/WhitepapersGrid\";\n\nExplore Flare's whitepapers, research, and analytics to gain deeper insights into its technology.\n\n<WhitepapersGrid />",
    "## Account\n\nAn account is a record in the Flare ledger that holds data and facilitates the sending and receiving of tokens. Each account is identified by a unique address derived from a public key. An account can be either an [externally owned account (EOA)](#externally-owned-account-eoa) or a [smart contract](#smart-contract).\n\n## Address\n\nA unique identifier representing an account on the Flare network. Addresses are derived from public keys and are used to send and receive tokens.\n\n## API\n\nApplication Programming Interface. A set of rules and protocols that allow different software applications to communicate with each other, enabling integration and interaction.\n\n## Block\n\nA collection of transactions bundled together and added to the blockchain. Blocks are created by validators and are used to record transactions on the network.\n\n## Blockchain\n\nA distributed ledger that records transactions across multiple computers in a secure and tamper-proof way. Each block in the blockchain contains a list of transactions and a reference to the previous block, creating a continuous chain of blocks.\n\n## Bridge\n\nA protocol that connects independent blockchains, enabling interoperability and the transfer of assets and information between them.\n\n## Canary\n\nA network used for testing features under “real fire” conditions before deploying them on the mainnet. Users of the canary network are real users but are aware of the experimental nature of the platform. The term originates from the practice of using canaries in mines to detect poisonous gas. Flare's canary network is called Songbird.\n\n## Consensus\n\nThe process by which a network of nodes agrees on the validity of transactions and the state of the ledger. Consensus mechanisms secure the network and prevent double-spending.\n\n## Delegated Proof of Stake (DPoS)\n\nA consensus mechanism in which token holders vote for validators to secure the network and validate transactions. Validators are elected based on the number of votes they receive from token holders.\n\n## Enshrined Oracle\n\nEnshrining involves incorporating essential middleware components directly into the core protocol of a blockchain network. For a component to be considered enshrined, it **must** require a network hard-fork to be altered (refer to Vitalik's article on [enshrinement](https://vitalik.eth.limo/general/2023/09/30/enshrinement.html)).\n\nEnshrining can be seen as a stronger form of restaking, a concept popularized by protocols like [EigenLayer](http://eigenlayer.xyz). Unlike restaking, where only a fraction of the network stake is used to secure middleware, enshrining leverages the entire network stake.\n\nAn enshrined oracle is an oracle that is integrated into the core protocol of a blockchain network. These oracles inherit the full security of the network, meaning that compromising the safety or liveness of the oracle would necessitate compromising the entire network.\n\n## EVM\n\nEthereum Virtual Machine. A virtual machine that runs smart contracts on the Ethereum network. The EVM is a Turing-complete machine that executes code written in Solidity or other programming languages.\n\n## Externally Owned Account (EOA)\n\nAn account controlled by a private key and can send transactions on the network. EOAs are typically used by individuals to manage their tokens.\n\n## Fork\n\nA change in the protocol of a blockchain network that results in two separate chains. Forks can be caused by software updates, consensus rule changes, or network upgrades.\n\n## Gas\n\nA unit of measurement representing the computational work required to execute a transaction on the network. Gas is used to pay for transaction fees and prevent spam.\n\n## Hard Fork\n\nA type of fork that is not backward-compatible with the existing protocol. Hard forks require all nodes to upgrade to the new protocol to continue participating in the network.\n\n## Node\n\nA computer that participates in the Flare network by running software that validates transactions and maintains a copy of the blockchain. Nodes can be validators, data providers, or regular network participants.\n\n## Oracle\n\nA service that provides offchain data to smart contracts on the blockchain. Oracles bring real-world data, such as price feeds, weather information, and sports scores, to the blockchain.\n\n## Smart Contract\n\nAn account controlled by code that can send transactions on the network. Smart contracts are self-executing contracts with the terms of the agreement directly written into lines of code.\n\n## Token\n\nA digital asset representing ownership of a physical or virtual asset. Tokens can represent a wide range of assets, including cryptocurrencies, real estate, and intellectual property.\n\n## Transaction\n\nA record of a transfer of tokens or data on the blockchain. Transactions are signed by the sender and include information such as the recipient's address, the amount of tokens transferred, and the gas fee.\n\n## Validator\n\nA node that participates in the consensus process and validates transactions on the network. Validators are responsible for creating new blocks and securing the network.\n\n## Wallet\n\nA software application that allows users to store, send, and receive tokens. Wallets can manage multiple accounts and interact with decentralized applications on the blockchain.",
    "| **Auditor** | **Date**  | **Report**                                                                                                                                                             |\n| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Coinspect   | Feb 2025  | [FTSOv2 Custom Feeds](@site/static/pdf/audits/20250205-Coinspect-SmartContractAudit-Flare-FTSOv2CustomFeedsDiffReview-v240210.pdf)                                     |\n| Coinspect   | Jan 2025  | [Smart Contract Preregistration](@site/static/pdf/audits/20250101-Coinspect-SmartContractAudit-Flare-Pre-Register&FTSOManagement-v250109.pdf)                          |\n| Coinspect   | Dec 2024  | [FAssets Smart Contract Audit V2 Updates](@site/static/pdf/audits/20241215-Coinspect-SmartContractAudit-Flare-FAssetV2Updates-v241217.pdf)                             |\n| FYEO        | Oct 2024  | [FlareDA Layer (FTSO & FDC)](@site/static/pdf/audits/20241001-FLARE-SecurityCodeReviewFLAREDataAvailabilityv1.0_Public.pdf)                                            |\n| Coinspect   | Oct 2024  | [Verifier servers and FDC updates](@site/static/pdf/audits/20241001-Coinspect-SourceCodeAudit-Flare-FDCv2-v250113.pdf)                                                 |\n| Coinspect   | Sep 2024  | [FAssets Smart Contract Audit](@site/static/pdf/audits/20240901-Coinspect-SmartContractAudit-Flare-FassetUpdate-v240910.pdf)                                           |\n| Coinspect   | Aug 2024  | [FDC Client](@site/static/pdf/audits/20240801-Coinspect-Source_Code_Audit-Flare-FDCv1-v241004.pdf)                                                                     |\n| Coinspect   | June 2024 | [rNat (rFLR) smart contracts](@site/static/pdf/audits/20240601-Coinspect-SmartContractSecurityReview-Flare-RNatContracts-v240701.pdf)                                  |\n| FYEO        | June 2024 | [Lowering gas limit for Songbird](@site/static/pdf/audits/20240601-FYEO-Flare-Ongoing_Songbird_June_20th_1.0_Public.docx.pdf)                                          |\n| FYEO        | June 2024 | [Flare upgrade to Avalanche 1.9.0](@site/static/pdf/audits/20240601-FYEO-Flare-Ongoing_Songbird_June_10th_1.0_Public.pdf)                                              |\n| FYEO        | May 2024  | [Songbird codebase integration into Flare](@site/static/pdf/audits/20240501-FYEO-FlareOngoingSongbird1.0_Public.pdf)                                                   |\n| Coinspect   | May 2024  | [Voter Registry Fix](@site/static/pdf/audits/20240501-Coinspect-Flare-SecurityReview-VoterRegistryFix-v240603.pdf)                                                     |\n| Halborn     | May 2024  | [FTSO fast updates implementation](@site/static/pdf/audits/20240501-Halborn-FastUpdatesAudit.pdf)                                                                      |\n| Halborn     | May 2024  | [FTSO Fast updates protocol](@site/static/pdf/audits/20240501-Halborn-FTSOFastUpdatesprotocolAudit.pdf)                                                                |\n| Coinspect   | Apr 2024  | [Flare Smart Contract V2 Audit 1](@site/static/pdf/audits/20230401-Coinspect-Flare-SourceCodeSecurityReview-SmartContractsV2-v240515.pdf)                              |\n| Coinspect   | Apr 2024  | [FTSO V2 Fast Updates](@site/static/pdf/audits/20240401-Coinspect-Flare-SourceCodeSecurityReview-FastUpdates-v240612.pdf)                                              |\n| Coinspect   | Mar 2024  | [Transaction Verifier](@site/static/pdf/audits/20240301-Coinspect-Flare-SourceCodeSecurityReview-TransactionVerifier-v240516.pdf)                                      |\n| Coinspect   | Jan 2024  | [FTSO V2 Scaling](@site/static/pdf/audits/20240101-Coinspect-Flare-SourceCodeSecurityReview-FTSOScaling-v240515.pdf)                                                   |\n| Coinspect   | Jan 2024  | [Flare Systems Client (Top level client)](@site/static/pdf/audits/20240101-Coinspect-Flare-SourceCodeSecurityReview-TopLevelClient-v240515.pdf)                        |\n| Coinspect   | Jan 2024  | [CChain Indexer](@site/static/pdf/audits/20240101-Coinspect-Flare-SourceCodeSecurityReview-CChainIndexer-v240409.pdf)                                                  |\n| Coinspect   | Jan 2024  | [Attestation Suite](@site/static/pdf/audits/20240101-Coinspect-Smart_Contract_Review-Flare_Attestation_Suite-v240220.pdf)                                              |\n| Coinspect   | Dec 2023  | [FAsset Liquidator](@site/static/pdf/audits/20231207-Coinspect-Flare-Smart_Contract_Review-FAsset_Liquidator-v231207.pdf)                                              |\n| Coinspect   | Nov 2023  | [Hex Wrapped Tokens](@site/static/pdf/audits/20231101-Coinspect-Flare-SmartContractAudit-HexWrappedTokens-v231211.pdf)                                                 |\n| Coinspect   | Oct 2023  | [FAsset V2 Bots](@site/static/pdf/audits/20231001-Coinspect-Flare-Source_Code_Review-FAsset_Bots-v240220.pdf)                                                          |\n| Coinspect   | Oct 2023  | [Staking P2 Off-chain Services](@site/static/pdf/audits/20231001-Coinspect-Flare-Source_Code_Review-Staking_P2-Offchain_Services-v240220.pdf)                          |\n| Coinspect   | Sep 2023  | [FAsset V2](@site/static/pdf/audits/20230901-Coinspect-Flare-Smart_Contract_Review-FAsset_V2-v240220.pdf)                                                              |\n| Coinspect   | Sep 2023  | [Staking P2](@site/static/pdf/audits/20230901-Coinspect-Flare-Smart_Contract_Review-StakingP2-v240220.pdf)                                                             |\n| FYEO        | Feb 2023  | [Golang Validator Flare Network](@site/static/pdf/audits/20230201-FlareNetworksLtd.-SecureCodeReviewof_Golang_Validator_on_the_Flare_Network_v1.0_February_Public.pdf) |\n| Coinspect   | Jan 2023  | [FTSO V1 Hybrid reward band](@site/static/pdf/audits/20230101-Coinspect-SmartContractAudit-FlareHybridBandRewardv230220.pdf)                                           |\n| FYEO        | Dec 2022  | [Validator Codebase V3](@site/static/pdf/audits/20221201-FlareNetworksLtd.-Dec2022-SecureCodeReviewofSoliditySmartContractsontheFlareNetworkv1.0_Public.pdf)           |\n| FYEO        | Dec 2022  | [Smart Contracts V1 Audit 3](@site/static/pdf/audits/20221201-FlareNetworksLtd.-Dec2022-SecureCodeReviewofSoliditySmartContractsontheFlareNetworkv1.0_Public.pdf)      |\n| Coinspect   | Dec 2022  | [Flare TDE Updates](@site/static/pdf/audits/20221201-Coinspect-SmartContractAudit-FlareTDEUpdates-v221220.pdf)                                                         |\n| FYEO        | Oct 2022  | [Smart Contract V1 Audit 2](@site/static/pdf/audits/20221001-Flare_Networks_Ltd.-Secure_Code_Review_of_Solidity_Smart_Contracts_on_the_Flare_Network_v1.0_Public.pdf)  |\n| Coinspect   | Oct 2022  | [Flare Airdrop](@site/static/pdf/audits/20221001-Coinspect-Smart_Contract_Audit-Flare_Airdrop_Update-v221109.pdf)                                                      |\n| FYEO        | Sep 2022  | [Validator Codebase V2](@site/static/pdf/audits/20220901-Flare_Networks_Ltd.-Secure_Code_Review_of_the_Flare_Validator_V2-Report_v1.0_Public.pdf)                      |\n| FYEO        | Sep 2022  | [Smart Contracts V1 Audit 1](@site/static/pdf/audits/20220901-Flare_Networks_Ltd.-Secure_Code_Review_of_Solidity_Contracts_on_the_Flare_Network_v1.0_public.pdf)       |\n| FYEO        | Aug 2022  | [Validator Codebase](@site/static/pdf/audits/20220801-Flare_Networks_Ltd.-Secure_Code_Review_of_the_Flare_Network's_Validator_Codebase_v1.0_Public.pdf)                |\n| Coinspect   | Jun 2022  | [Multi Chain Library](@site/static/pdf/audits/20220601-Coinspect-Flare-Source_Code_Review-Multichain_Client_Library-v240220.pdf)                                       |\n| Coinspect   | Jun 2022  | [Attestation Client V1](@site/static/pdf/audits/20220601-Coinspect-Flare-Source_Code_Review-Attestation_Client-v240220.pdf)                                            |\n| Coinspect   | Jun 2022  | [FAssets V1](@site/static/pdf/audits/20220601-Coinspect_Smart_Contract_Audit_fAsset_v220829.pdf)                                                                       |\n| Coinspect   | Jun 2022  | [Smart Contracts](@site/static/pdf/audits/20220601-Coinspect-Smart_Contract_Audit-Flare_Network_Launch.pdf)                                                            |\n| Coinspect   | Mar 2022  | [Flare Smart Contracts V1 Audit 2](@site/static/pdf/audits/20220201-Coinspect-Smart_Contract_Audit-Flare.pdf)                                                          |\n| Coinspect   | Jul 2021  | [Flare Smart Contracts V1 Audit 1](@site/static/pdf/audits/20210701-Coinspect-Smart_Contract_Audit-Flare.pdf)                                                          |",
    "import SetEvmVersionRemix from \"/static/img/set-evm-version-remix.png\";\n\n### Why am I getting `invalid opcode: opcode 0x5f not defined`?\n\nFlare supports EVM versions up to London, which does not support the `PUSH0` opcode, leading to this error. To fix this:\n\n- **Using Remix:** Set EVM version to `london` in the **Advanced Configurations** section of the **Solidity Compiler** tab:\n\n  <img src={SetEvmVersionRemix} style={{ width: 300 }} />\n\n- **Using Hardhat or Foundry:** Set EVM version to `london` in [hardhat.config.ts](https://github.com/flare-foundation/flare-hardhat-starter/blob/master/hardhat.config.ts#L34) or [foundry.toml](https://github.com/flare-foundation/flare-foundry-starter/blob/master/foundry.toml).\n\n- **Using Standard Solidity JSON:** Set `evmVersion` to `london`:\n\n  ```json\n  {\n    \"settings\": {\n      \"optimizer\": {\n        /* ... */\n      },\n      \"evmVersion\": \"london\"\n    }\n  }\n  ```\n\n- **Using `solc` CLI:** Set `--evm-version` to `london`:\n\n  ```bash\n  solc --evm-version london <args>\n  ```\n\n### Where can I get Flare testnet tokens?\n\nYou can get:\n\n- Testnet C2FLR from the [Coston2 Faucet](https://faucet.flare.network/coston2).\n\n- Testnet CFLR from the [Coston Faucet](https://faucet.flare.network/coston).\n\nTo understand the difference between Coston and Coston2, see the [Network Configuration](/network/overview#configuration) page.\n\n### I have a project I would like to build on Flare. Can I get a grant?\n\nYes! Grants from the Flare Foundation are designed to support innovative and impactful projects in order to accelerate the growth of the Flare ecosystem. Whether you're an independent innovator or part of a larger team, if you believe that you can make valuable contributions to the Flare ecosystem, we'd like to hear from you.\n\nLearn more about [Grants](https://flare.network/grants/).\n\n### Where can I get technical support?\n\nConnect with the rapidly growing community of developers building on Flare.\n\n- Engage with Flare's developer community on [Telegram](https://t.me/FlareNetwork).\n\n- Contribute to Flare's open-source codebase on [GitHub](https://github.com/flare-foundation/).\n\n- Join the community on [Discord](https://discord.com/invite/flarenetwork).\n\n### Where can I learn about Flare-specific terminology?\n\nLearn more about the terminology used in the Flare ecosystem on the [Terminology](/support/terminology) page.",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nAn RPC node (also sometimes referred to as an observer node) is responsible for servicing application requests. Unlike [validator nodes](/run-node/validator-node), RPC nodes operate outside the network and do not influence consensus or block production. This guide will walk you through deploying an RPC node for Flare.\n\nYou have two options for setting up an RPC node, each with its own pros and cons:\n\n1. [Setup on bare-metal](#setup-on-bare-metal): More complex, but offers better performance and lower memory usage.\n\n2. [Setup with Docker](#setup-with-docker): Simpler, but results in lower performance and higher memory usage.\n\n## Hardware requirements\n\n<Tabs groupId=\"network\" block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    |                           | **Requirement** |\n    |:--------------------------|:----------------|\n    | **CPU**                   | 4 cores         |\n    | **RAM**                   | 16 GB           |\n    | **Disk space (pruned)**   | 500 GB SSD      |\n    | **Disk space (archival)** | 3.5 TB SSD      |\n    | **Disk growth**           | 30 GB/month     |\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    |                           | **Requirement** |\n    |:--------------------------|:----------------|\n    | **CPU**                   | 4 cores         |\n    | **RAM**                   | 16 GB           |\n    | **Disk space (pruned)**   | 150 GB SSD      |\n    | **Disk space (archival)** | 1 TB SSD        |\n    | **Disk growth**           | 5 GB/month      |\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    |                           | **Requirement**  |\n    |:--------------------------|:-----------------|\n    | **CPU**                   | 4 cores          |\n    | **RAM**                   | 16 GB            |\n    | **Disk space (pruned)**   | 2 TB SSD         |\n    | **Disk space (archival)** | 8 TB SSD         |\n    | **Disk growth**           | 120 GB/month     |\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    |                           | **Requirement** |\n    |:--------------------------|:----------------|\n    | **CPU**                   | 4 cores         |\n    | **RAM**                   | 16 GB           |\n    | **Disk space (pruned)**   | 150 GB SSD      |\n    | **Disk space (archival)** | 1 TB SSD        |\n    | **Disk growth**           | 11 GB/month     |\n\n  </TabItem>\n</Tabs>\n\n- **Disk speed:** 1200 MB/s read and 600 MB/s write, or higher\n- **Network speed:** 40 Mbps, or higher\n\n## Setup on bare-metal\n\n### Prerequisites\n\nEnsure you have the following tools installed:\n\n<Tabs groupId=\"network\" block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    |                                                   | **Version** |\n    | :------------------------------------------------ | :---------- |\n    | **[Go](https://golang.org/doc/install)**          | `>=1.21.8`  |\n    | **[GCC](https://gcc.gnu.org/install/)**           | `latest`    |\n    | **[jq](https://stedolan.github.io/jq/download/)** | `latest`    |\n    | **[Ubuntu](https://ubuntu.com)**                  | `>=20.04`   |\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    |                                                   | **Version** |\n    | :------------------------------------------------ | :---------- |\n    | **[Go](https://golang.org/doc/install)**          | `>=1.21.8`  |\n    | **[GCC](https://gcc.gnu.org/install/)**           | `latest`    |\n    | **[jq](https://stedolan.github.io/jq/download/)** | `latest`    |\n    | **[Ubuntu](https://ubuntu.com)**                  | `>=20.04`   |\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    |                                                   | **Version** |\n    | :------------------------------------------------ | :---------- |\n    | **[Go](https://golang.org/doc/install)**          | `>=1.21.8`  |\n    | **[GCC](https://gcc.gnu.org/install/)**           | `latest`    |\n    | **[jq](https://stedolan.github.io/jq/download/)** | `latest`    |\n    | **[Ubuntu](https://ubuntu.com)**                  | `>=20.04`   |\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    |                                                   | **Version** |\n    | :------------------------------------------------ | :---------- |\n    | **[Go](https://golang.org/doc/install)**          | `>=1.21.8`  |\n    | **[GCC](https://gcc.gnu.org/install/)**           | `latest`    |\n    | **[jq](https://stedolan.github.io/jq/download/)** | `latest`    |\n    | **[Ubuntu](https://ubuntu.com)**                  | `>=20.04`   |\n\n  </TabItem>\n</Tabs>\n\n### Configure the node\n\nClone the repository and run the `build.sh` script:\n\n<Tabs groupId=\"network\" block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    ```bash\n    git clone https://github.com/flare-foundation/go-flare.git\n    cd go-flare/avalanchego\n    chmod +x scripts/build.sh\n    ./scripts/build.sh\n    ```\n\n    The resulting executable will be stored in `build/avalanchego`.\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    ```bash\n    git clone https://github.com/flare-foundation/go-flare.git\n    cd go-flare/avalanchego\n    chmod +x scripts/build.sh\n    ./scripts/build.sh\n    ```\n\n    The resulting executable will be stored in `build/avalanchego`.\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    ```bash\n    git clone --branch v1.9.1 https://github.com/flare-foundation/go-flare.git\n    cd go-flare/avalanchego\n    chmod +x scripts/build.sh\n    ./scripts/build.sh\n    ```\n\n    The resulting executable will be stored in `build/avalanchego`.\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    ```bash\n    git clone --branch v1.9.1 https://github.com/flare-foundation/go-flare.git\n    cd go-flare/avalanchego\n    chmod +x scripts/build.sh\n    ./scripts/build.sh\n    ```\n\n    The resulting executable will be stored in `build/avalanchego`.\n\n  </TabItem>\n</Tabs>\n\nVerify the installation by running:\n\n<Tabs groupId=\"network\" block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    ```bash\n    go test $(go list ./... | grep -v /tests/) # avalanchego unit tests\n    cd ../coreth\n    go test ./... # coreth unit tests\n    cd ../avalanchego\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    ```bash\n    go test $(go list ./... | grep -v /tests/) # avalanchego unit tests\n    cd ../coreth\n    go test ./... # coreth unit tests\n    cd ../avalanchego\n    ```\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    ```bash\n    go test $(go list ./... | grep -v /tests/) # avalanchego unit tests\n    cd ../coreth\n    go test ./... # coreth unit tests\n    cd ../avalanchego\n    ```\n\n    <details>\n    <summary>Whitelisting nodes for Songbird Canary-Network</summary>\n\n    While the Songbird Canary-Network is being tested, all nodes wanting to peer with it, including RPC nodes, need to have their IP address whitelisted.\n\n    To do this, make a whitelisting request by contacting **Tom T.** over:\n\n    - Discord (`Tom T#7603`)\n    - Telegram (`@TampaBay7`)\n    - Email ([tom@flare.network](mailto:tom@flare.network))\n\n    To have greater redundancy, you can whitelist multiple nodes per single provider.\n\n    **Checking the status of your whitelisting request**\n\n    ```bash\n    curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://songbird-bootstrap.flare.network/ext/info\n    ```\n\n    If your IP address is whitelisted, this command returns a JSON response. Otherwise you will get a 403 error (\"Forbidden\").\n\n    Note that whitelisting is **not required** on Flare Mainnet, Flare Testnet Coston2, or Songbird Testnet Coston.\n\n    </details>\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    ```bash\n    go test $(go list ./... | grep -v /tests/) # avalanchego unit tests\n    cd ../coreth\n    go test ./... # coreth unit tests\n    cd ../avalanchego\n    ```\n\n  </TabItem>\n</Tabs>\n\n### Run the node\n\nThis is the simplest command to quickly get your node up and running. The next section explains the parameters used here, along with additional parameters you may wish to configure.\n\n<Tabs groupId=\"network\" block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    ```bash\n    ./build/avalanchego --network-id=flare --http-host= --bootstrap-ips=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://flare-bootstrap.flare.network/ext/info | jq -r \".result.ip\")\" --bootstrap-ids=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://flare-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\")\"\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    ```bash\n    ./build/avalanchego --network-id=costwo --http-host= --bootstrap-ips=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://coston2-bootstrap.flare.network/ext/info | jq -r \".result.ip\")\" --bootstrap-ids=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://coston2-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\")\"\n    ```\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    ```bash\n    ./build/avalanchego --network-id=songbird --http-host= --bootstrap-ips=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://songbird-bootstrap.flare.network/ext/info | jq -r \".result.ip\")\" --bootstrap-ids=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://songbird-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\")\"\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    ```bash\n    ./build/avalanchego --network-id=coston --http-host= --bootstrap-ips=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://coston-bootstrap.flare.network/ext/info | jq -r \".result.ip\")\" --bootstrap-ids=\"$(curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://coston-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\")\"\n    ```\n\n  </TabItem>\n</Tabs>\n\nAfter a lot of log messages the node should start synchronizing with the network, which might take anywhere from a few hours to a few days depending on network speed and hardware specification. Node syncing can be stopped at any time. Use the same command to resume the node syncing from where it left off.\n\nYou will know your node is fully booted and accepting transactions when the output of this command:\n\n```bash\ncurl http://127.0.0.1:9650/ext/health\n```\n\nContains the field `\"healthy\" : true` in the returned JSON object.\n\n:::note\n\nIf the node gets stuck during bootstrap (or it takes far longer than the estimates given above), try adding the parameter `--bootstrap-retry-enabled=false` when running the node.\n\n:::\n\n### Additional configuration\n\nThese are some of the most relevant CLI parameters you can use. Read more about them in the [Avalanche documentation](https://docs.avax.network/nodes/maintain/avalanchego-config-flags).\n\n{/* prettier-ignore */}\n- [`--bootstrap-ips`](https://docs.avax.network/nodes/maintain/avalanchego-config-flags#--bootstrap-ips-string),\n  [`--bootstrap-ids`](https://docs.avax.network/nodes/maintain/avalanchego-config-flags#--bootstrap-ids-string):\n  IP address and node ID of the peer used to connect to the rest of the network for bootstrapping. Note that you have to whitelist your node's IP address or your queries will always be answered with 403 error codes.\n\n  <details>\n  <summary>Determining your peer's IP address and node ID.</summary>\n\n  <Tabs groupId=\"network\">\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n      Peer's IP address:\n      ```bash\n      curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://flare-bootstrap.flare.network/ext/info | jq -r \".result.ip\"\n      ```\n      Peer's node ID:\n      ```bash\n      curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://flare-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\"\n      ```\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n      Peer's IP address:\n      ```bash\n      curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://coston2-bootstrap.flare.network/ext/info | jq -r \".result.ip\"\n      ```\n\n      Peer's node ID:\n      ```bash\n      curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://coston2-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\"\n      ```\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n      Peer's IP address:\n      ```bash\n      curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://songbird-bootstrap.flare.network/ext/info | jq -r \".result.ip\"\n      ```\n      Peer's node ID:\n      ```bash\n      curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://songbird-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\"\n      ```\n\n    </TabItem>\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n      Peer's IP address:\n      ```bash\n      curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://coston-bootstrap.flare.network/ext/info | jq -r \".result.ip\"\n      ```\n      Peer's node ID:\n      ```bash\n      curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeID\" }' -H 'content-type:application/json;' https://coston-bootstrap.flare.network/ext/info | jq -r \".result.nodeID\"\n      ```\n\n    </TabItem>\n  </Tabs>\n\n  </details>\n\n- [`--http-host`](https://docs.avax.network/nodes/maintain/avalanchego-config-flags#--http-host-string): Use `--http-host=` (empty) to allow connections from other machines. Otherwise, only connections from `localhost` are accepted.\n\n- [`--http-port`](https://docs.avax.network/nodes/maintain/avalanchego-config-flags#--http-port-int): The port through which the node will listen to API requests. The default value is `9650`.\n\n- [`--staking-port`](https://docs.avax.network/nodes/maintain/avalanchego-config-flags#--staking-port-int): The port through which the network peers will connect to this node externally. Having this port accessible from the internet is required for correct node operation. The default value is `9651`.\n\n- [`--db-dir`](https://docs.avax.network/nodes/maintain/avalanchego-config-flags#--db-dir-string-file-path): Directory where the database is stored. Make sure to use a disk with enough space as recommended in the [Hardware requirements](#hardware-requirements) section. It defaults to `~/.avalanchego/db` on Flare Mainnet and Flare Testnet Coston2, and to `~/.flare/db` on Songbird Canary-Network and Songbird Testnet Coston. For example, you can use this option to store the database on an external drive.\n\n- [`--chain-config-dir`](https://docs.avax.network/nodes/maintain/avalanchego-config-flags#--chain-config-dir-string): Optional JSON configuration file for using non-default values.\n\n  <details>\n  <summary>Sample JSON configuration for RPC nodes.</summary>\n\n  For archival nodes, set `\"pruning-enabled\": false` to disable pruning. Note that archival nodes require significantly more disk space than standard RPC nodes.\n\n  ```json title=\"<chain-config-dir>/C/config.json\"\n  {\n    \"snowman-api-enabled\": false,\n    \"coreth-admin-api-enabled\": false,\n    \"eth-apis\": [\n      \"eth\",\n      \"eth-filter\",\n      \"net\",\n      \"web3\",\n      \"internal-eth\",\n      \"internal-blockchain\",\n      \"internal-transaction\"\n    ],\n    \"rpc-gas-cap\": 50000000,\n    \"rpc-tx-fee-cap\": 100,\n    \"pruning-enabled\": true,\n    \"local-txs-enabled\": false,\n    \"api-max-duration\": 0,\n    \"api-max-blocks-per-request\": 0,\n    \"allow-unfinalized-queries\": false,\n    \"allow-unprotected-txs\": false,\n    \"remote-tx-gossip-only-enabled\": false,\n    \"log-level\": \"info\"\n  }\n  ```\n\n  </details>\n\n## Setup with Docker\n\n### Prerequisites\n\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- [jq](https://stedolan.github.io/jq/download/) (optional, but recommended)\n\nFor simplicity this guide uses Docker Engine installed on Debian Linux.\n\n:::tip\n\nTo avoid using `sudo` each time you run the `docker` command, add your user to the Docker group after installation:\n\n```bash\nsudo usermod -a -G docker $USER\n# Log out and log back in or restart your system for the changes to take effect\n```\n\n:::\n\n### Configure the node\n\n#### Disk setup\n\nThis setup varies depending on your use case, but essentially you need to have a local directory with sufficient space for the blockchain data to be stored and persisted in. In this guide, there is an additional disk mounted at `/mnt/db`, which is used to persist the blockchain data. After you have a machine set up and ready to go, find the additional disk, format it if necessary, and mount to a directory:\n\n```bash\nlsblk\n# ----\n# NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\n# sda       8:0    0   10G  0 disk\n# ├─sda1    8:1    0  9.9G  0 part /\n# ├─sda14   8:14   0    3M  0 part\n# └─sda15   8:15   0  124M  0 part /boot/efi\n# sdb       8:16   0  300G  0 disk <- Device identified as db disk via size\n# ----\nsudo mkdir /mnt/db\nsudo chown -R <user>:<user> /mnt/db\nsudo mkfs.ext4 -m 0 -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/sdb\nsudo mount /dev/sdb /mnt/db\n```\n\n:::info\n\n- Replace `<user>` with the user you wish to start your containerized RPC node with.\n  It is recommended that this isn't the root user for security reasons.\n- Ensure you are replacing `/dev/sdb` with your actual device, since it could be different to the example.\n\n:::\n\nConfirm the new disk is mounted:\n\n```bash hl_lines=\"11\"\ndf -h\n# -----\n# Filesystem      Size  Used Avail Use% Mounted on\n# udev            3.9G     0  3.9G   0% /dev\n# tmpfs           796M  376K  796M   1% /run\n# /dev/sda1       9.7G  1.9G  7.3G  21% /\n# tmpfs           3.9G     0  3.9G   0% /dev/shm\n# tmpfs           5.0M     0  5.0M   0% /run/lock\n# /dev/sda15      124M   11M  114M   9% /boot/efi\n# tmpfs           796M     0  796M   0% /run/user/1009\n# /dev/sdb        295G   28K  295G   1% /mnt/db\n```\n\nLook for your device name and mount point specified in the output to confirm the mount worked.\n\nBackup the original `fstab` file (to revert changes if needed) and update `/etc/fstab` to make sure the device is mounted when the system reboots:\n\n```bash\nsudo -i\ncp /etc/fstab /etc/fstab.backup\nfstab_entry=\"UUID=$(blkid -o value -s UUID /dev/sdb) /mnt/db ext4 discard,defaults 0 2\"\necho $fstab_entry >> /etc/fstab\nexit\n```\n\n#### Configuration File and Logs Directory Setup\n\nOnce the disk setup is complete, you can define the configuration file and logs directory for the RPC node. These will be mounted from your local machine to the specified directories on your containerized RPC node.\n\nMounting the logs directory allows you to access the logs generated by the workload directly on your local machine. This saves you the effort of using `docker logs` and lets you inspect the files in your local directory instead.\n\nThis example uses the configuration provided in the [Additional Configuration](#additional-configuration) section of the Setup on Bare-Metal.\n\nCreate the local directories and change ownership to a non-root user of your choice:\n\n```bash\nsudo mkdir -p /opt/flare/conf\nsudo mkdir /opt/flare/logs\nsudo chown -R <user>:<user> /opt/flare\n```\n\n:::info\n\nReplace `<user>` with the user you wish to start your containerized RPC node with.\nIt is recommended that this isn't the root user for security reasons.\n\n:::\n\nCreate the configuration file:\n\n```json title=\"/opt/flare/conf/config.json\"\n{\n  \"snowman-api-enabled\": false,\n  \"coreth-admin-api-enabled\": false,\n  \"eth-apis\": [\n    \"eth\",\n    \"eth-filter\",\n    \"net\",\n    \"web3\",\n    \"internal-eth\",\n    \"internal-blockchain\",\n    \"internal-transaction\"\n  ],\n  \"rpc-gas-cap\": 50000000,\n  \"rpc-tx-fee-cap\": 100,\n  \"pruning-enabled\": true,\n  \"local-txs-enabled\": false,\n  \"api-max-duration\": 0,\n  \"api-max-blocks-per-request\": 0,\n  \"allow-unfinalized-queries\": false,\n  \"allow-unprotected-txs\": false,\n  \"remote-tx-gossip-only-enabled\": false,\n  \"log-level\": \"info\"\n}\n```\n\n### Run the node\n\nThe node can be run using:\n\n- [Docker CLI](#using-docker-cli), easier for a quick setup.\n\n- [Docker Compose](#using-docker-compose), more permanent and usable in the future.\n\n#### Using Docker CLI\n\n<Tabs groupId=\"network\" block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    Use the Docker image at [go-flare](https://hub.docker.com/layers/flarefoundation/go-flare/v1.9.1/images/sha256-ab193ed8862bf9ba82b309e00e892a81df1480f63c5b91981a2b4eb9c4847334?context=explore). The **Overview** tab in the repository linked explains the configurable parameters.\n\n    Download and start the container:\n\n    ```bash\n    docker pull flarefoundation/go-flare:v1.9.1\n    docker run -d --name flare-observer -e AUTOCONFIGURE_BOOTSTRAP=\"1\" -e NETWORK_ID=\"flare\" -e AUTOCONFIGURE_PUBLIC_IP=\"1\" -e AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=\"https://flare-bootstrap.flare.network/ext/info\" -v /mnt/db:/app/db -v /opt/flare/conf:/app/conf/C -v /opt/flare/logs:/app/logs -p 0.0.0.0:9650:9650 -p 0.0.0.0:9651:9651 flarefoundation/go-flare:v1.9.1\n    ```\n\n    Confirm your container is running and inspect that logs are printing:\n\n    ```bash\n    docker ps\n    docker logs flare-observer -f\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    Use the Docker image at [go-flare](https://hub.docker.com/layers/flarefoundation/go-flare/v1.9.1/images/sha256-ab193ed8862bf9ba82b309e00e892a81df1480f63c5b91981a2b4eb9c4847334?context=explore). The **Overview** tab in the repository linked explains the configurable parameters.\n\n    Download and start the container:\n\n    ```bash\n    docker pull flarefoundation/go-flare:v1.9.1\n    docker run -d --name coston2-observer -e AUTOCONFIGURE_BOOTSTRAP=\"1\" -e NETWORK_ID=\"costwo\" -e AUTOCONFIGURE_PUBLIC_IP=\"1\" -e AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=\"https://coston2-bootstrap.flare.network/ext/info\" -v /mnt/db:/app/db -v /opt/flare/conf:/app/conf/C -v /opt/flare/logs:/app/logs -p 0.0.0.0:9650:9650 -p 0.0.0.0:9651:9651 flarefoundation/go-flare:v1.9.1\n    ```\n\n    Confirm your container is running and inspect that logs are printing:\n\n    ```bash\n    docker ps\n    docker logs coston2-observer -f\n    ```\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    Use the Docker image at [go-flare](https://hub.docker.com/layers/flarefoundation/go-flare/v1.9.1/images/sha256-ab193ed8862bf9ba82b309e00e892a81df1480f63c5b91981a2b4eb9c4847334?context=explore). The **Overview** tab in the repository linked explains the configurable parameters.\n\n    Download and start the container:\n\n    ```bash\n    docker pull flarefoundation/go-flare:v1.9.1\n    docker run -d --name songbird-observer -e AUTOCONFIGURE_BOOTSTRAP=\"1\" -e NETWORK_ID=\"songbird\" -e AUTOCONFIGURE_PUBLIC_IP=\"1\" -e AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=\"https://songbird-bootstrap.flare.network/ext/info\" -v /mnt/db:/app/db -v /opt/flare/conf:/app/conf/C -v /opt/flare/logs:/app/logs -p 0.0.0.0:9650:9650 -p 0.0.0.0:9651:9651 flarefoundation/go-flare:v1.9.1\n    ```\n\n    Confirm your container is running and inspect that logs are printing:\n\n    ```bash\n    docker ps\n    docker logs songbird-observer -f\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    Use the Docker image at [go-flare](https://hub.docker.com/layers/flarefoundation/go-flare/v1.9.1/images/sha256-ab193ed8862bf9ba82b309e00e892a81df1480f63c5b91981a2b4eb9c4847334?context=explore). The **Overview** tab in the repository linked explains the configurable parameters.\n\n    Download and start the container:\n\n    ```bash\n    docker pull flarefoundation/go-flare:v1.9.1\n    docker run -d --name coston-observer -e AUTOCONFIGURE_BOOTSTRAP=\"1\" -e NETWORK_ID=\"coston\" -e AUTOCONFIGURE_PUBLIC_IP=\"1\" -e AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=\"https://coston-bootstrap.flare.network/ext/info\" -v /mnt/db:/app/db -v /opt/flare/conf:/app/conf/C -v /opt/flare/logs:/app/logs -p 0.0.0.0:9650:9650 -p 0.0.0.0:9651:9651 flarefoundation/go-flare:v1.9.1\n    ```\n\n    Confirm your container is running and inspect that logs are printing:\n\n    ```bash\n    docker ps\n    docker logs coston-observer -f\n    ```\n\n  </TabItem>\n</Tabs>\n\nOnce you have confirmed that the container is running, use Ctrl+C to exit the following of logs and check your container's `/ext/health` endpoint. Only when the RPC node is fully synced will you see `\"healthy\": true`, but this otherwise confirms your container's HTTP port `9650` is accessible from your local machine.\n\n```bash\ncurl http://localhost:9650/ext/health | jq\n```\n\n<details>\n<summary>Explanation of the CLI arguments.</summary>\n\n**Volumes:**\n\n- `-v /mnt/db:/app/db`\n\n  Mount the local database directory to the default database directory of the container.\n\n- `-v /opt/flare/conf:/app/conf/C`\n\n  Mount the local configuration directory to the default location of `config.json`.\n\n- `-v /opt/flare/logs:/app/logs`\n\n  Mount the local logs directory to the workloads default logs directory.\n\n**Ports:**\n\n- `-p 0.0.0.0:9650:9650`\n\n  Mapping the container's HTTP port to your local machine, enabling the querying of the containerized RPC node's HTTP port via your local machine's IP and port.\n\n  !!! warning\n  Only use binding `0.0.0.0` for port 9650 if you wish to publicly expose your containerized RPC node's RPC endpoint from your machine's public IP address.\n  If you require it to be publicly accessible for another application to use, ensure you set up a firewall rule to only allow port 9650 to be accessible via specific source IP addresses.\n\n- `-p 0.0.0.0:9651:9651`\n\n  Mapping the container's peering port to your local machine so other peers can query the node.\n\n**Environment Variables:**\n\n- `-e AUTOCONFIGURE_BOOTSTRAP=\"1\"`\n\n  Retrieves the bootstrap endpoints Node-IP and Node-ID automatically.\n\n- `-e NETWORK_ID=\"<network>\"`\n\n  Sets the correct network ID from the provided options below:\n\n  - `coston`\n  - `costwo`\n  - `songbird`\n  - `flare`\n\n- `-e AUTOCONFIGURE_PUBLIC_IP=\"1\"`\n\n  Retrieves your local machine's IP automatically.\n\n- `-e AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=\"<bootstrap_host>/ext/info\"`\n\n      Defines the bootstrap endpoint used to initialize chain sync.\n      Flare nodes can be used to bootstrap your node for each chain:\n\n      - `https://coston-bootstrap.flare.network/ext/info`\n      - `https://costwo.flare.network/ext/info`\n      - `https://songbird-bootstrap.flare.network/ext/info`\n      - `https://flare-bootstrap.flare.network/ext/info`\n\n</details>\n\n#### Using Docker Compose\n\nDocker Compose for this use case is a good way to simplify your setup of running the RPC node. Adding all necessary configurations into a single file that can be run with a simple command.\n\nIn this guide the `docker-compose.yaml` file is created in `/opt/observer` but the location is entirely up to you.\n\nCreate the working directory and set the ownership.\n\n```bash\nsudo mkdir /opt/observer\nsudo chown -R <user>:<user> /opt/observer\n```\n\nCreate the `docker-compose.yaml` file:\n\n<Tabs groupId=\"network\" block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    ```yaml title=\"/opt/observer/docker-compose.yaml\"\n    version: '3.6'\n\n    services:\n      observer:\n        container_name: flare-observer\n        image: flarefoundation/go-flare:v1.9.1\n        restart: on-failure\n        environment:\n          - AUTOCONFIGURE_BOOTSTRAP=1\n          - NETWORK_ID=flare\n          - AUTOCONFIGURE_PUBLIC_IP=1\n          - AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=https://flare-bootstrap.flare.network/ext/info\n        volumes:\n          - /mnt/db:/app/db\n          - /opt/flare/conf:/app/conf/C\n          - /opt/flare/logs:/app/logs\n        ports:\n          - 0.0.0.0:9650:9650\n          - 0.0.0.0:9651:9651\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    ```yaml title=\"/opt/observer/docker-compose.yaml\"\n    version: '3.6'\n\n    services:\n      observer:\n        container_name: coston2-observer\n        image: flarefoundation/go-flare:v1.9.1\n        restart: on-failure\n        environment:\n          - AUTOCONFIGURE_BOOTSTRAP=1\n          - NETWORK_ID=costwo\n          - AUTOCONFIGURE_PUBLIC_IP=1\n          - AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=https://coston2-bootstrap.flare.network/ext/info\n        volumes:\n          - /mnt/db:/app/db\n          - /opt/flare/conf:/app/conf/C\n          - /opt/flare/logs:/app/logs\n        ports:\n          - 0.0.0.0:9650:9650\n          - 0.0.0.0:9651:9651\n    ```\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    ```yaml title=\"/opt/observer/docker-compose.yaml\"\n    version: '3.6'\n\n    services:\n      observer:\n        container_name: songbird-observer\n        image: flarefoundation/go-flare:v1.9.1\n        restart: on-failure\n        environment:\n          - AUTOCONFIGURE_BOOTSTRAP=1\n          - NETWORK_ID=songbird\n          - AUTOCONFIGURE_PUBLIC_IP=1\n          - AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=https://songbird-bootstrap.flare.network/ext/info\n        volumes:\n          - /mnt/db:/app/db\n          - /opt/flare/conf:/app/conf/C\n          - /opt/flare/logs:/app/logs\n        ports:\n          - 0.0.0.0:9650:9650\n          - 0.0.0.0:9651:9651\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    ```yaml title=\"/opt/observer/docker-compose.yaml\"\n    version: '3.6'\n\n    services:\n      observer:\n        container_name: coston-observer\n        image: flarefoundation/go-flare:v1.9.1\n        restart: on-failure\n        environment:\n          - AUTOCONFIGURE_BOOTSTRAP=1\n          - NETWORK_ID=coston\n          - AUTOCONFIGURE_PUBLIC_IP=1\n          - AUTOCONFIGURE_BOOTSTRAP_ENDPOINT=https://coston-bootstrap.flare.network/ext/info\n        volumes:\n          - /mnt/db:/app/db\n          - /opt/flare/conf:/app/conf/C\n          - /opt/flare/logs:/app/logs\n        ports:\n          - 0.0.0.0:9650:9650\n          - 0.0.0.0:9651:9651\n    ```\n\n  </TabItem>\n</Tabs>\n\nRun Docker Compose:\n\n```bash\ndocker compose -f /opt/observer/docker-compose.yaml up -d\n```\n\nWhen the command completes, check the container is running and inspect that logs are being generated:\n\n```bash\ndocker ps\ndocker compose logs -f\n```\n\nOnce you have confirmed the container is running, use Ctrl+C to exit the following of logs and check your container's `/ext/health` endpoint.\nOnly when the RPC node is fully synced will you see `\"healthy\": true`, but this otherwise confirms your container's HTTP port (9650) is accessible from your local machine.\n\n```bash\ncurl http://localhost:9650/ext/health | jq\n```\n\n### Additional configuration\n\nThere are several environment variables to adjust your workload at runtime. The example Docker and Docker Compose guides above assumed some defaults and utilized built-in automation scripts for most of the configuration. Outlined below are all options available:\n\n|         **Variable Name** | **Default** | **Description**                                                      |\n| ------------------------: | :---------- | :------------------------------------------------------------------- |\n|               `HTTP_HOST` | `0.0.0.0`   | HTTP host binding address                                            |\n|               `HTTP_PORT` | `9650`      | The listening port for the HTTP host                                 |\n|            `STAKING_PORT` | `9651`      | The staking port for bootstrapping nodes                             |\n|               `PUBLIC_IP` | (empty)     | Public facing IP. Must be set if `AUTOCONFIGURE_PUBLIC_IP=0`         |\n|                  `DB_DIR` | `/app/db`   | The database directory location                                      |\n|                 `DB_TYPE` | `leveldb`   | The database type to be used                                         |\n|           `BOOTSTRAP_IPS` | (empty)     | A list of bootstrap server IPs                                       |\n|           `BOOTSTRAP_IDS` | (empty)     | A list of bootstrap server IDs                                       |\n|        `CHAIN_CONFIG_DIR` | `/app/conf` | Configuration folder where you should mount your configuration file  |\n|                 `LOG_DIR` | `/app/logs` | Logging directory                                                    |\n|               `LOG_LEVEL` | `info`      | Logging verbosity level that is logged into the file                 |\n| `AUTOCONFIGURE_PUBLIC_IP` | `0`         | Set to 1 to autoconfigure `PUBLIC_IP`, skipped if `PUBLIC_IP` is set |\n| `AUTOCONFIGURE_BOOTSTRAP` | `0`         | Set to 1 to autoconfigure `BOOTSTRAP_IPS` and `BOOTSTRAP_IDS`        |\n|         `EXTRA_ARGUMENTS` | (empty)     | Extra arguments passed to flare binary                               |\n\nAdditional options:\n\n- `NETWORK_ID`\n\n  **Default:** The default depends on the image you use, so either go-songbird (`default: coston`) or go-flare (`default: costwo`)\n\n  **Description:** Name of the network you want to connect to.\n\n- `AUTOCONFIGURE_BOOTSTRAP_ENDPOINT`\n\n  **Default:** `https://coston2-bootstrap.flare.network/ext/info` or `https://flare-bootstrap.flare.network/ext/info`\n\n  **Description:** Endpoint used to automatically retrieve the Node-ID and Node-IP from.\n\n- `AUTOCONFIGURE_FALLBACK_ENDPOINTS`\n\n  **Default:** (empty)\n\n  **Description:** Comma-divided fallback bootstrap endpoints, used if `AUTOCONFIGURE_BOOTSTRAP_ENDPOINT` is not valid, such as the bootstrap endpoint being unreachable.\n  Tested from first-to-last, until one is valid.\n\n## Node maintenance\n\nIn some cases, your node might not work correctly or you might receive unusual messages that are difficult to troubleshoot. Use the following solutions to ensure your node stays healthy:\n\n- **Ensure Adequate Peers:** When your node has fewer than 16 peers, it will not work correctly. To retrieve the number of connected peers, run the following command and look for the line containing `connectedPeers`:\n\n  ```bash\n  curl http://127.0.0.1:9650/ext/health | jq\n  ```\n\n  To automate the process, use:\n\n  ```bash\n  curl -s http://127.0.0.1:9650/ext/health | jq -r \".checks.network.message.connectedPeers\"\n  ```\n\n- **Check Disk Space:** If your node does not sync after a long time and abruptly stops working, ensure the database location has sufficient disk space. Remember, the database size might change significantly during bootstrapping.\n\n- **Resolve Connection Issues:** If you receive unusual messages after making submissions or when transactions are reverted, your node might not be connected correctly. Ensure the database location has sufficient disk space, then restart the node.\n\n- **Handle Bootstrap Errors:** If you receive an error related to `GetAcceptedFrontier` during bootstrapping, your node was disconnected during the process. Restart the node if you see the following error:\n\n  ```plaintext\n  failed to send GetAcceptedFrontier(MtF8bVH241hetCQJgsKEdKyJBs8vhp1BC, 11111111111111111111111111111111LpoYY, NUMBER)\n  ```\n\n- **Restart Unhealthy Nodes:** If your node syncs but remains unhealthy for no discernible reason, restart the node.",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nA validator node is essential for securing the network by validating transactions and blocks, and participating in the consensus process. Deploying validator nodes enables participation in the consensus mechanism and allows for the collection of rewards provided by the network to those who help secure it.\n\nValidator nodes perform the following tasks:\n\n- **Validation:** Ensure the validity of transactions.\n- **Consensus:** Reach agreement with other validators on the transactions to be added to the blockchain.\n- **Block Addition:** Bundle the agreed-upon transactions into a block and append it to the blockchain.\n\nOn Flare, data protocols such as the [Flare Time Series Oracle](/run-node/ftso-data-provider) and [Flare Data Connector](/run-node/fdc-attestation-provider) are enshrined into the network. This requires validators to perform additional tasks to secure the network and earn rewards.\n\n<details>\n<summary>**Flare Staking Phases**</summary>\n\nDeployment will occur in three phases, during which:\n\n1. Infrastructure entities will be progressively on-boarded to ensure the network remains operational.\n2. Current FTSO data providers must build a minimum stake to function as validators.\n3. Existing validators need to enhance their capabilities to become data providers.\n\nEach phase will gradually relinquish control, allowing the network to validate independently of the Flare Foundation.\n\n**Launch (Jul 2022)**\n\nAt network launch, 20 validators had their node IDs hard-coded into the client software, preventing other validators from participating. The Flare Foundation managed these nodes and gradually reassigned 16 of them to 4 external entities to increase decentralization. These entities, known as professional validators, are experienced infrastructure providers managing blockchain nodes. During this period, FTSO data providers operated entirely independently of validators.\n\n**Phase 1 (July 2023)**\n\nA network fork enabled Avalanche's proof-of-stake mechanism, opening validation to everyone. Simultaneously, all stakes from the original validators expired. The Flare Foundation loaned all the stakes for the initial validators, maintaining the distribution of validation power while testing proof-of-stake. After some FTSO data providers completed a KYC process, the Flare Foundation loaned them funds to deploy validation nodes and act as validators.\n\nSince staking occurs on the P-chain, staked tokens cannot access rewards managed by smart contracts on the C-chain. To address this, a communication mechanism between the two chains is being developed. All staking rewards are manually calculated offchain and then distributed onchain. These calculations will initially be private for fine-tuning and will become public in Phase 2 for verification.\n\n**Phase 2 (Oct 2023, current)**\n\nOnce FTSO data providers have gathered enough stake to ensure the network's continued operation, all stakes loaned by the Flare Foundation to the launch validators will be withdrawn. Professional validators are expected to cease operations unless they provide their own stake. The Flare Foundation might delegate stake to KYC-verified FTSO data providers to help initiate the system. This process, known as stake boosting, will run for a limited time. Staked funds can earn [FlareDrops](https://flare.network/flaredrop-guide/) and participate in governance but not earn [FTSO](https://flare.network/ftso/) delegation rewards.\n\nStaking rewards will:\n\n- Consider validator uptime and staked amount, which is publicly monitored.\n- Require that the validator is also an FTSO data provider consistently rewarded for accurate prices.\n- Be manually calculated offchain using a public script and then distributed onchain.\n\n**Phase 3**\n\nOnce secure communication between the P- and C-chains is established, staking rewards will be managed entirely onchain. The goal is for funds staked on the P-chain to have the same rights as wrapped FLR on the C-chain, enabling them to earn [FTSO](https://flare.network/ftso/) rewards, [FlareDrops](https://flare.network/flaredrop-guide/), and participate in governance.\n\n**Summary of Phases**\n\n|                                                   | Launch | Phase 1 | Phase 2* | Phase 3 |\n| ------------------------------------------------- | :----: | :-----: | :-------: | :-----: |\n| Validation open to everybody                      |   ❌   |   ✅    |    ✅     |   ✅    |\n| Validators must provide own stake                 |   ❌   |   ❌    |    ✅     |   ✅    |\n| Validators must be data providers to earn rewards |   ❌   |   ❌    |    ✅     |   ✅    |\n| Locked stake can earn staking rewards             |   ❌   |   ❌    |    ✅     |   ✅    |\n| Staking rewards are handled onchain               |   ❌   |   ❌    |    ❌     |   ✅    |\n| Same rights for staked and wrapped tokens         |   ❌   |   ❌    |    ❌     |   ✅    |\n\n*Current Phase\n\n</details>\n\n## Hardware requirements\n\nValidator nodes have the same hardware requirements as RPC nodes. Refer to the [Hardware requirements](/run-node/rpc-node#hardware-requirements) section of the RPC node guide for more information.\n\n## Prerequisites\n\nEnsure you have the following tools installed:\n\n- [Go](https://golang.org/doc/install)\n- [GCC](https://gcc.gnu.org/install/)\n- [jq](https://stedolan.github.io/jq/download/)\n\n<Tabs>\n  <TabItem value=\"macos\" label=\"MacOS\" default>\n\n    ```bash\n    brew install go gcc jq\n    ```\n\n  </TabItem>\n  <TabItem value=\"ubuntu\" label=\"Ubuntu\">\n\n    ```bash\n    apt install golang gcc jq\n    ```\n\n  </TabItem>\n  <TabItem value=\"arch\" label=\"Arch\">\n\n    ```bash\n    pacman -S go gcc jq\n    ```\n\n  </TabItem>\n</Tabs>\n\n## Configure the node\n\n:::warning\nValidator security impacts the security of the entire network. To configure your node for security:\n\n- **Don't** allow port `9650` to be reached externally.\n- **Don't** allow password authentication over SSH.\n- **Don't** run any non-validator services on the same IP.\n\n:::\n\nIn addition to the above, the following security measures are recommended for further hardening:\n\n- **Do** firewall the machine. Only the ports required for validator operation should be open (i.e. only the staking port, which defaults to `9651`).\n\n- **Don't** allow any ICMP traffic.\n\n- **Don't** allow the node to accept RPC API requests, only use it as a validator. Deploy a separate RPC node for tasks requiring RPC API access.\n\n- **Don't** enable the more than the minimum set of EVM APIs when configuring your node.\n\n<details>\n<summary>Sample JSON configuration for validator nodes.</summary>\n\n```json title=\"config.json\"\n{\n  \"snowman-api-enabled\": false,\n  \"coreth-admin-api-enabled\": false,\n  \"coreth-admin-api-dir\": \"\",\n  \"eth-apis\": [\"web3\"],\n  \"continuous-profiler-dir\": \"\",\n  \"continuous-profiler-frequency\": 900000000000,\n  \"continuous-profiler-max-files\": 5,\n  \"rpc-gas-cap\": 50000000,\n  \"rpc-tx-fee-cap\": 100,\n  \"preimages-enabled\": false,\n  \"pruning-enabled\": true,\n  \"snapshot-async\": true,\n  \"snapshot-verification-enabled\": false,\n  \"metrics-enabled\": true,\n  \"metrics-expensive-enabled\": false,\n  \"local-txs-enabled\": false,\n  \"api-max-duration\": 30000000000,\n  \"ws-cpu-refill-rate\": 0,\n  \"ws-cpu-max-stored\": 0,\n  \"api-max-blocks-per-request\": 30,\n  \"allow-unfinalized-queries\": false,\n  \"allow-unprotected-txs\": false,\n  \"keystore-directory\": \"\",\n  \"keystore-external-signer\": \"\",\n  \"keystore-insecure-unlock-allowed\": false,\n  \"remote-tx-gossip-only-enabled\": false,\n  \"tx-regossip-frequency\": 60000000000,\n  \"tx-regossip-max-size\": 15,\n  \"log-level\": \"info\",\n  \"offline-pruning-enabled\": false,\n  \"offline-pruning-bloom-filter-size\": 512,\n  \"offline-pruning-data-directory\": \"\"\n}\n```\n\n</details>\n\n## Run the node\n\nStart your node by following the **Run the node** section of the [RPC node](/run-node/rpc-node) guide.\n\n:::info\n\nIf you have a pre-registered validator key, you just need to add these parameters to the launch command:\n\n```bash\n--staking-tls-cert-file=<NODE_CRT_PATH> --staking-tls-key-file=<NODE_KEY_PATH>\n```\n\n:::",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n<details>\n<summary>Automated registration on testnets.</summary>\n\n:::danger\n\nAutomated registration can expose private keys. Only use on testnets.\n\n:::\n\nOn testnets, you can register your entity addresses with the [`register-entities.ts`](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/deployment/tasks/register-entities.ts) script and your sortition public key with the [`register-public-keys.ts`](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/deployment/tasks/register-public-keys.ts) scripts.\n\n1. Clone and build [flare-smart-contracts-v2](https://github.com/flare-foundation/flare-smart-contracts-v2/):\n\n```bash\ngit clone https://github.com/flare-foundation/flare-smart-contracts-v2/\ncd flare-smart-contracts-v2\nyarn\nyarn c\n```\n\n2. Create an `entities.json` file with the following account addresses and private keys:\n\n```json\n[\n  {\n    \"identity\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"submit\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"submitSignatures\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"signingPolicy\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"delegation\": {\n      \"address\": \"<address>\",\n      \"privateKey\": \"<private key hex>\"\n    },\n    \"sortitionPrivateKey\": \"<private key hex>\"\n  }\n]\n```\n\n3. Setup the following variables in `.env`:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    ```text title=\".env\"\n    ENTITIES_FILE_PATH=\"<path to entities.json>\"\n    COSTON2_RPC=<non-public Coston2 RPC>\n    CHAIN_CONFIG=\"coston2\"\n    ```\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    ```text title=\".env\"\n    ENTITIES_FILE_PATH=\"<path to entities.json>\"\n    SONGBIRD_RPC=<non-public Songbird RPC>\n    CHAIN_CONFIG=\"songbird\"\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    ```text title=\".env\"\n    ENTITIES_FILE_PATH=\"<path to entities.json>\"\n    COSTON_RPC=<non-public Coston RPC>\n    CHAIN_CONFIG=\"coston\"\n    ```\n\n  </TabItem>\n</Tabs>\n\n4. Run the registration tasks:\n\n<Tabs groupId=\"network\">\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\" default>\n\n    ```bash\n    yarn hardhat --network coston2 register-entities\n    yarn hardhat --network coston2 register-public-keys\n    ```\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    ```bash\n    yarn hardhat --network songbird register-entities\n    yarn hardhat --network songbird register-public-keys\n    ```\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    ```bash\n    yarn hardhat --network coston register-entities\n    yarn hardhat --network coston register-public-keys\n    ```\n\n  </TabItem>\n</Tabs>\n</details>\n",
    "import Step1 from \"/static/img/run-node-gcp-marketplace/step1-img.png\";\nimport Step2 from \"/static/img/run-node-gcp-marketplace/step2-img.png\";\nimport Step2_1 from \"/static/img/run-node-gcp-marketplace/step2-1-img.png\";\n\nDeploy blockchain nodes without the need to install dependencies or manage configuration files. The nodes come with a copy of the databases locally which drastically reduces bootstrap times. The machine images are available for Flare Mainnet, Flare Testnet Coston2, Songbird Canary-Network, Songbird Testnet Coston and several other networks.\n\nHead to [Google Cloud Marketplace](https://console.cloud.google.com/marketplace/product/flare-public/blockchain-machine-image-flare-network) to get started.\n\n## Supported blockchain nodes\n\n| Name                          | Config Dir             | Machine Type   | vCPUs | RAM   | Disk Size | Disk Type |\n| :---------------------------- | :--------------------- | :------------- | :---- | :---- | :-------- | :-------- |\n| Flare Mainnet                 | `/etc/flare`           | n2d-standard-4 | 4     | 16 GB | 830 GB    | Balanced  |\n| Flare Mainnet Rosetta         | `/etc/flare_rosetta`   | n2d-standard-4 | 4     | 16 GB | 830 GB    | Balanced  |\n| Flare Testnet Coston2         | `/etc/coston2`         | n2d-standard-4 | 4     | 16 GB | 280 GB    | Balanced  |\n| Flare Testnet Coston2 Rosetta | `/etc/coston2_rosetta` | n2d-standard-4 | 4     | 16 GB | 280 GB    | Balanced  |\n| Songbird Canary-Network       | `/etc/songbird`        | n2d-standard-8 | 8     | 32 GB | 2,730 GB  | Balanced  |\n| Songbird Testnet Coston       | `/etc/coston`          | n2d-standard-4 | 4     | 16 GB | 280 GB    | Balanced  |\n\n<details>\n<summary>Other supported networks </summary>\n\n| Name                | Config Dir       | Machine Type       | vCPUs | RAM   | Disk Size | Disk Type |\n| :------------------ | :--------------- | :----------------- | :---- | :---- | :-------- | :-------- |\n| Algorand            | `/etc/algorand`  | e2-custom-8-13056  | 8     | 13 GB | 70 GB     | Balanced  |\n| Avalanche           | `/etc/avalanche` | e2-custom-8-16384  | 8     | 16 GB | 530 GB    | Balanced  |\n| Bitcoin             | `/etc/bitcoin`   | e2-custom-2-16128  | 2     | 16 GB | 1,030 GB  | Balanced  |\n| Binance Smart Chain | `/etc/bsc`       | c2-standard-8      | 8     | 32 GB | 2,030 GB  | SSD       |\n| Cosmos Hub          | `/etc/cosmos`    | n2d-standard-4     | 4     | 16 GB | 1,030 GB  | Balanced  |\n| Dogecoin            | `/etc/dogecoin`  | e2-custom-2-11008  | 2     | 11 GB | 380 GB    | Balanced  |\n| Ethereum            | `/etc/ethereum`  | n2d-standard-8     | 8     | 32 GB | 2,230 GB  | Balanced  |\n| Ethereum Holesky    | `/etc/ethereum`  | n2d-standard-8     | 8     | 32 GB | 430 GB    | Balanced  |\n| Ethereum Sepolia    | `/etc/ethereum`  | n2d-standard-8     | 8     | 32 GB | 730 GB    | Balanced  |\n| Filecoin Lotus      | `/etc/filecoin`  | e2-custom-16-32768 | 16    | 32 GB | 1,030 GB  | SSD       |\n| Litecoin            | `/etc/litecoin`  | e2-custom-2-11520  | 2     | 12 GB | 330 GB    | Balanced  |\n| Polygon             | `/etc/polygon`   | n2d-standard-16    | 16    | 64 GB | 6,030 GB  | SSD       |\n| XRPL                | `/etc/xrpl`      | n2d-standard-8     | 8     | 32 GB | 375 GB    | Local SSD |\n\n</details>\n\n## Prerequisites\n\nEnsure you have:\n\n- A Google Cloud account\n\n- A service account with at least the following permissions (it can be created beforehand or during the launch process using GUI):\n\n  - **roles/config.agent**\n  - **roles/compute.admin**\n  - **roles/iam.serviceAccountUser**\n\n- Verify that your [Quotas and System Limits](https://cloud.google.com/docs/quotas/view-manage), located in **IAM and admin > Quotas and system limits**, meet the resource requirements for the blockchain node you intend to deploy. Refer to the [Supported blockchain nodes](#supported-blockchain-nodes) table for the specific resource requirements of each node. Adjust your quotas as needed to ensure sufficient resources are available.\n\n## Setup a node\n\n1. **Locate and launch the blockchain machine image**\n\n   Head to the [Google Cloud Marketplace](https://console.cloud.google.com/marketplace/product/flare-public/blockchain-machine-image-flare-network).\n\n   <img src={Step1} style={{ width: 500 }} />\n\n   Click the **Launch** button to proceed.\n\n2. **Configure basic settings**\n\n   Choose the service account, source image, and region for your instance. To use an existing service account, click the **Existing account** button.\n\n   <img src={Step2} style={{ width: 500 }} />\n\n   Next, select the network where the node will be deployed, and configure basic firewall rules. Once done, click **Deploy**. This will launch a node with the deployment name, for example `flare-node`, in the **Compute Engine > VM instances**.\n\n   <img src={Step2_1} style={{ width: 500 }} />\n\n3. **Troubleshooting**\n\n   If you encounter any issues during the deployment process, refer to the [Troubleshooting Section](#troubleshooting) for guidance.\n\n## Connect to the node\n\nNode operations are managed using the `nodectl` CLI tool.\n\n```bash\nsudo nodectl help\n```\n\nConfiguration files are located in the `/etc/<node_name>` directory. For instance, Flare nodes will have their configurations in `/etc/flare`.\n\nTo start the node, connect to the instance and apply the services using:\n\n```bash\n# Applies all services configured in `/etc/<node_name>/config.yaml`\nsudo nodectl apply --target all\n```\n\n## Verify node operation\n\nThe quickest way to verify that the node is running is by using the built-in health checks.\nLogs can also be accessed in the `/var/log/<node_name>` directory, for example, `/var/log/flare`.\n\n```bash\n# Run health checks\nsudo nodectl health\n# Display detailed node information\nsudo nodectl status\n```\n\nFor live log monitoring, use `nodectl`:\n\n```bash\nsudo nodectl logs -f\n```\n\nFor more log options, refer to the `journalctl` manual:\n\n```bash\nman journalctl\n```\n\n## Advanced Deployment with Terraform\n\nBlockchain machine images can also be deployed using Terraform to meet advanced requirements,\nsuch as replicating nodes, automating configuration, and scaling.\n\nIn this section, we provide an example which deploys two replicas of Flare nodes in the EU and US regions.\nSource code is available in the [flare-foundation/bmi-terraform-examples](https://github.com/flare-foundation/bmi-terraform-examples) repository.\n\nThe first step is to obtain the latest blockchain machine image.\nStart by navigating to the [Google Cloud Marketplace](https://console.cloud.google.com/marketplace/product/flare-public/blockchain-machine-image-flare-network) and click `LAUNCH`.\nThen, switch to the `COMMAND-LINE DEPLOYMENT` tab and scroll down to the VM Image section, where you will find a table containing the latest images.\nCopy the name of the latest image and update the locals in the `instance.tf` file accordingly.\nAdditionally, ensure that all required variables are correctly set in the `terraform.tfvars`, such as GCP project name, before proceeding.\n\n```hcl\nlocals {\n  replicas = {\n    1 = {\n      # update here\n      image = \"projects/mpi-flare-public/global/images/flare---v1-...\"\n      zone  = \"europe-west1-c\"\n    },\n    2 = {\n      # update here\n      image = \"projects/mpi-flare-public/global/images/flare---v1-...\"\n      zone  = \"us-west1-a\"\n    }\n  }\n}\n```\n\nNext, configure a firewall rule to allow external traffic from other peers in the network to access port `9651`.\n\n```hcl\nresource \"google_compute_firewall\" \"peering\" {\n  project = var.gcp_project_name\n  name    = \"flare-example-peering-tcp\"\n  network = \"default\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"9651\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"flare-example-peering\"]\n  priority      = \"600\"\n}\n```\n\nOptionally, you can create a service account with the necessary permissions to access a Slack webhook stored in GCP Secret Manager.\nThe node uses the secret's name to obtain the webhook and sends health alerts to Slack.\n\nEach instance must define both startup and shutdown scripts.\nThe startup script handles node configuration tasks, such as enabling Promtail log scraping, node metrics, and Slack alerts.\nUse tools such as `jq`, `yq` and `sed` to perform the configuration.\n\n```bash\n#!/bin/bash\n\n#### Configure node ####\n# Example\nyq eval '.health_checks.slack_alerts.webhook_secret_name = \"example_slack_webhook_secret_name\"' -i /etc/flare/config.yaml\nyq eval '.health_checks.slack_alerts.enabled = true' -i /etc/flare/config.yaml\n\n#### Start node ####\nnodectl apply --target all\n```\n\nThe shutdown script ensures the node shuts down gracefully.\n\n```bash\n#!/bin/bash\n\nnodectl stop\n```\n\nFinally, all the previously mentioned files and resources are used to define instance resources,\nwhich tie together the configuration, scripts, replication and permissions necessary for the node deployment.\n\n```hcl\nresource \"google_compute_instance\" \"this\" {\n  for_each = local.replicas\n\n  project = var.gcp_project_name\n  name    = \"flare-node-example-replica-${each.key}\"\n  zone    = each.value.zone\n\n  machine_type = \"n2d-standard-4\"\n\n  metadata = {\n    startup-script = templatefile(\"${path.module}/templates/startup.sh\", {})\n    shutdown-script = templatefile(\"${path.module}/templates/shutdown.sh\", {})\n  }\n\n\n  boot_disk {\n    initialize_params {\n      image = each.value.image\n      type  = \"pd-balanced\"\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n\n  tags = google_compute_firewall.peering.target_tags\n\n  service_account {\n    email  = google_service_account.this.email\n    scopes = [\"cloud-platform\"]\n  }\n}\n```\n\n## Troubleshooting\n\n- **Deployment via UI failure due to Terraform state lock**\n\n  - **Symptom**: The deployment fails, and clicking **Retry** leads to Terraform state lock errors.\n  - **Solution**: Instead of retrying, delete the failed deployment and start a new one.\n\n- **Deployment failure due to exceeded quotas**\n\n  - **Symptom**: The deployment fails, displaying an error message in the logs similar to:\n    ```\n    Error: Error waiting for instance to create: Quota 'SSD_TOTAL_GB' exceeded.  Limit: 500.0 in region us-west1.\n    metric name = compute.googleapis.com/ssd_total_storage\n    limit name = SSD-TOTAL-GB-per-project-region\n    limit = 500\n    dimensions = map[region:us-west1]\n    ```\n  - **Solution**: Resource quotas need to be increased manually. To do this, refer to the [Quotas and System Limits documentation](https://cloud.google.com/docs/quotas/view-manage) and navigate to **IAM & Admin > Quotas**. After adjusting the quotas, delete the failed deployment and deploy a new one.",
    ":::info\n\nThe FDC Provider deployment is now integrated into the [`flare-systems-deployment`](https://github.com/flare-foundation/flare-systems-deployment) repository, which also supports FTSO deployments. Previously, deployments were managed through the `ftso-v2-provider-deployment` repository.\n\nThe older repository is being deprecated. While it remains available for legacy deployments on Flare or Songbird, transitioning to the updated repository is strongly recommended. Active development has shifted to the new repository, where all future updates and features will be introduced. You can find the deprecation notice and detailed upgrade instructions [here](https://github.com/flare-foundation/ftso-v2-provider-deployment/tree/0.3.1-deprecation.2) until the information is merged into the official repository.\n\nTo run the FDC Client, you must also deploy verifiers and nodes that the client depends on. The [`fdc-suite-deployment`](https://github.com/flare-foundation/fdc-suite-deployment) repository contains comprehensive instructions for setting up and deploying these components.\n\nIf you already operate some of the required nodes, you can connect the FDC Client to those existing nodes, ensuring that the configurations remain compatible to avoid any operational issues.\n\n:::",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport AutomatedRegistration from \"./_automated_registration.mdx\";\n\nThis guide provides a sample deployment configuration for infrastructure providers participating in the [Flare Systems Protocol (FSP)](https://dev.flare.network/network/fsp).\nThe FSP consists of [Flare Time Series Oracle (FTSO)](https://dev.flare.network/ftso/overview) and [Flare Data Connector (FDC)](https://dev.flare.network/fdc/overview).\n\n<ThemedImage\n  alt=\"Data Provider System for FSP\"\n  sources={{\n    light: useBaseUrl(\"/img/run-node-fsp/fsp_run_node_light.svg\"),\n    dark: useBaseUrl(\"/img/run-node-fsp/fsp_run_node_dark.svg\"),\n  }}\n/>\n\nAn FSP provider system consists of the following six components:\n\n1. **Flare System Client**: Manages interactions with FTSO smart contracts, including data collection, submission, voter registration, and system tasks.\n2. **C-chain Indexer**: Tracks FSP-related blockchain transactions and events, enabling data calculations and action triggers.\n3. **FTSO Client**: Provides anchor feed submissions and median data to the System Client.\n4. **Fast Updates Client**: Submits block-latency feeds to Fast Updates contracts.\n5. **Feed Value Provider**: Retrieves data from exchanges and supplies current feed values (prices).\n6. **FDC Client**: Provides FDC protocol voting round data to the System Client.\n\n## Hardware requirements\n\nTo deploy all FSP components on a single HW instance:\n\n<Tabs groupId=\"network\" block>\n  <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n    |                           | **Requirement** |\n    |:--------------------------|:----------------|\n    | **CPU**                   | 16/32 cores     |\n    | **RAM**                   | 64 GB           |\n    | **Disk space**            | 4 TB SSD        |\n\n  </TabItem>\n  <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n    |                           | **Requirement** |\n    |:--------------------------|:----------------|\n    | **CPU**                   | 8 cores         |\n    | **RAM**                   | 16 GB           |\n    | **Disk space**            | 100 GB SSD      |\n\n  </TabItem>\n  <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n    |                           | **Requirement**  |\n    |:--------------------------|:-----------------|\n    | **CPU**                   | 16/32 cores      |\n    | **RAM**                   | 64 GB            |\n    | **Disk space**            | 4 TB SSD        |\n\n  </TabItem>\n  <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n    |                           | **Requirement** |\n    |:--------------------------|:----------------|\n    | **CPU**                   | 8 cores         |\n    | **RAM**                   | 16 GB           |\n    | **Disk space**            | 100 GB SSD      |\n\n  </TabItem>\n</Tabs>\n\n- **Disk speed:** 1200 MB/s read and 600 MB/s write, or higher\n- **Network speed:** 40 Mbps, or higher\n\n## Prerequisites\n\nEnsure you have the following tools installed:\n\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- [yarn](https://yarnpkg.com/)\n- [jq](https://jqlang.github.io/jq/)\n- [envsubst](https://www.gnu.org/software/gettext/manual/html_node/envsubst-Invocation.html)\n\n## Registration\n\nRegistration only needs to be performed once.\n\n### Register addresses and key\n\n<AutomatedRegistration />\n\nEach entity in the FSP system must register the following five addresses:\n\n- `Identity`: Main identity account of the voter. On mainnet this should be held in cold storage. This account is required for initial data provider setup, but is not used during each voting round.\n\n- `Submit`: Used for sending commit and reveal transactions.\n\n- `SubmitSignatures`: Used for sending voting round result signature transactions. (To avoid nonce conflicts, **Flare System Client** uses multiple accounts for submitting transactions).\n\n- `SigningPolicy`: Used for signature generation during the voting round, and reward epoch signing policy signing (it's a system protocol ran once during reward epoch to establish reward epoch settings, including valid voters and their weights).\n\n- `Delegation`: Account to which community should delegate funds (using `WNat` contract) to increase the vote power of the voter (identity/entity) - and also to later get the rewards.\n\nTo register you can directly call the `EntityManager` contract. For the contract address, see the [Solidity Reference](/network/solidity-reference). The relevant methods on the `EntityManager` contract are:\n\n| Proposal method                                                                                                   | Confirmation method                                                                                                                       |\n| ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| [`proposeSubmitAddress`](/network/fsp/solidity-reference/IEntityManager#proposesubmitaddress)                     | [`confirmSubmitAddressRegistration`](/network/fsp/solidity-reference/IEntityManager#confirmsubmitaddressregistration)                     |\n| [`proposeSubmitSignaturesAddress`](/network/fsp/solidity-reference/IEntityManager#proposesubmitsignaturesaddress) | [`confirmSubmitSignaturesAddressRegistration`](/network/fsp/solidity-reference/IEntityManager#confirmsubmitsignaturesaddressregistration) |\n| [`proposeSigningPolicyAddress`](/network/fsp/solidity-reference/IEntityManager#proposesigningpolicyaddress)       | [`confirmSigningPolicyAddressRegistration`](/network/fsp/solidity-reference/IEntityManager#confirmsigningpolicyaddressregistration)       |\n| [`proposeDelegationAddress`](/network/fsp/solidity-reference/IEntityManager#proposedelegationaddress)             | [`confirmDelegationAddressRegistration`](/network/fsp/solidity-reference/IEntityManager#confirmdelegationaddressregistration)             |\n\nFirst call the `propose...` from your `Identity` address and then the `confirm...` with the proposed address.\n\n#### Fund addresses\n\nAll addresses need to be funded for gas fees. The `Delegation` account is used for establishing voter power, which can be achieved by wrapping funds directly or by delegation from other accounts. Wrapping can be done via:\n\n- [Development Portal](https://governance.dev.aflabs.org/) for Flare Testnet Coston2 and Songbird Testnet Coston\n- [Flare Portal](https://portal.flare.network) for Flare Mainnet and Songbird Canary-Network.\n\n:::note[Ensure sufficient vote power]\n\nThe protocol operation uses normalized weights, and the `Delegation` address should have at least 150 WNat to obtain a non-zero vote power.\n\n| **Network**             | **Native Token** | **Wrapped Native Token (WNat)** |\n| ----------------------- | ---------------- | ------------------------------- |\n| Flare Mainnet           | FLR              | WFLR                            |\n| Flare Testnet Coston2   | C2FLR            | WC2FLR                          |\n| Songbird Canary-Network | SGB              | WSGB                            |\n| Songbird Testnet Coston | CFLR             | WCFLR                           |\n\nThe WNat contract addresses are in the [Network Solidity Reference](/network/solidity-reference).\n\n:::\n\n#### Register sortition key\n\nGenerate a sortition key to use in Fast Updates. You can use the [fast-updates/go-client](https://github.com/flare-foundation/fast-updates/tree/main/go-client) docker image to generate a key:\n\n```bash\ndocker run --rm ghcr.io/flare-foundation/fast-updates/go-client:latest keygen\n```\n\nAccounts for Fast Updates submission need to be generated and funded with gas fees.\nThese can be any accounts **not used** for the five accounts in [register addresses and key](#register-addresses-and-key).\nYou are recommended to use **three** separate accounts to avoid nonce conflicts.\n\nWhen registering the sortition key using the explorer, you will need to manually create a signature:\n\n```bash\ndocker run --rm ghcr.io/flare-foundation/fast-updates/go-client:latest keygen --key <sortitionKeyPrivateKey> --address <identityAddress>\n```\n\nRegister the generated sortition key and signature via the `EntityManager` contract by calling [`registerPublicKey`](/network/fsp/solidity-reference/IEntityManager#registerpublickey) with your identity address, use the signature generated by the previous command as the input to `_verificationData`.\n\n### Register validator node\n\nTo register your validator node, call the `EntityManager` contract's [`registerNodeId`](/network/fsp/solidity-reference/IEntityManager#registernodeid) function by providing your identity address for each validator node.\n\n#### Required Input Arguments\n\n- **`_nodeId`**: 20-byte node ID in hexadecimal format.\n- **`_certificateRaw`**: Raw certificate bytes in hexadecimal format.\n- **`_signature`**: Signature bytes in hexadecimal format.\n\n#### Registration Steps\n\n1. **Locate Certificate and Private Key Files**\n\n   Find the certificate (`.crt`) and private key (`.key`) files for your validator node. The default file paths are:\n\n   - `~/.avalanchego/staking/staker.key`\n   - `~/.avalanchego/staking/staker.crt`\n\n2. **Set Environment Variables**\n\n   Define necessary environment variables by copying and pasting the following snippet into your terminal:\n\n   ```bash\n   PATH_TO_CRT=~/.avalanchego/staking/staker.crt\n   ZERO_PREFIX=0000000000000000000000000000000000000000000000000000000000000000\n   PATH_TO_KEY=~/.avalanchego/staking/staker.key\n   IDENTITY_ADDRESS=<YourIdentityAddressWithout0xPrefix>\n   ```\n\n3. **Generate required hex values**\n\n   **`_nodeId`:** If you are using an older version of `openssl`, omit the `-provider legacy` flag.\n\n   ```bash\n   cat $PATH_TO_CRT | tail -n +2 | head -n -1 | base64 -d | openssl dgst -sha256 -binary | openssl rmd160 -provider legacy -binary | xxd -p | sed -e 's/^/0x/;'\n   ```\n\n   **`_certificateRaw`:**\n\n   ```bash\n   cat $PATH_TO_CRT | tail -n +2 | head -n -1 | base64 -d | xxd -p | tr -d 'n' | sed -e 's/^/0x/;' && echo\n   ```\n\n   **`_signature`:**\n\n   ```bash\n   echo -n $ZERO_PREFIX$IDENTITY_ADDRESS | xxd -r -p | openssl dgst -sha256 -sign $PATH_TO_KEY | xxd -p | tr -d 'n' | sed -e 's/^/0x/;' && echo\n   ```\n\n## Setup FDC\n\nThe FDC suite integrates blockchain data sources through a network of blockchain nodes, indexers, and API servers. This setup allows secure and efficient data verification. The blockchain data flow is of two types:\n\n- **UTXO-Based Chains** (Bitcoin, Dogecoin, Ripple): Use an indexer to create a local database from the blockchain, exposing data through a Verifier API server.\n\n- **EVM Chains** (Ethereum, Flare, Songbird): Directly query the RPC node using the Verifier API server.\n\n### Required components\n\nYou can use the following components to run a full FDC suite.\n\n#### Blockchain node images\n\n| Network  | Blockchain node image                                                                                                                      |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| Bitcoin  | [flarefoundation/bitcoin](https://hub.docker.com/r/flarefoundation/bitcoin)                                                                |\n| Dogecoin | [flarefoundation/dogecoin](https://hub.docker.com/r/flarefoundation/dogecoin)                                                              |\n| Ripple   | [flarefoundation/rippled](https://hub.docker.com/r/flarefoundation/rippled)                                                                |\n| Ethereum | [ethereum/client-go](https://hub.docker.com/r/ethereum/client-go) & [prysm](https://docs.prylabs.network/docs/install/install-with-docker) |\n\n#### Indexers and verifiers\n\n| Network | Indexer                                                                                             | Verifier                                                                                          |\n| ------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |\n| BTC     | [flare-foundation/verifier-utxo-indexer](https://github.com/flare-foundation/verifier-utxo-indexer) | [flare-foundation/verifier-indexer-api](https://github.com/flare-foundation/verifier-indexer-api) |\n| DOGE    | [flare-foundation/verifier-utxo-indexer](https://github.com/flare-foundation/verifier-utxo-indexer) | [flare-foundation/verifier-indexer-api](https://github.com/flare-foundation/verifier-indexer-api) |\n| XRP     | [flare-foundation/verifier-xrp-indexer](https://github.com/flare-foundation/verifier-xrp-indexer)   | [flare-foundation/verifier-indexer-api](https://github.com/flare-foundation/verifier-indexer-api) |\n| EVM     | -                                                                                                   | [flare-foundation/evm-verifier](https://github.com/flare-foundation/evm-verifier)                 |\n\n:::info\n\n- Flare Mainnet and Songbird Canary-Network nodes are required for EVM verification but are not listed here.\n- You are not required to use exactly these components, eg. if you already have a compatible Bitcoin RPC node, you can configure your deployment to run everything else except for Bitcoin node.\n- You can split the deployment across multiple servers.\n\n:::\n\n### Configuring blockchain nodes\n\nStart by cloning the [fdc-suite-deployment](https://github.com/flare-foundation/fdc-suite-deployment.git) repo:\n\n```bash\ngit clone https://github.com/flare-foundation/fdc-suite-deployment.git\ncd fdc-suite-deployment\n```\n\n#### Bitcoin (BTC)\n\nGenerate the authentication password:\n\n```bash\ncd nodes-mainnet/btc\n./generate-password.sh\n```\n\nSample output:\n\n```plaintext\npassword: c021cae645db6d3371b26ced94c8d17a5d9f3accbf3591d8b4c0be19623e5662\nString to be appended to bitcoin.conf:\nrpcauth=admin:a0956d81a2344f1602d9ed7b82ef3118$2caf19c9cf27937f728f600fc14e8db97f80218d727e331a57c3cfc55b3e17fe\nYour password:\nc021cae645db6d3371b26ced94c8d17a5d9f3accbf3591d8b4c0be19623e5662\n```\n\nAlternatively you can configure the username and password manually:\n\n```bash\n./rpcauth.py <USERNAME> <PASSWORD>\n```\n\n#### Dogecoin (DOGE)\n\nSame configuration process as Bitcoin.\n\n```bash\ncd nodes-mainnet/doge\n./generate-password.sh\n```\n\n#### Ripple (XRP)\n\nNo additional configuration required.\n\n#### Ethereum (ETH)\n\nGenerate JWT for Authentication:\n\n```bash\nopenssl rand -hex 32 > nodes-mainnet/eth/jwt.hex\n```\n\n:::warning\n\nBlockchain nodes expose all ports by default.\n\n:::\n\n### Configuring indexers and verifiers\n\n1. Copy `.env.example` into `.env`:\n\n   ```bash\n   cp .env.example .env\n   ```\n\n2. Configure required keys\n\n   - **RPC Nodes Authentication:** Use credentials generated earlier. If you run blockchain nodes and verifiers on the same server, you can use the ip `172.17.0.1` to reach the nodes.\n\n   - **Start Block Number:** Set `*_START_BLOCK_NUMBER` to a block finalized 14 days ago. This needs to be set the first time when you start the indexers to avoid indexing too much data. FDC requires at least 14 days of history. On later restarts indexers will start indexing from the latest block in the database.\n\n   - **Testnet Mode:** Set `TESTNET=true` if using testnets.\n   - **API Keys:** Configure `VERIFIER_API_KEYS` with comma-separated API keys. One or more comma separated keys can be configured. You will likely need at least one key for FDC client that will call verifier api servers.\n   - **Database Passwords:** Set `*_DB_PASSWORD` variables to random strings. These are used internally for the indexer database.\n\n3. Generate configuration files\n\n   ```bash\n   ./generate-config.sh\n   ```\n\n   This script populates config files from `*.example` templates in:\n\n   - `verifiers/btc/`\n   - `verifiers/doge/`\n   - `verifiers/xrp/`\n   - `evm-verifier/`\n\n### Start services\n\n#### Start blockchain nodes\n\n1. Go to the directory for the specific blockchain node you want to run, e.g. `nodes-mainnet/btc`\n\n2. Start the node:\n\n   ```bash\n   docker compose up -d\n   ```\n\n_Repeat these steps for each blockchain node you intend to run._\n\n#### Start indexers and verifiers\n\n1. Go to the appropriate verifier directory, e.g. `verifiers/btc`\n\n2. Start the verifier:\n\n   ```bash\n   docker compose up -d\n   ```\n\n_Repeat these steps for all verifiers you intend to run._\n\n## Setup FTSO\n\n### Feed value provider\n\n:::warning\n\nThe reference implementation of Feed Value Provider is **only provided for testing purposes and should not be relied on**.\nData providers are expected to reimplement this with their own data sources, following the [REST API specification](https://github.com/flare-foundation/ftso-v2-example-value-provider?tab=readme-ov-file#example-usage).\n\n:::\n\nStart your own feed value provider, or **(for testing only)** use the reference feed value provider:\n\n```bash\ndocker run --rm -it --publish \"0.0.0.0:3101:3101\" --network \"ftso-v2-deployment_default\" ghcr.io/flare-foundation/ftso-v2-example-value-provider\n```\n\nOnce the container is running, you can find the API spec at: http://localhost:3101/api-doc\n\n#### Troubleshooting\n\nFor initial testing a fixed value provider can be used that simply returns a constant instead of reading data from external data sources. It can be started by setting the variable `VALUE_PROVIDER_IMPL=fixed`:\n\n```bash\ndocker run --rm -it --env VALUE_PROVIDER_IMPL=fixed --publish \"0.0.0.0:3101:3101\" --network \"ftso-v2-deployment_default\" ghcr.io/flare-foundation/ftso-v2-example-value-provider\n```\n\nYou should see the following line in the logs:\n\n```plaintext\nWARN [FixedFeed] Initializing FixedFeed, will return 0.01 for all feeds.\n```\n\n## Generate configuration and deploy\n\n1. Clone [flare-systems-deployment](https://github.com/flare-foundation/flare-systems-deployment) repository:\n\n   ```bash\n   git clone https://github.com/flare-foundation/flare-systems-deployment.git\n   cd flare-systems-deployment\n   ```\n\n2. Copy the sample configuration file:\n\n   ```bash\n   cp .env.example .env\n   ```\n\n3. Fill out all the values using the information from [Registration](#registration), [Setup FDC](#setup-fdc) and [Setup FTSO](#setup-ftso).\n\n4. Generate the required configurations, you will need to rerun this command if you change your `.env` file:\n\n   ```bash\n   ./populate_config.sh\n   ```\n\n5. Deploy the instance with the provided `docker-compose.yaml`\n\n   ```bash\n   docker compose up -d\n   ```\n\n   :::info[Stay up to date]\n\n   To pull the latest `flare-systems-deployment` image:\n\n   ```bash\n   docker compose pull\n   ```\n\n   ::::\n\n## Troubleshooting\n\n- **`system-client` is not doing anything**\n\n  Llikely, your entity is not registered as a voter for the current reward epoch. There is a time window for voter registration on every reward epoch, and if you leave things running you should eventually see `RegisterVoter success` in the logs. It should then start submitting data successfully in the **following** reward epoch.\n\n- **`system-client` fails to fetch sub-protocol data**\n\n  The `c-chain-indexer` may still be indexing data, once it's finished you should see `Indexer at block x` in the logs. If it's still processing blocks you will see various errors across all services.\n\n- **`fast-updates` client is not doing anything**\n\n  If you have low weight it may take some time until you are selected to submit an update.",
    ":::info\n\nThe FTSO Provider deployment is now integrated into the [`flare-systems-deployment`](https://github.com/flare-foundation/flare-systems-deployment) repository, which also supports FDC deployments. Previously, deployments were managed through the `ftso-v2-provider-deployment` repository.\n\nThe older repository is being deprecated. While it remains available for legacy deployments on Flare or Songbird, transitioning to the updated repository is strongly recommended. Active development has shifted to the new repository, where all future updates and features will be introduced. You can find the deprecation notice and detailed upgrade instructions [here](https://github.com/flare-foundation/ftso-v2-provider-deployment/tree/0.3.1-deprecation.2) until the information is merged into the official repository.\n\nFor additional information and updates, please follow us on the [Flare forum](https://forum.flare.network/).\n\n:::",
    "import Remix from \"@site/src/components/remix\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport YoutubeEmbed from \"@site/src/components/youtube\";\nimport FDCTransferEventListener from \"!!raw-loader!/examples/developer-hub-solidity/FDCTransferEventListener.sol\";\nimport PrepareRequest from \"!!raw-loader!/examples/developer-hub-javascript/fdc_prepare_request.ts\";\nimport SubmitRequest from \"!!raw-loader!/examples/developer-hub-javascript/fdc_submit_request.ts\";\nimport GetProof from \"!!raw-loader!/examples/developer-hub-javascript/fdc_get_proof.ts\";\nimport VerifyProof from \"!!raw-loader!/examples/developer-hub-javascript/fdc_verify_proof.ts\";\n\nThe Flare Data Connector (FDC) is a powerful cross-chain protocol that enables smart contracts on Flare to securely access and verify data from other blockchains.\nThis section demonstrates how to bridge data across chains and attest to events on EVM networks, with practical examples using the Ethereum testnet (Sepolia) and Flare Network.\n\n:::info[New to smart contract development?]\n\nLearn how to [deploy your first smart contract](/network/getting-started) on Flare before you start this guide, or explore the [official starter kits](/network/guides/hardhat-foundry-starter-kit) for Hardhat and Foundry.\n\n:::\n\nAt its core, FDC enables any smart contract on Flare to query immutable, verifiable information from supported blockchain networks. The protocol achieves consensus through the BitVote-reveal mechanism within the Flare Systems Protocol suite, allowing dapps to validate external blockchain data using Merkle proofs.\n\nCurrently supported networks include:\n\n- **Non smart-contract**: Bitcoin, Dogecoin, and XRP Ledger (including their testnets)\n- **Smart-contract**: Ethereum, Songbird, and Flare (including Sepolia, Songbird Testnet Coston, and Flare Testnet Coston2)\n\nThe protocol's extensible design allows for future integration of additional blockchains and attestation types, making it a foundation for cross-chain interoperability.\n\n## Process overview\n\nThis guide demonstrates how to use the [EVMTransaction](/fdc/attestation-types/evm-transaction) attestation type to verify and utilize transaction data from external EVM chains on Flare.\nYou'll create a smart contract and accompanying script that interact with the FDC to verify Ethereum transactions and decode their event data.\n\nHere's how the attestation process works:\n\n1. **Identify the transaction**\n\n   For this guide, we'll use an existing transaction on the Sepolia testnet that contains event data we want to verify on Flare.\n   In a real dapp, you might identify transactions based on user actions or specific event emissions.\n\n2. **Prepare the attestation request**\n\n   To prepare the attestation request, transaction data must be encoded in a FDC-compatible format.\n   While this can be done manually, we'll use Flare's verifier service for simplicity.\n   Note that while Flare provides rate-limited verifiers suitable for development,\n   production applications should use their own verifier service.\n\n3. **Submit the attestation request**\n\n   Once encoded, the attestation request is submitted to the FDC, initiating the consensus protocol.\n   After consensus is reached, FDC stores the Merkle root of the attested data on the Flare network.\n\n4. **Extract proof and data**\n\n   After the Merkle root is stored on-chain, we'll use the Data Availability (DA) Layer service to retrieve the complete transaction data for our smart contract logic and the Merkle proof needed to verify the data's authenticity.\n\n5. **Verify and use the data**\n\n   Our smart contract will then verify that the provided transaction data matches what was attested in the Merkle root.\n   Once verified, it will decode the event log data and integrate it into the contract's logic, enabling secure cross-chain data flow in your applications.\n\n## Identify the transaction\n\nFor this guide, we'll use a pre-existing transaction on the Sepolia testnet: [`0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c`](https://sepolia.etherscan.io/tx/0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c).\nThis transaction is particularly useful for our demonstration as it contains both an ERC20 `Transfer` event and a `Swap` event, providing clear examples of cross-chain event verification.\n\n:::info[Confirmation Requirements]\n\nEach blockchain connected to FDC has specific confirmation requirements that must be met before data can be attested. For EVM chains, you can configure the required number of confirmations based on the chain's finality and security guarantees.\nSee the [connected blockchain documentation](/fdc/attestation-types/confirmed-block-height-exists#finality) for detailed requirements.\n\n:::\n\n:::info[Mainnets and testnets]\n\nThe Data Connector operates in separate environments for mainnets and testnets, when working with testnets:\n\n- Use different base URLs for the attestation client and DA Layer\n- Specify `testETH` instead of `ETH` as the source network name in transaction encoding\n- All other procedures and code remain consistent across environments\n\n:::\n\n## Prepare the attestation request\n\nTo attest to transaction data, we need to encode it in a format that the Flare Data Connector (FDC) can process.\nThis is done through a verifier service. While you can set up your own verifier, we'll use Flare's testnet verifier service available at `https://fdc-verifiers-testnet.flare.network/`.\nYou can explore the API through their Swagger interface at `https://fdc-verifiers-testnet.flare.network/verifier/api-doc`.\n\n### Request structure\n\nTo prepare an attestation request, you can use the `prepareRequest` endpoint with the following JSON structure:\n\n```json\n{\n  \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n  \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n  \"requestBody\": {\n    \"transactionHash\": \"0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\",\n    \"requiredConfirmations\": \"1\",\n    \"provideInput\": true,\n    \"listEvents\": true,\n    \"logIndices\": []\n  }\n}\n```\n\nThe request contains three main components:\n\n- `attestationType`: Specifies \"EVMTransaction\" as a 32-byte padded hex string.\n- `sourceId`: Identifies the source chain (\"testETH\" for Sepolia testnet) as a 32-byte padded hex string.\n- `requestBody`: Contains transaction-specific parameters including:\n  - `transactionHash`: Transaction hash to verify.\n  - `requiredConfirmations`: Number of required confirmations.\n  - `provideInput`: Boolean specifying if the input data of the toplevel transaction should be included in the response.\n  - `listEvents`: Flags for including transaction input and event logs.\n  - `logIndices`: Optional log indices (maximum 50 logs per request).\n\nFor full details, see the EVMTransaction](/fdc/attestation-types/evm-transaction) type specification.\n\n### Implementation example\n\nHere's a TypeScript script that prepares the attestation request:\n\n<CodeBlock language=\"typescript\" title=\"prepare_request.ts\">\n  {PrepareRequest}\n</CodeBlock>\n\n### Verifier response\n\nUpon successful validation, the verifier returns:\n\n```json\n{\n  \"status\": \"VALID\",\n  \"abiEncodedRequest\": \"0x45564d5472616e73616374696f6e00000000000000000000000000000000000074657374455448000000000000000000000000000000000000000000000000009d410778cc0b2b8f1b8eaa79cbd0eed5d3be7514dea070e2041ad00a4c6e88f800000000000000000000000000000000000000000000000000000000000000204e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n- `status`: Indicates that the verifier recognized this attestation request as valid.\n- `abiEncodedRequest`: Contains all the data necessary for the FDC attestation providers to confirm this request.\n\nThis encoded request can now be submitted to the FDC contract.\nThe attestation clients will pick up the request and include it in the next FDC consensus round.\nIf consensus is reached, your attestation will be included in that round's Merkle root, making it available for use.\nIf consensus fails, you'll need to resubmit the request.\n\n<details>\n    <summary>Understanding the structure of `abiEncodedRequest`.</summary>\n\n    The structure of `abiEncodedRequest` may seem complex, but it's essentially a concatenated hex string (with the initial 0x removed) representing different parts of the request. Each part is 32 bytes long (64 characters in hex). Here's a breakdown of the string:\n\n    ```text\n    45564d5472616e73616374696f6e000000000000000000000000000000000000\n    7465737445544800000000000000000000000000000000000000000000000000\n    9d410778cc0b2b8f1b8eaa79cbd0eed5d3be7514dea070e2041ad00a4c6e88f8\n    0000000000000000000000000000000000000000000000000000000000000020\n    4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\n    0000000000000000000000000000000000000000000000000000000000000001\n    0000000000000000000000000000000000000000000000000000000000000001\n    0000000000000000000000000000000000000000000000000000000000000001\n    00000000000000000000000000000000000000000000000000000000000000a0\n    0000000000000000000000000000000000000000000000000000000000000000\n    ```\n\n    You can decode the first two parts using an online tool like [playcode.io](https://playcode.io/1752890).\n\n    Breaking it down line-by-line:\n\n    - **First line:** `toHex(\"EVMTransaction\")`\n\n    - **Second line:** `toHex(\"testETH\")`\n\n    - **Third line:** Message Integrity Code (MIC). This is a hash of the whole response salted with a string `Flare`. It ensures the integrity of the attestation and prevents tampering.\n\n    - **Remaining lines:** ABI encoded request body (as solidity struct).\n      The structure of the body is defined in the accompanying attestation [type specification](https://github.com/flare-foundation/songbird-state-connector-protocol/blob/main/contracts/interface/types/EVMTransaction.sol#L68).\n      As we supply a list, the encoding is a bit more complicated, but you can easily spot the `transactionHash` as `4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c`.\n\n</details>\n\n## Submit the attestation request\n\nOnce we have our encoded attestation request, we'll submit it to the Flare Data Connector (FDC) smart contract through the `requestAttestation` method on [FDCHub](/fdc/reference/IFdcHub).\nThis broadcasts our request to the network and initiates the verification process.\nThe attestation will be processed in the current FDC round, which typically finalizes within 90-180 seconds.\n\n:::info\n\nWhile you can retrieve a proof before round finalization, it won't be valid until the round completes and its Merkle root is stored on-chain.\n\n:::\n\nHere's how to submit the request and calculate its `roundId`:\n\n<CodeBlock language=\"typescript\" title=\"submit_request.ts\">\n  {SubmitRequest}\n</CodeBlock>\n\nAfter submitting the request, wait for round finalization before proceeding to proof extraction and verification.\n\n## Extract proof and data\n\nOnce the FDC round is finalized and its Merkle root is stored on-chain, we can retrieve the full data and proof for our attestation request.\nThe Data Availability (DA) Layer API provides a streamlined way to access this information.\n\n### Using the DA Layer API\n\nWhile a rate-limited public endpoint [is available](/fdc/reference/data-availability-api), you should set up your [own DA Layer service](https://github.com/flare-foundation/data-availability) for production use.\n\n```json\n{\n  \"roundId\": FDC_ROUND_ID,\n  \"requestBytes\": \"0xABI_ENCODED_REQUEST\"\n}\n```\n\nWe are providing the same `abiEncodedRequest` that we used to request the attestation, and the `roundId` that we calculated when we submitted the request.\nHere's how to retrieve the proof and data:\n\n<CodeBlock language=\"typescript\" title=\"get_proof.ts\">\n  {GetProof}\n</CodeBlock>\n\n### Response structure\n\nThe API returns two key components:\n\n- `response`: Contains the complete transaction data, including:\n\n  - Attestation type and source chain\n  - Transaction details (block number, timestamp, addresses)\n  - Input data and execution status\n  - Emitted events and their details\n\n- `proof`: Contains the Merkle proof array, verifying that the data exists in the round's Merkle tree\n\nHere's a simplified example of the response structure:\n\n```json\n{\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"859315\",\n    \"lowestUsedTimestamp\": \"1735543584\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"7384262\",\n      \"timestamp\": \"1735543584\",\n      \"sourceAddress\": \"0x70ad32b82b4fe2821c798e628d93645218e2a806\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\",\n      \"value\": \"61000000000000000\",\n      \"input\": \"0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006772521a00000000000000000000000000000000000000000000000000000000000000040b000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c80000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d8b72d434c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b140001f41c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238000000000000000000000000e49acc3b16c097ec88dc9352ce4cd57ab7e35b95000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000600000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c723800000000000000000000000070ad32b82b4fe2821c798e628d93645218e2a80600000000000000000000000000000000000000000000000000000000ad2090e40c\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": 63,\n          \"emitterAddress\": \"0xfff9976782d46cc05630d1f6ebab18b2324d6b14\",\n          \"topics\": [\n            \"0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c\",\n            \"0x0000000000000000000000003fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000d8b72d434c8000\",\n          \"removed\": false\n        }\n        // Additional events...\n      ]\n    }\n  },\n  \"proof\": [\n    \"0x54124eb68914f7ef9017f47328b02af8a61bc9ed4e276d9e09c725df2056b38e\",\n    \"0x2ee26beac9f7da0cea28ba8b13f49ca8f6477bb82d839ca1e808ceac2d551427\",\n    \"0xf8265e7b0c7165ba16111fbf8d1f0e2e279e44b77ff343393fd2269353f2adfa\"\n  ]\n}\n```\n\nThis data is now ready to be used in your smart contract to:\n\n- Verify the data's authenticity using the Merkle proof\n- Process the transaction data and event logs for your contract's logic\n\n## Verify and use the data\n\nLet's examine how to verify and utilize the data from the DA Layer API in your smart contract. We'll focus on a practical example: listening for and verifying USDC transfer events.\n\n### Data structure\n\nThe response data maps directly to the [`IEVMTransaction`](/fdc/reference/IEVMTransaction) interface, which is already included in both Hardhat and Foundry packages.\nHere's what you'll work with:\n\n- `requestBody`: Contains your original attestation request parameters\n- `responseBody`: Contains the verified transaction data:\n  - Block details (number, timestamp)\n  - Transaction details (addresses, value, status)\n  - Emitted events (logs, topics, data)\n\nHere's a simplified version of the key response structures:\n\n```solidity\nstruct Response {\n    bytes32 attestationType;\n    bytes32 sourceId;\n    uint64 votingRound;\n    uint64 lowestUsedTimestamp;\n    RequestBody requestBody;\n    ResponseBody responseBody;\n}\n\nstruct ResponseBody {\n    uint64 blockNumber;\n    uint64 timestamp;\n    address sourceAddress;\n    bool isDeployment;\n    address receivingAddress;\n    uint256 value;\n    bytes input;\n    uint8 status;\n    Event[] events;\n}\n\nstruct Event {\n    uint32 logIndex;\n    address emitterAddress;\n    bytes32[] topics;\n    bytes data;\n    bool removed;\n}\n```\n\n### Implementation example\n\nThe response consists of several key components:\n\n1. `requestBody`: Contains an exact copy of your original attestation request data.\n\n2. `metadata`: Includes verification-critical information:\n\n   - `votingRound`: Identifies the specific FDC consensus round\n   - `lowestUsedTimestamp`: Ensures data freshness and proper round assignment\n\n3. `responseBody`: Contains the verified transaction details:\n   - Basic information: block number, timestamp, addresses, value\n   - Transaction status and input data\n   - Complete list of emitted events, each containing:\n     - Log index and emitter address\n     - Event topics and data\n     - Chain reorganization status flag\n\n<CodeBlock language=\"solidity\" title=\"FDCTransferEventListener.sol\">\n  {FDCTransferEventListener}\n</CodeBlock>\n\n{/* prettier-ignore */}\n<Remix fileName=\"FDCTransferEventListener.sol\">Open in Remix</Remix>\n<br></br>\n\n:::warning\n\nDon't forget to set the EVM version to `london` in Remix before compiling the contract.\n\n:::\n\n### Using the contract\n\n1. **Proof Verification**\n\n   The contract uses the `ContractRegistry` library to access Flare's official verifiers. The verification process:\n\n   - Retrieves the current verifier through the Flare governance-managed registry\n   - Uses `isEVMTransactionProofValid` to verify the Merkle proof and data integrity\n   - Requires successful verification before proceeding with any data processing\n\n2. **Event Processing**\n\n   After verification, the `collectTransferEvents` function handles the business logic:\n\n   - Processes the verified transaction data\n   - Filters for USDC Transfer events\n   - Decodes and stores relevant event data\n\nThis two-phase approach provides robust security against malicious data providers:\n\n- While the data comes from an off-chain source (DA Layer API), it must match the on-chain Merkle root\n- Any attempt to provide manipulated data will fail at the proof verification stage\n- Only data that has achieved consensus through the FDC protocol can pass verification\n\nTo use the contract, simply retrieve the proof from the DA Layer API and submit it:\n\n<CodeBlock language=\"typescript\" title=\"verify_proof.ts\">\n  {VerifyProof}\n</CodeBlock>\n\n## Wait for round finalization (optional)\n\nBefore using a proof, you must ensure the FDC round has been finalized and its Merkle root accepted.\nHere are the recommended approaches for different scenarios:\n\n**Production environment:** Use the `Relay` contract's event system:\n\n- Access the latest `Relay` contract through `ContractRegistry`\n- Listen for the `ProtocolMessageRelayed` event with:\n  - `protocolId`: 200 (FDC protocol identifier)\n  - `roundId`: Your submitted round ID\n\n**Testing environment:** For testing, you can use the `Relay` contract's view method\n\n```solidity\nisFinalized(uint256 _protocolId, uint256 _votingRoundId) returns (bool)\n```\n\n## Watch the video\n\n<YoutubeEmbed embedLink=\"bURtt4siWd0?si=tVnpU0SC7ISMnrA0\"></YoutubeEmbed>",
    "import DocCardList from \"@theme/DocCardList\";\n\n**FDC Attestations** provide cryptographic proofs for data originating outside Flare's EVM state. They enable smart contracts to verify external data trustlessly. For example, FDC attestations can validate:\n\n- **Non-Payment Verification:** Confirm whether a payment **has not been made** on a UTXO chains like Bitcoin or Dogecoin.\n- **Event Log Authentication:** Verify event logs generated by transactions on EVM-compatible blockchains.\n\nFDC currently supports the following six attestation types:\n\n<DocCardList />",
    "import ThemedImage from \"@theme/ThemedImage\";\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n\nThe **Flare Data Connector (FDC)** is an [enshrined oracle](/support/terminology#enshrined-oracle) designed to validate external data for Flare's EVM state.\nIt allows users to submit attested data that smart contracts can trust, eliminating the need for direct reliance on users for data integrity.\n\n## Key Features\n\n- **Network-Level Security**: Data attestation requires reaching a 50%+ signature weight from data providers, ensuring decentralized consensus.\n- **Efficient On-chain Storage**: Verified data is stored in a Merkle tree, with only the Merkle root stored on-chain to minimize costs.\n- **Easy Off-chain Accessibility**: Data providers serve attestation responses and Merkle proofs off-chain through a Data Availability (DA) Layer, ensuring efficient data retrieval.\n- **Proof-Based Verification**: Smart contracts validate Merkle proofs against the stored Merkle root, ensuring only authentic data triggers contract actions.\n- **Extensible Attestation Types**: New attestation types and data sources can be added through provider consensus, ensuring adaptability.\n\n## Architecture\n\n<ThemedImage\n  alt=\"FDC Architecture Diagram\"\n  sources={{\n    light: useBaseUrl(\"img/fdc-overview/fdc_architecture_light.svg\"),\n    dark: useBaseUrl(\"img/fdc-overview/fdc_architecture_dark.svg\"),\n  }}\n/>\n\n1. **Data Verification**: The FDC verifies user-submitted attestation requests.\n2. **Merkle Representation**: Verified responses are organized into a Merkle tree, with only the Merkle root stored on-chain.\n3. **Attestation Usage**: Users retrieve attestation responses and Merkle proofs from data providers and submit them to smart contracts.\n\n:::tip[Interested in learning more?]\nFor a detailed explanation of the FDC mechanism, read the [FDC whitepaper](https://flare.network/wp-content/uploads/FDC_WP_171024_02.pdf).\n:::\n\n### Data Availability Layer\n\nThe Data Availability Layer (DA Layer) provides API endpoints for querying off-chain attestation data.\nAccessing this data is trustless, as users can independently compute and compare Merkle roots against the on-chain version.\n\nOperating a DA Layer is permissionless—anyone can run a DA Layer service by sourcing data from an [FTSOv2 data provider](/run-node/ftso-data-provider) and [FDC attestation provider](/run-node/fdc-attestation-provider).\n\n<ThemedImage\n  alt=\"DA Layer Diagram\"\n  sources={{\n    light: useBaseUrl(\"img/fdc-overview/da_layer_light.svg\"),\n    dark: useBaseUrl(\"img/fdc-overview/da_layer_dark.svg\"),\n  }}\n/>\n\n## Attestation Types\n\nFDC currently supports seven attestation types, each serving specific verification needs. Below is an overview of these types, with detailed explanations available in their respective sections:\n\n- **AddressValidity**: Validates the format and checksum of addresses on specified chains.\n- **EVMTransaction**: Verifies and retrieves transaction details from EVM-compatible chains (`ETH`, `FLR`, `SGB`).\n- **JsonApi**: Fetches and processes any Web2 data using a JQ transformation, then returns it as ABI-encoded output. (Currently only on Coston & Coston2).\n- **Payment**: Confirms and fetches payment transaction details from non-EVM chains (`BTC`, `DOGE`, `XRP`).\n- **ConfirmedBlockHeightExists**: Verifies block existence and confirmation status.\n- **BalanceDecreasingTransaction**: Validates if a transaction reduces an address's balance.\n- **ReferencedPaymentNonexistence**: Confirms the absence of specific payments within time intervals.\n\nThe first three attestation types are the most generally useful, while the last three are primarily used in **FAssets**.\n\n## Workflow Overview\n\nFor all attestation types, the workflow follows the same general steps.\nDue to the waiting period between steps **2** and **3**, where the round is finalized, the process is split into multiple sections.\n\n### General Workflow\n\n1. **Request Submission**: Users submit attestation requests to the [`FdcHub`](/fdc/reference/IFdcHub) smart contract.\n2. **Batch Processing**: Data providers group requests based on emission timestamps.\n3. **Data Retrieval**: Providers fetch and format responses, creating a Merkle tree of hashed responses.\n4. **Consensus Storage**: Once signatures representing 50%+ weight are collected, the Merkle root is submitted to the [`Relay`](/network/fsp/solidity-reference/IRelay) contract.\n5. **Proof Retrieval**: Users fetch attestation responses and proofs from the DA Layer.\n6. **Verification and Action**: Smart contracts verify proofs and use the attested data if valid.\n\n### User Workflow\n\n<ThemedImage\n  alt=\"User Workflow Diagram\"\n  sources={{\n    light: useBaseUrl(\"img/fdc-overview/user_workflow_light.svg\"),\n    dark: useBaseUrl(\"img/fdc-overview/user_workflow_dark.svg\"),\n  }}\n/>\n\n1. **Identify Data Needs**: Determine the required attestation type and data source.\n2. **Prepare Request**: Format the request with the expected response hash (MIC).\n3. **Submit Request**: Use [`requestAttestation`](/fdc/reference/IFdcHub#requestattestation) from `FdcHub` and pay the required fee.\n4. **Track Submission**: Record the block timestamp and calculate the voting round.\n5. **Wait for Finalization**: The voting round concludes, and a relay contract event signals finalization.\n6. **Fetch Data**: Retrieve responses and proofs from the DA Layer.\n7. **Submit to Smart Contract**: Provide responses and proofs for verification.\n\n### Smart Contract Workflow\n\n1. **Define Triggers**: Establish data-driven triggers.\n2. **Receive Data**: Accept attestation responses and proofs from users.\n3. **Verify Proofs**: Use the [`FdcVerification`](/fdc/reference/IFdcVerification) contract to validate the response against the Merkle root.\n4. **Act on Data**: Utilize the verified data for computation or decision-making.\n\n### Data Provider Workflow\n\n1. **Collect Requests**: Group requests by emission timestamps.\n2. **Retrieve Data**: Fetch responses from verifier servers.\n3. **Validate Responses**: Ensure data validity using MIC and LUT checks.\n4. **Submit BitVectors**: Indicate valid requests using BitVectors during the \"choose phase\" (90-135 seconds into the round).\n5. **Achieve Consensus**: Aggregate BitVectors to form a consensus BitVector.\n6. **Create Merkle Tree**: Construct a Merkle tree from validated responses.\n7. **Sign and Submit**: Collect signatures representing 50%+ weight and submit the Merkle root to the [`Relay`](/network/fsp/solidity-reference/IRelay) contract.\n8. **Serve Data**: Provide attestation responses and proofs via the DA Layer.\n\nThe **Flare Data Connector (FDC)** is a critical infrastructure component for the Flare ecosystem, enabling smart contracts to access **secure, attested external data** while maintaining trustless verification through **Merkle proofs**. By integrating the FDC, developers can create more **reliable, decentralized applications** across multiple blockchains.",
    "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport DocCardList from \"@theme/DocCardList\";\nimport SolidityReference from \"@site/src/components/DataTables/SolidityReference\";\n\n## Deployed Contracts\n\nexport const contracts = [\n  \"FdcHub\",\n  \"FdcVerification\",\n  \"FdcRequestFeeConfigurations\",\n  \"FdcInflationConfigurations\",\n];\n\n<Tabs block>\n    <TabItem value=\"flare\" label=\"Flare Mainnet\" default>\n\n        <SolidityReference\n            network=\"FlareMainnet\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"coston2\" label=\"Flare Testnet Coston2\">\n\n        <SolidityReference\n            network=\"FlareTestnetCoston2\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n    <TabItem value=\"songbird\" label=\"Songbird Canary-Network\">\n\n        <SolidityReference\n            network=\"SongbirdCanaryNetwork\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n    <TabItem value=\"coston\" label=\"Songbird Testnet Coston\">\n\n        <SolidityReference\n            network=\"SongbirdTestnetCoston\"\n            contractNames={contracts}\n        />\n\n    </TabItem>\n\n</Tabs>\n\n## Interfaces\n\n<DocCardList />",
    "The `Payment` attestation type enables data collection about a transaction, classified as payment on the native chain.\nThe currently supported chain are: `BTC`, `DOGE`, and `XRP`.\nYou can learn more about it in the official [specification repo](/fdc/attestation-types/payment).\n\nWe will now demonstrate how the FDC protocol can be used to collect the data of a given XRLP payment transaction.\nThe transaction we will be observing has the id `2A3E7C7F6077B4D12207A9F063515EACE70FBBF3C55514CD8BD659D4AB721447`; this is an arbitrary transaction that we acquired from the XRPL testnet [explorer](https://testnet.xrpl.org/).\n\nThe same procedure works for all supported sources, `BTC`, `DOGE`, and `XRP`.\nThe source then requires only a slight modification; we will remind you of that when it comes up in the guide.\n\nIn this guide, we will follow the steps outlined in the [FDC overview](/fdc/overview).\n\nOur implementation requires handling the FDC voting round finalization process.\nTo manage this, we will create separate scripts in `script/fdcExample/Payment.s.sol` that handle different stages of the validation process:\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\n...\n\nstring constant attestationTypeName = \"Payment\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n ...\n}\n\ncontract SubmitAttestationRequest is Script {\n ...\n}\n\ncontract RetrieveDataAndProof is Script {\n ...\n}\n\ncontract Deploy is Script {\n ...\n}\n...\n```\n\nThe names of included contracts mostly mirror the steps described in the [FDC guide](/fdc/overview).\n\nTo bridge the separate executions of the scripts, we will save the relevant data of each script to a file in the `dirPath` folder.\nEach succeeding script will then read that file to load the data.\n\n## Prepare request\n\nThe JSON request to the verifier is the same form for all attestation types, but the values of the fields differ between them.\nIt contains the following fields.\n\n### Required Fields\n\n- `attestationType` is the UTF8 hex string encoding of the attestation type name, zero-padded to 32 bytes.\n- `sourceId` is the UTF8 hex string encoding of the data source identifier name, zero-padded to 32 bytes.\n- `requestBody` is different for each attestation type.\n\nIn the case of `Payment`, `requestBody` is a JSON containing the fields:\n\n- `transactionId`: id of the transaction; as `bytes32`\n- `inUtxo`: UTXO chains support multiple source addresses, so this is the index of the address considered, as `uint256`; for non-UTXO chains this should always be `0`\n- `utxo`: UTXO chains support multiple receiving addresses, so this is the index of the address considered, as `uint256`; for non-UTXO chains this should always be `0`\n\n### Reference Documentation\n\n- [AddressValidity Specification](/fdc/attestation-types/payment)\n- [Verifier Interactive Docs](https://fdc-verifiers-testnet.flare.network/verifier/xrp/api-doc#/)\n- API available for [DOGE](https://fdc-verifiers-testnet.flare.network/verifier/doge/api-doc#/) and [BTC](https://fdc-verifiers-testnet.flare.network/verifier/btc/api-doc#/).\n\n### Example Values\n\n- `transactionId`: the above address `9421cbb7f195df66d16703442a408261fa973514a0bd9dfc680f10eb3942d11f`\n- `inUtxo`: non-default `0`\n- `utxo`: non-default `0`\n\n### Encoding Functions\n\nTo encode values into UTF8 hex:\n\n- `toUtf8HexString`: Converts a string to UTF8 hex.\n- `toHexString`: Zero-right-pads the string to 32 bytes.\n\nThese functions are included in the [Base library](https://github.com/flare-foundation/flare-foundry-starter/blob/master/script/fdcExample/Base.s.sol) within the [example repository](https://github.com/flare-foundation/flare-foundry-starter), but they can also be defined locally in your contract or script.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction toHexString(\n bytes memory data\n) public pure returns (string memory) {\n bytes memory alphabet = \"0123456789abcdef\";\n\n bytes memory str = new bytes(2 + data.length * 2);\n str[0] = \"0\";\n str[1] = \"x\";\n for (uint i = 0; i < data.length; i++) {\n str[2 + i * 2] = alphabet[uint(uint8(data[i] >> 4))];\n str[3 + i * 2] = alphabet[uint(uint8(data[i] & 0x0f))];\n }\n return string(str);\n}\n```\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction toUtf8HexString(\n string memory _string\n) internal pure returns (string memory) {\n string memory encodedString = toHexString(\n abi.encodePacked(_string)\n );\n uint256 stringLength = bytes(encodedString).length;\n require(stringLength <= 64, \"String too long\");\n uint256 paddingLength = 64 - stringLength + 2;\n for (uint256 i = 0; i < paddingLength; i++) {\n encodedString = string.concat(encodedString, \"0\");\n }\n return encodedString;\n}\n```\n\nWe also define a helper function for formatting data into a JSON string.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction prepareAttestationRequest(\n string memory attestationType,\n string memory sourceId,\n string memory requestBody\n) internal view returns (string[] memory, string memory) {\n // We read the API key from the .env file\n string memory apiKey = vm.envString(\"VERIFIER_API_KEY\");\n\n // Preparing headers\n string[] memory headers = prepareHeaders(apiKey);\n // Preparing body\n string memory body = prepareBody(\n attestationType,\n sourceId,\n requestBody\n );\n\n console.log(\n \"headers: %s\",\n string.concat(\"{\", headers[0], \", \", headers[1]),\n \"}n\"\n );\n console.log(\"body: %sn\", body);\n return (headers, body);\n}\n\nfunction prepareHeaders(\n string memory apiKey\n) internal pure returns (string[] memory) {\n string[] memory headers = new string[](2);\n headers[0] = string.concat('\"X-API-KEY\": ', apiKey);\n headers[1] = '\"Content-Type\": \"application/json\"';\n return headers;\n}\n\nfunction prepareBody(\n string memory attestationType,\n string memory sourceId,\n string memory body\n) internal pure returns (string memory) {\n return\n string.concat(\n '{\"attestationType\": ',\n '\"',\n attestationType,\n '\"',\n ', \"sourceId\": ',\n '\"',\n sourceId,\n '\"',\n ', \"requestBody\": ',\n body,\n \"}\"\n );\n}\n\n```\n\nIn the example repository, these are once again included within the [Base](https://github.com/flare-foundation/flare-foundry-starter/blob/master/script/fdcExample/Base.s.sol) library file.\n\nThus, the part of the script that prepares the verifier request looks like:\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"dependencies/forge-std-1.9.5/src/console.sol\";\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\nimport {Base} from \"./Base.s.sol\";\n...\n\nstring constant attestationTypeName = \"Payment\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n using Surl for *;\n\n // Setting request data\n string public transactionId =\n \"2A3E7C7F6077B4D12207A9F063515EACE70FBBF3C55514CD8BD659D4AB721447\";\n string public inUtxo = \"0\";\n string public utxo = \"0\";\n string public baseSourceName = \"xrp\"; // Part of verifier URL\n string public sourceName = \"testXRP\"; // XRLP test chain ID\n\n function prepareRequestBody(\n string memory transactionId,\n string memory inUtxo,\n string memory utxo\n ) private pure returns (string memory) {\n return\n string.concat(\n '{\"transactionId\": \"',\n transactionId,\n '\", \"inUtxo\": \"',\n inUtxo,\n '\", \"utxo\": \"',\n utxo,\n '\"}'\n );\n }\n\n function run() external {\n // Preparing request data\n string memory attestationType = Base.toUtf8HexString(\n attestationTypeName\n );\n string memory sourceId = Base.toUtf8HexString(sourceName);\n string memory requestBody = prepareRequestBody(\n transactionId,\n inUtxo,\n utxo\n );\n\n (string[] memory headers, string memory body) =\n prepareAttestationRequest(attestationType, sourceId, requestBody);\n\n ...\n }\n}\n\n...\n```\n\nIf you are accessing a different chain, replace the `baseSourceName` with an appropriate value, `doge` or `btc`.\n\nThe code above differs slightly from the [starter example](https://github.com/flare-foundation/flare-foundry-starter).\nBut, if we remove the ellipses `...` signifying missing code, we can still run the script.\n\nBecause of the `console.log` commands it will produce JSON strings that represent valid requests; we can then pass this to the [interactive verifier](https://fdc-verifiers-testnet.flare.network/verifier/btc/api-doc#/Payment/BTCPaymentVerifierController_prepareRequest) to check what the response will be.\n\nWe can run the script by calling the following commands in the console.\n\n```bash\nsource .env\n```\n\n```bash\nforge script script/fdcExample/Payment.s.sol:PrepareAttestationRequest --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast  --ffi\n```\n\nThe prerequisite for this is that the `.env` file is not missing the `PRIVATE KEY` and `COSTON2_RPC_URL` values.\nThe script can also access other chains; that can be achieved by replacing the `--rpc-url` value with `COSTON_RPC_URL`, `FLARE_RPC_URL`, or `SONGBIRD_RPC_URL`.\n\n## Post request to verifier.\n\nTo post a request to a verifier server, we use the `surl` package.\nWe place `using Surl for *;` at the start of our `PostRequest` contract, and then call its `post` method on the verifier URL.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\n(, bytes memory data) = url.post(headers, body);\n```\n\nWe construct the URL by appending to the verifier address `https://fdc-verifiers-testnet.flare.network/` the path `verifier/btc/Payment/prepareRequest`.\nWe can do so dynamically with the following code.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nstring memory baseUrl = \"https://fdc-verifiers-testnet.flare.network/\";\nstring memory url = string.concat(\n baseUrl,\n \"verifier/\",\n baseSourceName,\n \"/\",\n attestationTypeName,\n \"/prepareRequest\"\n);\nconsole.log(\"url: %s\", url);\nstring memory requestBody = string.concat(\n '{\"addressStr\": \"',\n addressStr,\n '\"}'\n);\n```\n\nLastly, we parse the return data from the verifier server.\nUsing the Foundry `parseJson` shortcode, and a custom struct `AttestationResponse`, we decode the returned data and extract from it the ABI encoded request.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction parseAttestationRequest(\n bytes memory data\n) internal pure returns (AttestationResponse memory) {\n string memory dataString = string(data);\n bytes memory dataJson = vm.parseJson(dataString);\n\n AttestationResponse memory response = abi.decode(\n dataJson,\n (AttestationResponse)\n );\n\n console.log(\"response status: %sn\", response.status);\n console.log(\"response abiEncodedRequest: \");\n console.logBytes(response.abiEncodedRequest);\n console.log(\"n\");\n\n return response;\n}\n```\n\n:::info\nIf everything went right, the `abiEncodedRequest` should look something like this.\n\n```\n0x\n4164647265737356616c69646974790000000000000000000000000000000000\n7465737442544300000000000000000000000000000000000000000000000000\n7d2ef938d4ffd2392f588bf46563e07ab885b15fead91c1bb99b16f465b71a68\n0000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000022\n6d6739503966347772397737633173674665695443356f4d4c59584363326337\n6873000000000000000000000000000000000000000000000000000000000000\n```\n\nLet's break it down line by line:\n\n- **First line:** `toUtf8HexString(\"Payment\")`\n- **Second line:** `toUtf8HexString(\"testETH\")`\n- **Third line:** message integrity code (MIC), a hash of the whole response salted with a string `\"Flare\"`, ensures the integrity of the attestation\n- **Remaining lines:** ABI encoded `Payment.RequestBody` Solidity struct\n  :::\n\nWhat this demonstrates is that, with some effort, the `abiEncodedRequest` can be constructed manually.\n\nWe write the `abiEncodedRequest` to a file (`data/Payment_abiEncodedRequest.txt`) to it in the next step.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_abiEncodedRequest\"),\n    StringsBase.toHexString(response.abiEncodedRequest),\n    true\n);\n```\n\n## Submit request to FDC\n\nThis step transitions from off-chain request preparation to on-chain interaction with the FDC protocol. Now, we submit the validated request to the blockchain using deployed smart contracts.\n\n### Submit request\n\nThe entire submission process requires only five key steps:\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction submitAttestationRequest(\n AttestationResponse memory response\n) internal {\n uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n vm.startBroadcast(deployerPrivateKey);\n IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n .getFdcRequestFeeConfigurations();\n uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n response.abiEncodedRequest\n );\n console.log(\"request fee: %sn\", requestFee);\n vm.stopBroadcast();\n\n vm.startBroadcast(deployerPrivateKey);\n\n IFdcHub fdcHub = ContractRegistry.getFdcHub();\n console.log(\"fcdHub address:\");\n console.log(address(fdcHub));\n console.log(\"n\");\n fdcHub.requestAttestation{value: requestFee}(response.abiEncodedRequest);\n vm.stopBroadcast();\n}\n```\n\n### Step-by-Step Breakdown\n\n1.  Load Private Key\n    The private key is read from the `.env` file using Foundry's `envUint` function:\n\n```solidity\n       uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n```\n\n2.  Obtain Request Fee\n    We retrieve the required requestFee from the `FdcRequestFeeConfigurations` contract:\n\n```solidity\n        IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n            .getFdcRequestFeeConfigurations();\n        uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n            response.abiEncodedRequest\n        );\n\n```\n\n    This is done in a separate broadcast to ensure `requestFee` is available before submitting the request.\n\n3. Access `FdcHub` Contract\n   Using the `ContractRegistry` library (from `flare-periphery`), we fetch the `FdcHub` contract:\n\n```solidity\n   IFdcHub fdcHub = ContractRegistry.getFdcHub();\n   console.log(\"fcdHub address:\");\n   console.log(address(fdcHub));\n   console.log(\"n\");\n```\n\n4. Submit the Attestation Request\n   We send the attestation request with the required fee:\n\n```solidity\n fdcHub.requestAttestation{value: requestFee}(response.abiEncodedRequest);\n```\n\n5.  Calculate Voting Round Number\n    To determine the voting round in which the attestation request is processed, we query the `FlareSystemsManager` contract:\n\n```solidity\n       // Calculating roundId\n       IFlareSystemsManager flareSystemsManager = ContractRegistry\n           .getFlareSystemsManager();\n\n       uint32 roundId = flareSystemsManager.getCurrentVotingEpochId();\n       console.log(\"roundId: %sn\", Strings.toString(roundId));\n\n```\n\nThis can be done within the existing broadcast or in a new one (as done in the demo repository for better code organization).\n\n## Wait for response\n\nWe wait for the round to finalize.\nThis takes no more than 90 seconds.\n\nYou can check if the request was submitted successfully on the [AttestationRequests](https://coston2-systems-explorer.flare.rocks/attestation-request) page on the Flare Systems Explorer website.\nTo check if the round has been finalized, go to [Finalizations](https://coston2-systems-explorer.flare.rocks/finalizations) page.\n\nTo learn more about how the FDC protocol works, check [here](/fdc/overview).\n\n## Prepare proof request\n\nWe prepare the proof request in a similar manner as in the step Prepare the request, by string concatenation.\nWe import two new variables from the `.env` file; the URL of a verifier server and the corresponding API key.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nstring memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\nstring memory apiKey = vm.envString(\"X_API_KEY\");\n```\n\nAlso, by repeatedly using the Foundry shortcode `vm.readLine`, we read the data, saved to a file in the previous step, to variables.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nstring memory requestBytes = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_abiEncodedRequest\",\n        \".txt\"\n    )\n);\nstring memory votingRoundId = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_votingRoundId\",\n        \".txt\"\n    )\n);\n```\n\nThe code is as follows.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\ncontract RetrieveDataAndProof is Script {\n using Surl for *;\n\n function run() external {\n string memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\n string memory apiKey = vm.envString(\"X_API_KEY\");\n string memory fileName = string.concat(attestationTypeName, \".txt\");\n string memory filePath = string.concat(dirPath, fileName);\n\n // We import the roundId and abiEncodedRequest from the first file\n string memory votingRoundId = vm.readLine(filePath);\n string memory requestBytes = vm.readLine(filePath);\n console.log(\"votingRoundId: %sn\", votingRoundId);\n console.log(\"requestBytes: %sn\", requestBytes);\n\n // Preparing the proof request\n string[] memory headers = prepareHeaders(apiKey);\n string memory body = string.concat(\n '{\"votingRoundId\":',\n votingRoundId,\n ',\"requestBytes\":\"',\n requestBytes,\n '\"}'\n );\n console.log(\"body: %sn\", body);\n console.log(\n \"headers: %s\",\n string.concat(\"{\", headers[0], \", \", headers[1]),\n \"}n\"\n );\n\n ...\n }\n}\n```\n\n## Post proof request to DA Layer\n\nWe post the proof request to a chosen DA Layer provider server also with the same code as we did in the previous step.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nstring memory url = string.concat(\n daLayerUrl,\n // \"api/v0/fdc/get-proof-round-id-bytes\"\n \"api/v1/fdc/proof-by-request-round-raw\"\n);\nconsole.log(\"url: %sn\", url);\n\n(, bytes memory data) = Base.postAttestationRequest(url, headers, body);\n```\n\nParsing the returned data requires the definition of an auxiliary `struct`.\n\n{/* <!-- TODO rename after renaming --> */}\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nstruct ParsableProof {\n bytes32 attestationType;\n bytes32[] proofs;\n bytes responseHex;\n}\n```\n\nThe field `attestationType` holds the UTF8 encoded hex string of the attestation type name, padded to 32 bytes.\nThus, it should match the value of the `attestationType` parameter in the Prepare the request step.\nIn our case, that value is `0x4164647265737356616c69646974790000000000000000000000000000000000`.\n\nThe array `proofs` holds the Merkle proofs of our attestation request.\n\nLastly, `responseHex` is the ABI encoding of the chosen attestation type response struct.\nIn this case, it is the `IPayment.Response` struct.\nWe retrieve this data as follows.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nbytes memory dataJson = parseData(data);\nParsableProof memory proof = abi.decode(dataJson, (ParsableProof));\n\nIPayment.Response memory proofResponse = abi.decode(\n proof.responseHex,\n (IPayment.Response)\n);\n```\n\n## Verify proof\n\nBecause every node holds a copy of the whole chain, storing data on the blockchain is expensive.\nFor the sake of efficiency, FDC keeps only the Merkle proof on-chain, while the data itself can be obtained from outside data providers.\nPer our request, they supply us with the specified data.\nThat data then be encrypted, and its Merkle proof compared to the Merkle root stored on-chain.\nIf they match, the data can be trusted.\n\nThis step is not strictly necessary; if we trust our data provider, we can skip this step.\nAnd in practice, we do just that.\nBut it is crucial, that should we want to verify the data, we can do so.\n\nOne way to do it is using the `FdcVerification` contract.\nWe first store our data as an appropriate Solidity struct, namely `IPayment.Proof`.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nIPayment.Proof memory _proof = IPayment.Proof(\n proof.proofs,\n proofResponse\n);\n```\n\nWe then access the `FdcVerification` contract through the `ContractRegistry`, and feed it the proof.\nIf the proof is valid, the function `verifyPayment` will return `true`, otherwise `false`.\nAs before, we wrap the whole thing into a broadcast environment, using the `PRIVATE_KEY` variable from our `.env` file.\n\n```solidity title=\"scrip/fdcExample/Payment.s.sol\"\nuint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\nvm.startBroadcast(deployerPrivateKey);\n\nbool isValid = ContractRegistry\n .getFdcVerification()\n .verifyPayment(proof);\nconsole.log(\"proof is valid: %sn\", StringsBase.toString(isValid));\n\nvm.stopBroadcast();\n```\n\nIn actuality, we will only verify the proof within a deployed contract, which we will define in the next step.\nWhat we will do here instead is, we will save the proof to a file so that it can be later loaded into a variable.\nThe code that does this is as follows.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_proof\"),\n    StringsBase.toHexString(abi.encode(_proof)),\n    true\n);\n```\n\n## Use the data\n\nWe will now define a simple contract, that will demonstrate how the data can be used onchain.\nThe contract will receive data and proof of a Payment transaction, and store it into an array of special `Payment` structs.\nIt will do so only if the transaction is valid.\n\n```solidity title=\"src/fdcExample/Payment.sol\"\nstruct Payment {\n    uint64 blockNumber;\n    uint64 blockTimestamp;\n    bytes32 sourceAddressHash;\n    bytes32 receivingAddressHash;\n    int256 spentAmount;\n    bytes32 standardPaymentReference;\n    uint8 status;\n}\n```\n\nFirst, we define an interface that the contract will inherit from.\nWe do so, so that we may contact the contract later through a script.\n\n```solidity title=\"src/fdcExample/Payment.sol\"\ninterface ITransferEventListener {\n    function registerPayment(\n        IPayment.Proof calldata _transaction\n    ) external;\n}\n```\n\nThe interface exposes the only function the script will call, `collectTransferEvents`.\nWe now define the contract as follows.\n\n```solidity title=\"src/fdcExample/Payment.sol\"\n\ncontract PaymentRegistry is IPaymentRegistry {\n    Payment[] public verifiedPayments;\n\n    function isPaymentProofValid(\n        IPayment.Proof calldata transaction\n    ) public view returns (bool) {\n        // Use the library to get the verifier contract and verify that this transaction was proved by state connector\n        IFdcVerification fdc = ContractRegistry.getFdcVerification();\n        console.log(\"transaction: %sn\", FdcStrings.toJsonString(transaction));\n        // return true;\n        return fdc.verifyPayment(transaction);\n    }\n\n    function registerPayment(IPayment.Proof calldata _transaction) external {\n        // 1. FDC Logic\n        // Check that this Payment has indeed been confirmed by the FDC\n        require(isPaymentProofValid(_transaction), \"Invalid transaction proof\");\n\n        // 2. Business logic\n        Payment memory provedPayment = Payment(\n            _transaction.data.responseBody.blockNumber,\n            _transaction.data.responseBody.blockTimestamp,\n            _transaction.data.responseBody.sourceAddressHash,\n            _transaction.data.responseBody.receivingAddressHash,\n            _transaction.data.responseBody.spentAmount,\n            _transaction.data.responseBody.standardPaymentReference,\n            _transaction.data.responseBody.status\n        );\n\n        verifiedPayments.push(provedPayment);\n    }\n}\n```\n\nWe deploy the contract through a simple script.\nThe script creates a new `PaymentRegistry` contract, and writes its address to a file (`data/Payment_listenerAddress.txt`).\n\n```solidity title=\"scrip/fdcExample/DeployContract.s.sol\"\ncontract DeployContract is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n\n        PaymentRegistry paymentRegistry = new PaymentRegistry();\n        address _address = address(paymentRegistry);\n\n        vm.stopBroadcast();\n\n        Base.writeToFile(\n            dirPath,\n            string.concat(attestationTypeName, \"_address\"),\n            StringsBase.toHexString(abi.encodePacked(_address)),\n            true\n        );\n    }\n}\n```\n\nWe deploy the contract with the following console command.\n\n```bash\nforge script script/fdcExample/Payment.s.sol:DeployContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --verify --ffi\n```\n\nLastly, we define a script that interacts with the above contract.\nIt first reads the ABI encoded proof data, and the contract address, from files.\nThen, it connects to the above contract at the saved address (this is why we require the interface).\nWith that, it is able to call the `registerPayment` method of the contract.\n\n```solidity title=\"script/fdcExample/Payment.s.sol\"\ncontract InteractWithContract is Script {\n    function run() external {\n        string memory addressString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_address\", \".txt\")\n        );\n        address _address = vm.parseAddress(addressString);\n        string memory proofString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_proof\", \".txt\")\n        );\n        bytes memory proofBytes = vm.parseBytes(proofString);\n        IPayment.Proof memory proof = abi.decode(proofBytes, (IPayment.Proof));\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n        IPaymentRegistry registry = IPaymentRegistry(_address);\n        registry.registerPayment(proof);\n        vm.stopBroadcast();\n    }\n}\n\n```\n\nWe run this script with the console command:\n\n```bash\nforge script script/fdcExample/Payment.s.sol:InteractWithContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --ffi\n\n```",
    "This guide focuses on the [ConfirmedBlockHeightExists](/fdc/attestation-types/confirmed-block-height-exists) attestation type, an efficient way to assert whether a specific `blockNumber` is confirmed with additional data to compute the block production rate within a given time window.\nThe primary contract interface for this attestation type is [`IConfirmedBlockHeightExists`](/fdc/reference/IFdcHub).\n\n## Balance Decreasing Transaction\n\n[Full specification on GitHub](https://github.com/flare-foundation/songbird-state-connector-protocol/blob/main/specs/attestations/active-types).\n\nThis attestation type is designed to prove that a transaction either decreases the balance of an address or is signed by the source address.\n\nOne of the purposes of the Data Connector is to provide connectivity between different blockchains, allowing the use of information from one chain on another. Other chains may not have smart contract capability or support any kind of \"fund locking\" and unlocking based on conditions. This is where the Data Connector comes into play, allowing the Flare network to monitor (and police) an address on another chain and act upon changes in its balance.\n\nFor instance, we can have an address on the Bitcoin network that acts as a vault (think fAssets). If the address owner violates an agreement by sending funds out, the Data Connector can detect it. To enhance security and avoid dependence on a single chain, this attestation type makes minimal assumptions about the violating transaction. A transaction is considered \"offending\" if the balance of the designated address is lower after the transaction or if the address is among the signers of the transaction (even if its balance is higher than before the transaction).\n\nThis allows us to track balance decreases even if the change results from a complex transaction (e.g., multisig, complex scripts, or specific XRPL transactions where a non-participating address can have funds removed).\n\nThe request body consists of only two arguments:\n\n- **`transactionId`**: The ID of the payment transaction we want to prove (same as with payment).\n\n- **`sourceAddressIndicator`**: The indicator of the address whose balance has been decreased.\n  - On Bitcoin and Dogecoin, this is the index of the transaction input in hex, padded to a 0x prefixed 32-byte string (very similar to `inUtxo` in the payment type).\n  - On XRPL, this is the standard address hash of the address whose balance we want to prove has decreased.\n\nOnce the request is submitted, the verifiers will check the transaction, perform full accounting of the requested source address, and confirm the response if and only if the transaction indeed decreases the balance of the address or the address is among the signers of the transaction. In short, the request won't be confirmed if the balance stays the same and the address is not among the signers of the transaction, ensuring there are no false positives.\n\nIf the address has indeed decreased the balance (or participated as a signer), the response will also contain information about when exactly the offending transaction occurred. The balance decrease might be allowed under certain conditions (e.g., after a certain time, or with the correct payment reference).\n\nThe response will include the following information:\n\n- **`blockNumber`**: The number of the block in which the transaction is included.\n\n- **`blockTimestamp`**: The timestamp of the block in which the transaction is included. For UTXO chains, this is `mediantime`; for XRPL, this is `close_time` of the ledger.\n\n- **`sourceAddressHash`**: The standard address hash of the address indicated by the `sourceAddressIndicator`. For UTXO chains, this gives us the address that controlled the designated input.\n\n- **`spentAmount`**: The amount spent by the source address in minimal units. If this is negative, the address has received funds in the transaction but might still be among the signers.\n\n- **`standardPaymentReference`**: The standard payment reference of the transaction. This is useful if the transaction is an allowed payment and the payment reference is used to identify it.\n\nLet's see how the verification contract looks.\n\n```solidity title=\"BalanceDecreasingTransactionVerification.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../../interface/types/BalanceDecreasingTransaction.sol\";\nimport \"../../interface/external/IMerkleRootStorage.sol\";\nimport \"./interface/IBalanceDecreasingTransactionVerification.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract BalanceDecreasingTransactionVerification is IBalanceDecreasingTransactionVerification {\n   using MerkleProof for bytes32[];\n\n   IMerkleRootStorage public immutable merkleRootStorage;\n\n   constructor(IMerkleRootStorage _merkleRootStorage) {\n      merkleRootStorage = _merkleRootStorage;\n   }\n\n   function verifyBalanceDecreasingTransaction(\n      BalanceDecreasingTransaction.Proof calldata _proof\n   ) external view returns (bool _proved) {\n      return _proof.data.attestationType == bytes32(\"BalanceDecreasingTransaction\") &&\n         _proof.merkleProof.verify(\n            merkleRootStorage.merkleRoot(_proof.data.votingRound),\n            keccak256(abi.encode(_proof.data))\n         );\n   }\n}\n```\n\nIf you remember the payment verification contract, this one is very similar. We still use the `MerkleProof` library to verify the proof, but the type we verify is different. We just ABI encode the response and hash it, and then we verify that the hash is included in the Merkle tree for the round—exactly the same way as with the payment type. All other types are very similar; only the type we verify is different.\n\nImportantly, the verification contract simply checks that this proof indeed proves that the structure we requested was included in a specific round. It does not make any assumptions about the response itself. The response itself should be checked by the dapp to ensure it is the expected one.\n\nIn some cases, the verifiers will not confirm the response (as there is no such confirmation), but in this case, they might confirm the response and also indicate that the balance has not decreased (and has indeed increased).\n\n### Example\n\nShowing a balance decreasing transaction is simple—we will reuse the script from creating a transaction and just prove that the transaction has indeed decreased the balance of the address. The complete code that produces the following example is present in `tryXRPLBalanceDecreasingTransaction.ts`.\n\nThe code is practically the same as before; we just make the request to a different endpoint (due to the different attestation type), change the `attestationType` field in the request body, and specify the transaction and the address we want to prove the balance decrease for.\n\nAs mentioned earlier, specifying the address is important since the address's balance might have decreased in the transaction, but its participation might have been minimal (or it was not even part of the initial signers). For UTXO chains, we also need to specify `sourceAddressIndicator` because many addresses might be involved in the transaction (by signing an array of outputs). We need to specify which one we want to prove the balance decrease for and request the verifiers to do the full accounting.\n\n```typescript title=\"tryXRPLBalanceDecreasingTransaction.ts\"\nconst xrpl = require(\"xrpl\");\n\nconst {\n  XRPL_PRIVATE_KEY,\n  ATTESTATION_URL,\n  ATTESTATION_API_KEY,\n  USE_TESTNET_ATTESTATIONS,\n} = process.env;\nconst receiverAddress = \"r9RLXvWuRro3RX33pk4xsN58tefYZ8Tvbj\";\n\nfunction toHex(data: string): string {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return \"0x\" + result.padEnd(64, \"0\");\n}\n\nfunction fromHex(data: string): string {\n  data = data.replace(/^(0x.)/, \"\");\n  return data\n    .split(/(ww)/g)\n    .filter((p) => !!p)\n    .map((c) => String.fromCharCode(parseInt(c, 16)))\n    .join(\"\");\n}\n\nasync function prepareAttestationResponse(\n  attestationType: string,\n  network: string,\n  sourceId: string,\n  requestBody: any,\n): Promise<AttestationResponse> {\n  const response = await fetch(\n    `${ATTESTATION_URL}/verifier/${network}/${attestationType}/prepareResponse`,\n    {\n      method: \"POST\",\n      headers: {\n        \"X-API-KEY\": ATTESTATION_API_KEY as string,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        attestationType: toHex(attestationType),\n        sourceId: toHex(sourceId),\n        requestBody: requestBody,\n      }),\n    },\n  );\n  const data = await response.json();\n  return data;\n}\n\nasync function getXRPLclient(): Promise<any> {\n  const client = new xrpl.Client(\"wss://s.altnet.rippletest.net:51233\");\n  await client.connect();\n\n  return client;\n}\n\nasync function sendXRPLTransaction(\n  message: string = \"\",\n  amount: number = 10,\n  target: string = \"r9RLXvWuRro3RX33pk4xsN58tefYZ8Tvbj\",\n): Promise<string> {\n  const client = await getXRPLclient();\n\n  const test_wallet = xrpl.Wallet.fromSeed(XRPL_PRIVATE_KEY);\n\n  let memos = [];\n  if (message) {\n    // Standard payment reference must be 32 bytes - so we right pad with 0\n    const MemoData = xrpl.convertStringToHex(message).padEnd(64, \"0\");\n    const MemoType = xrpl.convertStringToHex(\"Text\");\n    const MemoFormat = xrpl.convertStringToHex(\"text/plain\");\n\n    memos.push({\n      Memo: {\n        MemoType: MemoType,\n        MemoData: MemoData,\n        MemoFormat: MemoFormat,\n      },\n    });\n  }\n\n  const transaction = await client.autofill({\n    TransactionType: \"Payment\",\n    Account: test_wallet.address,\n    Amount: amount.toString(),\n    Destination: target,\n    Memos: memos,\n  });\n\n  const signed = test_wallet.sign(transaction);\n  console.log(\n    `See transaction at https://testnet.xrpl.org/transactions/${signed.hash}`,\n  );\n  await client.submitAndWait(signed.tx_blob);\n\n  await client.disconnect();\n\n  // sleep for 10 seconds to allow the transaction to be processed\n  await new Promise((resolve) => setTimeout(resolve, 10 * 1000));\n\n  const result = await prepareAttestationResponse(\n    \"BalanceDecreasingTransaction\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      transactionId: \"0x\" + signed.hash,\n      sourceAddressIndicator: web3.utils.soliditySha3(test_wallet.address),\n    },\n  );\n\n  console.log(result);\n\n  console.log(fromHex(result.response.responseBody.standardPaymentReference));\n}\n\nasync function main() {\n  await sendXRPLTransaction(\"Hello world!\");\n}\n\nmain().then(() => process.exit(0));\n```\n\nYou create a transaction, wait for it to be processed, and then prepare a response to check that it was indeed a balance decreasing transaction.\n\nAn example response would look like this:\n\n```json\n{\n    \"status\": \"VALID\",\n    \"response\": {\n        \"attestationType\": \"0x42616c616e636544656372656173696e675472616e73616374696f6e00000000\",\n        \"sourceId\": \"0x7465737458525000000000000000000000000000000000000000000000000000\",\n        \"votingRound\": \"0\",\n        \"lowestUsedTimestamp\": \"1708671652\",\n        \"requestBody\": {\n            \"transactionId\": \"0xB40C7540D8393D389AAF6006C0429608ADD871C0CA3174B72EA55776D885B77B\",\n            \"sourceAddressIndicator\": \"0xa1ca3089c3e9f4c6e9ccf2bfb65bcf3e9d7544a092c79d642d5d34a54e0267e1\"\n        }, \"responseBody\": {\n            \"blockNumber\": \"45629840\",\n            \"blockTimestamp\": \"1708671652\",\n            \"sourceAddressHash\": \"0xa1ca3089c3e9f4c6e9ccf2bfb65bcf3e9d7544a092c79d642d5d34a54e0267e1\",\n            \"spentAmount\": \"22\",\n            \"standardPaymentReference\": \"0x48656C6C6F20776F726C64210000000000000000000000000000000000000000\"\n        }\n    }\n}\nHello world!\n```\n\nAll the fields are populated correctly. Most importantly, although the transaction sent 10 XRP drops, the response clearly shows that the balance decreased by 22 drops, as 12 drops were spent on the transaction fee.\n\n{/* <!-- TODO:BTC Example, and if possible one with XRPL clawback --> */}",
    "The `JsonApi` attestation type enables data collection from an arbitrary Web2 source.\nYou can learn more about it in the official [specification repo](/fdc/attestation-types/json-api).\n\nWe will now demonstrate how the FDC protocol can be used to collect the data of a given [Star Wars API](https://swapi.dev/) request.\nThe request we will be making is `https://swapi.dev/api/peaople/3/`.\nThe same procedure works for all public APIs.\n\nIn this guide, we will follow the steps outlined in the [FDC overview](/fdc/overview).\n\nOur implementation requires handling the FDC voting round finalization process.\nTo manage this, we will create separate scripts in `script/fdcExample/JsonApi.s.sol` that handle different stages of the validation process:\n\n```solidity title=\"script/fdcExample/JsonApi.s.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\n...\n\nstring constant attestationTypeName = \"JsonApi\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n ...\n}\n\ncontract SubmitAttestationRequest is Script {\n ...\n}\n\ncontract RetrieveDataAndProof is Script {\n ...\n}\n\ncontract Deploy is Script {\n ...\n}\n...\n```\n\nThe names of included contracts mostly mirror the steps described in the [FDC guide](/fdc/overview).\n\nTo bridge the separate executions of the scripts, we will save the relevant data of each script to a file in the `dirPath` folder.\nEach succeeding script will then read that file to load the data.\n\n## Prepare request\n\nThe JSON request to the verifier is the same form for all attestation types, but the values of the fields differ between them.\nIt contains the following fields.\n\n### Required Fields\n\n- `attestationType` is the UTF8 hex string encoding of the attestation type name, zero-padded to 32 bytes.\n- `sourceId` is the UTF8 hex string encoding of the data source identifier name, zero-padded to 32 bytes.\n- `requestBody` is different for each attestation type.\n\nIn the case of `JsonApi`, `requestBody` is a JSON containing the fields:\n\n- `url`: url of the data source; as `string`\n- `postprocessJq`: JQ filter to postprocess the json data received from the URL; as `string`\n- `abi_signature`: ABI signature of the Solidity struct that will be used to decode the data; as `string`\n\n### Reference Documentation\n\n- [JsonApi Specification](/fdc/attestation-types/json-api)\n- [Verifier Interactive Docs](https://jq-verifier-test.flare.rocks/api-doc#/)\n\n### Example Values\n\n- `url`: the above address `https://swapi.dev/api/people/3/`\n- `postprocessJq`: `{name: .name, height: .height, mass: .mass, numberOfFilms: .films | length, uid: (.url | split(\\\"/\\\") | .[-2] | tonumber)}`\n- `abi_signature`:\n\n```bash\n{\\\"components\\\": [\n{\\\"internalType\\\": \\\"string\\\", \\\"name\\\": \\\"name\\\", \\\"type\\\": \\\"string\\\"},\n{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"height\\\", \\\"type\\\": \\\"uint256\\\"},\n{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"mass\\\", \\\"type\\\": \\\"uint256\\\"},\n{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"numberOfFilms\\\", \\\"type\\\": \\\"uint256\\\"},\n{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"uid\\\", \\\"type\\\": \\\"uint256\\\"}\n],\n\\\"name\\\": \\\"task\\\",\\\"type\\\": \\\"tuple\\\"}\n```\n\n### Encoding Functions\n\nTo encode values into UTF8 hex:\n\n- `toUtf8HexString`: Converts a string to UTF8 hex.\n- `toHexString`: Zero-right-pads the string to 32 bytes.\n\nThese functions are included in the [Base library](https://github.com/flare-foundation/flare-foundry-starter/blob/master/script/fdcExample/Base.s.sol) within the [example repository](https://github.com/flare-foundation/flare-foundry-starter), but they can also be defined locally in your contract or script.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction toHexString(\n bytes memory data\n) public pure returns (string memory) {\n bytes memory alphabet = \"0123456789abcdef\";\n\n bytes memory str = new bytes(2 + data.length * 2);\n str[0] = \"0\";\n str[1] = \"x\";\n for (uint i = 0; i < data.length; i++) {\n str[2 + i * 2] = alphabet[uint(uint8(data[i] >> 4))];\n str[3 + i * 2] = alphabet[uint(uint8(data[i] & 0x0f))];\n }\n return string(str);\n}\n```\n\n```solidity title=\"script/fdcExample/Base.s.sol\"\nfunction toUtf8HexString(\n string memory _string\n) internal pure returns (string memory) {\n string memory encodedString = toHexString(\n abi.encodePacked(_string)\n );\n uint256 stringLength = bytes(encodedString).length;\n require(stringLength <= 64, \"String too long\");\n uint256 paddingLength = 64 - stringLength + 2;\n for (uint256 i = 0; i < paddingLength; i++) {\n encodedString = string.concat(encodedString, \"0\");\n }\n return encodedString;\n}\n```\n\nWe also define a helper function for formatting data into a JSON string.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction prepareAttestationRequest(\n string memory attestationType,\n string memory sourceId,\n string memory requestBody\n) internal view returns (string[] memory, string memory) {\n // We read the API key from the .env file\n string memory apiKey = vm.envString(\"VERIFIER_API_KEY\");\n\n // Preparing headers\n string[] memory headers = prepareHeaders(apiKey);\n // Preparing body\n string memory body = prepareBody(\n attestationType,\n sourceId,\n requestBody\n );\n\n console.log(\n \"headers: %s\",\n string.concat(\"{\", headers[0], \", \", headers[1]),\n \"}n\"\n );\n console.log(\"body: %sn\", body);\n return (headers, body);\n}\n\nfunction prepareHeaders(\n string memory apiKey\n) internal pure returns (string[] memory) {\n string[] memory headers = new string[](2);\n headers[0] = string.concat('\"X-API-KEY\": ', apiKey);\n headers[1] = '\"Content-Type\": \"application/json\"';\n return headers;\n}\n\nfunction prepareBody(\n string memory attestationType,\n string memory sourceId,\n string memory body\n) internal pure returns (string memory) {\n return\n string.concat(\n '{\"attestationType\": ',\n '\"',\n attestationType,\n '\"',\n ', \"sourceId\": ',\n '\"',\n sourceId,\n '\"',\n ', \"requestBody\": ',\n body,\n \"}\"\n );\n}\n\n```\n\nIn the example repository, these are once again included within the [Base](https://github.com/flare-foundation/flare-foundry-starter/blob/master/script/fdcExample/Base.s.sol) library file.\n\nThus, the part of the script that prepares the verifier request looks like:\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"dependencies/forge-std-1.9.5/src/console.sol\";\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\nimport {Base} from \"./Base.s.sol\";\n...\n\nstring constant attestationTypeName = \"JsonApi\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n using Surl for *;\n\n // Setting request data\n    string public apiUrl = \"https://swapi.dev/api/people/3/\";\n    string public postprocessJq =\n        '{name: .name, height: .height, mass: .mass, numberOfFilms: .films | length, uid: (.url | split(\\\"/\\\") | .[-2] | tonumber)}';\n    string publicAbiSignature =\n        '{\\\"components\\\": ['\n        '{\\\"internalType\\\": \\\"string\\\", \\\"name\\\": \\\"name\\\", \\\"type\\\": \\\"string\\\"},'\n        '{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"height\\\", \\\"type\\\": \\\"uint256\\\"},'\n        '{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"mass\\\", \\\"type\\\": \\\"uint256\\\"},'\n        '{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"numberOfFilms\\\", \\\"type\\\": \\\"uint256\\\"},'\n        '{\\\"internalType\\\": \\\"uint256\\\", \\\"name\\\": \\\"uid\\\", \\\"type\\\": \\\"uint256\\\"}'\n        \"],\"\n        '\\\"name\\\": \\\"task\\\",\\\"type\\\": \\\"tuple\\\"}';\n\n    string public sourceName = \"WEB2\";\n\n    function prepareRequestBody(\n        string memory url,\n        string memory postprocessJq,\n        string memory publicAbiSignature\n    ) private pure returns (string memory) {\n        return\n            string.concat(\n                '{\"url\": \"',\n                url,\n                '\",\"postprocessJq\": \"',\n                postprocessJq,\n                '\",\"abi_signature\": \"',\n                publicAbiSignature,\n                '\"}'\n            );\n    }\n\n    function run() external {\n        // Preparing request data\n        string memory attestationType = Base.toUtf8HexString(\n            attestationTypeName\n        );\n        string memory sourceId = Base.toUtf8HexString(sourceName);\n        string memory requestBody = prepareRequestBody(\n            apiUrl,\n            postprocessJq,\n            publicAbiSignature\n        );\n\n (string[] memory headers, string memory body) =\n prepareAttestationRequest(attestationType, sourceId, requestBody);\n\n ...\n }\n}\n\n...\n```\n\nThe code above differs slightly from the [starter example](https://github.com/flare-foundation/flare-foundry-starter).\nBut, if we remove the ellipses `...` signifying missing code, we can still run the script.\n\nBecause of the `console.log` commands it will produce JSON strings that represent valid requests; we can then pass this to the [interactive verifier](https://fdc-verifiers-testnet.flare.network/verifier/btc/api-doc#/JsonApi/BTCJsonApiVerifierController_prepareRequest) to check the response.\n\nWe can run the script by calling the following commands in the console.\n\n```bash\nsource .env\n```\n\n```bash\nforge script script/fdcExample/JsonApi.s.sol:PrepareAttestationRequest --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast  --ffi\n```\n\nThe prerequisite for this is that the `.env` file is not missing the `PRIVATE KEY` and `COSTON2_RPC_URL` values.\nThe script can also access other chains; that can be achieved by replacing the `--rpc-url` value with `COSTON_RPC_URL`, `FLARE_RPC_URL`, or `SONGBIRD_RPC_URL`.\n\n## Post request to verifier\n\nTo post a request to a verifier server, we use the `surl` package.\nWe place `using Surl for *;` at the start of our `PostRequest` contract, and then call its `post` method on the verifier URL.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\n(, bytes memory data) = url.post(headers, body);\n```\n\nWe construct the URL by appending to the verifier address `https://fdc-verifiers-testnet.flare.network/` the path `verifier/btc/JsonApi/prepareRequest`.\nWe can do so dynamically with the following code.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\nstring memory baseUrl = \"https://fdc-verifiers-testnet.flare.network/\";\nstring memory url = string.concat(\n baseUrl,\n \"verifier/\",\n baseSourceName,\n \"/\",\n attestationTypeName,\n \"/prepareRequest\"\n);\nconsole.log(\"url: %s\", url);\nstring memory requestBody = string.concat(\n '{\"addressStr\": \"',\n addressStr,\n '\"}'\n);\n```\n\nLastly, we parse the return data from the verifier server.\nUsing the Foundry `parseJson` shortcode, and a custom struct `AttestationResponse`, we decode the returned data and extract from it the ABI encoded request.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction parseAttestationRequest(\n bytes memory data\n) internal pure returns (AttestationResponse memory) {\n string memory dataString = string(data);\n bytes memory dataJson = vm.parseJson(dataString);\n\n AttestationResponse memory response = abi.decode(\n dataJson,\n (AttestationResponse)\n );\n\n console.log(\"response status: %sn\", response.status);\n console.log(\"response abiEncodedRequest: \");\n console.logBytes(response.abiEncodedRequest);\n console.log(\"n\");\n\n return response;\n}\n```\n\n:::info\nIf everything went right, the `abiEncodedRequest` should look something like this.\n\n```\n0x\n494a736f6e417069000000000000000000000000000000000000000000000000\n5745423200000000000000000000000000000000000000000000000000000000\n0b62b2fe7066a5b56cd4cc859f4c802a02e2a0f84b5ad12893ef5a90651e588c\n0000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000060\n00000000000000000000000000000000000000000000000000000000000000a0\n0000000000000000000000000000000000000000000000000000000000000140\n000000000000000000000000000000000000000000000000000000000000001f\n68747470733a2f2f73776170692e6465762f6170692f70656f706c652f332f00\n0000000000000000000000000000000000000000000000000000000000000078\n7b6e616d653a202e6e616d652c206865696768743a202e6865696768742c206d\n6173733a202e6d6173732c206e756d6265724f6646696c6d733a202e66696c6d\n73207c206c656e6774682c207569643a20282e75726c207c2073706c69742822\n2f2229207c202e5b2d325d207c20746f6e756d626572297d0000000000000000\n0000000000000000000000000000000000000000000000000000000000000173\n7b22636f6d706f6e656e7473223a205b7b22696e7465726e616c54797065223a\n2022737472696e67222c20226e616d65223a20226e616d65222c202274797065\n223a2022737472696e67227d2c7b22696e7465726e616c54797065223a202275\n696e74323536222c20226e616d65223a2022686569676874222c202274797065\n223a202275696e74323536227d2c7b22696e7465726e616c54797065223a2022\n75696e74323536222c20226e616d65223a20226d617373222c20227479706522\n3a202275696e74323536227d2c7b22696e7465726e616c54797065223a202275\n696e74323536222c20226e616d65223a20226e756d6265724f6646696c6d7322\n2c202274797065223a202275696e74323536227d2c7b22696e7465726e616c54\n797065223a202275696e74323536222c20226e616d65223a2022756964222c20\n2274797065223a202275696e74323536227d5d2c226e616d65223a2022746173\n6b222c2274797065223a20227475706c65227d00000000000000000000000000\n```\n\nLet's break it down line by line:\n\n- **First line:** `toUtf8HexString(\"JsonApi\")`\n- **Second line:** `toUtf8HexString(\"testETH\")`\n- **Third line:** message integrity code (MIC), a hash of the whole response salted with a string `\"Flare\"`, ensures the integrity of the attestation\n- **Remaining lines:** ABI encoded `JsonApi.RequestBody` Solidity struct\n  :::\n\nWhat this demonstrates is that, with some effort, the `abiEncodedRequest` can be constructed manually.\n\nWe write the `abiEncodedRequest` to a file (`data/JsonApi_abiEncodedRequest.txt`) to it in the next step.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_abiEncodedRequest\"),\n    StringsBase.toHexString(response.abiEncodedRequest),\n    true\n);\n```\n\n## Submit request to FDC\n\nThis step transitions from off-chain request preparation to on-chain interaction with the FDC protocol. Now, we submit the validated request to the blockchain using deployed smart contracts.\n\n### Submit request\n\nThe entire submission process requires only five key steps:\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction submitAttestationRequest(\n    bytes memory abiEncodedRequest\n) internal {\n uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n vm.startBroadcast(deployerPrivateKey);\n IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n .getFdcRequestFeeConfigurations();\n uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n abiEncodedRequest\n );\n console.log(\"request fee: %sn\", requestFee);\n vm.stopBroadcast();\n\n vm.startBroadcast(deployerPrivateKey);\n\n IFdcHub fdcHub = ContractRegistry.getFdcHub();\n console.log(\"fcdHub address:\");\n console.log(address(fdcHub));\n console.log(\"n\");\n fdcHub.requestAttestation{value: requestFee}(abiEncodedRequest);\n vm.stopBroadcast();\n}\n```\n\n### Step-by-Step Breakdown\n\n1.  Load Private Key\n    The private key is read from the `.env` file using Foundry's `envUint` function:\n\n```solidity\n       uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n```\n\n2.  Obtain Request Fee\n    We retrieve the required requestFee from the `FdcRequestFeeConfigurations` contract:\n\n```solidity\n        IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n            .getFdcRequestFeeConfigurations();\n        uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n            abiEncodedRequest\n        );\n\n```\n\n    This is done in a separate broadcast to ensure `requestFee` is available before submitting the request.\n\n3. Access `FdcHub` Contract\n   Using the `ContractRegistry` library (from `flare-periphery`), we fetch the `FdcHub` contract:\n\n```solidity\n   IFdcHub fdcHub = ContractRegistry.getFdcHub();\n   console.log(\"fcdHub address:\");\n   console.log(address(fdcHub));\n   console.log(\"n\");\n```\n\n4. Submit the Attestation Request\n   We send the attestation request with the required fee:\n\n```solidity\n fdcHub.requestAttestation{value: requestFee}(abiEncodedRequest);\n```\n\n5.  Calculate the Voting Round Number\n    To determine the voting round in which the attestation request is processed, we query the `FlareSystemsManager` contract:\n\n```solidity\n       // Calculating roundId\n       IFlareSystemsManager flareSystemsManager = ContractRegistry\n           .getFlareSystemsManager();\n\n       uint32 roundId = flareSystemsManager.getCurrentVotingEpochId();\n       console.log(\"roundId: %sn\", Strings.toString(roundId));\n\n```\n\nThis can be done within the existing broadcast or in a new one (as done in the demo repository for better code organization).\n\n## Wait for response\n\nWe wait for the round to finalize.\nThis takes no more than 90 seconds.\n\nYou can check if the request was submitted successfully on the [AttestationRequests](https://coston2-systems-explorer.flare.rocks/attestation-request) page on the Flare Systems Explorer website.\nTo check if the round has been finalized, go to [Finalizations](https://coston2-systems-explorer.flare.rocks/finalizations) page.\n\nTo learn more about how the FDC protocol works, check [here](/fdc/overview).\n\n## Prepare proof request\n\nWe prepare the proof request in a similar manner as in the step Prepare the request, by string concatenation.\nWe import two new variables from the `.env` file; the URL of a verifier server and the corresponding API key.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\nstring memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\nstring memory apiKey = vm.envString(\"X_API_KEY\");\n```\n\nAlso, by repeatedly using the Foundry shortcode `vm.readLine`, we read the data, saved to a file in the previous step, to variables.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\nstring memory requestBytes = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_abiEncodedRequest\",\n        \".txt\"\n    )\n);\nstring memory votingRoundId = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_votingRoundId\",\n        \".txt\"\n    )\n);\n```\n\nThe code is as follows.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\ncontract RetrieveDataAndProof is Script {\n using Surl for *;\n\n function run() external {\n    string memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\n    string memory apiKey = vm.envString(\"X_API_KEY\");\n\n    string memory requestBytes = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_abiEncodedRequest\",\n            \".txt\"\n        )\n    );\n    string memory votingRoundId = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_votingRoundId\",\n            \".txt\"\n        )\n    );\n\n    console.log(\"votingRoundId: %sn\", votingRoundId);\n    console.log(\"requestBytes: %sn\", requestBytes);\n\n    string[] memory headers = Base.prepareHeaders(apiKey);\n    string memory body = string.concat(\n        '{\"votingRoundId\":',\n        votingRoundId,\n        ',\"requestBytes\":\"',\n        requestBytes,\n        '\"}'\n    );\n    console.log(\"body: %sn\", body);\n    console.log(\n        \"headers: %s\",\n        string.concat(\"{\", headers[0], \", \", headers[1]),\n        \"}n\"\n    );\n\n\n ...\n }\n}\n```\n\n## Post proof request to DA Layer\n\nWe post the proof request to a chosen DA Layer provider server also with the same code as we did in the previous step.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\nstring memory url = string.concat(\n daLayerUrl,\n // \"api/v0/fdc/get-proof-round-id-bytes\"\n \"api/v1/fdc/proof-by-request-round-raw\"\n);\nconsole.log(\"url: %sn\", url);\n\n(, bytes memory data) = Base.postAttestationRequest(url, headers, body);\n```\n\nParsing the returned data requires the definition of an auxiliary `struct`.\n\n{/* <!-- TODO rename after renaming --> */}\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nstruct ParsableProof {\n bytes32 attestationType;\n bytes32[] proofs;\n bytes responseHex;\n}\n```\n\nThe field `attestationType` holds the UTF8 encoded hex string of the attestation type name, padded to 32 bytes.\nThus, it should match the value of the `attestationType` parameter in the Prepare the request step.\nIn our case, that value is `0x4164647265737356616c69646974790000000000000000000000000000000000`.\n\nThe array `proofs` holds the Merkle proofs of our attestation request.\n\nLastly, `responseHex` is the ABI encoding of the chosen attestation type response struct.\nIn this case, it is the `IJsonApi.Response` struct.\nWe retrieve this data as follows.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\nbytes memory dataJson = parseData(data);\nParsableProof memory proof = abi.decode(dataJson, (ParsableProof));\n\nIJsonApi.Response memory proofResponse = abi.decode(\n proof.responseHex,\n (IJsonApi.Response)\n);\n```\n\n## Verify proof\n\nFDC optimizes on-chain storage costs by implementing a hybrid data verification system.\nInstead of storing complete datasets on-chain, it stores only Merkle proofs, while maintaining the actual data through trusted off-chain providers.\nThis approach significantly reduces gas costs while preserving data integrity.\n\nWhen requested, data providers supply the original data along with its corresponding Merkle proof.\nThe protocol verifies data authenticity by comparing the provided Merkle proof against the on-chain Merkle root.\nA successful match confirms the data's integrity and authenticity within the FDC system.\n\nWhile data verification is optional if you trust your data provider, FDC ensures transparency by making verification possible at any time.\nThis capability is crucial for maintaining system integrity and allowing users to independently verify data when needed, particularly in production environments.\n\nFDC provides verification functionality through the `FdcVerification` contract.\nTo verify address validity, we first format our data using the `IEVMTransaction.Proof` struct, which contains both the Merkle proof and the response data.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\nIJsonApi.Proof memory _proof = IJsonApi.Proof(\n proof.proofs,\n proofResponse\n);\n```\n\nWe then access the `FdcVerification` contract through the `ContractRegistry`, and feed it the proof.\nIf the proof is valid, the function `verifyJsonApi` will return `true`, otherwise `false`.\nAs before, we wrap the whole thing into a broadcast environment, using the `PRIVATE_KEY` variable from our `.env` file.\n\n```solidity title=\"scrip/fdcExample/JsonApi.s.sol\"\nuint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\nvm.startBroadcast(deployerPrivateKey);\n\nbool isValid = ContractRegistry\n .getFdcVerification()\n .verifyJsonApi(proof);\nconsole.log(\"proof is valid: %sn\", StringsBase.toString(isValid));\n\nvm.stopBroadcast();\n```\n\nIn actuality, we will only verify the proof within a deployed contract, which we will define in the next step.\nWhat we will do here instead is, we will save the proof to a file so that it can be later loaded into a variable.\nThe code that does this is as follows.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_proof\"),\n    StringsBase.toHexString(abi.encode(_proof)),\n    true\n);\n```\n\n## Use the data\n\n{/* TODO */}\n\nWe will now define a simple contract, that will demonstrate how the data can be used onchain.\nThe contract will receive character data from the [Star Wars API](https://swapi.dev/), and store it in a `StarWarsCharacter` struct.\nIt will do so only if the proof is valid.\n\n```solidity title=\"src/fdcExample/JsonApi.sol\"\nstruct StarWarsCharacter {\n    string name;\n    uint256 numberOfMovies;\n    uint256 apiUid;\n    uint256 bmi;\n}\n\n```\n\nWe will also need a `DataTransportObject` struct, that will allow us to decode the data.\n\n```solidity title=\"src/fdcExample/JsonApi.sol\"\nstruct DataTransportObject {\n    string name;\n    uint256 height;\n    uint256 mass;\n    uint256 numberOfMovies;\n    uint256 apiUid;\n}\n```\n\nFirst, we define an interface that the contract will inherit from.\nWe do so, so that we may contact the contract later through a script.\n\n```solidity title=\"src/fdcExample/JsonApi.sol\"\ninterface IStarWarsCharacterList {\n    function addCharacter(IJsonApi.Proof calldata data) external;\n    function getAllCharacters()\n        external\n        view\n        returns (StarWarsCharacter[] memory);\n}\n```\n\nThe interface exposes the two functions that a user might call, `addCharacter` and `getAllCharacters`.\nWe now define the contract as follows.\n\n```solidity title=\"src/fdcExample/JsonApi.sol\"\n\ncontract StarWarsCharacterList {\n    mapping(uint256 => StarWarsCharacter) public characters;\n    uint256[] public characterIds;\n\n    function isJsonApiProofValid(\n        IJsonApi.Proof calldata _proof\n    ) private view returns (bool) {\n        // Inline the check for now until we have an official contract deployed\n        return\n            ContractRegistry.auxiliaryGetIJsonApiVerification().verifyJsonApi(\n                _proof\n            );\n    }\n\n    function addCharacter(IJsonApi.Proof calldata data) public {\n        require(isJsonApiProofValid(data), \"Invalid proof\");\n\n        DataTransportObject memory dto = abi.decode(\n            data.data.responseBody.abi_encoded_data,\n            (DataTransportObject)\n        );\n\n        require(characters[dto.apiUid].apiUid == 0, \"Character already exists\");\n\n        StarWarsCharacter memory character = StarWarsCharacter({\n            name: dto.name,\n            numberOfMovies: dto.numberOfMovies,\n            apiUid: dto.apiUid,\n            bmi: (dto.mass * 100 * 100) / (dto.height * dto.height)\n        });\n\n        characters[dto.apiUid] = character;\n        characterIds.push(dto.apiUid);\n    }\n\n    function getAllCharacters()\n        public\n        view\n        returns (StarWarsCharacter[] memory)\n    {\n        StarWarsCharacter[] memory result = new StarWarsCharacter[](\n            characterIds.length\n        );\n        for (uint256 i = 0; i < characterIds.length; i++) {\n            result[i] = characters[characterIds[i]];\n        }\n        return result;\n    }\n}\n```\n\nWe deploy the contract through a simple script.\nThe script creates a new `StarWarsCharacterList` contract and writes its address to a file (`data/JsonApi_listenerAddress.txt`).\n\n```solidity title=\"scrip/fdcExample/DeployContract.s.sol\"\ncontract DeployContract is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n\n        StarWarsCharacterList characterList = new StarWarsCharacterList();\n        address _address = address(characterList);\n\n        vm.stopBroadcast();\n\n        Base.writeToFile(\n            dirPath,\n            string.concat(attestationTypeName, \"_address\"),\n            StringsBase.toHexString(abi.encodePacked(_address)),\n            true\n        );\n    }\n}\n```\n\nWe deploy the contract with the following console command.\n\n```bash\nforge script script/fdcExample/JsonApi.s.sol:DeployContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --verify --ffi\n```\n\nLastly, we define a script that interacts with the above contract.\nIt first reads the ABI-encoded proof data, and the contract address, from files.\nThen, it connects to the above contract at the saved address (this is why we require the interface).\nWith that, it can call the `registerJsonApi` method of the contract.\n\n```solidity title=\"script/fdcExample/JsonApi.s.sol\"\ncontract InteractWithContract is Script {\n    function run() external {\n        string memory addressString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_address\", \".txt\")\n        );\n        address _address = vm.parseAddress(addressString);\n        string memory proofString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_proof\", \".txt\")\n        );\n        bytes memory proofBytes = vm.parseBytes(proofString);\n        IJsonApi.Proof memory proof = abi.decode(proofBytes, (IJsonApi.Proof));\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n        IStarWarsCharacterList characterList = IStarWarsCharacterList(_address);\n        characterList.addCharacter(proof);\n        vm.stopBroadcast();\n    }\n}\n```\n\nWe run this script with the console command:\n\n```bash\nforge script script/fdcExample/JsonApi.s.sol:InteractWithContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --ffi\n\n```",
    "This guide focuses on the [ConfirmedBlockHeightExists](/fdc/attestation-types/confirmed-block-height-exists) attestation type, an efficient way to assert whether a specific `blockNumber` is confirmed with additional data to compute the block production rate within a given time window.\nThe primary contract interface for this attestation type is [`IConfirmedBlockHeightExists`](/fdc/reference/IFdcHub).\n\n### Type Definition\n\n```solidity title=\"ConfirmedBlockHeightExists.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name ConfirmedBlockHeightExists\n * @custom:id 0x03\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice An assertion that a block with `blockNumber` is confirmed.\n * It also provides data to compute the block production rate in the given time range.\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\n *\n *\n *  Current confirmation heights consensus:\n *\n *\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\n * | ------- | --------- | ----------------------- | ------------ |\n * | `BTC`   | 0         | 6                       | mediantime   |\n * | `DOGE`  | 2         | 60                      | mediantime   |\n * | `XRP`   | 3         | 3                       | close_time   |\n *\n *\n *\n *\n * @custom:lut `lowestQueryWindowBlockTimestamp`\n */\ninterface ConfirmedBlockHeightExists {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the Data Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\n     * @param blockNumber The number of the block the request wants a confirmation of.\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\n     */\n    struct RequestBody {\n        uint64 blockNumber;\n        uint64 queryWindow;\n    }\n\n    /**\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp` and `lowestQueryWindowBlockTimestamp` can be used to compute the average block production time in the specified block range.\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain. All attestation providers must agree on this number.\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 blockTimestamp;\n        uint64 numberOfConfirmations;\n        uint64 lowestQueryWindowBlockNumber;\n        uint64 lowestQueryWindowBlockTimestamp;\n    }\n}\n```\n\nThe request body is quite simple. You provide the `blockNumber` you want to confirm exists on the chain and the `queryWindow`—the length of the period in which the block production rate is to be computed (relative to the timestamp of the block you are requesting). Importantly, for the block to be considered visible, at least `X` blocks above it must be confirmed. This ensures that blocks not on the main chain are not confirmed. The number of confirmations required varies by chain and is listed in the specification.\n\n#### What Do You Get in Return?\n\nAs per the specification, you only receive information confirming that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`. If the block is not confirmed, the request is rejected (none of the attestation clients will confirm the response, and it will not be included in the Merkle tree). The response body contains the following fields:\n\n- **`blockTimestamp`**: The timestamp of the block with `blockNumber`.\n\n- **`numberOfConfirmations`**: The depth at which a block is considered confirmed depending on the chain. This is fixed per chain and specified in the documentation.\n\n- **`lowestQueryWindowBlockNumber`**: The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`. This allows you to gauge the average block production time in the specified block range.\n\n- **`lowestQueryWindowBlockTimestamp`**: The timestamp of the block at height `lowestQueryWindowBlockNumber`, indicating when the block was produced.\n\n### Example\n\nTo check the top block, you would typically query the RPC of the chain, get the top block, subtract the number of confirmations, and then query the attestation client to get the result. Alternatively, you can piggyback on the previous example, create a transaction, see the block it was included in, and proceed from there.\n\nEach attestation provider also exposes several diagnostic endpoints that allow you to get information about the chain it is operating on. The endpoint that is particularly interesting for this purpose is the `block-range` endpoint, which returns the range of blocks the attestation provider is currently observing.\n\nBy querying the `block-range` endpoint, you can get the range of blocks the attestation provider is observing and then request the confirmation of the top block in that range. This approach allows you to verify the top block efficiently without manually tracking the block production and confirmation process.\n\nUse the following code (also found in `tryConfirmedBlockHeightExists.ts`) and try to see how `prepareResponse` fares for blocks that are out of range for the current confirmation limit. This will help you understand how the attestation client handles requests for blocks that have not yet reached the necessary number of confirmations.\n\n```typescript title=\"tryConfirmedBlockHeightExists.ts\"\nconst { ATTESTATION_URL, ATTESTATION_API_KEY } = process.env;\n\nfunction toHex(data: string): string {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return \"0x\" + result.padEnd(64, \"0\");\n}\n\nfunction fromHex(data: string): string {\n  data = data.replace(/^(0x.)/, \"\");\n  return data\n    .split(/(ww)/g)\n    .filter((p) => !!p)\n    .map((c) => String.fromCharCode(parseInt(c, 16)))\n    .join(\"\");\n}\n\nasync function prepareAttestationResponse(\n  attestationType: string,\n  network: string,\n  sourceId: string,\n  requestBody: any,\n): Promise<AttestationResponse> {\n  const response = await fetch(\n    `${ATTESTATION_URL}/verifier/${network}/${attestationType}/prepareResponse`,\n    {\n      method: \"POST\",\n      headers: {\n        \"X-API-KEY\": ATTESTATION_API_KEY as string,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        attestationType: toHex(attestationType),\n        sourceId: toHex(sourceId),\n        requestBody: requestBody,\n      }),\n    },\n  );\n  const data = await response.json();\n  return data;\n}\n\nasync function getVerifierBlockRange(network: string): Promise<any> {\n  return (\n    await (\n      await fetch(\n        `${ATTESTATION_URL}/verifier/${network}/api/indexer/block-range`,\n        {\n          method: \"GET\",\n          headers: {\n            \"X-API-KEY\": ATTESTATION_API_KEY as string,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      )\n    ).json()\n  ).data;\n}\n\nasync function main() {\n  const btcRange = await getVerifierBlockRange(\"btc\");\n  const dogeRange = await getVerifierBlockRange(\"doge\");\n  const xrplRange = await getVerifierBlockRange(\"xrp\");\n\n  console.log(\"BTC Range: \", btcRange);\n  console.log(\n    await prepareAttestationResponse(\n      \"ConfirmedBlockHeightExists\",\n      \"btc\",\n      \"testBTC\",\n      {\n        blockNumber: btcRange.last.toString(),\n        queryWindow: \"123\",\n      },\n    ),\n  );\n\n  console.log(\"DOGE Range: \", dogeRange);\n  console.log(\n    await prepareAttestationResponse(\n      \"ConfirmedBlockHeightExists\",\n      \"doge\",\n      \"testDOGE\",\n      {\n        blockNumber: dogeRange.last.toString(),\n        queryWindow: \"123\",\n      },\n    ),\n  );\n\n  console.log(\"XRPL Range: \", xrplRange);\n  console.log(\n    await prepareAttestationResponse(\n      \"ConfirmedBlockHeightExists\",\n      \"xrp\",\n      \"testXRP\",\n      {\n        blockNumber: xrplRange.last.toString(),\n        queryWindow: \"123\",\n      },\n    ),\n  );\n}\n\nmain().then(() => process.exit(0));\n```\n\nWhich will output a response similar to this:\n\n```json\nBTC Range:  { first: 2578997, last: 2579392 }\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x436f6e6669726d6564426c6f636b486569676874457869737473000000000000',\n    sourceId: '0x7465737442544300000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708812188',\n    requestBody: { blockNumber: '2579392', queryWindow: '123' },\n    responseBody: {\n      blockTimestamp: '1708812188',\n      numberOfConfirmations: '6',\n      lowestQueryWindowBlockNumber: '2579391',\n      lowestQueryWindowBlockTimestamp: '1708812020'\n    }\n  }\n}\nDOGE Range:  { first: 5706001, last: 5974548 }\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x436f6e6669726d6564426c6f636b486569676874457869737473000000000000',\n    sourceId: '0x74657374444f4745000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708819752',\n    requestBody: { blockNumber: '5974548', queryWindow: '123' },\n    responseBody: {\n      blockTimestamp: '1708819752',\n      numberOfConfirmations: '60',\n      lowestQueryWindowBlockNumber: '5974543',\n      lowestQueryWindowBlockTimestamp: '1708819511'\n    }\n  }\n}\nXRPL Range:  { first: 45585486, last: 45678173 }\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x436f6e6669726d6564426c6f636b486569676874457869737473000000000000',\n    sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708822152',\n    requestBody: { blockNumber: '45678173', queryWindow: '123' },\n    responseBody: {\n      blockTimestamp: '1708822152',\n      numberOfConfirmations: '1',\n      lowestQueryWindowBlockNumber: '45678132',\n      lowestQueryWindowBlockTimestamp: '1708822022'\n    }\n  }\n}\n```\n\nThis attestation type is also useful for observing another important response: `INDETERMINATE`.\n\nAn `INDETERMINATE` response means that the attestation can't be confirmed (yet) because there are not enough confirmations for the block. This response indicates that the attestation client cannot confirm or reject the block for sure, but it might be valid in the future once more confirmations are received.\n\nTo see this in action, take the provided code and check for a block that has not yet been confirmed by the required amount. The easiest way to do this is to add 10 to the block range and observe the response. If done correctly, the response should be:\n\n```json\n{\n  \"status\": \"INDETERMINATE\"\n}\n```\n\nOne important thing to note is that all numbers are sent as strings (either decimal or hex). The main reason for this is that JavaScript does not have a native 64-bit integer type, and numbers are represented as 64-bit floating-point numbers, which can lead to incorrect representation of large numbers. Even though block numbers might not be that large, encoding JSON numbers as strings ensures they are represented correctly.",
    "## Reference Payment Nonexistence\n\n[Full specification on GitHub](https://github.com/flare-foundation/songbird-state-connector-protocol/blob/main/specs/attestations/active-types/ReferencedPaymentNonexistence.md).\n\nYou are getting more and more familiar with the attestation types, and you are starting to see that they are very powerful and can be used in many different ways. Let's check a more involved one—the `ReferencePaymentNonexistence` type.\n\nThis type is a bit more difficult to implement and properly use, as it requires the attestation client to do a lot of work—they need to prove that a certain payment has not been made. Instead of looking at the transaction and checking if it is valid, you will be looking at the block range and checking that no valid payment conforming to your requirements has been made in the specified block range.\n\n### Type Definition\n\n```solidity title=\"ReferencedPaymentNonexistence.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name ReferencedPaymentNonexistence\n * @custom:id 0x04\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\n *\n *\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed.\n *\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\n *\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\n * The criteria and timestamp are chain specific.\n * ### UTXO (Bitcoin and Dogecoin)\n *\n *\n * Criteria for the transaction:\n *\n *\n * - It is not coinbase transaction.\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\n *\n *\n * Timestamp is `mediantime`.\n\n * ### XRPL\n *\n *\n *\n * Criteria for the transaction:\n * - The transaction is of type payment.\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\n * - One of the following is true:\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\n *\n *\n * Timestamp is `close_time` converted to UNIX time.\n *\n * @custom:lut `minimalBlockTimestamp`\n */\ninterface ReferencedPaymentNonexistence {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the Data Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ReferencePaymentNonexistence attestation type\n     * @param minimalBlockNumber The start block of the search range.\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\n     * @param deadlineTimestamp The timestamp to be included in the search range.\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\n     * @param amount The requested amount in minimal units that had to be paid.\n     * @param standardPaymentReference The requested standard payment reference.\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\n     */\n    struct RequestBody {\n        uint64 minimalBlockNumber;\n        uint64 deadlineBlockNumber;\n        uint64 deadlineTimestamp;\n        bytes32 destinationAddressHash;\n        uint256 amount;\n        bytes32 standardPaymentReference;\n    }\n\n    /**\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\n     * The specified search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 minimalBlockTimestamp;\n        uint64 firstOverflowBlockNumber;\n        uint64 firstOverflowBlockTimestamp;\n    }\n}\n```\n\n#### Request Body\n\nThe request body for the `ReferencePaymentNonexistence` attestation type is a bit larger, as you need to specify the range of blocks to check and the criteria for the payment to check.\n\n- **`minimalBlockNumber`**: The start block of the search range.\n\n- **`deadlineBlockNumber`**: The block number to be included in the search range.\n\n- **`deadlineTimestamp`**: The timestamp to be included in the search range. By including both block number and timestamp, the requested range will encompass all blocks from `minimalBlockNumber` to `deadlineBlockNumber` and all blocks with timestamps from `minimalBlockTimestamp` to `deadlineTimestamp`.\n\n- **`destinationAddressHash`**: The standard address hash of the address to which the payment should have been made.\n\n- **`amount`**: The requested amount in minimal units that should have been paid. The amount is chain specific.\n\n- **`standardPaymentReference`**: The requested standard payment reference that the payment should have had.\n\n#### Response Body\n\nThe response body is simpler and essentially contains the searched range:\n\n- **`minimalBlockTimestamp`**: The timestamp of the minimal block that was included in the search range—this is the timestamp of the block with `minimalBlockNumber`.\n\n- **`firstOverflowBlockNumber`**: The height of the first overflow block. This is the first block with a block number higher than `deadlineBlockNumber` and a timestamp later than `deadlineTimestamp`.\n\n- **`firstOverflowBlockTimestamp`**: The timestamp of the first overflow block. This is the timestamp of the first block with a block number higher than `deadlineBlockNumber` and a timestamp later than `deadlineTimestamp`.\n\n#### Confirmation\n\nIf the request is confirmed, it means that there was no payment in the specified range (including the minimal block, but excluding the maximal block) with an amount greater than or equal to the requested amount and with the requested reference.\n\nThe full rules for verification are quite complex (and chain-dependent) and are available in the [specification](https://github.com/flare-foundation/songbird-state-connector-protocol/blob/main/specs/attestations/active-types/ReferencedPaymentNonexistence.md#verification). The important point is that the request is confirmed if no transaction meeting the specified criteria is found in the search range.\n\n### Example\n\nTo produce a correct and thorough example that allows you to test everything properly, you need to be careful. Since you are proving a negative, any mistake during request preparation can result in a transaction that was not made (a simple mis-encoding of a memo field would almost certainly produce a non-existing transaction) and give a false sense of security.\n\nTo ensure accuracy, structure your request as follows:\n\n1. **Create a transaction** with a reference payment and some nonzero value.\n2. **Confirm `Payment` attestation request** to make sure you get back the correct reference and value, ensuring the transaction is seen. Use the information about when this transaction happened to construct a range for the next step, ensuring it contains your transaction.\n3. **Make three requests for non-existing payments**:\n   - **Correct (or lower) value and correct reference**: This should return `INVALID`, as the verifier can't prove the non-existence of such a transaction.\n   - **Correct value but slightly wrong payment reference**: Change just one index of the reference. This should be confirmed, as no such transaction exists (the payment reference does not match).\n   - **Too large value but correct payment reference**: This should be confirmed, as the transaction with the payment reference exists but does not transfer enough value.\n\n#### XRP Ledger\n\nThe example code that showcases this on testnet XRP Ledger is available in `tryXRPLPaymentNonExistence.ts`.\n\n```typescript title=\"tryXRPLPaymentNonExistence.ts\"\nconst xrpl = require(\"xrpl\");\n\nconst { XRPL_PRIVATE_KEY, ATTESTATION_URL, ATTESTATION_API_KEY } = process.env;\nconst receiverAddress = \"r9RLXvWuRro3RX33pk4xsN58tefYZ8Tvbj\";\n\nfunction toHex(data: string): string {\n  var result = \"\";\n  for (var i = 0; i < data.length; i++) {\n    result += data.charCodeAt(i).toString(16);\n  }\n  return \"0x\" + result.padEnd(64, \"0\");\n}\n\nfunction fromHex(data: string): string {\n  data = data.replace(/^(0x.)/, \"\");\n  return data\n    .split(/(ww)/g)\n    .filter((p) => !!p)\n    .map((c) => String.fromCharCode(parseInt(c, 16)))\n    .join(\"\");\n}\n\nasync function prepareAttestationResponse(\n  attestationType: string,\n  network: string,\n  sourceId: string,\n  requestBody: any,\n): Promise<AttestationResponse> {\n  const response = await fetch(\n    `${ATTESTATION_URL}/verifier/${network}/${attestationType}/prepareResponse`,\n    {\n      method: \"POST\",\n      headers: {\n        \"X-API-KEY\": ATTESTATION_API_KEY as string,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        attestationType: toHex(attestationType),\n        sourceId: toHex(sourceId),\n        requestBody: requestBody,\n      }),\n    },\n  );\n  const data = await response.json();\n  return data;\n}\n\nasync function getXRPLclient(): Promise<any> {\n  const client = new xrpl.Client(\"wss://s.altnet.rippletest.net:51233\");\n  await client.connect();\n\n  return client;\n}\n\nasync function sendXRPLTransaction(\n  message: string = \"\",\n  amount: number = 10,\n  target: string = \"r9RLXvWuRro3RX33pk4xsN58tefYZ8Tvbj\",\n): Promise<string> {\n  const client = await getXRPLclient();\n\n  const test_wallet = xrpl.Wallet.fromSeed(XRPL_PRIVATE_KEY);\n\n  // Standard payment reference must be 32 bytes - so we right pad with 0\n  const MemoData = xrpl.convertStringToHex(message).padEnd(64, \"0\");\n  const MemoType = xrpl.convertStringToHex(\"Text\");\n  const MemoFormat = xrpl.convertStringToHex(\"text/plain\");\n\n  let memos = [];\n  if (message) {\n    memos.push({\n      Memo: {\n        MemoType: MemoType,\n        MemoData: MemoData,\n        MemoFormat: MemoFormat,\n      },\n    });\n  }\n\n  const transaction = await client.autofill({\n    TransactionType: \"Payment\",\n    Account: test_wallet.address,\n    Amount: amount.toString(),\n    Destination: target,\n    Memos: memos,\n  });\n\n  const signed = test_wallet.sign(transaction);\n  console.log(\n    `See transaction at https://testnet.xrpl.org/transactions/${signed.hash}`,\n  );\n  await client.submitAndWait(signed.tx_blob);\n\n  await client.disconnect();\n\n  // sleep for 10 seconds to allow the transaction to be processed\n  await new Promise((resolve) => setTimeout(resolve, 10 * 1000));\n  console.log(\"Payment:\");\n  // 1. prove the payment:\n  const resultPayment = await prepareAttestationResponse(\n    \"Payment\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      transactionId: \"0x\" + signed.hash,\n      inUtxo: \"0\",\n      utxo: \"0\",\n    },\n  );\n\n  if (resultPayment.status != \"VALID\") {\n    console.log(\"Something wrong when confirming payment\");\n  }\n  console.log(resultPayment);\n  if (\n    resultPayment.response.responseBody.standardPaymentReference !=\n    \"0x\" + MemoData\n  ) {\n    console.log(\"Something wrong with message reference\");\n    console.log(resultPayment.response.responseBody.standardPaymentReference);\n    console.log(MemoData);\n  }\n  if (\n    resultPayment.response.responseBody.receivingAddressHash !=\n    web3.utils.soliditySha3(target)\n  ) {\n    console.log(\"Something wrong with target address hash\");\n  }\n\n  // Get information about transaction: block and block timestamp -> we will need this to create the range, where the transaction has happened\n  console.log(\"Failing non existence proof:\");\n  const blockNumber = Number(resultPayment.response.responseBody.blockNumber);\n  const blockTimestamp = Number(\n    resultPayment.response.responseBody.blockTimestamp,\n  );\n\n  const targetRange = {\n    minimalBlockNumber: (blockNumber - 5).toString(), // Search few block before\n    deadlineBlockNumber: (blockNumber + 1).toString(), // Search a few blocks after, but not too much, as they need to already be indexed by attestation clients\n    deadlineTimestamp: (blockTimestamp + 3).toString(), // Search a bit after\n    destinationAddressHash: web3.utils.soliditySha3(target), // The target address for transaction\n  };\n\n  // Try to verify non existence for a transaction and correct parameters\n  // This should not verify it\n\n  const resultFailedNonExistence = await prepareAttestationResponse(\n    \"ReferencedPaymentNonexistence\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      ...targetRange,\n      amount: amount.toString(),\n      standardPaymentReference: \"0x\" + MemoData,\n    },\n  );\n\n  console.log(resultFailedNonExistence);\n\n  if (resultFailedNonExistence.status != \"INVALID\") {\n    console.log(\"Something wrong with failed non existence\");\n  }\n\n  console.log(\"Successful non existence proofs:\");\n\n  // Change the memo field a bit and successfully prove non existence\n  let wrongMemoData = xrpl.convertStringToHex(message).padEnd(64, \"1\"); // We pad 1 instead of 0\n  const resultWrongMemoNonExistence = await prepareAttestationResponse(\n    \"ReferencedPaymentNonexistence\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      ...targetRange,\n      amount: amount.toString(),\n      standardPaymentReference: \"0x\" + wrongMemoData,\n    },\n  );\n\n  console.log(resultWrongMemoNonExistence);\n\n  if (resultWrongMemoNonExistence.status != \"VALID\") {\n    console.log(\"Something wrong with wrong memo non existence\");\n  }\n\n  // Change the value and successfully prove non existence.\n\n  const resultWrongAmountNonExistence = await prepareAttestationResponse(\n    \"ReferencedPaymentNonexistence\",\n    \"xrp\",\n    \"testXRP\",\n    {\n      ...targetRange,\n      amount: (amount + 1).toString(), // Increase the amount, so the transaction we made is now invalid\n      standardPaymentReference: \"0x\" + MemoData,\n    },\n  );\n\n  console.log(resultWrongAmountNonExistence);\n\n  if (resultWrongAmountNonExistence.status != \"VALID\") {\n    console.log(\"Something wrong with wrong amount non existence\");\n  }\n}\n\nasync function main() {\n  await sendXRPLTransaction(\"Hello world!\");\n}\n\nmain().then(() => process.exit(0));\n```\n\nKeep in mind, that the requested range can be quite large, so the verifiers might not be able to confirm the response (as they might not have the view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`), so the request might be rejected.\n\n```json\n// See transaction at https://testnet.xrpl.org/transactions/C2B493B8AE2E3C105D004D8AFBB4AFB5CA758608504CCE895C9331291DA19D75\n// Payment:\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x5061796d656e7400000000000000000000000000000000000000000000000000',\n    sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708830051',\n    requestBody: {\n      transactionId: '0xC2B493B8AE2E3C105D004D8AFBB4AFB5CA758608504CCE895C9331291DA19D75',\n      inUtxo: '0',\n      utxo: '0'\n    },\n    responseBody: {\n      blockNumber: '45680731',\n      blockTimestamp: '1708830051',\n      sourceAddressHash: '0xa1ca3089c3e9f4c6e9ccf2bfb65bcf3e9d7544a092c79d642d5d34a54e0267e1',\n      receivingAddressHash: '0x0555194538763da400394fc7184432e9a006565fa710392ea1a86486eb83920f',\n      intendedReceivingAddressHash: '0x0555194538763da400394fc7184432e9a006565fa710392ea1a86486eb83920f',\n      standardPaymentReference: '0x48656C6C6F20776F726C64210000000000000000000000000000000000000000',\n      spentAmount: '22',\n      intendedSpentAmount: '22',\n      receivedAmount: '10',\n      intendedReceivedAmount: '10',\n      oneToOne: true,\n      status: '0'\n    }\n  }\n}\nFailing non existence proof:\n{ status: 'INVALID' }\nSuccessful non existence proofs:\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x5265666572656e6365645061796d656e744e6f6e6578697374656e6365000000',\n    sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708830033',\n    requestBody: {\n      minimalBlockNumber: '45680726',\n      deadlineBlockNumber: '45680732',\n      deadlineTimestamp: '1708830054',\n      destinationAddressHash: '0x0555194538763da400394fc7184432e9a006565fa710392ea1a86486eb83920f',\n      amount: '10',\n      standardPaymentReference: '0x48656C6C6F20776F726C64211111111111111111111111111111111111111111'\n    },\n    responseBody: {\n      minimalBlockTimestamp: '45680726',\n      firstOverflowBlockNumber: '45680733',\n      firstOverflowBlockTimestamp: '1708830060'\n    }\n  }\n}\n{\n  status: 'VALID',\n  response: {\n    attestationType: '0x5265666572656e6365645061796d656e744e6f6e6578697374656e6365000000',\n    sourceId: '0x7465737458525000000000000000000000000000000000000000000000000000',\n    votingRound: '0',\n    lowestUsedTimestamp: '1708830033',\n    requestBody: {\n      minimalBlockNumber: '45680726',\n      deadlineBlockNumber: '45680732',\n      deadlineTimestamp: '1708830054',\n      destinationAddressHash: '0x0555194538763da400394fc7184432e9a006565fa710392ea1a86486eb83920f',\n      amount: '11',\n      standardPaymentReference: '0x48656C6C6F20776F726C64210000000000000000000000000000000000000000'\n    },\n    responseBody: {\n      minimalBlockTimestamp: '45680726',\n      firstOverflowBlockNumber: '45680733',\n      firstOverflowBlockTimestamp: '1708830060'\n    }\n  }\n}\n```",
    "The [AddressValidity](/fdc/attestation-types/address-validity) attestation type validates whether a string represents a valid address on supported blockchain networks (`BTC`, `DOGE`, and `XRP`).\nThis validation ensures addresses meet chain-specific formatting and checksum requirements before they're used in transactions or smart contracts.\nThe full specification is available on the official [specification repo](/fdc/attestation-types/address-validity).\n\nThe primary contract interface for this attestation type is [`IAddressValidity`](/fdc/reference/IFdcHub). Let's walk through validating a Bitcoin testnet address using the FDC protocol.\nWe will use the address `mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs` as an example throughout this guide.\nYou can swap this with any valid testnet address from the supported chains.\nYou can follow this tutorial with any other valid address - just make sure it is a valid testnet address.\n\nThis validation process works identically for `BTC`, `DOGE`, and `XRP` addresses, with only minor chain-specific parameter adjustments which we'll highlight throughout the guide.\n\nIn this guide, we will follow the steps outlined in the [FDC overview](/fdc/overview).\n\nOur implementation requires handling the FDC voting round finalization process.\nTo manage this, we will create separate scripts in `script/fdcExample/AddressValidity.s.sol` that handle different stages of the validation process:\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\n...\n\n// Configuration constants\nstring constant attestationTypeName = \"AddressValidity\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n ...\n}\n\ncontract SubmitAttestationRequest is Script {\n ...\n}\n\ncontract RetrieveDataAndProof is Script {\n ...\n}\n\ncontract Deploy is Script {\n ...\n}\n...\n```\n\nThe names of included contracts mostly mirror the steps described in the [FDC overview](/fdc/overview).\n\nTo bridge the separate script executions, we will save the relevant data of each script to a file in the `dirPath` folder.\nEach succeeding script will then read that file to load the data.\n\n## Prepare request\n\nA JSON request to the verifier follows the same structure for all attestation types, with field values varying per type.\n\n### Required Fields\n\n- `attestationType`: UTF8 hex string encoding of the attestation type name, zero-padded to 32 bytes.\n- `sourceId`: UTF8 hex string encoding of the data source identifier name, zero-padded to 32 bytes.\n- `requestBody`: Specific to each attestation type.\n\nFor `AddressValidity`, `requestBody` contains a single field:\n\n- `addressString`: The address to verify.\n\n### Reference Documentation\n\n- [AddressValidity Specification](/fdc/attestation-types/address-validity)\n- [Verifier Interactive Docs](https://fdc-verifiers-testnet.flare.network/verifier/btc/api-doc#/AddressValidity/BTCAddressValidityVerifierController_prepareRequest)\n- API available for [DOGE](https://fdc-verifiers-testnet.flare.network/verifier/doge/api-doc#/AddressValidity/BTCAddressValidityVerifierController_prepareRequest) and [XRP](https://fdc-verifiers-testnet.flare.network/verifier/xrp/api-doc#/AddressValidity/BTCAddressValidityVerifierController_prepareRequest).\n\n### Example Values\n\n- `attestationType`: UTF8 hex encoding of `AddressValidity`, zero-padded to 32 bytes.\n- `sourceId`: UTF8 hex encoding of `testBTC`, zero-padded to 32 bytes.\n  - `\"test\"` prefix denotes Bitcoin testnet.\n  - Supports deployment on Flare testchains (`Coston` or `Coston2`).\n  - Replace `testBTC` with `testDOGE` or `testXRP` for other chains.\n- `addressString`: `mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs`.\n\n### Encoding Functions\n\nTo encode values into UTF8 hex:\n\n- `toUtf8HexString`: Converts a string to UTF8 hex.\n- `toHexString`: Zero-right-pads the string to 32 bytes.\n\nThese functions are included in the [Base library](https://github.com/flare-foundation/flare-foundry-starter/blob/master/script/fdcExample/Base.s.sol) within the [example repository](https://github.com/flare-foundation/flare-foundry-starter), but they can also be defined locally in your contract or script.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction toHexString(\n bytes memory data\n) public pure returns (string memory) {\n bytes memory alphabet = \"0123456789abcdef\";\n\n bytes memory str = new bytes(2 + data.length * 2);\n str[0] = \"0\";\n str[1] = \"x\";\n for (uint i = 0; i < data.length; i++) {\n str[2 + i * 2] = alphabet[uint(uint8(data[i] >> 4))];\n str[3 + i * 2] = alphabet[uint(uint8(data[i] & 0x0f))];\n }\n return string(str);\n}\n```\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction toUtf8HexString(\n string memory _string\n) internal pure returns (string memory) {\n string memory encodedString = toHexString(\n abi.encodePacked(_string)\n );\n uint256 stringLength = bytes(encodedString).length;\n require(stringLength <= 64, \"String too long\");\n uint256 paddingLength = 64 - stringLength + 2;\n for (uint256 i = 0; i < paddingLength; i++) {\n encodedString = string.concat(encodedString, \"0\");\n }\n return encodedString;\n}\n```\n\nWe also define a helper function for formatting data into a JSON string.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction prepareAttestationRequest(\n string memory attestationType,\n string memory sourceId,\n string memory requestBody\n) internal view returns (string[] memory, string memory) {\n // We read the API key from the .env file\n string memory apiKey = vm.envString(\"VERIFIER_API_KEY\");\n\n // Preparing headers\n string[] memory headers = prepareHeaders(apiKey);\n // Preparing body\n string memory body = prepareBody(\n attestationType,\n sourceId,\n requestBody\n );\n\n console.log(\n \"headers: %s\",\n string.concat(\"{\", headers[0], \", \", headers[1]),\n \"}n\"\n );\n console.log(\"body: %sn\", body);\n return (headers, body);\n}\n\nfunction prepareHeaders(\n string memory apiKey\n) internal pure returns (string[] memory) {\n string[] memory headers = new string[](2);\n headers[0] = string.concat('\"X-API-KEY\": ', apiKey);\n headers[1] = '\"Content-Type\": \"application/json\"';\n return headers;\n}\n\nfunction prepareBody(\n string memory attestationType,\n string memory sourceId,\n string memory body\n) internal pure returns (string memory) {\n return\n string.concat(\n '{\"attestationType\": ',\n '\"',\n attestationType,\n '\"',\n ', \"sourceId\": ',\n '\"',\n sourceId,\n '\"',\n ', \"requestBody\": ',\n body,\n \"}\"\n );\n}\n\n```\n\nIn the example repository, these are once again included within the [Base](https://github.com/flare-foundation/flare-foundry-starter/blob/master/script/fdcExample/Base.s.sol) library file.\n\nThus, the part of the script that prepares the verifier request looks like:\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"dependencies/forge-std-1.9.5/src/console.sol\";\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\nimport {Base} from \"./Base.s.sol\";\n...\n\nstring constant attestationTypeName = \"AddressValidity\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n using Surl for *;\n\n // Setting request data\n string public addressStr = \"mg9P9f4wr9w7c1sgFeiTC5oMLYXCc2c7hs\"; // Id of the Bitcoin address to be validated\n string public baseSourceName = \"btc\"; // Part of verifier URL\n string public sourceName = \"testBTC\"; // Bitcoin chain ID\n\n function prepareRequestBody(\n string memory addressStr\n ) private pure returns (string memory) {\n return string.concat('{\"addressStr\": \"', addressStr, '\"}');\n }\n\n function run() external {\n // Preparing request data\n string memory attestationType = Base.toUtf8HexString(\n attestationTypeName\n );\n string memory sourceId = Base.toUtf8HexString(sourceName);\n string memory requestBody = prepareRequestBody(addressStr);\n (string[] memory headers, string memory body) = Base\n .prepareAttestationRequest(attestationType, sourceId, requestBody);\n\n // TODO change key in .env\n // string memory baseUrl = \"https://testnet-verifier-fdc-test.aflabs.org/\";\n string memory baseUrl = vm.envString(\"VERIFIER_URL_TESTNET\");\n string memory url = string.concat(\n baseUrl,\n \"verifier/\",\n baseSourceName,\n \"/\",\n attestationTypeName,\n \"/prepareRequest\"\n );\n console.log(\"url: %s\", url);\n\n (string[] memory headers, string memory body) = prepareAttestationRequest(attestationType, sourceId, requestBody);\n\n ...\n }\n}\n\n...\n```\n\nIf you are accessing a different chain, replace the `baseSourceName` with an appropriate value, `doge` or `xrp`.\n\nThe code above differs slightly from the [starter example](https://github.com/flare-foundation/flare-foundry-starter).\nBut, if we remove the ellipses `...` signifying missing code, we can still run the script.\n\nBecause of the `console.log` commands it will produce JSON strings that represent valid requests; we can then pass this to the [interactive verifier](https://fdc-verifiers-testnet.flare.network/verifier/btc/api-doc#/AddressValidity/BTCAddressValidityVerifierController_prepareRequest) to check what the response is.\n\nWe can run the script by calling the following commands in the console.\n\n```bash\nsource .env\n```\n\n```bash\nforge script script/fdcExample/AddressValidity.s.sol:PostRequest --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast  --ffi\n```\n\nThe prerequisite for this is that the `.env` file is not missing the `PRIVATE KEY` and `COSTON2_RPC_URL` values.\nThe script can also access other chains; that can be achieved by replacing the `--rpc-url` value with `COSTON_RPC_URL`, `FLARE_RPC_URL`, or `SONGBIRD_RPC_URL`.\n\n## Post request to verifier\n\nBefore submitting address validation requests to the FDC protocol, we first need to prepare and send them to a verifier server.\nThis section walks through the request submission process using the `surl` package.\nWe place `using Surl for *;` at the start of our `PostRequest` contract, and then call its `post` method on the verifier URL.\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\n(, bytes memory data) = url.post(headers, body);\n```\n\nWe construct the URL by appending to the verifier address `https://fdc-verifiers-testnet.flare.network/` the path `verifier/btc/AddressValidity/prepareRequest`.\nWe can do so dynamically with the following code.\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\nstring memory baseUrl = \"https://fdc-verifiers-testnet.flare.network/\";\nstring memory url = string.concat(\n baseUrl,\n \"verifier/\",\n baseSourceName,\n \"/\",\n attestationTypeName,\n \"/prepareRequest\"\n);\nconsole.log(\"url: %s\", url);\nstring memory requestBody = string.concat(\n '{\"addressStr\": \"',\n addressStr,\n '\"}'\n);\n```\n\nLastly, we parse the return data from the verifier server.\nUsing the Foundry `parseJson` shortcode, and a custom struct `AttestationResponse`, we decode the returned data and extract from it the ABI encoded request.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction parseAttestationRequest(\n bytes memory data\n) internal pure returns (AttestationResponse memory) {\n string memory dataString = string(data);\n bytes memory dataJson = vm.parseJson(dataString);\n\n AttestationResponse memory response = abi.decode(\n dataJson,\n (AttestationResponse)\n );\n\n console.log(\"response status: %sn\", response.status);\n console.log(\"response abiEncodedRequest: \");\n console.logBytes(response.abiEncodedRequest);\n console.log(\"n\");\n\n return response;\n}\n```\n\n:::info\n\nIf everything went right, the `abiEncodedRequest` should look something like this.\n\n```\n0x\n4164647265737356616c69646974790000000000000000000000000000000000\n7465737442544300000000000000000000000000000000000000000000000000\n7d2ef938d4ffd2392f588bf46563e07ab885b15fead91c1bb99b16f465b71a68\n0000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000022\n6d6739503966347772397737633173674665695443356f4d4c59584363326337\n6873000000000000000000000000000000000000000000000000000000000000\n```\n\nLet's break it down line by line:\n\n- **First line:** `toUtf8HexString(\"AddressValidity\")`\n- **Second line:** `toUtf8HexString(\"testBTC\")`\n- **Third line:** message integrity code (MIC), a hash of the whole response salted with a string `\"Flare\"`, ensures the integrity of the attestation\n- **Remaining lines:** ABI encoded `AddressValidity.RequestBody` Solidity struct\n\n:::\n\nWhat this demonstrates is that, with some effort, the `abiEncodedRequest` can be constructed manually.\n\n## Submit request to FDC\n\nThis step transitions from off-chain request preparation to on-chain interaction with the FDC protocol. Now, we submit the validated request to the blockchain using deployed smart contracts.\n\n### Submit request\n\nThe entire submission process requires only five key steps:\n\n```solidity title=\"script/fdcExample/Base.s.sol\"\nfunction submitAttestationRequest(\n    bytes memory abiEncodedRequest\n) internal {\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    vm.startBroadcast(deployerPrivateKey);\n\n    IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n        .getFdcRequestFeeConfigurations();\n    uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n        abiEncodedRequest\n    );\n    console.log(\"request fee: %sn\", requestFee);\n    vm.stopBroadcast();\n\n    vm.startBroadcast(deployerPrivateKey);\n\n    IFdcHub fdcHub = ContractRegistry.getFdcHub();\n    console.log(\"fcdHub address:\");\n    console.log(address(fdcHub));\n    console.log(\"n\");\n\n    fdcHub.requestAttestation{value: requestFee}(abiEncodedRequest);\n    vm.stopBroadcast();\n}\n```\n\n### Step-by-Step Breakdown\n\n1.  Load Private Key\n    The private key is read from the `.env` file using Foundry's `envUint` function:\n\n```solidity\n       uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n```\n\n2.  Obtain Request Fee\n    We retrieve the required requestFee from the `FdcRequestFeeConfigurations` contract:\n\n```solidity\n        IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n            .getFdcRequestFeeConfigurations();\n        uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n            response.abiEncodedRequest\n        );\n\n```\n\n    This is done in a separate broadcast to ensure `requestFee` is available before submitting the request.\n\n3. Access `FdcHub` Contract\n   Using the `ContractRegistry` library (from `flare-periphery`), we fetch the `FdcHub` contract:\n\n```solidity\n   IFdcHub fdcHub = ContractRegistry.getFdcHub();\n   console.log(\"fcdHub address:\");\n   console.log(address(fdcHub));\n   console.log(\"n\");\n```\n\n4. Submit the Attestation Request\n   We send the attestation request with the required fee:\n\n```solidity\n fdcHub.requestAttestation{value: requestFee}(response.abiEncodedRequest);\n```\n\n5.  Calculate the Voting Round Number\n    To determine the voting round in which the attestation request is processed, we query the `FlareSystemsManager` contract:\n\n```solidity\n       // Calculating roundId\n       IFlareSystemsManager flareSystemsManager = ContractRegistry\n           .getFlareSystemsManager();\n\n       uint32 roundId = flareSystemsManager.getCurrentVotingEpochId();\n       console.log(\"roundId: %sn\", Strings.toString(roundId));\n\n```\n\nThis can be done within the existing broadcast or in a new one (as done in the demo repository for better code organization).\n\n## Wait for response\n\nWe wait for the round to finalize.\nThis takes no more than 90 seconds.\n\nYou can check if the request was submitted successfully on the [AttestationRequests](https://coston2-systems-explorer.flare.rocks/attestation-request) page on the Flare Systems Explorer website.\nTo check if the round has been finalized, go to [Finalizations](https://coston2-systems-explorer.flare.rocks/finalizations) page.\n\nIf you want to learn more about how the FDC protocol works, check [here](/fdc/overview).\n\n## Prepare proof request\n\nWe prepare the proof request in a similar manner as in the step Prepare the request, by string concatenation.\nWe import two new variables from the `.env` file; the URL of a verifier server and the corresponding API key.\nnote\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\nstring memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\nstring memory apiKey = vm.envString(\"X_API_KEY\");\n```\n\nAlso, by repeatedly using the Foundry shortcode `vm.readLine`, we read the data, saved to a file in the previous step, to variables.\n\n```solidity\nstring memory votingRoundId = vm.readLine(filePath);\nstring memory requestBytes = vm.readLine(filePath);\n```\n\nThe code is as follows.\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\ncontract RetrieveDataAndProof is Script {\n using Surl for *;\n\n function run() external {\n    string memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\n    string memory apiKey = vm.envString(\"X_API_KEY\");\n\n    string memory requestBytes = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_abiEncodedRequest\",\n            \".txt\"\n        )\n    );\n    string memory votingRoundId = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_votingRoundId\",\n            \".txt\"\n        )\n    );\n\n    console.log(\"votingRoundId: %sn\", votingRoundId);\n    console.log(\"requestBytes: %sn\", requestBytes);\n\n    string[] memory headers = Base.prepareHeaders(apiKey);\n    string memory body = string.concat(\n        '{\"votingRoundId\":',\n        votingRoundId,\n        ',\"requestBytes\":\"',\n        requestBytes,\n        '\"}'\n    );\n    console.log(\"body: %sn\", body);\n    console.log(\n        \"headers: %s\",\n        string.concat(\"{\", headers[0], \", \", headers[1]),\n        \"}n\"\n    );\n\n\n ...\n }\n}\n```\n\n## Post proof request to DA Layer\n\nWe post the proof request to a chosen DA Layer provider server also with the same code as we did in the previous step.\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\nstring memory url = string.concat(\n daLayerUrl,\n // \"api/v0/fdc/get-proof-round-id-bytes\"\n \"api/v1/fdc/proof-by-request-round-raw\"\n);\nconsole.log(\"url: %sn\", url);\n\n(, bytes memory data) = postAttestationRequest(url, headers, body);\n```\n\nParsing the returned data requires the definition of an auxiliary `struct`.\n\n{/* <!-- TODO rename after renaming --> */}\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nstruct ParsableProof {\n bytes32 attestationType;\n bytes32[] proofs;\n bytes responseHex;\n}\n```\n\nThe field `attestationType` holds the UTF8 encoded hex string of the attestation type name, padded to 32 bytes.\nThus, it should match the value of the `attestationType` parameter in the Prepare the request step.\nIn our case, that value is `0x4164647265737356616c69646974790000000000000000000000000000000000`.\n\nThe array `proofs` holds the Merkle proofs of our attestation request.\n\nLastly, `responseHex` is the ABI encoding of the chosen attestation type response struct.\nIn this case, it is the `IAddressValidity.Response` struct.\nWe retrieve this data as follows.\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\nbytes memory dataJson = Base.parseData(data);\nParsableProof memory proof = abi.decode(dataJson, (ParsableProof));\n\nIAddressValidity.Response memory proofResponse = abi.decode(\n proof.responseHex,\n (IAddressValidity.Response)\n);\n```\n\n## Verify proof\n\nFDC optimizes on-chain storage costs by implementing a hybrid data verification system.\nInstead of storing complete datasets on-chain, it stores only Merkle proofs, while maintaining the actual data through trusted off-chain providers.\nThis approach significantly reduces gas costs while preserving data integrity.\n\nWhen requested, data providers supply the original data along with its corresponding Merkle proof.\nThe protocol verifies data authenticity by comparing the provided Merkle proof against the on-chain Merkle root.\nA successful match confirms the data's integrity and authenticity within the FDC system.\n\nWhile data verification is optional if you trust your data provider, FDC ensures transparency by making verification possible at any time.\nThis capability is crucial for maintaining system integrity and allowing users to independently verify data when needed, particularly in production environments.\n\nFDC provides verification functionality through the `FdcVerification` contract.\nTo verify address validity, we first format our data using the `IAddressValidity.Proof` struct, which contains both the Merkle proof and the response data.\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\nIAddressValidity.Proof memory _proof = IAddressValidity.Proof(\n proof.proofs,\n proofResponse\n);\n```\n\nWe then access the `FdcVerification` contract through the `ContractRegistry`, and feed it the proof.\nIf we proof is valid, the function `verifyAddressValidity` will return `true`, otherwise `false`.\nAs before, we wrap the whole thing into a broadcast environment, using the `PRIVATE_KEY` variable from our `.env` file.\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\nuint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\nvm.startBroadcast(deployerPrivateKey);\n\nbool isValid = ContractRegistry\n .getFdcVerification()\n .verifyAddressValidity(proof);\nconsole.log(\"proof is valid: %sn\", StringsBase.toString(isValid));\n\nvm.stopBroadcast();\n```\n\n## Use the data\n\nWe will now define a simple contract, that will demonstrate how the data can be used onchain.\nThe contract will receive an address and proof, and decide if the address is valid.\nIf the address is valid, the contract will add it to an array of valid addresses.\nOtherwise, it will raise an error.\n\nThe code for this contract is as follows.\n\n```solidity title=\"src/fdcExample/AddressValidity.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"dependencies/forge-std-1.9.5/src/console.sol\";\nimport {Strings} from \"@openzeppelin-contracts/utils/Strings.sol\";\nimport {ContractRegistry} from \"dependencies/flare-periphery-test-0.0.7/src/coston2/ContractRegistry.sol\";\nimport {IFdcHub} from \"dependencies/flare-periphery-test-0.0.7/src/coston2/IFdcHub.sol\";\nimport {IAddressValidity} from \"dependencies/flare-periphery-test-0.0.7/src/coston2/IAddressValidity.sol\";\nimport {IFdcVerification} from \"dependencies/flare-periphery-test-0.0.7/src/coston2/IFdcVerification.sol\";\nimport {FdcStrings} from \"src/utils/fdcStrings/AddressValidity.sol\";\n\nstruct EventInfo {\n address sender;\n uint256 value;\n bytes data;\n}\n\ncontract AddressValidity {\n string[] public verifiedAddresses;\n\n function isAddressValidityProofValid(\n IAddressValidity.Proof calldata transaction\n ) public view returns (bool) {\n // Use the library to get the verifier contract and verify that this transaction was proved by the state connector\n IFdcVerification fdc = ContractRegistry.getFdcVerification();\n console.log(\"transaction: %sn\", FdcStrings.toJsonString(transaction));\n // return true;\n return fdc.verifyAddressValidity(transaction);\n }\n\n function registerAddress(\n string calldata _addressStr,\n IAddressValidity.Proof calldata _transaction\n ) external {\n // 1. FDC Logic\n // Check that this AddressValidity has indeed been confirmed by the FDC\n require(\n isAddressValidityProofValid(_transaction),\n \"Invalid transaction proof\"\n );\n\n // 2. Business logic\n string provedAddress = _transaction.data.requestBody.addressStr;\n require(\n Strings.equal(provedAddress, _addressStr),\n string.concat(\n \"Invalid address.ntProvided: \",\n _addressStr,\n \"ntProoved: \",\n provedAddress\n )\n );\n verifiedAddresses.push(provedAddress);\n }\n}\n```\n\nThe function `registerAddress` takes as parameters a string representing an address, and a proof.\nIf the proof is valid, and if the given address matches the one in the proof, the address is added to an array of verified addresses.\n\nWe deploy this contract through a script in `script/AddressValidity.s.sol`.\n\n```solidity title=\"scrip/fdcExample/AddressValidity.s.sol\"\n\ncontract Deploy is Script {\n function run() external {\n uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n vm.startBroadcast(deployerPrivateKey);\n\n AddressValidity addressValidity = new AddressValidity();\n\n vm.stopBroadcast();\n }\n}\n```\n\nWe run the above script with the following console command.\n\n```bash\nforge script script/fdcExample/AddressValidity.s.sol:Deploy --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --ffi\n\n```",
    "In [Part 1](/fdc/getting-started) and [Part 2](/fdc/attestation-types) of the series, you you have learned how the Data Connector works and what kind of different attestations you can get from it. In this guide, you will:\n\n- Move from the world of UTXO chains to the world of EVM chains with a new `EVMTransaction` attestation type.\n- Understand the implications of connecting account-based chains, and the additional possibilities that smart contracts bring.\n- Connect Ethereum and Flare (or testnets Sepolia and Flare Testnet Coston2 for the Coston testnet).\n\nFrom Parts 1 and 2, the attestations that you know so far are:\n\n- Simple payment\n\n- Non-existence of a payment with reference\n\n- Balance decreasing transaction\n\n- Block height confirmation\n\n- Address validity check\n\nYou also know that the Data Connector allows Flare to connect to Bitcoin, Dogecoin, and XRP Ledger.\n\nThe information that the Data Connector provides is similar to what was provided before (sender and recipient, amount, block, timestamp, etc.), but since you are on a smart contract compatible chain now, you can also get additional things, namely, you can extract the full data about events that were emitted during the transaction, and you can also get the input data of the transaction (in case a contract was called).\n\n## Transaction Type\n\nLet's jump directly into the transaction type to see what kind of data we need to provide.\n\nThe top-level `Request` in the `EVMTransaction` has the same structure as others:\n\n```solidity title=\"EVMTransaction.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name EVMTransaction\n * @custom:id 0x06\n * @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\n * @author Flare\n * @notice A relay of a transaction from an EVM chain.\n * This type is only relevant for EVM-compatible chains.\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\n * If an indicated event does not exist, the request is rejected.\n * @custom:lut `timestamp`\n */\ninterface EVMTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId  ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the Data Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for EVM transaction attestation type\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\n     * @param transactionHash Hash of the transaction(transactionHash).\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\n     * @param provideInput If true, \"input\" field is included in the response.\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\n     */\n    struct RequestBody {\n        bytes32 transactionHash;\n        uint16 requiredConfirmations;\n        bool provideInput;\n        bool listEvents;\n        uint32[] logIndices;\n    }\n\n    /**\n     * @notice Response body for EVM transaction attestation type\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param timestamp Timestamp of the block in which the transaction is included.\n     * @param sourceAddress The address (from) that signed the transaction.\n     * @param isDeployment Indicate whether it is a contract creation transaction.\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\n     * @param value The value transferred by the initial transaction in wei.\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\n     * @param status Status of the transaction 1 - success, 0 - failure.\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 timestamp;\n        address sourceAddress;\n        bool isDeployment;\n        address receivingAddress;\n        uint256 value;\n        bytes input;\n        uint8 status;\n        Event[] events;\n    }\n\n    /**\n     * @notice Event log record\n     * @custom:above An `Event` is a struct with the following fields:\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n     * @param logIndex The consecutive number of the event in block.\n     * @param emitterAddress The address of the contract that emitted the event.\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\n     */\n    struct Event {\n        uint32 logIndex;\n        address emitterAddress;\n        bytes32[] topics;\n        bytes data;\n        bool removed;\n    }\n}\n```\n\nThe `attestationType` for the evm attestation is a hex encoding of `hexEncode(\"EVMTransaction\")`\n\n{/* Currently supported `sourceId` are */}\n\n{/* - TODO: Naštej jih in prveri, da delajo ok */}\n\n## Request Body\n\nThe `RequestBody` is defined as:\n\n```solidity\n    /**\n     * @notice Request body for EVM transaction attestation type\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\n     * @param transactionHash Hash of the transaction(transactionHash).\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\n     * @param provideInput If true, \"input\" field is included in the response.\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\n     */\n    struct RequestBody {\n        bytes32 transactionHash;\n        uint16 requiredConfirmations;\n        bool provideInput;\n        bool listEvents;\n        uint32[] logIndices;\n    }\n```\n\n- `TransactionHash`: Hash of the transaction you are observing.\n\n- `RequiredConfirmations`: The number of blocks after the transaction that you are requesting must be visible to the attestation client to consider this transaction as finalized. Unlike the previous payment (or block height) attestation, where the amount of block confirmations was set per chain, this type is more flexible and allows you to choose how many confirmations you want, thus adapting your security assumptions (about the other chain).\n\n- `provideInput`: Indicates if the response should also contain the input of the transaction. You can always include the input, but this might produce a large data structure that you will need to supply when using this transaction. If you don't need this data, it is advisable not to include it to avoid additional gas costs both for supplying it to the verification contract and making a transaction. However, it might be useful, for example, to check what contract was deployed or what was the top-level method that was executed.\n\n- `listEvents`: Events are an important and powerful tool when interacting with EVM chains, but including them adds additional costs (the same as with input). If you don't need events, you can save some gas costs by excluding them.\n\n- `logIndices`: An array of log indices (in any order, with repetitions allowed) for which events (logs) you want included as the result of your transaction attestation. As before, don't include events you don't need for gas reasons. Importantly, leaving this array empty will include all events emitted in the same order as they were emitted. The indices are the block log indices, indicating the event index in the whole block (not just the transactions you are attesting to), but if you supply an index outside your transaction range, the corresponding event won't be included. The amount of returned events is limited to 50, so if you want to attest that you have included all the events in a single transaction, make sure it has 49 of them or less.\n\n{/* (<!--TODO: link do definicije tega-->) */}\n\n## Response Body\n\nThe `ResponseBody` is defined as:\n\n```solidity\n    /**\n     * @notice Response body for EVM transaction attestation type\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param timestamp Timestamp of the block in which the transaction is included.\n     * @param sourceAddress The address (from) that signed the transaction.\n     * @param isDeployment Indicate whether it is a contract creation transaction.\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\n     * @param value The value transferred by the initial transaction in wei.\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\n     * @param status Status of the transaction 1 - success, 0 - failure.\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 timestamp;\n        address sourceAddress;\n        bool isDeployment;\n        address receivingAddress;\n        uint256 value;\n        bytes input;\n        uint8 status;\n        Event[] events;\n    }\n\n    /**\n     * @notice Event log record\n     * @custom:above An `Event` is a struct with the following fields:\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n     * @param logIndex The consecutive number of the event in block.\n     * @param emitterAddress The address of the contract that emitted the event.\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\n     */\n    struct Event {\n        uint32 logIndex;\n        address emitterAddress;\n        bytes32[] topics;\n        bytes data;\n        bool removed;\n    }\n```\n\nThe response body struct contains the following fields:\n\n- `blockNumber`: Number of the block in which the transaction is included.\n\n- `timestamp`: Timestamp of the block the transaction was included in.\n\n- `sourceAddress`: Address signing the transaction. Since Flare is an EVM chain, this is nicely mapped to the address type directly, and you don't have to operate with strings or address hashes.\n\n- `isDeployment`: Flag indicating if this transaction was a contract deployment.\n\n- `receivingAddress`: The `to` address of the transaction (this is a zero address if you are dealing with contract deployment). Keep in mind, this can also be a contract address (if the toplevel transaction is a contract call) and this is where things get interesting.\n\n- `value`: The value (in wei) transferred by the toplevel transaction. Values transferred by internal transactions are not tracked by this type, but if proper events are emitted you can use them to follow this. If there is no value, the value has a default `0` value.\n\n- `input`: The input provided with a transaction (useful for contract calls). If no input is provided, a default value of zero bytes is used.\n\n- `status`: The status of the transaction, which can either be `1` indicating success or `0` indicating failure (without failure reason).\n\n- `events`: Array of requested events in the same order as requested.\n\nEach event has the following fields:\n\n- `logIndex`: The consecutive number of the event in the block.\n\n- `emitterAddress`: The address of the contract that emitted the event.\n\n- `topics`: An array of up to four 32-byte strings of indexed log arguments.\n\n- `data`: Concatenated 32-byte strings of non-indexed log arguments. This (together with topics) is usually the part of an event that you will decode to get the information you need. Keep in mind, this is event-specific and you will need to know the event structure to decode it properly.\n\n- `removed`: It is `true` if the log was removed due to a chain reorganization (transaction was mined, but the block was not on the main chain) and `false` if it is a valid log.\n\n## Examples\n\nNow that you know how to request an attestation and what you are getting in return, let's explore some examples. These examples are a bit more involved and each will come in a few parts:\n\n- Script making a dummy transaction on the `Sepolia` testnet.\n- Smart contract(s) accepting an attestation request and performing some desired action.\n- Deployment and run script that ties them together.\n\nThis deployment script will also allow you to understand exactly how long the waiting for each phase takes, which is something not previously focused on.\n\n### Simple transaction with a value\n\nLet's start small. You will create a smart contract that just tallies the top-level amounts transferred to a designated address on Sepolia.\n\nThe scenario is pretty simple:\n\n- You have a \"payment\" to an Externally Owned Account (EOA - so not a smart contract) on Sepolia, and anyone can send funds there and prove this.\n- On the Flare side, you will deploy a contract that will accept proofs with data in the proper accounting format: who has sent how much to this end owner address.\n\nThe full code for this example is in the `scripts/evm/trySimpleTransaction.ts`, `contracts/EthereumPaymentCollector.sol`, and `contracts/FallbackContract` files.\n\nYou won't be copy-pasting the full code here, but you will go through the most important parts.\n\nThe setup is now in two parts, and `main` correctly picks up the right part to run depending on the network it is run on.\n\nFirst, deploy a simple `FallbackContract` on Sepolia.\n\n```bash\nyarn hardhat run scripts/evm/trySimpleTransaction --network sepolia\n```\n\n- This contract will just emit an event when the `fallback` function is called.\n- You will be attesting to this event in the next part.\n- The script makes two transactions on Sepolia: one with value to an address and one to the address of the contract.\n- The second transaction will call the `fallback` function and emit the event.\n- The transaction hashes are logged, and the JSON response of the attestation results is printed (so you can see what you will get in the next part).\n\nHere is an example result:\n\n```bash\n0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708907688\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363670\",\n      \"timestamp\": \"1708907688\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429\",\n      \"value\": \"10\",\n      \"input\": \"0x0123456789\",\n      \"status\": \"1\",\n      \"events\": []\n    }\n  }\n}\n0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708907712\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363672\",\n      \"timestamp\": \"1708907712\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n      \"value\": \"10\",\n      \"input\": \"0x9876543210\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"160\",\n          \"emitterAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n          \"topics\": [\n            \"0xaca09dd456ca888dccf8cc966e382e6e3042bb7e4d2d7815015f844edeafce42\"\n          ],\n          \"data\": \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000059876543210000000000000000000000000000000000000000000000000000000\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\nAfter you have the transaction hashes, copy them to the part of the `main` method that will execute the Data Connector part, this time on Coston. Let's take a look at `executeStateConnectorProof`.\n\nHere, the Data Connector part comes into play. You have already seen it in the previous guides, so you will just quickly scan through it. The code is a bit more involved, as you are now working with multiple transactions (this is not EVMTransaction specific, but it is a good example of how you can use the Data Connector to do more complex things). Again, you get an encoded attestation request (one for each transaction) and then you submit them to the Data Connector. Once this is done, you wait for the round to be confirmed (see the while loop that takes most of the time) and then you get the proof.\n\nThe `EthereumPaymentCollector` contract is deployed on Coston with one important method `collectPayment`. This method accepts the `EVMTransaction.Proof` response and does the important accounting.\n\nAs usual, first check that the provided proof is correct: that the Merkle proof really attests that this transaction was included in the Merkle tree.\n\nThen comes the fun part - you can use the information from a transaction to do whatever you want. You won't just write it to the list of all transactions and be done. Instead, you will try to decode the event data and see what you can get from it. As mentioned before, the event data is specific to the event and you need to know the event structure to decode it properly. In this case, you know how it looks, and the decoding is done by the built-in `abi.decode`. You then just push the decoded data in struct form to the list of events and you are done.\n\n:::warning\n\n`abi.decode` is not type-safe and you can easily get wrong results if you don't know the event structure. Even more, this might be a security risk if you are not careful (or revert unexpectedly), but it is a nice representation of how powerful the events - and their information - can be.\n\n:::\n\nFinally, when you have both proofs and the contract deployed, you just call the `collectPayment` method with the proofs, and you are done (unless something goes wrong, then you will have to wait for the next round and try again).\n\nThe result looks something like:\n\n```bash\nRounds:  [ '809307', '809307' ]\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nRound confirmed, getting proof\nSuccessfully submitted source code for contract\ncontracts/EthereumPaymentCollector.sol:EthereumPaymentCollector at 0x7cf6E7aeFD0207a5bE9a7DbcDA560fc7a6dBD7B4\nfor verification on the block explorer. Waiting for verification result...\n\nSuccessfully verified contract EthereumPaymentCollector on the block explorer.\nhttps://coston-explorer.flare.network/address/0x7cf6E7aeFD0207a5bE9a7DbcDA560fc7a6dBD7B4#code\n\n{\n  \"data\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"lowestUsedTimestamp\": \"1708907688\",\n    \"requestBody\": {\n      \"listEvents\": true,\n      \"logIndices\": [],\n      \"provideInput\": true,\n      \"requiredConfirmations\": \"1\",\n      \"transactionHash\": \"0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\"\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363670\",\n      \"events\": [],\n      \"input\": \"0x0123456789\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"status\": \"1\",\n      \"timestamp\": \"1708907688\",\n      \"value\": \"10\"\n    },\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"809307\"\n  },\n  \"merkleProof\": [\n    \"0x56faf895bbcb0b2a6f3bc283ea5e1793b224dca8b4b99240a34cee6d9bf1b8f3\",\n    \"0x13ef0de709e7b0485f7623f5a0ad5b56aa23626fbffe5e7f4502bb7be5e0bf7e\",\n    \"0xf72c31824174676516a9c5d9713cb1ae8866cac71462fe2b1a3c1e1b9418a94f\"\n  ]\n}\n{\n  \"data\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"lowestUsedTimestamp\": \"1708907712\",\n    \"requestBody\": {\n      \"listEvents\": true,\n      \"logIndices\": [],\n      \"provideInput\": true,\n      \"requiredConfirmations\": \"1\",\n      \"transactionHash\": \"0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\"\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363672\",\n      \"events\": [\n        {\n          \"data\": \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000059876543210000000000000000000000000000000000000000000000000000000\",\n          \"emitterAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n          \"logIndex\": \"160\",\n          \"removed\": false,\n          \"topics\": [\n            \"0xaca09dd456ca888dccf8cc966e382e6e3042bb7e4d2d7815015f844edeafce42\"\n          ]\n        }\n      ],\n      \"input\": \"0x9876543210\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"status\": \"1\",\n      \"timestamp\": \"1708907712\",\n      \"value\": \"10\"\n    },\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"809307\"\n  },\n  \"merkleProof\": [\n    \"0x8e45d2d564bf7d652cf904a72e53f5e7e34d7e5e184906afda92f755e99cd421\",\n    \"0x13ef0de709e7b0485f7623f5a0ad5b56aa23626fbffe5e7f4502bb7be5e0bf7e\",\n    \"0xf72c31824174676516a9c5d9713cb1ae8866cac71462fe2b1a3c1e1b9418a94f\"\n  ]\n}\n```\n\n:::info\n\nOn the previous attestation types, we were only able to get transactions in the last two days (this is attestation type specific).\n\n:::\n\n### Decoding emitted events\n\nAs previously stated, an event will be the core feature for observing what is happening on other chains. Let's now use this to prove that an ERC20 payment was made on Sepolia and then decode the event to see who made the payment and how much.\n\nAs before, you will deploy an ERC20 contract on Sepolia, mint some tokens, and send them to an address. The full code is available in the `scripts/evm/tryERC20transfers.ts` and `contracts/MintableERC20.sol` files.\n\nA sample response for the ERC20 transaction would look like:\n\n```bash\nSepolia USDT deployed to: 0x6023e19d70C304eA16a3728ceDcb042791737EC3\n0xd7eed8cf377a4079718e8d709b3648d62a3a16ea39fbfbe759600c3d574caa15\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708999068\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xd7eed8cf377a4079718e8d709b3648d62a3a16ea39fbfbe759600c3d574caa15\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5370899\",\n      \"timestamp\": \"1708999068\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n      \"value\": \"0\",\n      \"input\": \"0x40c10f190000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f37300000000000000000000000000000000000000000000000000000000000f4240\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"38\",\n          \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n          \"topics\": [\n            \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000f4240\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n0x9dffa80b6daea45ed4bfc93bb72cdb893549fdefb81cb760b7ce08edef9859a6\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708999080\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x9dffa80b6daea45ed4bfc93bb72cdb893549fdefb81cb760b7ce08edef9859a6\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5370900\",\n      \"timestamp\": \"1708999080\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n      \"value\": \"0\",\n      \"input\": \"0xa9059cbb000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000000003e8\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"32\",\n          \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n          \"topics\": [\n            \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n            \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\nLet's now decode the data you got back and explore the event in a little more detail.\n\n```json\n{\n  \"logIndex\": \"38\",\n  \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n  \"topics\": [\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n    \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\"\n  ],\n  \"data\": \"0x00000000000000000000000000000000000000000000000000000000000f4240\",\n  \"removed\": false\n}\n{\n  \"logIndex\": \"32\",\n  \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n  \"topics\": [\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n    \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n    \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n  ],\n  \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n  \"removed\": false\n}\n```\n\nWhen processing the events, it is important to know which contract should be emitting the event (you don't want to count a memecoin transfer as a USDT transfer). The `topics` are the indexed arguments of the event, and the `data` is the non-indexed arguments. This was glossed over in the first part, but now it will be important.\n\nIf you take a look at the event definition:\n\n```solidity\nevent Transfer(address indexed from, address indexed to, uint256 value);\n```\n\nYou see that it has three arguments, two indexed and one non-indexed. However, there are three topics in the event. How do we interpret that? In our case, the first one is the event signature, and the other two are the indexed arguments. Importantly, that is not always the case (it is the case for events that are emitted by Solidity contracts, but not necessarily for other contracts or direct assembly code).\n\nLet's now decode the event data. The second event has the following data:\n\n```json\n\"topics\": [\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n    \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n    \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n]\n```\n\nThe first topic is the [event signature](https://www.4byte.directory/event-signatures/?bytes_signature=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef), and the other two are the from and to addresses. You can easily see how they are zero-padded to accommodate the whole 32 bytes.\n\nSimilarly, the event in the first transaction that just minted 1,000,000 token wei (hex encoded in the data field) has the same zeroth topic, same recipient (topic with index 2), and zero address as the sender.\n\n{/* <!-- This is good for future examples, but too time consuming to do now --><!-- #### ERC20 payment --> */}\n\nLet's upgrade the contract from before to tally ERC20 payments on external chains. You can do this by listening to events, decoding them, and using the decoded information.\n\n{/* TODO: Here, we will create a simple contract on Sepolia and follow the events it emits, just to see another example of how events function. --> */}\n\n### Decoding top-level transaction data\n\nYou now know how to listen to events and decode them. Let's see how we can also decode top-level transaction data. Here, you will verify whether the top-level transaction really did increase the ERC20 allowance and see how to get top-level calldata.\n\nThe full code for this example is in the `scripts/evm/tryERC20Allowance.ts` and `contracts/MintableERC20.sol` files.\n\nYou initiate a simple `allowance` increase on Sepolia and then decode the calldata to see if it is really what you expect. The example response is something like this:\n\n```json\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1709147568\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x445ac68dd09198cb3b8202cb9ccba323d4d1c82157a076f97fd6682dfaa826d9\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5382600\",\n      \"timestamp\": \"1709147568\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xc14FA393fa7248c73B74A303cf35D5e980E11e2C\",\n      \"value\": \"0\",\n      \"input\": \"0x095ea7b3000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000000003e8\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"54\",\n          \"emitterAddress\": \"0xc14FA393fa7248c73B74A303cf35D5e980E11e2C\",\n          \"topics\": [\n            \"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n            \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\nResult(2) [ '0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429', 1000n ]\n```\n\nBy now, you should be able to see that the emitted event was the `Approval` event, and the data is the new allowance (with the correct participant addresses in the topics).\n\nWhat we want to take a look at is the `input` field. It contains the calldata of the top-level transaction. Since you know the signature of this method, you can easily decode it and get the result you expect.\n\n### Observing State Through Events\n\nWe do not have direct access to state on the other chain, but we can circumvent this using events. If we deploy a contract on the external chain that emits events pertaining to the state it can read (at that block) from the chain, we can easily observe this state (frozen at that point in time) on Flare. Let's see how we can easily observe the current status of ERC20 allowance.\n\nThe full code for this example is in the `scripts/evm/tryStateChecking.ts` and `contracts/FallbackWithEventContract.sol` files.\n\nThe contract is simple:\n\n```solidity\nfunction getState(address target, bytes calldata cdata) external payable {\n      // Just forward the call to the contract we want to interact with\n      // Caution - this is very unsafe, as the calldata can be anything\n      // If this contract were to had some tokens for example, the calldata could be used to transfer them.\n      (bool result, bytes memory returnData) = target.call{value: msg.value}(cdata);\n      emit CallResult(target, result, msg.data, returnData);\n      // A bit safer way would be to only allow specific functions to be called or use something like this: https://github.com/gnosis/util-contracts/blob/main/contracts/storage/StorageAccessible.sol\n  }\n```\n\nAny call to this contract will be forwarded to the target contract, and the result will be emitted as an event.\n\nThe script is also relatively simple (though it does a lot of things).\n\nWe get the event in the same way as before, but now we also get the calldata and the target address. We need to do two things: First, decode the event to see what happened, and then decode the calldata to see what the state is. Then, decode both data bytes to see what we got. Importantly, it is necessary to know the structure of the event and the method we called to properly decode it.\n\nThe response is something like this:\n\n```bash\nSepolia USDT deployed to: 0xf274cCf1f92F9B34FF5704802a9B690E1d3cbC38\nFallbackWithEventContract deployed to: 0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1709151372\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xff86f77260f7623f24ea888dfd14c56380c5cece1a896bd2566d6b3596343e20\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5382901\",\n      \"timestamp\": \"1709151372\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\",\n      \"value\": \"0\",\n      \"input\": \"0xf29ca36c000000000000000000000000f274ccf1f92f9b34ff5704802a9b690e1d3cbc3800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000044dd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"4\",\n          \"emitterAddress\": \"0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\",\n          \"topics\": [\n            \"0xe1b725358090db1f537294b09c773c14622b44c1bc2832d105fb28cc48f5bd90\"\n          ],\n          \"data\": \"0x000000000000000000000000f274ccf1f92f9b34ff5704802a9b690e1d3cbc380000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000044dd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d4290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000bc614e\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\nEvent data [\n  '0xf274cCf1f92F9B34FF5704802a9B690E1d3cbC38',\n  true,\n  '0xdd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429',\n  '0x0000000000000000000000000000000000000000000000000000000000bc614e'\n]\nMethod signature 0xdd62ed3e\nDecoded calldata Result(2) [\n  '0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373',\n  '0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429'\n]\nDecoded state data Result(1) [ 12345678n ]\n```\n\nWe can see that the event was emitted and all the calldata was properly decoded. Why is that important?\n\nIt means that you can now observe any state on the external blockchain without having to modify the contract on the external blockchain. This allows you to easily observe USDT movements, current token balances, and other state changes on the external blockchain.\n\n### State Observation and Decoding\n\nThe last example showed how you can observe the state on another blockchain and use it in TypeScript. Now, we will also see how to properly decode the event in a smart contract. We will use the same contract onchain as before to emit events, `CallResult`, and then decode them in the contract. The result will then be passed to the contract on Coston, which will first decode the full event, ensure that the correct function was called, and then decode the returned data (which is the state you want to observe).\n\nThe full contract that does this is in `contracts/ERC20BalanceMonitor.sol` and the accompanying script is in the `scripts/evm/tryStateCheckingAndSave.ts` file. What you want to do is simple: query the ERC20 balance of a specific address and save it in the contract storage. Here, you need to be careful, as this query is valid only at the time of the transaction; it might be different at the time of block creation and confirmation. Plus, keep in mind that emitting an event means executing a transaction, and that means gas, so you should be careful with how often you do this.\n\nThe process is the same as before: you invoke the contract, it emits the event, and you use the result to interact with the chain. But this time, you cheat a bit. Instead of waiting for the whole data connector process to finish, you use `getResponse` to get just the response without the proof. The `ERC20BalanceMonitor` then disregards the proof and just uses the response to process the data.\n\nThe number of events can be quite large and processing all of them can be tedious (and error-prone), so the easiest way is to find out which event is the one you want and add an index parameter to the function call.\n\nThe code for this:\n\n```solidity\n/*\nThe function assumes that the event emitted in the eventIndex is the result of checking the balance of specific ERC20 token as emitted by FallbackWithEventContract (see previous guides).\nThe main idea is to first emit the event checking the balance and then properly decode it\n*/\nfunction confirmBalanceEvent(EVMTransaction.Proof calldata transaction, address tokenAddress, address targetAddress, uint256 eventIndex) public\n{\n    // We explicitly ignore the proof here, but in production code, you should always verify the proof\n    // We ignore it so we can test the whole contract much faster on the same network using only the\n    // In this guide we will just use the `prepareResponse` endpoint which has everything we need but the proof\n    require(\n        true || isEVMTransactionProofValid(transaction),\n        \"Invalid proof\"\n    );\n\n    EVMTransaction.Event memory _event = transaction.data.responseBody.events[eventIndex];\n    // This just check the happy path - do kkep in mind, that this can possibly faked\n    // And keep in mind that the specification does not require the topic0 to be event signature\n    require(\n        _event.topics[0] == keccak256(\"CallResult(address,bool,bytes,bytes)\"),\n        \"Invalid event\"\n    );\n\n    // _event.emitterAddress should be the contract we \"trust\" to correctly call the ERC20 token\n\n    (address target, bool result, bytes memory callData, bytes memory returnData) = abi.decode(\n        _event.data,\n        (address, bool, bytes, bytes)\n    );\n\n    require(target == tokenAddress, \"Invalid token address\");\n\n\n    bytes memory expectedCalldata = abi.encodeWithSignature(\"balanceOf(address)\", targetAddress);\n    require(\n        keccak256(callData) == keccak256(expectedCalldata),\n        \"Invalid calldata\"\n    );\n      // If a tuple was returned from the call, we can unpack it using abi.decode in the same way as in the event data decoding\n    uint256 balance = abi.decode(returnData, (uint256));\n\n    balances[transaction.data.responseBody.blockNumber] = BalanceInfo({\n        holder: targetAddress,\n        token: tokenAddress,\n        amount: balance,\n        blockNumber: transaction.data.responseBody.blockNumber,\n        timestamp: transaction.data.responseBody.timestamp,\n        rawEvent: _event,\n        proofHash: keccak256(abi.encode(transaction))\n    });\n}\n```\n\nWe just ignore the proof, but then the fun part starts. We get the top-level event out of the response (this is the one that contains calldata and return data), check that the topic matches, and then decode the resulting data. Be careful, decoding the data might fail if you don't have the correct signature, so the example code is fine to show, but you might want to add more checks in production code.\n\nOnce the data of the top-level event is decoded, we check if the call data is what we expect and then decode the return data to get the balance, which is again dependent on what kind of return value was produced in the transaction. Again, the return data needs to be decoded (it might return something more complicated than just one `uint256`), but it is easy to get the full result. Once you have all this, you just write it to the contract storage, and you are done.\n\nLet's take a look at the test code and show a simple trick that is also hidden in there.\n\nThe code is practically the same as before: you create a transaction, query the data connector, and use the data in the contract. But this time, everything is done on the same (Coston - `testSGB`) network. This makes it a bit easier to test, as you don't need to change the network, but it is a minor thing.\n\nIt does sound strange (and pointless) to allow the Data Connector to be used on the same network, but the main improvement comes from the top-level relayer coming in the FSP. Once the Data Connector is included in the top-level protocol, any Data Connector data is immediately relayed to externally connected chains via relay (as is the FTSO data). This means that external chains can also observe what is happening on Flare.\n\nThink about this: up until now, you only relayed information from other chains to Flare, but now any example from the EVM part can immediately be replicated on the Sepolia chain with Flare being the source chain (where things happen).\n\n{/* <!-- Meh: ### Contract creation --> */}",
    "This guide is for developers who want to connect to EVM chains. In this guide, you will learn how to:\n\n- Use the `EVMTransaction` attestation type.\n\n- Understand the implications of connecting account-based chains.\n\n- Relay transaction information from Ethereum Sepolia to Flare Testnet Coston2.\n\n## Examples\n\nNow that you know how to request an attestation and what you are getting in return, let's explore some examples. These examples are a bit more involved and each will come in a few parts:\n\n- Script making a dummy transaction on the `Sepolia` testnet.\n- Smart contract(s) accepting an attestation request and performing some desired action.\n- Deployment and run script that ties them together.\n\nThis deployment script will also allow you to understand exactly how long the waiting for each phase takes, which is something not previously focused on.\n\n### Simple ETH transfer\n\nLet's start small. You will create a smart contract that just tallies the top-level amounts transferred to a designated address on Sepolia.\n\nThe scenario is pretty simple:\n\n- You have a \"payment\" to an Externally Owned Account (EOA - so not a smart contract) on Sepolia, and anyone can send funds there and prove this.\n- On the Flare side, you will deploy a contract that will accept proofs with data in the proper accounting format: who has sent how much to this end owner address.\n\nThe full code for this example is in the `scripts/evm/trySimpleTransaction.ts`, `contracts/EthereumPaymentCollector.sol`, and `contracts/FallbackContract` files.\n\nYou won't be copy-pasting the full code here, but you will go through the most important parts.\n\nThe setup is now in two parts, and `main` correctly picks up the right part to run depending on the network it is run on.\n\nFirst, deploy a simple `FallbackContract` on Sepolia.\n\n```bash\nyarn hardhat run scripts/evm/trySimpleTransaction --network sepolia\n```\n\n- This contract will just emit an event when the `fallback` function is called.\n- You will be attesting to this event in the next part.\n- The script makes two transactions on Sepolia: one with value to an address and one to the address of the contract.\n- The second transaction will call the `fallback` function and emit the event.\n- The transaction hashes are logged, and the JSON response of the attestation results is printed (so you can see what you will get in the next part).\n\nHere is an example result:\n\n```bash\n0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708907688\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363670\",\n      \"timestamp\": \"1708907688\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429\",\n      \"value\": \"10\",\n      \"input\": \"0x0123456789\",\n      \"status\": \"1\",\n      \"events\": []\n    }\n  }\n}\n0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708907712\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363672\",\n      \"timestamp\": \"1708907712\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n      \"value\": \"10\",\n      \"input\": \"0x9876543210\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"160\",\n          \"emitterAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n          \"topics\": [\n            \"0xaca09dd456ca888dccf8cc966e382e6e3042bb7e4d2d7815015f844edeafce42\"\n          ],\n          \"data\": \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000059876543210000000000000000000000000000000000000000000000000000000\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\nAfter you have the transaction hashes, copy them to the part of the `main` method that will execute the Data Connector part, this time on Coston. Let's take a look at `executeStateConnectorProof`.\n\nHere, the Data Connector part comes into play. You have already seen it in the previous guides, so you will just quickly scan through it. The code is a bit more involved, as you are now working with multiple transactions (this is not EVMTransaction specific, but it is a good example of how you can use the Data Connector to do more complex things). Again, you get an encoded attestation request (one for each transaction) and then you submit them to the Data Connector. Once this is done, you wait for the round to be confirmed (see the while loop that takes most of the time) and then you get the proof.\n\nThe `EthereumPaymentCollector` contract is deployed on Coston with one important method `collectPayment`. This method accepts the `EVMTransaction.Proof` response and does the important accounting.\n\nAs usual, first check that the provided proof is correct: that the Merkle proof really attests that this transaction was included in the Merkle tree.\n\nThen comes the fun part - you can use the information from a transaction to do whatever you want. You won't just write it to the list of all transactions and be done. Instead, you will try to decode the event data and see what you can get from it. As mentioned before, the event data is specific to the event and you need to know the event structure to decode it properly. In this case, you know how it looks, and the decoding is done by the built-in `abi.decode`. You then just push the decoded data in struct form to the list of events and you are done.\n\n:::warning\n\n`abi.decode` is not type-safe and you can easily get wrong results if you don't know the event structure. Even more, this might be a security risk if you are not careful (or revert unexpectedly), but it is a nice representation of how powerful the events - and their information - can be.\n\n:::\n\nFinally, when you have both proofs and the contract deployed, you just call the `collectPayment` method with the proofs, and you are done (unless something goes wrong, then you will have to wait for the next round and try again).\n\nThe result looks something like:\n\n```bash\nRounds:  [ '809307', '809307' ]\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809303n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809304n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809305n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nWaiting for the round to be confirmed 809306n 809307\nRound confirmed, getting proof\nSuccessfully submitted source code for contract\ncontracts/EthereumPaymentCollector.sol:EthereumPaymentCollector at 0x7cf6E7aeFD0207a5bE9a7DbcDA560fc7a6dBD7B4\nfor verification on the block explorer. Waiting for verification result...\n\nSuccessfully verified contract EthereumPaymentCollector on the block explorer.\nhttps://coston-explorer.flare.network/address/0x7cf6E7aeFD0207a5bE9a7DbcDA560fc7a6dBD7B4#code\n\n{\n  \"data\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"lowestUsedTimestamp\": \"1708907688\",\n    \"requestBody\": {\n      \"listEvents\": true,\n      \"logIndices\": [],\n      \"provideInput\": true,\n      \"requiredConfirmations\": \"1\",\n      \"transactionHash\": \"0xac640ab047aa1097ddd473e5940921eb500a9912b33072b8532617692428830e\"\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363670\",\n      \"events\": [],\n      \"input\": \"0x0123456789\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"status\": \"1\",\n      \"timestamp\": \"1708907688\",\n      \"value\": \"10\"\n    },\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"809307\"\n  },\n  \"merkleProof\": [\n    \"0x56faf895bbcb0b2a6f3bc283ea5e1793b224dca8b4b99240a34cee6d9bf1b8f3\",\n    \"0x13ef0de709e7b0485f7623f5a0ad5b56aa23626fbffe5e7f4502bb7be5e0bf7e\",\n    \"0xf72c31824174676516a9c5d9713cb1ae8866cac71462fe2b1a3c1e1b9418a94f\"\n  ]\n}\n{\n  \"data\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"lowestUsedTimestamp\": \"1708907712\",\n    \"requestBody\": {\n      \"listEvents\": true,\n      \"logIndices\": [],\n      \"provideInput\": true,\n      \"requiredConfirmations\": \"1\",\n      \"transactionHash\": \"0x7eb54cde238fc700be31c98af7e4df8c4fc96fd5c634c490183ca612a481efcc\"\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5363672\",\n      \"events\": [\n        {\n          \"data\": \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000059876543210000000000000000000000000000000000000000000000000000000\",\n          \"emitterAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n          \"logIndex\": \"160\",\n          \"removed\": false,\n          \"topics\": [\n            \"0xaca09dd456ca888dccf8cc966e382e6e3042bb7e4d2d7815015f844edeafce42\"\n          ]\n        }\n      ],\n      \"input\": \"0x9876543210\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xeBBf567beDe2D8842dF538Cf64E0bE9976183853\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"status\": \"1\",\n      \"timestamp\": \"1708907712\",\n      \"value\": \"10\"\n    },\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"809307\"\n  },\n  \"merkleProof\": [\n    \"0x8e45d2d564bf7d652cf904a72e53f5e7e34d7e5e184906afda92f755e99cd421\",\n    \"0x13ef0de709e7b0485f7623f5a0ad5b56aa23626fbffe5e7f4502bb7be5e0bf7e\",\n    \"0xf72c31824174676516a9c5d9713cb1ae8866cac71462fe2b1a3c1e1b9418a94f\"\n  ]\n}\n```\n\n:::info\n\nOn the previous attestation types, we were only able to get transactions in the last two days (this is attestation type specific).\n\n:::\n\n### Decoding emitted events\n\nAs previously stated, an event will be the core feature for observing what is happening on other chains. Let's now use this to prove that an ERC20 payment was made on Sepolia and then decode the event to see who made the payment and how much.\n\nAs before, you will deploy an ERC20 contract on Sepolia, mint some tokens, and send them to an address. The full code is available in the `scripts/evm/tryERC20transfers.ts` and `contracts/MintableERC20.sol` files.\n\nA sample response for the ERC20 transaction would look like:\n\n```bash\nSepolia USDT deployed to: 0x6023e19d70C304eA16a3728ceDcb042791737EC3\n0xd7eed8cf377a4079718e8d709b3648d62a3a16ea39fbfbe759600c3d574caa15\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708999068\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xd7eed8cf377a4079718e8d709b3648d62a3a16ea39fbfbe759600c3d574caa15\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5370899\",\n      \"timestamp\": \"1708999068\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n      \"value\": \"0\",\n      \"input\": \"0x40c10f190000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f37300000000000000000000000000000000000000000000000000000000000f4240\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"38\",\n          \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n          \"topics\": [\n            \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000f4240\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n0x9dffa80b6daea45ed4bfc93bb72cdb893549fdefb81cb760b7ce08edef9859a6\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1708999080\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x9dffa80b6daea45ed4bfc93bb72cdb893549fdefb81cb760b7ce08edef9859a6\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5370900\",\n      \"timestamp\": \"1708999080\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n      \"value\": \"0\",\n      \"input\": \"0xa9059cbb000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000000003e8\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"32\",\n          \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n          \"topics\": [\n            \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n            \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\n```\n\nLet's now decode the data you got back and explore the event in a little more detail.\n\n```json\n{\n  \"logIndex\": \"38\",\n  \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n  \"topics\": [\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n    \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\"\n  ],\n  \"data\": \"0x00000000000000000000000000000000000000000000000000000000000f4240\",\n  \"removed\": false\n}\n{\n  \"logIndex\": \"32\",\n  \"emitterAddress\": \"0x6023e19d70C304eA16a3728ceDcb042791737EC3\",\n  \"topics\": [\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n    \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n    \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n  ],\n  \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n  \"removed\": false\n}\n```\n\nWhen processing the events, it is important to know which contract should be emitting the event (you don't want to count a memecoin transfer as a USDT transfer). The `topics` are the indexed arguments of the event, and the `data` is the non-indexed arguments. This was glossed over in the first part, but now it will be important.\n\nIf you take a look at the event definition:\n\n```solidity\nevent Transfer(address indexed from, address indexed to, uint256 value);\n```\n\nYou see that it has three arguments, two indexed and one non-indexed. However, there are three topics in the event. How do we interpret that? In our case, the first one is the event signature, and the other two are the indexed arguments. Importantly, that is not always the case (it is the case for events that are emitted by Solidity contracts, but not necessarily for other contracts or direct assembly code).\n\nLet's now decode the event data. The second event has the following data:\n\n```json\n\"topics\": [\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n    \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n    \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n]\n```\n\nThe first topic is the [event signature](https://www.4byte.directory/event-signatures/?bytes_signature=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef), and the other two are the from and to addresses. You can easily see how they are zero-padded to accommodate the whole 32 bytes.\n\nSimilarly, the event in the first transaction that just minted 1,000,000 token wei (hex encoded in the data field) has the same zeroth topic, same recipient (topic with index 2), and zero address as the sender.\n\n{/* <!-- This is good for future examples, but too time consuming to do now --><!-- #### ERC20 payment --> */}\n\nLet's upgrade the contract from before to tally ERC20 payments on external chains. You can do this by listening to events, decoding them, and using the decoded information.\n\n{/* TODO: Here, we will create a simple contract on Sepolia and follow the events it emits, just to see another example of how events function. --> */}\n\n### Decoding transaction data\n\nYou now know how to listen to events and decode them. Let's see how we can also decode top-level transaction data. Here, you will verify whether the top-level transaction really did increase the ERC20 allowance and see how to get top-level calldata.\n\nThe full code for this example is in the `scripts/evm/tryERC20Allowance.ts` and `contracts/MintableERC20.sol` files.\n\nYou initiate a simple `allowance` increase on Sepolia and then decode the calldata to see if it is really what you expect. The example response is something like this:\n\n```json\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1709147568\",\n    \"requestBody\": {\n      \"transactionHash\": \"0x445ac68dd09198cb3b8202cb9ccba323d4d1c82157a076f97fd6682dfaa826d9\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5382600\",\n      \"timestamp\": \"1709147568\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xc14FA393fa7248c73B74A303cf35D5e980E11e2C\",\n      \"value\": \"0\",\n      \"input\": \"0x095ea7b3000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000000003e8\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"54\",\n          \"emitterAddress\": \"0xc14FA393fa7248c73B74A303cf35D5e980E11e2C\",\n          \"topics\": [\n            \"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\n            \"0x0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373\",\n            \"0x000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429\"\n          ],\n          \"data\": \"0x00000000000000000000000000000000000000000000000000000000000003e8\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\nResult(2) [ '0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429', 1000n ]\n```\n\nBy now, you should be able to see that the emitted event was the `Approval` event, and the data is the new allowance (with the correct participant addresses in the topics).\n\nWhat we want to take a look at is the `input` field. It contains the calldata of the top-level transaction. Since you know the signature of this method, you can easily decode it and get the result you expect.\n\n### Observing state through events\n\nWe do not have direct access to state on the other chain, but we can circumvent this using events. If we deploy a contract on the external chain that emits events pertaining to the state it can read (at that block) from the chain, we can easily observe this state (frozen at that point in time) on Flare. Let's see how we can easily observe the current status of ERC20 allowance.\n\nThe full code for this example is in the `scripts/evm/tryStateChecking.ts` and `contracts/FallbackWithEventContract.sol` files.\n\nThe contract is simple:\n\n```solidity\nfunction getState(address target, bytes calldata cdata) external payable {\n      // Just forward the call to the contract we want to interact with\n      // Caution - this is very unsafe, as the calldata can be anything\n      // If this contract were to had some tokens for example, the calldata could be used to transfer them.\n      (bool result, bytes memory returnData) = target.call{value: msg.value}(cdata);\n      emit CallResult(target, result, msg.data, returnData);\n      // A bit safer way would be to only allow specific functions to be called or use something like this: https://github.com/gnosis/util-contracts/blob/main/contracts/storage/StorageAccessible.sol\n  }\n```\n\nAny call to this contract will be forwarded to the target contract, and the result will be emitted as an event.\n\nThe script is also relatively simple (though it does a lot of things).\n\nWe get the event in the same way as before, but now we also get the calldata and the target address. We need to do two things: First, decode the event to see what happened, and then decode the calldata to see what the state is. Then, decode both data bytes to see what we got. Importantly, it is necessary to know the structure of the event and the method we called to properly decode it.\n\nThe response is something like this:\n\n```bash\nSepolia USDT deployed to: 0xf274cCf1f92F9B34FF5704802a9B690E1d3cbC38\nFallbackWithEventContract deployed to: 0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\n{\n  \"status\": \"VALID\",\n  \"response\": {\n    \"attestationType\": \"0x45564d5472616e73616374696f6e000000000000000000000000000000000000\",\n    \"sourceId\": \"0x7465737445544800000000000000000000000000000000000000000000000000\",\n    \"votingRound\": \"0\",\n    \"lowestUsedTimestamp\": \"1709151372\",\n    \"requestBody\": {\n      \"transactionHash\": \"0xff86f77260f7623f24ea888dfd14c56380c5cece1a896bd2566d6b3596343e20\",\n      \"requiredConfirmations\": \"1\",\n      \"provideInput\": true,\n      \"listEvents\": true,\n      \"logIndices\": []\n    },\n    \"responseBody\": {\n      \"blockNumber\": \"5382901\",\n      \"timestamp\": \"1709151372\",\n      \"sourceAddress\": \"0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373\",\n      \"isDeployment\": false,\n      \"receivingAddress\": \"0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\",\n      \"value\": \"0\",\n      \"input\": \"0xf29ca36c000000000000000000000000f274ccf1f92f9b34ff5704802a9b690e1d3cbc3800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000044dd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d42900000000000000000000000000000000000000000000000000000000\",\n      \"status\": \"1\",\n      \"events\": [\n        {\n          \"logIndex\": \"4\",\n          \"emitterAddress\": \"0xfCcB55F281df58869593B64B48f8c2Fe66f91C5D\",\n          \"topics\": [\n            \"0xe1b725358090db1f537294b09c773c14622b44c1bc2832d105fb28cc48f5bd90\"\n          ],\n          \"data\": \"0x000000000000000000000000f274ccf1f92f9b34ff5704802a9b690e1d3cbc380000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000044dd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d4290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000bc614e\",\n          \"removed\": false\n        }\n      ]\n    }\n  }\n}\nEvent data [\n  '0xf274cCf1f92F9B34FF5704802a9B690E1d3cbC38',\n  true,\n  '0xdd62ed3e0000000000000000000000004c3dfafc3207eabb7dc8a6ab01eb142c8655f373000000000000000000000000ff02f742106b8a25c26e65c1f0d66bec3c90d429',\n  '0x0000000000000000000000000000000000000000000000000000000000bc614e'\n]\nMethod signature 0xdd62ed3e\nDecoded calldata Result(2) [\n  '0x4C3dFaFc3207Eabb7dc8A6ab01Eb142C8655F373',\n  '0xFf02F742106B8a25C26e65C1f0d66BEC3C90d429'\n]\nDecoded state data Result(1) [ 12345678n ]\n```\n\nWe can see that the event was emitted and all the calldata was properly decoded. Why is that important?\n\nIt means that you can now observe any state on the external blockchain without having to modify the contract on the external blockchain. This allows you to easily observe USDT movements, current token balances, and other state changes on the external blockchain.\n\n### State observation and decoding\n\nThe last example showed how you can observe the state on another blockchain and use it in TypeScript. Now, we will also see how to properly decode the event in a smart contract. We will use the same contract onchain as before to emit events, `CallResult`, and then decode them in the contract. The result will then be passed to the contract on Coston, which will first decode the full event, ensure that the correct function was called, and then decode the returned data (which is the state you want to observe).\n\nThe full contract that does this is in `contracts/ERC20BalanceMonitor.sol` and the accompanying script is in the `scripts/evm/tryStateCheckingAndSave.ts` file. What you want to do is simple: query the ERC20 balance of a specific address and save it in the contract storage. Here, you need to be careful, as this query is valid only at the time of the transaction; it might be different at the time of block creation and confirmation. Plus, keep in mind that emitting an event means executing a transaction, and that means gas, so you should be careful with how often you do this.\n\nThe process is the same as before: you invoke the contract, it emits the event, and you use the result to interact with the chain. But this time, you cheat a bit. Instead of waiting for the whole data connector process to finish, you use `getResponse` to get just the response without the proof. The `ERC20BalanceMonitor` then disregards the proof and just uses the response to process the data.\n\nThe number of events can be quite large and processing all of them can be tedious (and error-prone), so the easiest way is to find out which event is the one you want and add an index parameter to the function call.\n\nThe code for this:\n\n```solidity\n/*\nThe function assumes that the event emitted in the eventIndex is the result of checking the balance of specific ERC20 token as emitted by FallbackWithEventContract (see previous guides).\nThe main idea is to first emit the event checking the balance and then properly decode it\n*/\nfunction confirmBalanceEvent(EVMTransaction.Proof calldata transaction, address tokenAddress, address targetAddress, uint256 eventIndex) public\n{\n    // We explicitly ignore the proof here, but in production code, you should always verify the proof\n    // We ignore it so we can test the whole contract much faster on the same network using only the\n    // In this guide we will just use the `prepareResponse` endpoint which has everything we need but the proof\n    require(\n        true || isEVMTransactionProofValid(transaction),\n        \"Invalid proof\"\n    );\n\n    EVMTransaction.Event memory _event = transaction.data.responseBody.events[eventIndex];\n    // This just check the happy path - do kkep in mind, that this can possibly faked\n    // And keep in mind that the specification does not require the topic0 to be event signature\n    require(\n        _event.topics[0] == keccak256(\"CallResult(address,bool,bytes,bytes)\"),\n        \"Invalid event\"\n    );\n\n    // _event.emitterAddress should be the contract we \"trust\" to correctly call the ERC20 token\n\n    (address target, bool result, bytes memory callData, bytes memory returnData) = abi.decode(\n        _event.data,\n        (address, bool, bytes, bytes)\n    );\n\n    require(target == tokenAddress, \"Invalid token address\");\n\n\n    bytes memory expectedCalldata = abi.encodeWithSignature(\"balanceOf(address)\", targetAddress);\n    require(\n        keccak256(callData) == keccak256(expectedCalldata),\n        \"Invalid calldata\"\n    );\n      // If a tuple was returned from the call, we can unpack it using abi.decode in the same way as in the event data decoding\n    uint256 balance = abi.decode(returnData, (uint256));\n\n    balances[transaction.data.responseBody.blockNumber] = BalanceInfo({\n        holder: targetAddress,\n        token: tokenAddress,\n        amount: balance,\n        blockNumber: transaction.data.responseBody.blockNumber,\n        timestamp: transaction.data.responseBody.timestamp,\n        rawEvent: _event,\n        proofHash: keccak256(abi.encode(transaction))\n    });\n}\n```\n\nWe just ignore the proof, but then the fun part starts. We get the top-level event out of the response (this is the one that contains calldata and return data), check that the topic matches, and then decode the resulting data. Be careful, decoding the data might fail if you don't have the correct signature, so the example code is fine to show, but you might want to add more checks in production code.\n\nOnce the data of the top-level event is decoded, we check if the call data is what we expect and then decode the return data to get the balance, which is again dependent on what kind of return value was produced in the transaction. Again, the return data needs to be decoded (it might return something more complicated than just one `uint256`), but it is easy to get the full result. Once you have all this, you just write it to the contract storage, and you are done.\n\nLet's take a look at the test code and show a simple trick that is also hidden in there.\n\nThe code is practically the same as before: you create a transaction, query the data connector, and use the data in the contract. But this time, everything is done on the same (Coston - `testSGB`) network. This makes it a bit easier to test, as you don't need to change the network, but it is a minor thing.\n\nIt does sound strange (and pointless) to allow the Data Connector to be used on the same network, but the main improvement comes from the top-level relayer coming in the FSP. Once the Data Connector is included in the top-level protocol, any Data Connector data is immediately relayed to externally connected chains via relay (as is the FTSO data). This means that external chains can also observe what is happening on Flare.\n\nThink about this: up until now, you only relayed information from other chains to Flare, but now any example from the EVM part can immediately be replicated on the Sepolia chain with Flare being the source chain (where things happen).\n\n{/* <!-- Meh: ### Contract creation --> */}",
    "The [`EVMTransaction`](/fdc/attestation-types/evm-transaction) attestation type enables data collection about a transaction on an EVM chain.\nThe currently supported chain are: `ETH`, `FLR`, and `SGB`.\nYou can learn more about it in the official [specification repo](/fdc/attestation-types/evm-transaction).\n\nWe will now demonstrate how the FDC protocol can be used to collect the data of a given Ethereum transaction.\nThe transaction we will be observing has the hash `0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c`; this is an arbitrary transaction that we acquired from the Sepolia Ethereum testnet [explorer](https://sepolia.etherscan.io/).\n\nThe same procedure works for all supported sources, `ETH`, `FLR`, and `SGB`.\nThe source then requires only a slight modification; we will remind you of that when it comes up in the guide.\n\nIn this guide, we will be following the steps outlined in the [FDC Overview](/fdc/overview).\n\nOur implementation requires handling the FDC voting round finalization process.\nTo manage this, we will create separate scripts in `script/fdcExample/EVMTransaction.s.sol` that handle different stages of the validation process:\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\n...\n\nstring constant attestationTypeName = \"EVMTransaction\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n ...\n}\n\ncontract SubmitAttestationRequest is Script {\n ...\n}\n\ncontract RetrieveDataAndProof is Script {\n ...\n}\n\ncontract Deploy is Script {\n ...\n}\n...\n```\n\nThe names of included contracts mostly mirror the steps described in the [FDC guide](/fdc/overview).\n\nTo bridge the separate executions of the scripts, we will save the relevant data of each script to a file in the `dirPath` folder.\nEach succeeding script will then read that file to load the data.\n\n## Prepare request\n\nThe JSON request to the verifier is the same form for all attestation types, but the values of the fields differ between them.\nIt contains the following fields.\n\n### Required Fields\n\n- `attestationType` is the UTF8 hex string encoding of the attestation type name, zero-padded to 32 bytes.\n- `sourceId` is the UTF8 hex string encoding of the data source identifier name, zero-padded to 32 bytes.\n- `requestBody` is different for each attestation type.\n\nIn the case of `EVMTransaction`, `requestBody` is a JSON containing the fields:\n\n- `transactionHash`: hash (address) of the observed transaction\n- `requiredConfirmations`: the depth of the block containing the transaction at which it is considered confirmed, i.e. when the transaction itself is considered confirmed; as `uint16`\n- `provideInput`: a `bool` determining whether the `input` field is included in the response\n- `listEvents`: a `bool` determining whether the `events` field is included in the response\n- `logIndices`: an `uint32` array of indices of the events to be included in the response; if `listEvents` is set to false `false` and this field is not `[]`, the attestation request will fail\n\n### Reference Documentation\n\n- [EVMTransaction Specification](/fdc/attestation-types/evm-transaction)\n- [Verifier Interactive Docs](https://fdc-verifiers-testnet.flare.network/verifier/api-doc#/)\n\n### Example Values\n\n- `transactionHash`: `0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c`\n- `requiredConfirmations`: `1`\n- `provideInput`: `true`\n- `listEvents`: `true`\n- `logIndices`: `[]`\n\n### Encoding Functions\n\nTo encode values into UTF8 hex:\n\n- `toUtf8HexString`: Converts a string to UTF8 hex.\n- `toHexString`: Zero-right-pads the string to 32 bytes.\n\nThese functions are included in the [Base library](https://github.com/flare-foundation/flare-foundry-starter/blob/master/script/fdcExample/Base.s.sol) within the [example repository](https://github.com/flare-foundation/flare-foundry-starter), but they can also be defined locally in your contract or script.\n\nThe first function translates a string to a UTF8 encoded hex string.\nThe other then zero-right-pads such a string, so that it is 32 bytes long.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction toHexString(\n bytes memory data\n) public pure returns (string memory) {\n bytes memory alphabet = \"0123456789abcdef\";\n\n bytes memory str = new bytes(2 + data.length * 2);\n str[0] = \"0\";\n str[1] = \"x\";\n for (uint i = 0; i < data.length; i++) {\n str[2 + i * 2] = alphabet[uint(uint8(data[i] >> 4))];\n str[3 + i * 2] = alphabet[uint(uint8(data[i] & 0x0f))];\n }\n return string(str);\n}\n```\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction toUtf8HexString(\n string memory _string\n) internal pure returns (string memory) {\n string memory encodedString = toHexString(\n abi.encodePacked(_string)\n );\n uint256 stringLength = bytes(encodedString).length;\n require(stringLength <= 64, \"String too long\");\n uint256 paddingLength = 64 - stringLength + 2;\n for (uint256 i = 0; i < paddingLength; i++) {\n encodedString = string.concat(encodedString, \"0\");\n }\n return encodedString;\n}\n```\n\nWe also define a helper function for formatting data into a JSON string.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction prepareAttestationRequest(\n string memory attestationType,\n string memory sourceId,\n string memory requestBody\n) internal view returns (string[] memory, string memory) {\n // We read the API key from the .env file\n string memory apiKey = vm.envString(\"VERIFIER_API_KEY\");\n\n // Preparing headers\n string[] memory headers = prepareHeaders(apiKey);\n // Preparing body\n string memory body = prepareBody(\n attestationType,\n sourceId,\n requestBody\n );\n\n console.log(\n \"headers: %s\",\n string.concat(\"{\", headers[0], \", \", headers[1]),\n \"}n\"\n );\n console.log(\"body: %sn\", body);\n return (headers, body);\n}\n\nfunction prepareHeaders(\n string memory apiKey\n) internal pure returns (string[] memory) {\n string[] memory headers = new string[](2);\n headers[0] = string.concat('\"X-API-KEY\": ', apiKey);\n headers[1] = '\"Content-Type\": \"application/json\"';\n return headers;\n}\n\nfunction prepareBody(\n string memory attestationType,\n string memory sourceId,\n string memory body\n) internal pure returns (string memory) {\n return\n string.concat(\n '{\"attestationType\": ',\n '\"',\n attestationType,\n '\"',\n ', \"sourceId\": ',\n '\"',\n sourceId,\n '\"',\n ', \"requestBody\": ',\n body,\n \"}\"\n );\n}\n\n```\n\nIn the example repository, these are once again included within the [Base](https://github.com/flare-foundation/flare-foundry-starter/blob/master/script/fdcExample/Base.s.sol) library file.\n\nThus, the part of the script that prepares the verifier request looks like:\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\nimport {console} from \"dependencies/forge-std-1.9.5/src/console.sol\";\nimport {Script} from \"dependencies/forge-std-1.9.5/src/Script.sol\";\nimport {Base} from \"./Base.s.sol\";\n...\n\nstring constant attestationTypeName = \"EVMTransaction\";\nstring constant dirPath = \"data/\";\n\ncontract PrepareAttestationRequest is Script {\n using Surl for *;\n // Setting request data\n string public transactionHash =\n \"0x4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\";\n string public requiredConfirmations = \"1\";\n string public provideInput = \"true\";\n string public listEvents = \"true\";\n string public logIndices = \"[]\";\n string public sourceName = \"testETH\"; // Bitcoin chain ID\n string public baseSourceName = \"eth\"; // Part of verifier URL\n\n function prepareRequestBody(\n string memory transactionHash,\n string memory requiredConfirmations,\n string memory provideInput,\n string memory listEvents,\n string memory logIndices\n ) private pure returns (string memory) {\n return\n string.concat(\n '{\"transactionHash\": ',\n '\"',\n transactionHash,\n '\"',\n ', \"requiredConfirmations\": ',\n '\"',\n requiredConfirmations,\n '\"',\n ', \"provideInput\": ',\n provideInput,\n ', \"listEvents\": ',\n listEvents,\n ', \"logIndices\": ',\n logIndices,\n \"}\"\n );\n }\n\n function run() external {\n // Preparing request data\n string memory attestationType = toUtf8HexString(\n attestationTypeName\n );\n string memory sourceId = toUtf8HexString(sourceName);\n string memory requestBody = prepareRequestBody(\n transactionHash,\n requiredConfirmations,\n provideInput,\n listEvents,\n logIndices\n );\n\n (string[] memory headers, string memory body) =\n prepareAttestationRequest(attestationType, sourceId, requestBody);\n\n ...\n }\n}\n\n...\n```\n\nIf you are accessing a different chain, replace the `baseSourceName` with an appropriate value, `flr` or `sgb`.\n\nThe code above differs slightly from the [starter example](https://github.com/flare-foundation/flare-foundry-starter).\nBut, if we remove the ellipses `...` signifying missing code, we can still run the script.\n\nBecause of the `console.log` commands it will produce JSON strings that represent valid requests; we can then pass this to the [interactive verifier](https://fdc-verifiers-testnet.flare.network/verifier/btc/api-doc#/EVMTransaction/BTCEVMTransactionVerifierController_prepareRequest) to check what the response will be.\n\nWe can run the script by calling the following commands in the console.\n\n```bash\nsource .env\n```\n\n```bash\nforge script script/fdcExample/EVMTransaction.s.sol:PrepareAttestationRequest --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast  --ffi\n```\n\nThe prerequisite for this is that the `.env` file is not missing the `PRIVATE KEY` and `COSTON2_RPC_URL` values.\nThe script can also access other chains; that can be achieved by replacing the `--rpc-url` value with `COSTON_RPC_URL`, `FLARE_RPC_URL`, or `SONGBIRD_RPC_URL`.\n\n## Post request to verifier\n\nBefore submitting address validation requests to the FDC protocol, we first need to prepare and send them to a verifier server.\nThis section walks through the request submission process using the `surl` package.\nWe place `using Surl for *;` at the start of our `PostRequest` contract, and then call its `post` method on the verifier URL.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\n(, bytes memory data) = url.post(headers, body);\n```\n\nWe construct the URL by appending to the verifier address `https://fdc-verifiers-testnet.flare.network/` the path `verifier/btc/EVMTransaction/prepareRequest`.\nWe can do so dynamically with the following code.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nstring memory baseUrl = \"https://fdc-verifiers-testnet.flare.network/\";\nstring memory url = string.concat(\n baseUrl,\n \"verifier/\",\n baseSourceName,\n \"/\",\n attestationTypeName,\n \"/prepareRequest\"\n);\nconsole.log(\"url: %s\", url);\nstring memory requestBody = string.concat(\n '{\"addressStr\": \"',\n addressStr,\n '\"}'\n);\n```\n\nLastly, we parse the return data from the verifier server.\nUsing the Foundry `parseJson` shortcode, and a custom struct `AttestationResponse`, we decode the returned data and extract from it the ABI encoded request.\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction parseAttestationRequest(\n bytes memory data\n) internal pure returns (AttestationResponse memory) {\n string memory dataString = string(data);\n bytes memory dataJson = vm.parseJson(dataString);\n\n AttestationResponse memory response = abi.decode(\n dataJson,\n (AttestationResponse)\n );\n\n console.log(\"response status: %sn\", response.status);\n console.log(\"response abiEncodedRequest: \");\n console.logBytes(response.abiEncodedRequest);\n console.log(\"n\");\n\n return response;\n}\n```\n\n:::info\nIf everything went right, the `abiEncodedRequest` should look something like this.\n\n```\n0x\n45564d5472616e73616374696f6e000000000000000000000000000000000000\n7465737445544800000000000000000000000000000000000000000000000000\n9d410778cc0b2b8f1b8eaa79cbd0eed5d3be7514dea070e2041ad00a4c6e88f8\n0000000000000000000000000000000000000000000000000000000000000020\n4e636c6590b22d8dcdade7ee3b5ae5572f42edb1878f09b3034b2f7c3362ef3c\n0000000000000000000000000000000000000000000000000000000000000001\n0000000000000000000000000000000000000000000000000000000000000001\n0000000000000000000000000000000000000000000000000000000000000001\n00000000000000000000000000000000000000000000000000000000000000a0\n0000000000000000000000000000000000000000000000000000000000000000\n```\n\nLet's break it down line by line:\n\n- **First line:** `toUtf8HexString(\"EVMTransaction\")`\n- **Second line:** `toUtf8HexString(\"testETH\")`\n- **Third line:** message integrity code (MIC), a hash of the whole response salted with a string `\"Flare\"`, ensures the integrity of the attestation\n- **Remaining lines:** ABI encoded `EVMTransaction.RequestBody` Solidity struct\n  :::\n\nWhat this demonstrates is that, with some effort, the `abiEncodedRequest` can be constructed manually.\n\nWe write the `abiEncodedRequest` to a file (`data/EVMTransaction_abiEncodedRequest.txt`) to it in the next step.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_abiEncodedRequest\"),\n    StringsBase.toHexString(response.abiEncodedRequest),\n    true\n);\n```\n\n## Submit request to FDC\n\nThis step transitions from off-chain request preparation to on-chain interaction with the FDC protocol. Now, we submit the validated request to the blockchain using deployed smart contracts.\n\n### Submit request\n\nThe entire submission process requires only five key steps:\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nfunction submitAttestationRequest(bytes memory abiEncodedRequest) internal {\n    uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    vm.startBroadcast(deployerPrivateKey);\n    IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n            .getFdcRequestFeeConfigurations();\n    uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n        abiEncodedRequest\n    );\n    console.log(\"request fee: %sn\", requestFee);\n    vm.stopBroadcast();\n\n    vm.startBroadcast(deployerPrivateKey);\n\n    // address fdcHubAddress = 0x48aC463d7975828989331F4De43341627b9c5f1D;\n    IFdcHub fdcHub = ContractRegistry.getFdcHub();\n    console.log(\"fcdHub address:\");\n    console.log(address(fdcHub));\n    console.log(\"n\");\n\n    fdcHub.requestAttestation{value: requestFee}(abiEncodedRequest);\n    vm.stopBroadcast();\n}\n```\n\n### Step-by-Step Breakdown\n\n1.  Load Private Key\n    The private key is read from the `.env` file using Foundry's `envUint` function:\n\n```solidity\n       uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n```\n\n2.  Obtain Request Fee\n    We retrieve the required requestFee from the `FdcRequestFeeConfigurations` contract:\n\n```solidity\n        IFdcRequestFeeConfigurations fdcRequestFeeConfigurations = ContractRegistry\n            .getFdcRequestFeeConfigurations();\n        uint256 requestFee = fdcRequestFeeConfigurations.getRequestFee(\n            response.abiEncodedRequest\n        );\n\n```\n\n    This is done in a separate broadcast to ensure `requestFee` is available before submitting the request.\n\n3. Access `FdcHub` Contract\n   Using the `ContractRegistry` library (from `flare-periphery`), we fetch the `FdcHub` contract:\n\n```solidity\n   IFdcHub fdcHub = ContractRegistry.getFdcHub();\n   console.log(\"fcdHub address:\");\n   console.log(address(fdcHub));\n   console.log(\"n\");\n```\n\n4. Submit the Attestation Request\n   We send the attestation request with the required fee:\n\n```solidity\n fdcHub.requestAttestation{value: requestFee}(response.abiEncodedRequest);\n```\n\n5.  Calculate the Voting Round Number\n    To determine the voting round in which the attestation request is processed, we query the `FlareSystemsManager` contract:\n\n```solidity\n       // Calculating roundId\n       IFlareSystemsManager flareSystemsManager = ContractRegistry\n           .getFlareSystemsManager();\n\n       uint32 roundId = flareSystemsManager.getCurrentVotingEpochId();\n       console.log(\"roundId: %sn\", Strings.toString(roundId));\n\n```\n\nThis can be done within the existing broadcast or in a new one (as done in the demo repository for better code organization).\n\nAgain, we write the `roundId` to a file (`data/EVMTransaction_roundId.txt`).\n\n## Wait for response\n\nWe wait for the round to finalize.\nThis takes no more than 145 seconds.\n\nYou can check if the request was submitted successfully on the [AttestationRequests](https://coston2-systems-explorer.flare.rocks/attestation-request) page on the Flare Systems Explorer website.\nTo check if the round has been finalized, go to [Finalizations](https://coston2-systems-explorer.flare.rocks/finalizations) page.\n\nIf you want to learn more about how the FDC protocol works, check [here](/fdc/overview).\n\n## Prepare proof request\n\nWe prepare the proof request in a similar manner as in the step Prepare the request, by string concatenation.\nWe import two new variables from the `.env` file; the URL of a verifier server and the corresponding API key.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nstring memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\nstring memory apiKey = vm.envString(\"X_API_KEY\");\n```\n\nAlso, by repeatedly using the Foundry shortcode `vm.readLine`, we read the data, saved to a file in the previous step, to variables.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nstring memory requestBytes = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_abiEncodedRequest\",\n        \".txt\"\n    )\n);\nstring memory votingRoundId = vm.readLine(\n    string.concat(\n        dirPath,\n        attestationTypeName,\n        \"_votingRoundId\",\n        \".txt\"\n    )\n);\n```\n\nThe code is as follows.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\ncontract RetrieveDataAndProof is Script {\n using Surl for *;\n\n function run() external {\n    string memory daLayerUrl = vm.envString(\"COSTON2_DA_LAYER_URL\");\n    string memory apiKey = vm.envString(\"X_API_KEY\");\n\n    string memory requestBytes = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_abiEncodedRequest\",\n            \".txt\"\n        )\n    );\n    string memory votingRoundId = vm.readLine(\n        string.concat(\n            dirPath,\n            attestationTypeName,\n            \"_votingRoundId\",\n            \".txt\"\n        )\n    );\n\n    console.log(\"votingRoundId: %sn\", votingRoundId);\n    console.log(\"requestBytes: %sn\", requestBytes);\n\n    string[] memory headers = Base.prepareHeaders(apiKey);\n    string memory body = string.concat(\n        '{\"votingRoundId\":',\n        votingRoundId,\n        ',\"requestBytes\":\"',\n        requestBytes,\n        '\"}'\n    );\n    console.log(\"body: %sn\", body);\n    console.log(\n        \"headers: %s\",\n        string.concat(\"{\", headers[0], \", \", headers[1]),\n        \"}n\"\n    );\n\n\n ...\n }\n}\n```\n\n## Post proof request to DA Layer\n\nWe post the proof request to a chosen DA Layer provider server also with the same code as we did in the previous step.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nstring memory url = string.concat(\n daLayerUrl,\n // \"api/v0/fdc/get-proof-round-id-bytes\"\n \"api/v1/fdc/proof-by-request-round-raw\"\n);\nconsole.log(\"url: %sn\", url);\n\n(, bytes memory data) = Base.postAttestationRequest(url, headers, body);\n```\n\nParsing the returned data requires the definition of an auxiliary `struct`.\n\n{/* <!-- TODO rename after renaming --> */}\n\n```solidity title=\"scrip/fdcExample/Base.s.sol\"\nstruct ParsableProof {\n bytes32 attestationType;\n bytes32[] proofs;\n bytes responseHex;\n}\n```\n\nThe field `attestationType` holds the UTF8 encoded hex string of the attestation type name, padded to 32 bytes.\nThus, it should match the value of the `attestationType` parameter in the Prepare the request step.\nIn our case, that value is `0x45564d5472616e73616374696f6e000000000000000000000000000000000000`.\n\nThe array `proofs` holds the Merkle proofs of our attestation request.\n\nLastly, `responseHex` is the ABI encoding of the chosen attestation type response struct.\nIn this case, it is the `IEVMTransaction.Response` struct.\nWe retrieve this data as follows.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nbytes memory dataJson = parseData(data);\nParsableProof memory proof = abi.decode(dataJson, (ParsableProof));\n\nIEVMTransaction.Response memory proofResponse = abi.decode(\n proof.responseHex,\n (IEVMTransaction.Response)\n);\n```\n\n## Verify proof\n\nFDC optimizes on-chain storage costs by implementing a hybrid data verification system.\nInstead of storing complete datasets on-chain, it stores only Merkle proofs, while maintaining the actual data through trusted off-chain providers.\nThis approach significantly reduces gas costs while preserving data integrity.\n\nWhen requested, data providers supply the original data along with its corresponding Merkle proof.\nThe protocol verifies data authenticity by comparing the provided Merkle proof against the on-chain Merkle root.\nA successful match confirms the data's integrity and authenticity within the FDC system.\n\nWhile data verification is optional if you trust your data provider, FDC ensures transparency by making verification possible at any time.\nThis capability is crucial for maintaining system integrity and allowing users to independently verify data when needed, particularly in production environments.\n\nFDC provides verification functionality through the `FdcVerification` contract.\nTo verify address validity, we first format our data using the `IEVMTransaction.Proof` struct, which contains both the Merkle proof and the response data.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nIEVMTransaction.Proof memory _proof = IEVMTransaction.Proof(\n proof.proofs,\n proofResponse\n);\n```\n\nWe then access the `FdcVerification` contract through the `ContractRegistry`, and feed it the proof.\nIf we proof is valid, the function `verifyEVMTransaction` will return `true`, otherwise `false`.\nAs before, we wrap the whole thing into a broadcast environment, using the `PRIVATE_KEY` variable from our `.env` file.\n\n```solidity\nuint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\nvm.startBroadcast(deployerPrivateKey);\n\nbool isValid = ContractRegistry\n .getFdcVerification()\n .verifyEVMTransaction(proof);\nconsole.log(\"proof is valid: %sn\", StringsBase.toString(isValid));\n\nvm.stopBroadcast();\n```\n\nIn actuality, we will only verify the proof within a deployed contract, which we will define in the next step.\nWhat we will do here instead is, we will save the proof to a file so that it can be later loaded into a variable.\nThe code that does this is as follows.\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\nBase.writeToFile(\n    dirPath,\n    string.concat(attestationTypeName, \"_proof\"),\n    StringsBase.toHexString(abi.encode(_proof)),\n    true\n);\n```\n\n## Use the data\n\nWe will now define a simple contract, that will demonstrate how the data can be used onchain.\nThe contract will receive data and proof of an Ethereum transaction, and store all token transfers contained into an array of `TokenTransfer` structs.\nIt will do so only if the transaction is valid.\n\n```solidity title=\"src/fdcExample/EVMTransaction.sol\"\nstruct TokenTransfer {\n    address from;\n    address to;\n    uint256 value;\n}\n```\n\nFirst, we define an interface that the contract will inherit from.\nWe do so, so that we may contact the contract later through a script.\n\n```solidity title=\"src/fdcExample/EVMTransaction.sol\"\ninterface ITransferEventListener {\n    function collectTransferEvents(\n        IEVMTransaction.Proof calldata _transaction\n    ) external;\n}\n```\n\nThe interface exposes the only function the script will call, `collectTransferEvents`.\nWe now define the contract as follows.\n\n```solidity title=\"src/fdcExample/EVMTransaction.sol\"\ncontract TransferEventListener is ITransferEventListener {\n    TokenTransfer[] public tokenTransfers;\n    address public USDC_CONTRACT = 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238; // USDC contract address on sepolia\n\n    function isEVMTransactionProofValid(\n        IEVMTransaction.Proof calldata transaction\n    ) public view returns (bool) {\n        // Use the library to get the verifier contract and verify that this transaction was proved by state connector\n        IFdcVerification fdc = ContractRegistry.getFdcVerification();\n        console.log(\"transaction: %sn\", FdcStrings.toJsonString(transaction));\n        return true;\n        //return fdc.verifyEVMTransaction(transaction);\n    }\n\n    function collectTransferEvents(\n        IEVMTransaction.Proof calldata _transaction\n    ) external {\n        // 1. FDC Logic\n        // Check that this EVMTransaction has indeed been confirmed by the FDC\n        require(\n            isEVMTransactionProofValid(_transaction),\n            \"Invalid transaction proof\"\n        );\n\n        // 2. Business logic\n        // Go through all events\n        for (\n            uint256 i = 0;\n            i < _transaction.data.responseBody.events.length;\n            i++\n        ) {\n            // Get current event\n            IEVMTransaction.Event memory _event = _transaction\n                .data\n                .responseBody\n                .events[i];\n\n            // Disregard events that are not from the USDC contract\n            if (_event.emitterAddress != USDC_CONTRACT) {\n                continue;\n            }\n\n            // Disregard non Transfer events\n            if (\n                _event.topics.length == 0 || // No topics\n                // The topic0 doesn't match the Transfer event\n                _event.topics[0] !=\n                keccak256(abi.encodePacked(\"Transfer(address,address,uint256)\"))\n            ) {\n                continue;\n            }\n\n            // We now know that this is a Transfer event from the USDC contract - and therefore know how to decode topics and data\n            // Topic 1 is the sender\n            address sender = address(uint160(uint256(_event.topics[1])));\n            // Topic 2 is the receiver\n            address receiver = address(uint160(uint256(_event.topics[2])));\n            // Data is the amount\n            uint256 value = abi.decode(_event.data, (uint256));\n\n            // Add the transfer to the list\n            tokenTransfers.push(\n                TokenTransfer({from: sender, to: receiver, value: value})\n            );\n        }\n    }\n\n    function getTokenTransfers()\n        external\n        view\n        returns (TokenTransfer[] memory)\n    {\n        TokenTransfer[] memory result = new TokenTransfer[](\n            tokenTransfers.length\n        );\n        for (uint256 i = 0; i < tokenTransfers.length; i++) {\n            result[i] = tokenTransfers[i];\n        }\n        return result;\n    }\n}\n```\n\nWe deploy the contract through a simple script.\nThe script creates a new `TransferEventListener` contract, and writes its address to a file (`data/EVMTransaction_listenerAddress.txt`).\n\n```solidity title=\"scrip/fdcExample/EVMTransaction.s.sol\"\ncontract DeployContract is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n        TransferEventListener listener = new TransferEventListener();\n        address listenerAddress = address(listener);\n        vm.stopBroadcast();\n\n        Base.writeToFile(\n            dirPath,\n            string.concat(attestationTypeName, \"_listenerAddress\"),\n            StringsBase.toHexString(abi.encodePacked(listenerAddress)),\n            true\n        );\n    }\n}\n```\n\nWe deploy the contract with the following console command.\n\n```bash\nforge script script/fdcExample/EVMTransaction.s.sol:DeployContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --verify --ffi\n```\n\nLastly, we define a script that interacts with the above contract.\nIt first reads the ABI encoded proof data, and the contract address, from files.\nThen, it connects to the above contract at the saved address (this is why we require the interface).\nWith that, it is able to call the `getTokenTransfers` method of the contract.\n\n```solidity title=\"script/fdcExample/EVMTransaction.s.sol\"\ncontract InteractWithContract is Script {\n    function run() external {\n        string memory addressString = vm.readLine(\n            string.concat(\n                dirPath,\n                attestationTypeName,\n                \"_listenerAddress\",\n                \".txt\"\n            )\n        );\n        address listenerAddress = vm.parseAddress(addressString);\n        string memory proofString = vm.readLine(\n            string.concat(dirPath, attestationTypeName, \"_proof\", \".txt\")\n        );\n        bytes memory proofBytes = vm.parseBytes(proofString);\n        IEVMTransaction.Proof memory proof = abi.decode(\n            proofBytes,\n            (IEVMTransaction.Proof)\n        );\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n        ITransferEventListener listener = ITransferEventListener(\n            listenerAddress\n        );\n        console.logAddress(address(listener));\n        listener.collectTransferEvents(proof);\n        vm.stopBroadcast();\n    }\n}\n```\n\nWe run this script with the console command:\n\n```bash\nforge script script/fdcExample/EVMTransaction.s.sol:InteractWithContract --private-key $PRIVATE_KEY --rpc-url $COSTON2_RPC_URL --etherscan-api-key $FLARE_API_KEY --broadcast --ffi\n\n```",
    "import Remix from \"@site/src/components/remix\";\nimport CodeBlock from \"@theme/CodeBlock\";\nimport ITypeTemplate from \"!!raw-loader!/examples/developer-hub-solidity/ITypeTemplate.sol\";\n\nThis guide is for developers who want to extend FDC by creating a new attestation type. In this guide, you will learn how to:\n\n- Setup a new attestation type definition in Solidity.\n\n- Generate a attestation type verifier server in TypeScript with controllers and services.\n\n- Create an onchain attestation verifier contract in Solidity.\n\n## Prerequisites\n\nEnsure you have the following tools installed:\n\n- [yarn](https://yarnpkg.com/)\n- [Docker](https://www.docker.com)\n\n## Setup type definition\n\n1. **Clone and setup repository:**\n\n   ```bash\n   git clone https://github.com/flare-foundation/VerifierServerGenerator.git\n   yarn\n   ```\n\n2. **Create a definition file:** In the root of the cloned repo a template definition file (`ITypeTemplate.sol.example`) is provided. Rename the file to `ICustomType.sol` and the interface defined within the file to to `ICustomType`. You can use any name in place of `CustomType` upto 32 ASCII characters.\n\n   ```bash\n   mkdir contracts/interfaces/types\n   cp ICustomType.sol contracts/interfaces/types\n   ```\n\n   <details>\n     <summary>Definition file template</summary>\n     <CodeBlock language=\"solidity\" title=\"ITypeTemplate.sol.example\">\n       {ITypeTemplate}\n     </CodeBlock>\n   </details>\n\n3. **Modify `@custom` props:**\n\n   - `@custom:name`: Rename to `@custom:CustomType`.\n   - `@custom:supported`: Indicate the data source, currently supported sources - `BTC`, `DOGE` ,`XRP`, `FLR`, `SGB`, `ETH` and `WEB2`. A single type can support multiple data sources.\n   - `@custom:verification`: Add instructions on how to construct a response from the request.\n   - `@custom:lut`: Leave as default, this will be used later.\n\n4. **Define request and response structs:** Define the inputs to the `RequestBody` and `ResponseBody` structs. All fields should be commented with `@param fieldName` as in the template.\n\n## Generate verifier server\n\n1. **Generate verifier server template:**\n\n   ```bash\n   yarn generate server -t ICustomType\n   ```\n\n   :::warning[Overwriting files]\n\n   Any changes made to generated files in `server/ICustomType` are overwritten if you call\n   `generate server`.\n   :::\n\n2. **Define data sources:**\n\n   - **Single data source:** Change the source in the constructor of `ICustomType.service.ts` to the one specified in the type definition.\n     Modify the `verifyRequest` function to match the verification rules defined by your attestation type.\n\n   - **Multiple data sources:** Each source needs its own service and controllers.\n\n     1. **Create services for each source:** In `ICustomType.service.ts` for each source, create a new class, e.g. `<SourceID>ICustomTypeVerifierService`, that implements `verifyRequest` function for the source.\n\n     2. **Create controllers for each source:** In `ICustomType.controller.ts` for each source, create a new class, e.g. `<SourceID>ICustomTypeVerifierController`, and set the type of verifierService to the one created for this type:\n\n        `@ApiTags('ICustomType')` → `@ApiTags('ICustomType', '<sourceID>')`\n\n        `@Controller('ICustomType')` → `@Controller('<sourceID>/ICustomType')`.\n\n     3. **Add services and controllers to module:** In `ICustomType.module.ts`, add all new services and controllers to the respective arrays.\n\n3. **Generate Dockerfile:** Run the following command to create a Dockerfile inside `server/ICustomType/` that prepares the server to be run inside a Docker container.\n\n   ```bash\n   yarn build\n   ```\n\n4. **Build server image:** Run the following to build an image for `ICustomType`\n\n   ```bash\n   docker build -t library/verifier-indexer-api-CustomType -f server/ICustomType/Dockerfile .\n   ```\n\n5. **Start server:** Run the following to start the server and expose port `<PORT>`\n\n   ```bash\n   docker run --rm --publish <PORT>:8000  library/verifier-indexer-api-CustomType\n   ```\n\n## Create verifier contract\n\n:::warning[In production]\n\nIn production use, the verifier contract should validate the response with proof against the Merkle root stored on the [`Relay`](/network/fsp/solidity-reference/IRelay) contract.\n\n:::\n\nAfter completing the last steps a mock verification contract is generated with a `verifyCustomType` method that accepts an attestation response with Merkle proof (see the `Proof` struct in `ICustomType.sol`) and always confirms it.",
    "import StandardAddressHash from \"./_standard_address_hash.mdx\";\nimport StandardPaymentReference from \"./_standard_payment_reference.mdx\";\nimport TransactionSuccessStatus from \"./_transaction_success_status.mdx\";\nimport Finality from \"./_finality.mdx\";\nimport IPayment from \"../reference/IPayment.mdx\";\n\nInformation about a transaction on an external chain that is classified as a **native currency payment**.\nEach supported blockchain specifies how a payment transaction should be formatted to be provable using this attestation type. These provable payments mimic traditional banking transactions where entity A sends a native currency to entity B, with an optional payment reference.\n\n## Supported chains\n\n- `BTC` (Bitcoin)\n- `DOGE` (Dogecoin)\n- `XRP` (XRP Ledger)\n- Test networks: `testBTC` (Bitcoin Testnet v3), `testDOGE`, `testXRP`\n\n## Request\n\n| Field           | Solidity Type | Description                                                                                                                               |\n| --------------- | ------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| `transactionId` | `bytes32`     | Unique ID of the payment transaction.                                                                                                     |\n| `inUtxo`        | `uint256`     | For UTXO-based chains, this is the index of the transaction input associated with the source address. Set to `0` for non-UTXO chains.     |\n| `utxo`          | `uint256`     | For UTXO-based chains, this is the index of the transaction output associated with the receiving address. Set to `0` for non-UTXO chains. |\n\n## Response\n\n| Field                          | Solidity Type | Description                                                                                                                    |\n| ------------------------------ | ------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| `blockNumber`                  | `uint64`      | The block number in which the transaction is included.                                                                         |\n| `blockTimestamp`               | `uint64`      | The timestamp of the block containing the transaction.                                                                         |\n| `sourceAddressHash`            | `bytes32`     | Standardized address hash of the source address.                                                                               |\n| `sourceAddressesRoot`          | `bytes32`     | The root of the Merkle tree of the source addresses.                                                                           |\n| `receivingAddressHash`         | `bytes32`     | Standardized address hash of the receiving address. Returns a zero 32-byte string if the transaction status is not successful. |\n| `intendedReceivingAddressHash` | `bytes32`     | Standardized address hash of the intended receiving address if the transaction failed.                                         |\n| `spentAmount`                  | `int256`      | Amount (in minimal units) spent by the source address.                                                                         |\n| `intendedSpentAmount`          | `int256`      | Intended amount (in minimal units) to be spent by the source address, relevant if the transaction status is unsuccessful.      |\n| `receivedAmount`               | `int256`      | Amount (in minimal units) received by the receiving address.                                                                   |\n| `intendedReceivedAmount`       | `int256`      | Intended amount (in minimal units) to be received by the receiving address if the transaction failed.                          |\n| `standardPaymentReference`     | `bytes32`     | [Standard payment reference](#standard-payment-reference).                                                                     |\n| `oneToOne`                     | `bool`        | Indicates if the transaction involves only one source and one receiver.                                                        |\n| `status`                       | `uint8`       | [Transaction success status](#transaction-success-status).                                                                     |\n\n:::warning[Standard Payment Reference]\n\nIf a transaction has no `standardPaymentReference`, it is set to default value, thus, zero value reference should be used with caution.\n\n:::\n\n## Verification Process\n\n1. The transaction identified by `transactionId` is fetched from the relevant blockchain node or indexer.\n2. If the transaction cannot be retrieved or is in a block with insufficient [confirmations](#finality), the attestation request is rejected.\n3. Once the transaction data is fetched, a [payment summary](#payment-summary) is computed according to the chain-specific rules.\n   - If the payment summary is successfully generated, the response is populated using this data.\n   - If the summary cannot be computed, the attestation request is rejected.\n4. The fields `blockNumber` and `blockTimestamp` are extracted from the block data if they are not directly available in the transaction data.\n   - For **Bitcoin** and **Dogecoin**, the `blockTimestamp` is derived from the **mediantime** of the block.\n   - For **XRPL**, the `blockTimestamp` is derived from the **close time** of the ledger, converted to UNIX time.\n\n:::note[Lowest used timestamp]\n\nFor the `lowestUsedTimestamp` parameter, the **`blockTimestamp`** of the transaction is used.\n\n:::\n\n## Payment Summary\n\nA **payment summary** consolidates all relevant data about a transaction that represents a payment. This is particularly focused on payments between one source account (address) and one target account.\n\n- **UTXO Blockchains (e.g., BTC, DOGE)**: Payments can aggregate inputs from multiple addresses and distribute them to multiple outputs. The summary here is computed based on specified input and output indices that identify addresses of interest.\n- **XRPL**: Supports various transaction types, but a payment summary is only fully calculated for transactions of type `Payment`.\n\n### Structure\n\nThe summary includes the fields detailed in the table below.\nThe interpretation of certain fields may vary based on the blockchain.\nChain-specific explanations are provided in the sections that follow.\n\n| Field                      | Description                                                                           |\n| -------------------------- | ------------------------------------------------------------------------------------- |\n| `transactionId`            | The unique identifier of the transaction.                                             |\n| `transactionStatus`        | The [success status](#transaction-success-status) of the transaction.                 |\n| `standardPaymentReference` | A reference defined in the [standard payment reference](#standard-payment-reference). |\n| `oneToOne`                 | Indicates if the transaction involves a single sender and a single receiver.          |\n| `sourceAddress`            | The originating address involved in the transaction.                                  |\n| `sourceAddressesRoot`      | The root of the Merkle tree of the source addresses.                                  |\n| `spentAmount`              | The total amount spent by the source address.                                         |\n| `intendedSourceAmount`     | The expected amount intended to be sent from the source address.                      |\n| `receivingAddress`         | The target address receiving the payment.                                             |\n| `intendedReceivingAddress` | The expected target address intended to receive the payment.                          |\n| `receivedAmount`           | The actual amount received by the receiving address.                                  |\n| `intendedReceivingAmount`  | The expected amount intended to be received.                                          |\n\n:::note\n\n- **Standard Address Hashes**: [Standard address hashes](#standard-address-hash) can be derived from addresses.\n- If `transactionStatus` is not `SUCCESS`, the `receivingAddress` is set to an empty string, and its hash defaults to a zeroed 32-byte string.\n- **Standard Addresses Root** is the root of the Merkle tree build on double keccak256 hashes of the all source addresses of the transaction.\n\n:::\n\n### UTXO chains (Bitcoin and Dogecoin)\n\nThe payment summary for Bitcoin and Dogecoin is derived using specified indices for a transaction input and output.\n\n- **Conditions**:\n  - If the specified input or output does not exist, or lacks an address (e.g., outputs using `OP_RETURN`), no summary is generated.\n  - Coinbase transactions are not summarized.\n- **Data Sources**:\n  - For Bitcoin, all transaction details are retrieved using the `getrawtransaction` endpoint (verbosity 2) and `getblock`. This requires a Bitcoin node version ≥ 25.0.\n  - For Dogecoin, since `getrawtransaction` with verbosity 2 is not supported, alternative methods must be used to access input transaction data.\n\n| Field                      | Description                                                                                                                                     |\n| -------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| `transactionId`            | The transaction ID (`txid`). For SegWit transactions, this differs from `hash`.                                                                 |\n| `oneToOne`                 | `true` if only `sourceAddress` is present in inputs, and outputs include only `receivingAddress`, `sourceAddress` (for change), or `OP_RETURN`. |\n| `sourceAddress`            | Address of the specified input.                                                                                                                 |\n| `spentAmount`              | Total value of all inputs with `sourceAddress` minus total value of all outputs to `sourceAddress`.                                             |\n| `intendedSourceAmount`     | Same as `spentAmount`.                                                                                                                          |\n| `receivingAddress`         | Address of the specified output.                                                                                                                |\n| `intendedReceivingAddress` | Always matches `receivingAddress`.                                                                                                              |\n| `receivedAmount`           | Total value of outputs to `receivingAddress` minus total value of inputs from `receivingAddress`.                                               |\n| `intendedReceivingAmount`  | Same as `receivedAmount`.                                                                                                                       |\n\n### Account-based chains (XRPL)\n\nThe payment summary on XRPL is applicable only for transactions of type `Payment`.\n\n- **Conditions**:\n  - Only `Payment` transactions are summarized; other transaction types are ignored.\n  - A successful payment has exactly one sender and at most one receiver. If unsuccessful, no receiver is recorded.\n- **Data Sources**:\n  - Transaction details are obtained via the [`tx`](https://xrpl.org/tx.html) method.\n  - Changes made by the transaction are recorded in the `meta` field (or `metaData` if fetched via the `ledger` method) under `AffectedNodes`. Balance changes are found within `ModifiedNodes`, by comparing `FinalFields` and `PreviousFields`.\n\n| Field                      | Description                                                                                                                                |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| `transactionId`            | Transaction hash found in the `hash` field.                                                                                                |\n| `oneToOne`                 | Always `true`, as each `Payment` transaction has exactly one sender and at most one receiver.                                              |\n| `sourceAddress`            | Address that sent the payment, reducing its balance.                                                                                       |\n| `spentAmount`              | Amount by which `sourceAddress`'s balance was reduced.                                                                                     |\n| `intendedSourceAmount`     | Calculated as `Amount + Fee`. If `transactionStatus` is `SUCCESS`, it matches `spentAmount`.                                               |\n| `receivingAddress`         | Address that received the payment. If unsuccessful, this is an empty string.                                                               |\n| `intendedReceivingAddress` | Address specified in the `Destination` field.                                                                                              |\n| `receivedAmount`           | Amount by which the `receivingAddress`'s balance was increased. Can be zero if the transaction failed.                                     |\n| `intendedReceivingAmount`  | Expected increase in `intendedReceivingAddress`'s balance if successful. Found in the `Amount` field. Matches `spentAmount` if successful. |\n\n## Standard payment reference\n\n<StandardPaymentReference />\n\n## Transaction success status\n\n<TransactionSuccessStatus />\n\n## Standard address hash\n\n<StandardAddressHash />\n\n## Finality\n\n<Finality />\n\n## Contract interface\n\n<IPayment />",
    "import Finality from \"./_finality.mdx\";\nimport StandardAddressHash from \"./_standard_address_hash.mdx\";\nimport TransactionSuccessStatus from \"./_transaction_success_status.mdx\";\nimport StandardPaymentReference from \"./_standard_payment_reference.mdx\";\nimport IBalanceDecreasingTransaction from \"../reference/IBalanceDecreasingTransaction.mdx\";\n\nInformation describing a transaction that either **decreases the balance** for a specified address.\n\nA transaction is considered “balance decreasing” for the specified address if:\n\n1. The balance **after the transaction** is lower than **before**.\n2. The address is among the **signers** of the transaction (even if its balance is not reduced).\n\n## Supported chains\n\n- `BTC` (Bitcoin)\n- `DOGE` (Dogecoin)\n- `XRP` (XRP Ledger)\n- Test networks: `testBTC` (Bitcoin Testnet v3), `testDOGE`, `testXRP`\n\n## Request\n\n| Field                    | Solidity Type | Description                                                     |\n| ------------------------ | ------------- | --------------------------------------------------------------- |\n| `transactionId`          | `bytes32`     | Unique ID of the transaction to be verified.                    |\n| `sourceAddressIndicator` | `bytes32`     | Indicator of the address whose balance may have been decreased. |\n\n## Response\n\n| Field                      | Solidity Type | Description                                                            |\n| -------------------------- | ------------- | ---------------------------------------------------------------------- |\n| `blockNumber`              | `uint64`      | Block number containing the transaction.                               |\n| `blockTimestamp`           | `uint64`      | Timestamp of the block containing the transaction.                     |\n| `sourceAddressHash`        | `bytes32`     | Standard hash of the address indicated by `sourceAddressIndicator`.    |\n| `spentAmount`              | `int256`      | Amount spent by the source address in minimal units (can be negative). |\n| `standardPaymentReference` | `bytes32`     | Standardized payment reference of the transaction, if available.       |\n\n:::warning[Standard Payment Reference]\n\nIf a transaction has no `standardPaymentReference`, it is set to default value, thus, zero value reference should be used with caution.\n\n:::\n\n## Verification process\n\n1. The transaction identified by `transactionId` is fetched from the **source blockchain node** or a relevant indexer.\n2. If the transaction cannot be fetched or is in a block with insufficient [confirmations](#finality), the attestation request is rejected.\n3. Once the transaction is retrieved, the response fields are extracted if it qualifies as **balance decreasing** for the specified address.\n\nThe verification process is chain-specific and can be computed with a [balance decreasing summary](#balance-decreasing-summary), with details described below.\n\n### UTXO chains (Bitcoin and Dogecoin)\n\n- `sourceAddressIndicator`: Represents the index of the transaction input, formatted as a **0x-prefixed 32-byte string**.\n  - If the specified input does not exist or lacks an associated address, the attestation request is rejected.\n- `sourceAddress`: Address associated with the specified transaction input.\n- `spentAmount`: Calculated as `Sum of all inputs with sourceAddress - Sum of all outputs with sourceAddress`. The value can be negative.\n- `blockTimestamp`: The **mediantime** of the block.\n\n### Account-based chains (XRPL)\n\n- `sourceAddressIndicator`: The [standard address hash](#standard-address-hash) of the address in question.\n  - If the indicated address is not among the transaction signers and its balance was not decreased, the attestation request is rejected.\n- `spentAmount`: Difference between the balance of the address **after** and **before** the transaction. Can be negative.\n- `blockTimestamp`: The **close_time** of the ledger, converted to Unix time.\n\n:::note[Lowest used timestamp]\n\nFor the `lowestUsedTimestamp` parameter, the `blockTimestamp` of the transaction is used.\n\n:::\n\n## Balance decreasing summary\n\nA balance-decreasing summary analyses a transaction that has decreased or could possibly decrease the balance of an account.\n\nA balance-decreasing summary is calculated for a given transaction and source address indicator (`sourceAddressIndicator`).\nThe summary contains the fields as stated in the table below.\nThe interpretation of some fields is chain dependent.\nDescriptions of these fields are left empty and are later explained for each specific blockchain.\n\nFor a given transaction and an address indicator, the balance-decreasing summary can only be calculate if the transaction is considered to be balance-decreasing for the indicated address\nWhen implemented, the function that calculates the balance-decreasing summary\ntries to calculate it.\nIf it is successful, it returns a success status and the summary itself.\nIf not, it returns an error status.\n\n| Field                      | Description                                                |\n| -------------------------- | ---------------------------------------------------------- |\n| `transactionId`            | -                                                          |\n| `transactionStatus`        | [Transaction success status](#transaction-success-status). |\n| `sourceAddress`            | -                                                          |\n| `spentAmount`              | -                                                          |\n| `standardPaymentReference` | [Standard payment reference](#standard-payment-reference). |\n\nThe following are detailed descriptions of fields for each supported chain.\n\n### Bitcoin and Dogecoin\n\nFor Bitcoin and Dogecoin, `sourceAddressIndicator` is the index of a transaction input (in hex zero padded on the left to 0x prefixed 32 bytes).\nIf the input with the given index does not exist or the indicated input does not have an address, no summary is made.\nIn particular, no summary is made for coinbase transactions.\n\n| Field           | Description                                                                                                                        |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| `transactionId` | The transaction ID found in the field `txid`. For segwit transactions, this is not the same as _hash_.                             |\n| `sourceAddress` | Address of the indicated input.                                                                                                    |\n| `spentAmount`   | The sum of values of all inputs with `sourceAddress` minus the sum of values of all outputs with `sourceAddress`. Can be negative. |\n\n### XRPL\n\nFor XRPL, `sourceAddressIndicator` is [standardAddressHash](#standard-address-hash) of the indicated address.\nIf the `sourceAddressIndicator` does not match any of the addresses who signed the transaction or whose balance was decreased by the transaction, the summary is not made.\n\n| Field           |                                                                                                   |\n| --------------- | ------------------------------------------------------------------------------------------------- |\n| `transactionId` | Hash of the transaction found in the field `hash`.                                                |\n| `sourceAddress` | Address whose [standardAddressHash](#standard-address-hash) matches the `sourceAddressIndicator`. |\n| `spentAmount`   | The amount for which the balance of the `sourceAddress` has lowered. Can be negative.             |\n\n## Standard payment reference\n\n<StandardPaymentReference />\n\n## Transaction success status\n\n<TransactionSuccessStatus />\n\n## Standard address hash\n\n<StandardAddressHash />\n\n## Finality\n\n<Finality />\n\n## Contract interface\n\n<IBalanceDecreasingTransaction />",
    "An attestation request that fetches data from the given url and then edits the information with a jq transformation.\n\n## Supported sources\n\n- `WEB2`\n- test networks: `testWEB2`\n\n## Request\n\n| Field           | Solidity type | Description                                              |\n| --------------- | ------------- | -------------------------------------------------------- |\n| `url`           | `string`      | URL of the data source.                                  |\n| `postprocessJq` | `string`      | JQ filter to postprocess the json received from the url. |\n| `abi_signature` | `string`      | ABI signature of struct for encoding.                    |\n\n## Response\n\n| Field              | Solidity type | Description       |\n| ------------------ | ------------- | ----------------- |\n| `abi_encoded_data` | `bytes`       | ABI encoded data. |\n\n## Lowest Used Timestamp\n\nFor `lowestUsedTimestamp`, `0xffffffffffffffff` ($2^{64}-1$ in hex) is used.\n\n## Verification process\n\nQuery the URL with GET method.\nIf the query is unsuccessful or does not return a json, reject the request.\n\nApply the jq filter specified in the request to the received json.\n\nABI encode the filtered json with the abi_signature provided in the request and return it as abi_encoded_data.\n\n`LowestUsedTimestamp` is unlimited.",
    "Transactions on different blockchains have various success statuses.\nSome blockchains may include transactions even if they failed to execute as intended.\n\n| Status             | Code |\n| ------------------ | ---- |\n| `SUCCESS`          | 0    |\n| `SENDER_FAILURE`   | 1    |\n| `RECEIVER_FAILURE` | 2    |\n\n**Bitcoin and Dogecoin**\n\nIt is not possible to include an unsuccessful transaction in a Bitcoin or Dogecoin block.\nHence, if a transaction is included on a confirmed block, its status is \"SUCCESS.\"\n\n**XRPL**\n\nOn XRPL, some transactions that failed (based on the reason for failure) can be included in a confirmed block.\n\n- **`tesSUCCESS`**: Transaction successful.\n- **`tec`-class codes**: Indicate reasons for failure, such as:\n  - `tecDST_TAG_NEEDED`: Missing required destination tag.\n  - `tecNO_DST`: Nonexistent or unfunded destination address.\n  - `tecNO_PERMISSION`: Source address lacks permission to send funds.\n",
    "A standard payment reference is defined as a 32-byte sequence that can be added to a payment transaction, in the same way that a payment reference is attached to a traditional banking transaction.\n\n### Bitcoin and Dogecoin\n\n- Uses `OP_RETURN` to store references.\n- A transaction is considered to have a `standardPaymentReference` defined if it has:\n  - Exactly one output UTXO with `OP_RETURN` script, and\n  - The script is of the form `OP_RETURN <reference>` or `6a<lengthOfReferenceInHex><reference> `in hex, where the length of the reference is 32 bytes.\n- Then `0x<reference>` is the `standardPaymentReference`.\n\n### XRPL\n\n- Uses the `memoData` field.\n- A transaction has a `standardPaymentReference` if it has:\n  - Exactly one [Memo](https://xrpl.org/transaction-common-fields.html#memos-field), and\n  - The `memoData` of this field is a hex string that represents a byte sequence of exactly 32 bytes.\n- This 32-byte sequence defines the `standardPaymentReference`.\n",
    "import IEVMTransaction from \"../reference/IEVMTransaction.mdx\";\n\nInformation about an Ethereum Virtual Machine (EVM) transaction, including details on associated events if specified.\n\n## Supported chains\n\n- `ETH` (Ethereum)\n- `FLR` (Flare Mainnet)\n- `SGB` (Songbird Canary-Network)\n- Test networks: `testETH` (Ethereum Sepolia), `testFLR` (Flare Testnet Coston2), `testSGB` (Songbird Testnet Coston)\n\n## Request\n\n| Field                   | Solidity Type | Description                                                                                                                                                                                                                                                     |\n| ----------------------- | ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `transactionHash`       | `bytes32`     | The hash of the transaction.                                                                                                                                                                                                                                    |\n| `requiredConfirmations` | `uint16`      | The number of confirmations required for the block containing the transaction to be considered final by the requestor.                                                                                                                                          |\n| `provideInput`          | `bool`        | If set to `true`, the `input` data field of the transaction will be included in the response.                                                                                                                                                                   |\n| `listEvents`            | `bool`        | If `true`, events specified by `logIndices` will be included in the response. If `false`, no events are included.                                                                                                                                               |\n| `logIndices`            | `uint32[]`    | A list of event indices (`logIndex`) to be relayed if `listEvents` is `true`. Should be sorted by the requestor. Maximum of 50 indices allowed. An empty list indicates all events up to a maximum of 50. If `listEvents` is `false`, this field must be empty. |\n\n:::note[Using Event Logs Correctly]\n\n- Events (logs) are indexed at the **block level**, not at the transaction level.\n- The contract using this attestation should define the order of event logs, and the requestor should ensure `logIndices` are sorted according to these specifications.\n\n:::\n\n## Response\n\nThe response fields align with EVM's [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash):\n\n| Field              | Solidity Type | Description                                                                                           |\n| ------------------ | ------------- | ----------------------------------------------------------------------------------------------------- |\n| `blockNumber`      | `uint64`      | The block number in which the transaction is included.                                                |\n| `timestamp`        | `uint64`      | The timestamp of the block in which the transaction is included.                                      |\n| `sourceAddress`    | `address`     | The address (`from`) that signed the transaction.                                                     |\n| `isDeployment`     | `bool`        | Indicates whether the transaction is a contract creation (`true`) or a regular transaction (`false`). |\n| `receivingAddress` | `address`     | The address (`to`) receiving the transaction. Zero address if `isDeployment` is `true`.               |\n| `value`            | `uint256`     | The value transferred in the transaction, in wei.                                                     |\n| `input`            | `bytes`       | Transaction input data if `provideInput` is `true`; otherwise, returns `0x00`.                        |\n| `status`           | `uint8`       | Transaction status: `1` for success, `0` for failure.                                                 |\n| `events`           | `Event[]`     | An array of requested events if `listEvents` is `true`; otherwise, an empty array.                    |\n\n### `Event` Struct\n\nEach `Event` struct represents a log entry similar to EVM event logs:\n\n| Field            | Solidity Type | Description                                                                                |\n| ---------------- | ------------- | ------------------------------------------------------------------------------------------ |\n| `logIndex`       | `uint32`      | The index of the event within the block.                                                   |\n| `emitterAddress` | `address`     | The address of the contract that emitted the event.                                        |\n| `topics`         | `bytes32[]`   | An array of up to four 32-byte strings representing indexed log arguments.                 |\n| `data`           | `bytes`       | Non-indexed log data, concatenated as 32-byte strings. Must be at least 32 bytes long.     |\n| `removed`        | `bool`        | `true` if the log was removed due to a chain reorganization; `false` if it is still valid. |\n\n## Verification process\n\n1. The function checks if the transaction with the given `transactionHash` is included in a block on the **main chain** with at least the specified `requiredConfirmations`.\n2. If the block has insufficient confirmations or if the transaction is not found, the request is rejected.\n3. If `listEvents` is enabled and an event specified by `logIndices` does not exist, the request is also rejected.\n4. The specified data (transaction details, input data, and events) is retrieved and relayed based on the request parameters.\n\n:::note[Event handling]\n\n- Ensure `logIndices` are sorted as required by the consuming contract.\n- If `logIndices` is not empty while `listEvents` is set to `false`, the request will be rejected.\n- Events are capped at a maximum of **50 entries** to optimize performance.\n\n:::\n\n## Contract interface\n\n<IEVMTransaction />",
    "The **standard address hash** is defined as the `keccak256` hash of the standard address as a string:\n\n```solidity\nkeccak256(standardAddress)\n```\n\n:::note[standard address]\n\nIf an address is case insensitive, the standard address is lowercase.\nIf an address is case sensitive, there is always only one (correct) form of the address.\n\n:::\n\n**Examples:**\n\n| Chain              | Standard Address                             | Standard Address Hash                                                |\n| ------------------ | -------------------------------------------- | -------------------------------------------------------------------- |\n| Bitcoin (`Base58`) | `1FWQiwK27EnGXb6BiBMRLJvunJQZZPMcGd`         | `0x8f651b6990a4754c58fcb5c5a11f4d40f8ddfdeb0e4f67cdd06c27f8d7bcbe33` |\n| Bitcoin (`Bech32`) | `bc1qrmvxmwgqfr5q4fvtvnxczwxwm966n53c4lxh4v` | `0xf75dc4b039ac72e037d67199bb92fa25db32b2210954df99637428473d47cedf` |\n| Dogecoin           | `DL2H9FuaXsxivSs1sRtuJ8uryosyAj62XX`         | `0x51064c88c6b8e9d58b2abeae37a773bf89c9b279f8a05fa0ac0e81ebe13d2f4f` |\n| XRPL               | `rDsbeomae4FXwgQTJp9Rs64Qg9vDiTCdBv`         | `0xa491aed10a1920ca31a85ff29e4bc410705d37d4dc9e690d4d500bcedfd8078f` |\n",
    "Blockchains have varying confirmation depths to consider blocks as final.\n\n| Chain    | `chainId` | Confirmations required | Confirmation time |\n| -------- | --------- | ---------------------- | ----------------- |\n| Bitcoin  | 0         | 6                      | ≈60 mins          |\n| Dogecoin | 2         | 60                     | ≈60 mins          |\n| XRPL     | 3         | 3                      | ≈12 seconds       |\n",
    "import Addresses from \"./_addresses.mdx\";\nimport IAddressValidity from \"../reference/IAddressValidity.mdx\";\n\nAssertion whether a given string represents a **valid address** on an external blockchain.\n\n## Supported chains\n\n- `BTC` (Bitcoin)\n- `DOGE` (Dogecoin)\n- `XRP` (XRP Ledger)\n- Test networks: `testBTC` (Bitcoin Testnet v3), `testDOGE`, `testXRP`\n\n## Request\n\n| Field        | Solidity Type | Description                   |\n| ------------ | ------------- | ----------------------------- |\n| `addressStr` | `string`      | The address string to verify. |\n\n## Response\n\n| Field                 | Solidity Type | Description                                                                                     |\n| --------------------- | ------------- | ----------------------------------------------------------------------------------------------- |\n| `isValid`             | `bool`        | Indicates whether the provided address is valid.                                                |\n| `standardAddress`     | `string`      | The standardized form of the validated address if `isValid`; otherwise, an empty string.        |\n| `standardAddressHash` | `bytes32`     | The `keccak256` hash of the `standardAddress` if `isValid`; otherwise, a zero `bytes32` string. |\n\n## Verification process\n\nThe address is verified against the validity criteria specific to the chain identified by `sourceId`. If the address meets all criteria:\n\n1. `isValid` is set to `true`.\n2. The `standardAddress` and its `standardAddressHash` are computed.\n\nIf the address is invalid:\n\n- `isValid` is set to `false`.\n- The `standardAddress` is empty and `standardAddressHash` is zero value.\n\n:::note[Lowest used timestamp]\n\nFor the `lowestUsedTimestamp` parameter, the value `0xffffffffffffffff` (equivalent to $ 2^{64} - 1 $) in hexadecimal) is used as the default.\n\n:::\n\n## Address validity criteria\n\n<Addresses />\n\n## Contract interface\n\n<IAddressValidity />",
    "import StandardPaymentReference from \"./_standard_payment_reference.mdx\";\nimport Finality from \"./_finality.mdx\";\nimport IReferencedPaymentNonexistence from \"../reference/IReferencedPaymentNonexistence.mdx\";\n\nAssertion that a specific payment, agreed upon to be completed by a certain deadline, has **not been made**. If confirmed, it shows that no transaction meeting the specified criteria (address, amount, reference) was found within the given block range.\n\nThis Information can be used, for example, to justify the liquidation of funds locked in a smart contract on Songbird if a payment is missed.\n\n**Supported Chains**:\n\n- `BTC` (Bitcoin)\n- `DOGE` (Dogecoin)\n- `XRP` (XRP Ledger)\n- Test networks: `testBTC` (Bitcoin Testnet v3), `testDOGE`, `testXRP`\n\n### Request\n\n| Field                      | Solidity Type | Description                                                                   |\n| -------------------------- | ------------- | ----------------------------------------------------------------------------- |\n| `minimalBlockNumber`       | `uint64`      | The block number to start the search range.                                   |\n| `deadlineBlockNumber`      | `uint64`      | The block number to include as the end of the search range.                   |\n| `deadlineTimestamp`        | `uint64`      | The timestamp to include as the end of the search range.                      |\n| `destinationAddressHash`   | `bytes32`     | The standard hash of the address where the payment was expected.              |\n| `amount`                   | `uint256`     | The required payment amount in minimal units.                                 |\n| `standardPaymentReference` | `bytes32`     | The standard payment reference associated with the payment. Must not be zero. |\n| `checkSourceAddresses`     | `bool`        | If true, the source addresses root is checked.                                |\n| `sourceAddressesRoot`      | `bytes32`     | The root of the Merkle tree of the source addresses.                          |\n\n:::note\n\n**Standard Addresses Root** is the root of the Merkle tree build on double keccak256 hashes of the all source addresses of the transaction.\n\n:::\n\n### Response\n\n| Field                         | Solidity Type | Description                                                   |\n| ----------------------------- | ------------- | ------------------------------------------------------------- |\n| `minimalBlockTimestamp`       | `uint64`      | The timestamp of the block at `minimalBlockNumber`.           |\n| `firstOverflowBlockNumber`    | `uint64`      | The block number immediately after the `deadlineBlockNumber`. |\n| `firstOverflowBlockTimestamp` | `uint64`      | The timestamp of the `firstOverflowBlockNumber`.              |\n\n- **`firstOverflowBlockNumber`**: This is the first block with a height greater than `deadlineBlockNumber` and a timestamp later than `deadlineTimestamp`.\n- The search range includes blocks from `minimalBlockNumber` (inclusive) to `firstOverflowBlockNumber` (exclusive).\n\n### Verification process\n\n1. **Block Confirmation**:\n\n   - If the `firstOverflowBlock` cannot be determined or lacks the required [number of confirmations](#finality), the request is rejected.\n   - The request is also rejected if `firstOverflowBlockNumber` is less than or equal to `minimalBlockNumber`.\n\n2. **Search Range**:\n\n   - The search range includes blocks from `minimalBlockNumber` to `firstOverflowBlockNumber` (exclusive).\n   - If the verifier does not have complete visibility of all blocks in this range, the request is rejected.\n\n3. **Transaction Validation**:\n   - The request is confirmed if **no transaction** meeting the specified criteria (address, source addresses root, amount, reference) is found within the specified block range.\n   - The criteria and timestamp interpretation are specific to each chain.\n\nThe verification process is chain-specific, with details described below.\n\n#### UTXO chains (Bitcoin and Dogecoin)\n\n- **Transaction Criteria**:\n  - The transaction **must not be a coinbase transaction**.\n  - The transaction must include the specified [standard payment reference](#standard-payment-reference).\n  - If `checkSourceAddresses` is set to true, the `sourceAddressesRoot` of the transaction must match the specified `sourceAddressesRoot`.\n  - The sum of all output values sent to the specified address **minus** the sum of all input values from the same address must be **greater than the specified `amount`**.\n    - Typically, the sum of input values for the specified address is zero.\n- **Timestamp**: Uses the **mediantime** of the block.\n\n#### Account-based chains (XRPL)\n\n- **Transaction Criteria**:\n\n  - The transaction must be of type **Payment**.\n  - The transaction must include the specified [standard payment reference](#standard-payment-reference).\n  - If `checkSourceAddresses` is set to true, the `sourceAddressesRoot` of the transaction must match the specified `sourceAddressesRoot`.\n  - One of the following conditions must hold:\n    - The transaction status is `SUCCESS` and the amount received by the specified address is greater than the specified `amount`.\n    - The transaction status is `RECEIVER_FAILURE` and the specified address would have received an amount greater than the specified `amount` if the transaction had succeeded.\n\n- **Timestamp**: Uses the **close_time** of the ledger, converted to UNIX time.\n\n:::note[Lowest used timestamp]\n\nFor the `lowestUsedTimestamp` parameter, the value of `minimalBlockTimestamp` is used.\n\n:::\n\n## Standard payment reference\n\n<StandardPaymentReference />\n\n## Finality\n\n<Finality />\n\n## Contract interface\n\n<IReferencedPaymentNonexistence />",
    "### Bitcoin\n\nAn address on Bitcoin is derived from the locking script (`pkscript`).\nOnly standard locking scripts get assigned an address.\nThere are two formats of the Bitcoin addresses, `Base58` and `Bech32(m)`.\nThe format is determined based on the type of locking script.\n\n#### `Base58`\n\nBitcoin's **Base58** format uses the following encoding dictionary:\n\n```\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n```\n\n##### Address Structure\n\nDecoded addresses have the format:\n\n```\n<leadingByte><hash><checksum>\n```\n\n##### Components\n\n- **`leadingByte`**:\n  - On **mainnet**:\n    - `00` for Pay-to-PubKey (p2pk) and Pay-to-PubKey-Hash (p2pkh)\n    - `05` for Pay-to-Script-Hash (p2sh)\n  - On **testnet**:\n    - `6f` for p2pk and p2pkh\n    - `c4` for p2sh\n- **`hash`**: Represents either the public key, hash of the public key, or hash of a script.\n- **`checksum`**: The first four bytes of the double SHA-256 hash of `<leadingByte><hash>`.\n\n##### Validation Criteria\n\n1. Address contains only characters from the Base58 dictionary.\n2. Decoded hexadecimal form is exactly **25 bytes** long (address length varies between **26 to 34 characters**).\n3. Starts with a valid `leadingByte`.\n4. The checksum is valid and matches the first four bytes of the double SHA-256 hash.\n\n##### Resources\n\n- [Base58Check Encoding](https://en.bitcoin.it/wiki/Base58Check_encoding)\n- [BIP-0013](https://en.bitcoin.it/wiki/BIP_0013)\n- [BIP-0016](https://en.bitcoin.it/wiki/BIP_0016)\n\n#### `Bech32(m)`\n\nBech32 is a newer address format using the character set:\n\n```\nqpzry9x8gf2tvdw0s3jn54khce6mua7l\n```\n\n##### Address Structure\n\nA Bech32 address has the following components:\n\n- **Human-Readable Part (HRP)**:\n  - `bc` for **mainnet**\n  - `tb` for **testnet**\n- **Separator**: Always `1`\n- **Data Part**:\n  - The first character indicates the **witness version** (0-16).\n  - The last six characters form a **checksum**.\n\nThe checksum differs based on the witness version:\n\n- **Bech32** for witness version `0` ([BIP-0173](https://en.bitcoin.it/wiki/BIP_0173))\n- **Bech32m** for witness versions `1` to `16` ([BIP-0350](https://en.bitcoin.it/wiki/BIP_0350))\n\n##### Validation Criteria\n\n1. Address contains only characters from the Bech32 dictionary.\n2. All non-numeric characters must be either entirely uppercase or lowercase.\n3. Starts with a valid HRP followed by the separator (`1`).\n4. Length is between **14 to 74 characters**, with the length modulo 8 being **0, 3, or 5**.\n   - For witness version `0`, length must be **42 or 62 characters**.\n5. Checksum is validated based on the witness version.\n6. Addresses with witness versions `2` and above are unsupported and invalid.\n\n##### Resources\n\n- [Bech32](https://en.bitcoin.it/wiki/Bech32)\n- [SegWit](https://en.bitcoin.it/wiki/Segregated_Witness)\n- [BIP-0141](https://en.bitcoin.it/wiki/BIP_0141)\n- [BIP-0341](https://en.bitcoin.it/wiki/BIP_0341)\n- [BIP-0350](https://en.bitcoin.it/wiki/BIP_0350)\n\n### Dogecoin (`Base58`)\n\nDogecoin uses a **Base58** dictionary, identical to Bitcoin's:\n\n```\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n```\n\n#### Address Structure\n\nDecoded addresses have the format:\n\n```\n<leadingByte><hash><checksum>\n```\n\n#### Components\n\n- **`leadingByte`**:\n  - On **mainnet**:\n    - `1e` for p2pk and p2pkh\n    - `16` for p2sh\n  - On **testnet**:\n    - `6f` for p2pk and p2pkh\n    - `71` for p2sh\n- **`hash`**: Represents either the public key, hash of the public key, or script hash.\n- **`checksum`**: First four bytes of the double SHA-256 hash of `<leadingByte><hash>`.\n\n#### Validation Criteria\n\n1. Address contains only characters from the Base58 dictionary.\n2. Length is **26 to 34 characters**. Decoded hex form is **25 bytes**.\n3. Valid leading byte:\n   - **Mainnet**: Starts with `D`, `A`, or `9`.\n   - **Testnet**: Starts with `n`, `m`, or `2`.\n4. The checksum is validated.\n\n### XRPL (`Base58`)\n\nThe XRP Ledger uses a custom **Base58** dictionary:\n\n```\nrpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz\n```\n\n#### Address Structure\n\nDecoded to hexadecimal:\n\n```\n<leadingByte><publicKeyHash><checksum>\n```\n\n#### Components\n\n- **`leadingByte`**:\n  - On **mainnet**: `00` (addresses start with `r`).\n- **`publicKeyHash`**: A **20-byte** hash of the public key.\n- **`checksum`**: The first four bytes of the double SHA-256 hash of `<leadingByte><publicKeyHash>`.\n\n#### Validation Criteria\n\n1. Address contains only characters from the XRPL Base58 dictionary.\n2. Length is **25 to 35 characters**. Decoded hex form is **25 bytes**.\n3. Address starts with `r`.\n4. The checksum is valid.\n\n#### Resources\n\n- [XRPL Base58 Encodings](https://xrpl.org/base58-encodings.html)\n- [XRPL Addresses](https://xrpl.org/accounts.html#addresses)\n",
    "import Finality from \"./_finality.mdx\";\nimport IConfirmedBlockHeightExists from \"../reference/IConfirmedBlockHeightExists.mdx\";\n\nAssertion whether a block with the specified `blockNumber` is **confirmed** with additional data to compute the **block production rate** within a given time window.\n\n## Supported chains\n\n- `BTC` (Bitcoin)\n- `DOGE` (Dogecoin)\n- `XRP` (XRP Ledger)\n- Test networks: `testBTC` (Bitcoin Testnet v3), `testDOGE`, `testXRP`\n\n## Request\n\n| Field         | Solidity Type | Description                                                          |\n| ------------- | ------------- | -------------------------------------------------------------------- |\n| `blockNumber` | `uint64`      | The block number to confirm.                                         |\n| `queryWindow` | `uint64`      | The time period (in seconds) to calculate the block production rate. |\n\n## Response\n\n| Field                             | Solidity Type | Description                                                                                              |\n| --------------------------------- | ------------- | -------------------------------------------------------------------------------------------------------- |\n| `blockTimestamp`                  | `uint64`      | The timestamp of the block at `blockNumber`.                                                             |\n| `numberOfConfirmations`           | `uint64`      | The required number of confirmations for the block to be considered confirmed (chain-specific).          |\n| `lowestQueryWindowBlockNumber`    | `uint64`      | The block number of the latest block with a timestamp strictly less than `blockTimestamp - queryWindow`. |\n| `lowestQueryWindowBlockTimestamp` | `uint64`      | The timestamp of the block at `lowestQueryWindowBlockNumber`.                                            |\n\n## Verification process\n\n1. The function checks if the block with `blockNumber` is confirmed by at least the required `numberOfConfirmations` for the specified chain.\n   - If the block does not meet this requirement, the request is rejected.\n   - A block at the tip of the chain has exactly **1 confirmation**.\n2. The lowestQueryWindowBlock` is identified, and its block number and timestamp are extracted.\n3. The required confirmations are defined based on chain-specific [finality](#finality).\n4. The returned `timestamp` is:\n   - `mediantime` for Bitcoin and Dogecoin.\n   - `close_time` for XRPL.\n\n:::note[Lowest used timestamp]\n\nFor the `lowestUsedTimestamp` parameter, the value of `lowestQueryWindowBlockTimestamp` is used.\n\n:::\n\n## Finality\n\n<Finality />\n\n## Contract interface\n\n<IConfirmedBlockHeightExists />",
    "Primary interface for interacting with FDC.\n\nSourced from `IFdcHub.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFdcHub.sol).\n\n## Functions\n\n### fdcInflationConfigurations\n\nThe FDC inflation configurations contract.\n\n```solidity\nfunction fdcInflationConfigurations(\n) external view returns (\n    contract IFdcInflationConfigurations\n);\n```\n\n### fdcRequestFeeConfigurations\n\nThe FDC request fee configurations contract.\n\n```solidity\nfunction fdcRequestFeeConfigurations(\n) external view returns (\n    contract IFdcRequestFeeConfigurations\n);\n```\n\n### requestAttestation\n\nMethod to request an attestation.\n\n```solidity\nfunction requestAttestation(\n    bytes _data\n) external payable;\n```\n\n#### Parameters\n\n- `_data`: ABI encoded attestation request\n\n### requestsOffsetSeconds\n\nThe offset (in seconds) for the requests to be processed during the current voting round.\n\n```solidity\nfunction requestsOffsetSeconds(\n) external view returns (\n    uint8\n);\n```\n\n## Events\n\n### AttestationRequest\n\n```solidity\nevent AttestationRequest(\n    bytes data,\n    uint256 fee\n)\n```\n\n### InflationRewardsOffered\n\nEvent emitted when inflation rewards are offered.\n\n```solidity\nevent InflationRewardsOffered(\n    uint24 rewardEpochId,\n    struct IFdcInflationConfigurations.FdcConfiguration[] fdcConfigurations,\n    uint256 amount\n)\n```\n\n### RequestsOffsetSet\n\n```solidity\nevent RequestsOffsetSet(\n    uint8 requestsOffsetSeconds\n)\n```",
    "Interface for verifying FDC requests.\n\nSourced from `IFdcVerification.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFdcVerification.sol).\n\n## Functions\n\n### verifyAddressValidity\n\n```solidity\nfunction verifyAddressValidity(\n    struct IAddressValidity.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n### verifyBalanceDecreasingTransaction\n\n```solidity\nfunction verifyBalanceDecreasingTransaction(\n    struct IBalanceDecreasingTransaction.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n### verifyConfirmedBlockHeightExists\n\n```solidity\nfunction verifyConfirmedBlockHeightExists(\n    struct IConfirmedBlockHeightExists.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n### verifyEVMTransaction\n\n```solidity\nfunction verifyEVMTransaction(\n    struct IEVMTransaction.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n### verifyPayment\n\n```solidity\nfunction verifyPayment(\n    struct IPayment.Proof _proof\n) external view returns (\n    bool _proved\n);\n```\n\n### verifyReferencedPaymentNonexistence\n\n```solidity\nfunction verifyReferencedPaymentNonexistence(\n    struct IReferencedPaymentNonexistence.Proof _proof\n) external view returns (\n    bool _proved\n);\n```",
    "Sourced from `IEVMTransaction.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/fdc/IEVMTransaction.sol).\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IEVMTransaction\n * @custom:id 0x06\n * @custom:supported ETH, FLR, SGB\n * @author Flare\n * @notice A relay of a transaction from an EVM chain.\n * This type is only relevant for EVM-compatible chains.\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with\n * at least `requiredConfirmations`, the specified data is relayed.\n * If an indicated event does not exist, the request is rejected.\n * @custom:lut `timestamp`\n * @custom:lutlimit `0x41eb00`, `0x41eb00`, `0x41eb00`\n */\ninterface IEVMTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is\n     * determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction\n     * of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for EVM transaction attestation type\n     * @custom:below Note that events (logs) are indexed in block not in each transaction.\n     * The contract that uses the attestation should specify the order of event logs as needed and the requestor should\n     * sort `logIndices` with respect to the set specifications.\n     * If possible, the contact should require one `logIndex`.\n     * @param transactionHash Hash of the transaction(transactionHash).\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\n     * @param provideInput If true, \"input\" field is included in the response.\n     * @param listEvents If true, events indicated by `logIndices` are included in the response.\n     * Otherwise, no events are included in the response.\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise,\n     * the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex)\n     * of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices.\n     * If empty, it indicates all events in order capped by 50.\n     */\n    struct RequestBody {\n        bytes32 transactionHash;\n        uint16 requiredConfirmations;\n        bool provideInput;\n        bool listEvents;\n        uint32[] logIndices;\n    }\n\n    /**\n     * @notice Response body for EVM transaction attestation type\n     * @custom:below The fields are in line with transaction provided by EVM node.\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param timestamp Timestamp of the block in which the transaction is included.\n     * @param sourceAddress The address (from) that signed the transaction.\n     * @param isDeployment Indicate whether it is a contract creation transaction.\n     * @param receivingAddress The address (to) of the receiver of the initial transaction.\n     * Zero address if `isDeployment` is `true`.\n     * @param value The value transferred by the initial transaction in wei.\n     * @param input If `provideInput`, this is the data send along with the initial transaction.\n     * Otherwise it is the default value `0x00`.\n     * @param status Status of the transaction 1 - success, 0 - failure.\n     * @param events If `listEvents` is `true`, an array of the requested events.\n     * Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 timestamp;\n        address sourceAddress;\n        bool isDeployment;\n        address receivingAddress;\n        uint256 value;\n        bytes input;\n        uint8 status;\n        Event[] events;\n    }\n\n    /**\n     * @notice Event log record\n     * @custom:above An `Event` is a struct with the following fields:\n     * @custom:below The fields are in line with EVM event logs.\n     * @param logIndex The consecutive number of the event in block.\n     * @param emitterAddress The address of the contract that emitted the event.\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\n     * @param removed It is `true` if the log was removed due to a chain reorganization\n     * and `false` if it is a valid log.\n     */\n    struct Event {\n        uint32 logIndex;\n        address emitterAddress;\n        bytes32[] topics;\n        bytes data;\n        bool removed;\n    }\n}\n```",
    "Sourced from `IPayment.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/fdc/IPayment.sol).\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IPayment\n * @custom:id 0x01\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\n * transaction should be formed to be provable by this attestation type.\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an\n * optional payment reference.\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or\n * relevant indexer.\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient\n * [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n *\n * Once the transaction is received, the payment summary is computed according to the rules for the source chain.\n * If the summary is successfully calculated, the response is assembled from the summary.\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\n *\n * If the summary is not successfully calculated, the attestation request is rejected.\n * @custom:lut `blockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IPayment {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined\n     * by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction\n     * of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for Payment attestation type\n     * @param transactionId ID of the payment transaction.\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address.\n     * Always 0 for the non-utxo chains.\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address.\n     * Always 0 for the non-utxo chains.\n     */\n    struct RequestBody {\n        bytes32 transactionId;\n        uint256 inUtxo;\n        uint256 utxo;\n    }\n\n    /**\n     * @notice Response body for Payment attestation type\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\n     * @param sourceAddressHash Standard address hash of the source address.\n     * @param sourceAddressesRoot The root of the Merkle tree of the source addresses.\n     * @param receivingAddressHash Standard address hash of the receiving address.\n     * The zero 32-byte string if there is no receivingAddress (if `status` is not success).\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address.\n     * Relevant if the transaction is unsuccessful.\n     * @param spentAmount Amount in minimal units spent by the source address.\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address.\n     * Relevant if the transaction status is unsuccessful.\n     * @param receivedAmount Amount in minimal units received by the receiving address.\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address.\n     * Relevant if the transaction is unsuccessful.\n     * @param standardPaymentReference Standard payment reference of the transaction.\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\n     * @param status Success status of the transaction: 0 - success, 1 - failed by sender's fault,\n     * 2 - failed by receiver's fault.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 blockTimestamp;\n        bytes32 sourceAddressHash;\n        bytes32 sourceAddressesRoot;\n        bytes32 receivingAddressHash;\n        bytes32 intendedReceivingAddressHash;\n        int256 spentAmount;\n        int256 intendedSpentAmount;\n        int256 receivedAmount;\n        int256 intendedReceivedAmount;\n        bytes32 standardPaymentReference;\n        bool oneToOne;\n        uint8 status;\n    }\n}\n```",
    "import OpenApiDoc from \"@site/src/components/OpenApiDoc/OpenApiDoc\";\n\n<OpenApiDoc url=\"openapi/data-availability-api.yaml\" />",
    "Sourced from `IReferencedPaymentNonexistence.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/fdc/IReferencedPaymentNonexistence.sol).\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IReferencedPaymentNonexistence\n * @custom:id 0x04\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference)\n * did not appear in the specified block range.\n *\n *\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart\n * contract on Flare when a payment is missed.\n *\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient\n * number of confirmations, the attestation request is rejected.\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`,\n * the attestation request is rejected.\n *\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\n * The criteria and timestamp are chain specific.\n * ### UTXO (Bitcoin and Dogecoin)\n *\n *\n * Criteria for the transaction:\n *\n *\n * - It is not coinbase transaction.\n * - The transaction has the specified standardPaymentReference.\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with\n * the specified address is greater than `amount` (in practice the sum of all values of the inputs with the\n * specified address is zero).\n *\n *\n * Timestamp is `mediantime`.\n * ### XRPL\n *\n *\n *\n * Criteria for the transaction:\n * - The transaction is of type payment.\n * - The transaction has the specified standardPaymentReference,\n * - One of the following is true:\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is\n * greater than the specified `value`.\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an\n * amount greater than the specified `value` had the transaction been successful.\n *\n *\n * Timestamp is `close_time` converted to UNIX time.\n *\n * @custom:lut `minimalBlockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IReferencedPaymentNonexistence {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response\n     * body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ReferencePaymentNonexistence attestation type\n     * @param minimalBlockNumber The start block of the search range.\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\n     * @param deadlineTimestamp The timestamp to be included in the search range.\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\n     * @param amount The requested amount in minimal units that had to be paid.\n     * @param standardPaymentReference The requested standard payment reference.\n     * @param checkSourceAddresses If true, the source address root is checked (only full match).\n     * @param sourceAddressesRoot The root of the Merkle tree of the source addresses.\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\n     */\n    struct RequestBody {\n        uint64 minimalBlockNumber;\n        uint64 deadlineBlockNumber;\n        uint64 deadlineTimestamp;\n        bytes32 destinationAddressHash;\n        uint256 amount;\n        bytes32 standardPaymentReference;\n        bool checkSourceAddresses;\n        bytes32 sourceAddressesRoot;\n    }\n\n    /**\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than\n     * `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\n     * The specified search range are blocks between heights including `minimalBlockNumber`\n     * and excluding `firstOverflowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 minimalBlockTimestamp;\n        uint64 firstOverflowBlockNumber;\n        uint64 firstOverflowBlockTimestamp;\n    }\n}\n```",
    "Sourced from `IBalanceDecreasingTransaction.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/fdc/IBalanceDecreasingTransaction.sol).\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IBalanceDecreasingTransaction\n * @custom:id 0x02\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice A detection of a transaction that either decreases the balance for some address or is\n * signed by the source address.\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate\n * some funds locked by a smart contract on Flare.\n *\n * A transaction is considered “balance decreasing” for the address, if the balance after the\n * transaction is lower than before or the address is among the signers of the transaction\n * (even if its balance is greater than before the transaction).\n * @custom:verification The transaction with `transactionId` is fetched from the API of the\n * source blockchain node or relevant indexer.\n * If the transaction cannot be fetched or the transaction is in a block that does not have a\n * sufficient number of confirmations, the attestation request is rejected.\n *\n * Once the transaction is received, the response fields are extracted if the transaction is balance\n * decreasing for the indicated address.\n * Some of the request and response fields are chain specific as described below.\n * The fields can be computed with the help of a balance decreasing summary.\n *\n * ### UTXO (Bitcoin and Dogecoin)\n *\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\n * If the indicated input does not exist or the indicated input does not have the address,\n * the attestation request is rejected.\n * The `sourceAddress` is the address of the indicated transaction input.\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of\n * all outputs with `sourceAddress`.\n * Can be negative.\n * - `blockTimestamp` is the mediantime of a block.\n *\n * ### XRPL\n *\n * - `sourceAddressIndicator` is the standard address hash of the address whose balance has been decreased.\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance\n * of the address was not lowered in the transaction, the attestation request is rejected.\n *\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\n * Can be negative.\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\n *\n * @custom:lut `blockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IBalanceDecreasingTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * This is a security measure to prevent a collision of attestation hashes.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the\n     * response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for IBalanceDecreasingTransaction attestation type\n     * @param transactionId ID of the payment transaction.\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\n     */\n    struct RequestBody {\n        bytes32 transactionId;\n        bytes32 sourceAddressIndicator;\n    }\n\n    /**\n     * @notice Response body for IBalanceDecreasingTransaction attestation type.\n     * @param blockNumber The number of the block in which the transaction is included.\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\n     * @param spentAmount Amount spent by the source address in minimal units.\n     * @param standardPaymentReference Standard payment reference of the transaction.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 blockTimestamp;\n        bytes32 sourceAddressHash;\n        int256 spentAmount;\n        bytes32 standardPaymentReference;\n    }\n}\n```",
    "Interface for managing FDC request fee configuration.\n\nSourced from `IFdcRequestFeeConfigurations.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFdcRequestFeeConfigurations.sol).\n\n## Functions\n\n### getRequestFee\n\nMethod to get the base fee for an attestation request. It reverts if the request is not supported.\n\n```solidity\nfunction getRequestFee(\n    bytes _data\n) external view returns (\n    uint256\n);\n```\n\n#### Parameters\n\n- `_data`: ABI encoded attestation request\n\n## Events\n\n### TypeAndSourceFeeRemoved\n\n```solidity\nevent TypeAndSourceFeeRemoved(\n    bytes32 attestationType,\n    bytes32 source\n)\n```\n\n### TypeAndSourceFeeSet\n\n```solidity\nevent TypeAndSourceFeeSet(\n    bytes32 attestationType,\n    bytes32 source,\n    uint256 fee\n)\n```",
    "Sourced from `IConfirmedBlockHeightExists.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/fdc/IConfirmedBlockHeightExists.sol).\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IConfirmedBlockHeightExists\n * @custom:id 0x02\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice An assertion that a block with `blockNumber` is confirmed.\n * It also provides data to compute the block production rate in the given time range.\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at\n * least `numberOfConfirmations`.\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\n *\n *\n * Current confirmation heights consensus:\n *\n *\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\n * | ------- | --------- | ----------------------- | ------------ |\n * | `BTC`   | 0         | 6                       | mediantime   |\n * | `DOGE`  | 2         | 60                      | mediantime   |\n * | `XRP`   | 3         | 3                       | close_time   |\n *\n *\n * @custom:lut `lowestQueryWindowBlockTimestamp`\n * @custom:lutlimit `0x127500`, `0x127500`, `0x127500`\n */\ninterface IConfirmedBlockHeightExists {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the\n     * response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\n     * @param blockNumber The number of the block the request wants a confirmation of.\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\n     */\n    struct RequestBody {\n        uint64 blockNumber;\n        uint64 queryWindow;\n    }\n\n    /**\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp`, `lowestQueryWindowBlockTimestamp`\n     * can be used to compute the average block production time in the specified block range.\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain.\n     * All attestation providers must agree on this number.\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller\n     * than `blockTimestamp` - `queryWindow`.\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 blockTimestamp;\n        uint64 numberOfConfirmations;\n        uint64 lowestQueryWindowBlockNumber;\n        uint64 lowestQueryWindowBlockTimestamp;\n    }\n}\n```",
    "Interface for managing FDC inflation configuration.\n\nSourced from `IFdcInflationConfigurations.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/IFdcInflationConfigurations.sol).\n\n## Functions\n\n### getFdcConfiguration\n\nReturns the FDC configuration at `_index`.\n\n```solidity\nfunction getFdcConfiguration(\n    uint256 _index\n) external view returns (\n    struct IFdcInflationConfigurations.FdcConfiguration\n);\n```\n\n#### Parameters\n\n- `_index`: The index of the FDC configuration.\n\n### getFdcConfigurations\n\nReturns the FDC configurations.\n\n```solidity\nfunction getFdcConfigurations(\n) external view returns (\n    struct IFdcInflationConfigurations.FdcConfiguration[]\n);\n```\n\n## Structures\n\n### FdcConfiguration\n\nThe FDC configuration struct.\n\n```solidity\nstruct FdcConfiguration {\n  bytes32 attestationType;\n  bytes32 source;\n  uint24 inflationShare;\n  uint8 minRequestsThreshold;\n  uint224 mode;\n}\n```",
    "Sourced from `IAddressValidity.sol` on [GitHub](https://github.com/flare-foundation/flare-smart-contracts-v2/blob/main/contracts/userInterfaces/fdc/IAddressValidity.sol).\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name IAddressValidity\n * @custom:id 0x05\n * @custom:supported BTC, DOGE, XRP\n * @author Flare\n * @notice An assertion whether a string represents a valid address on an external chain.\n * @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\n * Indicator of validity is provided.\n * If the address is valid, its standard form and standard hash are computed.\n * Validity criteria for each supported chain:\n * - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\n * - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\n * - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\n * @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)\n * @custom:lutlimit `0xffffffffffffffff`, `0xffffffffffffffff`, `0xffffffffffffffff`\n */\ninterface IAddressValidity {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId Id of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the\n     * response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for IAddressValidity attestation type\n     * @param addressStr Address to be verified.\n     */\n    struct RequestBody {\n        string addressStr;\n    }\n\n    /**\n     * @notice Response body for IAddressValidity attestation type\n     * @param isValid Boolean indicator of the address validity.\n     * @param standardAddress If `isValid`, standard form of the validated address. Otherwise an empty string.\n     * @param standardAddressHash If `isValid`, standard address hash of the validated address.\n     * Otherwise a zero bytes32 string.\n     */\n    struct ResponseBody {\n        bool isValid;\n        string standardAddress;\n        bytes32 standardAddressHash;\n    }\n}\n```"
  ],
  "metadatas": [
    {
      "source_file": "blaze_swap_docs.csv",
      "last_updated": "2025-03-08 01:30:00",
      "file_name": "blazeswap-1.mdx",
      "meta_data": "title: BlazeSwap\ndescription: The first open-source fully decentralized exchange on the Flare Network. Brought to you by the A-FTSO provider.\nkeywords:\n  [\n    blazeswap,\n    decentralized exchange,\n    flare-network,\n    A-FTSO,\n    staking,\n    lending,\n    liquidity,\n    trading,\n    smart contracts\n  ]"
    },
    {
      "source_file": "blaze_swap_docs.csv",
      "last_updated": "2025-03-08 01:30:00",
      "file_name": "blazeswap-2.mdx"
    },
    {
      "source_file": "blaze_swap_docs.csv",
      "last_updated": "2025-03-08 01:30:00",
      "file_name": "blazeswap-3.mdx"
    },
    {
      "source_file": "blaze_swap_docs.csv",
      "last_updated": "2025-03-08 01:30:00",
      "file_name": "blazeswap-4.mdx"
    },
    {
      "source_file": "blaze_swap_docs.csv",
      "last_updated": "2025-03-08 01:30:00",
      "file_name": "blazeswap-5.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-intro.mdx",
      "meta_data": "sidebar_position: 1\nslug: intro\ntitle: Introduction\ndescription: Introduction to Flare, the blockchain for data.\nkeywords:\n  [\n    flare-network,\n    blockchain,\n    data,\n    smart contracts,\n    flare-time-series-oracle,\n    flare-data-connector,\n  ]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "4-solidity-reference.mdx",
      "meta_data": "title: FTSOv2 Reference\ndescription: Solidity reference for FTSOv2 smart contracts.\nkeywords:\n  [\n    solidity,\n    reference,\n    ftso,\n    flare-time-series-oracle,\n    flare-network,\n    smart-contracts,\n  ]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-getting-started.mdx",
      "meta_data": "slug: getting-started\ntitle: Getting Started\ndescription: Learn how to consume FTSOv2 feeds on Flare using an onchain Solidity contract.\nkeywords:\n  [\n    ftso,\n    oracle,\n    flare-time-series-oracle,\n    flare-network,\n    smart-contracts,\n    solidity,\n    remix,\n    metamask,\n  ]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "0-overview.mdx",
      "meta_data": "slug: overview\ntitle: FTSOv2\ndescription: FTSOv2 is an enshrined oracle that provides decentralized data feeds to the Flare network.\nkeywords: [ftso, oracle, flare-time-series-oracle, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "5-migration.mdx",
      "meta_data": "title: Migrating from v1\nslug: migration\ndescription: Migration guide for dApps moving from FTSOv1 to FTSOv2.\nkeywords:\n  [solidity, ftso, flare-time-series-oracle, flare-network, smart-contracts]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "2-feeds.mdx",
      "meta_data": "slug: feeds\ntitle: Block-Latency Feeds\ndescription: FTSOv2's block-latency feeds update incrementally with each new block on Flare, approximately every 1.8 seconds.\nkeywords:\n  [ftso, oracle, flare-time-series-oracle, flare-network, feeds, block-latency]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "_feed_explanation.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFeeCalculator.md",
      "meta_data": "title: IFeeCalculator\ndescription: Interface for calculating block-latency feed fees.\nsidebar_position: 2"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFastUpdatesConfiguration.md",
      "meta_data": "title: IFastUpdatesConfiguration\nsidebar_position: 5\ndescription: Interface for the block-latency feed configuration."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFtsoFeedIdConverter.md",
      "meta_data": "title: IFtsoFeedIdConverter\ndescription: Interface for converting feed names to feed ids.\nsidebar_position: 3"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFastUpdateIncentiveManager.md",
      "meta_data": "title: IFastUpdateIncentiveManager\nsidebar_position: 6\ndescription: Interface for making volatility incentive offers."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFastUpdater.md",
      "meta_data": "title: IFastUpdater\nsidebar_position: 4\ndescription: Interface for updating block-latency feeds."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "FtsoV2Interface.md",
      "meta_data": "title: FtsoV2Interface\nsidebar_position: 1\ndescription: Primary interface for interacting with FTSOv2."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "4-solidity-reference.mdx",
      "meta_data": "title: Scaling Reference\ndescription: Solidity reference for Scaling smart contracts.\nkeywords:\n  [\n    solidity,\n    reference,\n    ftso,\n    flare-time-series-oracle,\n    flare-network,\n    smart-contracts,\n  ]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "2-getting-started.mdx",
      "meta_data": "sidebar_position: 2\ntitle: Getting Started\ndescription: Learn how to consume Scaling feeds on Flare.\nkeywords:\n  [\n    ftso,\n    oracle,\n    flare-time-series-oracle,\n    flare-network,\n    smart-contracts,\n    solidity,\n  ]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-overview.mdx",
      "meta_data": "sidebar_position: 1\nslug: overview\ntitle: Scaling\ndescription: Scaling is an advanced framework designed to optimize the functionality and efficiency of FTSOv2.\nkeywords: [ftso, oracle, flare-time-series-oracle, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "3-anchor-feeds.mdx",
      "meta_data": "sidebar_position: 3\nslug: anchor-feeds\ntitle: Anchor Feeds\ndescription: Scaling anchor feeds update every voting epoch on Flare, approximately every 90s.\nkeywords: [ftso, oracle, flare-time-series-oracle, flare-network, feeds]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFtsoFeedPublisher.md",
      "meta_data": "title: IFtsoFeedPublisher"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFtsoInflationConfigurations.md",
      "meta_data": "title: IFtsoInflationConfigurations"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFtsoRewardOffersManager.md",
      "meta_data": "title: IFtsoRewardOffersManager"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "build-first-app.mdx",
      "meta_data": "title: Build your first FTSOv2 app\ntags: [intermediate, ftso, solidity]\nslug: build-first-app\ndescription: Use FTSOv2 in your Foundry project.\nkeywords:\n  [\n    ftso,\n    oracle,\n    flare-time-series-oracle,\n    flare-network,\n    smart-contracts,\n    solidity,\n    remix,\n  ]\nsidebar_position: 1"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "make-volatility-incentive.mdx",
      "meta_data": "title: Make a volatility incentive\ntags: [intermediate, ftso, javascript, python, rust, go]\nslug: make-volatility-incentive\ndescription: Make a volatility incentive using JS, Python, Rust, or Go.\nkeywords:\n  [\n    javascript,\n    python,\n    rust,\n    go,\n    ftso,\n    oracle,\n    flare-time-series-oracle,\n    flare-network,\n  ]\nsidebar_position: 5"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "read-feeds-offchain.mdx",
      "meta_data": "title: Read feeds offchain\ntags: [intermediate, ftso, python, rust, javascript, go]\nslug: read-feeds-offchain\ndescription: Read block-latency feeds using JS, Python, Rust, or Go.\nkeywords:\n  [\n    javascript,\n    python,\n    rust,\n    go,\n    ftso,\n    oracle,\n    flare-time-series-oracle,\n    flare-network,\n  ]\nsidebar_position: 2"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "change-quote-feed.mdx",
      "meta_data": "title: Change quote feed\ntags: [intermediate, ftso, solidity]\nslug: change-quote-feed\ndescription: Change block-latency quote feeds using Solidity.\nkeywords:\n  [\n    ftso,\n    oracle,\n    flare-time-series-oracle,\n    flare-network,\n    smart-contracts,\n    solidity,\n    remix,\n  ]\nsidebar_position: 3"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "query-feed-configuration.mdx",
      "meta_data": "title: Query feed configuration\ntags: [intermediate, ftso, python, rust, javascript, go]\nslug: query-feed-configuration\ndescription: Query feed configuration using JS, Python, Rust, or Go.\nkeywords:\n  [\n    ftso,\n    oracle,\n    flare-time-series-oracle,\n    flare-network,\n    smart-contracts,\n    solidity,\n    remix,\n    metamask,\n  ]\nsidebar_position: 4"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "2-collateral.mdx",
      "meta_data": "title: Collateral\ndescription: Understand how collateral works in FAssets.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-overview.mdx",
      "meta_data": "title: FAssets\ndescription: FAssets is a trustless over-collateralized bridge to non smart contract networks to Flare.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "3-minting.mdx",
      "meta_data": "title: Minting\ndescription: Understand how minting works in FAssets.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "5-liquidation.mdx",
      "meta_data": "title: Liquidation\ndescription: Understand how liquidations work in FAssets.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "4-redemption.mdx",
      "meta_data": "title: Redemption\ndescription: Understand how redemptions work in FAssets.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "6-operational-parameters.mdx",
      "meta_data": "title: Operational Parameters\nslug: operational-parameters\ndescription: Songbird FAssets Operational Parameters\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "8-reference.mdx",
      "meta_data": "title: FAssets Reference\ndescription: Solidity reference for FAssets smart contracts.\nkeywords:\n  [\n    solidity,\n    reference,\n    fassets,\n    xrp,\n    bitcoin,\n    dogecoin,\n    flare-network,\n    smart-contracts,\n  ]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "7-songbird.mdx",
      "meta_data": "title: FAssets on Songbird\ndescription: Participate in the FAssets open beta.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "5-faq.mdx",
      "meta_data": "sidebar_position: 5\nslug: faq\ntitle: FAssets Agent FAQs\ndescription: Frequently Asked Questions by FAssets Agents.\ntags: [intermediate, fassets, bitcoin, dogecoin]\nauthors: [fassko]\nkeywords: [fassets, xrp, btc, doge flare-network, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-deploy-fassets-agent.mdx",
      "meta_data": "sidebar_position: 1\nslug: deploy-fassets-agent\ntitle: Deploy an FAssets Agent\ndescription: Deploy and run an FAssets agent.\ntags: [intermediate, fassets, bitcoin, dogecoin]\nauthors: [fassko]\nkeywords: [fassets, xrp, btc, doge flare-network, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "3-create-fasset-agent-cli.mdx",
      "meta_data": "sidebar_position: 3\nslug: create-fasset-agent-cli\ntitle: Create FAssets Agent via CLI\ndescription: Set up and manage an FAssets agent using the CLI.\ntags: [intermediate, fassets, bitcoin, dogecoin]\nauthors: [fassko]\nkeywords: [fassets, xrp, btc, doge flare-network, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "2-create-fasset-agent-ui.mdx",
      "meta_data": "sidebar_position: 2\nslug: create-fasset-agent-ui\ntitle: Create FAssets Agent via UI\ndescription: Set up and manage an FAssets agent using the frontend UI.\ntags: [intermediate, fassets, bitcoin, dogecoin]\nauthors: [fassko]\nkeywords: [fassets, xrp, btc, doge flare-network, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "_restart_docker.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "6-export-private-keys.mdx",
      "meta_data": "sidebar_position: 6\nslug: export-private-keys\ntitle: Export Private Keys\ndescription: Export private keys for minting and redeeming\ntags: [intermediate, fassets, bitcoin, dogecoin]\nauthors: [fassko]\nkeywords: [fassets, xrp, btc, doge flare-network, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "7-agent-bot-notifications.mdx",
      "meta_data": "sidebar_position: 7\nslug: agent-bot-notifications\ntitle: Agent Bot Notifications\ndescription: Learn how to set up agent bot notifications for FAssets.\ntags: [intermediate, fassets, bitcoin, dogecoin]\nauthors: [fassko]\nkeywords: [fassets, xrp, btc, doge flare-network, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "8-infrastructure.mdx",
      "meta_data": "sidebar_position: 8\nslug: infrastructure\ntitle: FAssets Agent Infrastructure\ndescription: Configuring the FAsset Bot to Use Custom Infrastructure\ntags: [intermediate, fassets, bitcoin, dogecoin]\nauthors: [fassko]\nkeywords: [fassets, xrp, btc, doge flare-network, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "4-custom-handshake.mdx",
      "meta_data": "sidebar_position: 4\nslug: custom-handshake\ntitle: Implement Custom Handshake\ndescription: Implement compliance checks for minting and redeeming.\ntags: [intermediate, fassets, bitcoin, dogecoin]\nauthors: [fassko]\nkeywords: [fassets, xrp, btc, doge flare-network, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IAssetManager.mdx",
      "meta_data": "title: IAssetManager\ndescription: FAssets IAssetManager interface reference.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "user-bot.mdx",
      "meta_data": "title: User Bot CLI Reference\ndescription: FAssets User Bot command line interface reference.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "agent-bot.mdx",
      "meta_data": "title: Agent Bot CLI Reference\ndescription: FAssets Agent Bot command line interface reference.\nkeywords: [fassets, xrp, bitcoin, dogecoin, flare-network]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "3-solidity-reference.mdx",
      "meta_data": "title: Network Reference\ndescription: Solidity reference for Flare contracts.\nkeywords: [solidity, reference, ftso, flare-network, smart-contracts]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-getting-started.mdx",
      "meta_data": "slug: getting-started\ntitle: Getting Started\ndescription: Deploy a smart contract on Flare using your browser.\nkeywords: [solidity, smart-contract, metamask, remix, flare-network, blockchain]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "0-overview.mdx",
      "meta_data": "slug: overview\ntitle: Network\ndescription: Learn about the different Flare networks, configuration, supported wallets, transaction format, smart contracts, consensus, and more.\nkeywords:\n  [flare-network, configuration, blockchain, data, smart-contracts, wallets]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "4-fsp.mdx",
      "meta_data": "slug: fsp\ntitle: Flare Systems Protocol\ndescription: Foundational architecture supporting Flare's enshrined protocols.\nkeywords: [flare-network, configuration, blockchain, data, smart-contracts]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "ProtocolsV2Interface.md",
      "meta_data": "title: ProtocolsV2Interface\ndescription: Primary interface for managing protocol related metadata.\nsidebar_position: 2"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IRNat.md",
      "meta_data": "title: IRNat\ndescription: Interface for managing rFLR.\nsidebar_position: 10"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IWNat.md",
      "meta_data": "title: IWNat\ndescription: Interface for wrapping and unwrapping native tokens.\nsidebar_position: 7"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFlareContractRegistry.md",
      "meta_data": "title: IFlareContractRegistry\nsidebar_position: 1\ndescription: Registry interface with all Flare contract addresses."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "RandomNumberV2Interface.md",
      "meta_data": "title: RandomNumberV2Interface\ndescription: Primary interface for random number generation.\nsidebar_position: 3"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "RewardsV2Interface.md",
      "meta_data": "title: RewardsV2Interface\ndescription: Primary interface for managing all protocol rewards.\nsidebar_position: 4"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IClaimSetupManager.md",
      "meta_data": "title: IClaimSetupManager\nsidebar_position: 5\ndescription: Interface for managing reward claim setup."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IDistributionToDelegators.md",
      "meta_data": "title: IDistributionToDelegators\nsidebar_position: 6\ndescription: Interface for managing FlareDrop claims."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "4-solidity-reference.mdx",
      "meta_data": "title: FSP Reference\ndescription: Solidity reference for Flare contracts.\nkeywords: [solidity, reference, ftso, flare-network, smart-contracts]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-system-protocols.mdx",
      "meta_data": "title: System Protocols\ndescription: Describes the core protocols comprising FSP.\nkeywords:\n  [flare-network, configuration, blockchain, data, smart-contracts, wallets]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "0-protocol-components.mdx",
      "meta_data": "title: Protocol Components\ndescription: Defines the structure, voting, and weight calculations for FSP.\nkeywords:\n  [flare-network, configuration, blockchain, data, smart-contracts, wallets]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "3-rewarding.mdx",
      "meta_data": "title: Rewarding\ndescription: Explains the structure for distributing rewards in FSP.\nkeywords:\n  [flare-network, configuration, blockchain, data, smart-contracts, wallets]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "2-offchain-services.mdx",
      "meta_data": "title: Offchain Services\ndescription: Outlines the architecture of off-chain services supporting FSP.\nkeywords:\n  [flare-network, configuration, blockchain, data, smart-contracts, wallets]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IVoterRegistry.md",
      "meta_data": "title: IVoterRegistry\nsidebar_position: 6\ndescription: Manages the registration of voters for upcoming reward epochs."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFlareSystemsCalculator.md",
      "meta_data": "title: IFlareSystemsCalculator\nsidebar_position: 7\ndescription: Performs calculations for weights and burn factors used by other contracts."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "ISubmission.md",
      "meta_data": "title: ISubmission\nsidebar_position: 2\ndescription: Manages prioritized and subsidized submissions for protocols."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IEntityManager.md",
      "meta_data": "title: IEntityManager\nsidebar_position: 1\ndescription: Manages voter entities, including addresses and node IDs."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IWNatDelegationFee.md",
      "meta_data": "title: IWNatDelegationFee\ndescription: Manages the delegation fees set by voters for WFLR delegations.\nsidebar_position: 8"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IRelay.md",
      "meta_data": "title: IRelay\nsidebar_position: 4\ndescription: Stores confirmed Merkle roots and signing policies."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IRewardManager.md",
      "meta_data": "title: IRewardManager\nsidebar_position: 5\ndescription: Facilitates the claiming and distribution of rewards to voters, delegators, and stakers."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFlareSystemsManager.md",
      "meta_data": "title: IFlareSystemsManager\nsidebar_position: 3\ndescription: Manages system protocols like Signing Policy Definition, Uptime Voting, and Reward Voting."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "secure-random-numbers.mdx",
      "meta_data": "slug: secure-random-numbers\ntitle: Secure Random Numbers\ntags: [quickstart, solidity, javascript, python, rust, go]\nauthors: [dineshpinto, horiamagureanu, charlesgrover]\ndescription: Use Flare's secure randomness in your application.\nkeywords:\n  [\n    solidity,\n    javascript,\n    python,\n    rust,\n    go,\n    randomness,\n    randomn-number,\n    flare-time-series-oracle,\n    flare-network,\n  ]\nsidebar_position: 6"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "flare-for-rust-developers.mdx",
      "meta_data": "slug: flare-for-rust-developers\ntitle: Flare for Rust Devs\nauthors: [dineshpinto]\ndescription: Learn how to interact with Flare using alloy-rs.\ntags: [rust, quickstart, solidity]\nkeywords: [rust, alloy-rs, quickstart, solidity, smart-contract, flare-network]\nsidebar_position: 4"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "flare-for-go-developers.mdx",
      "meta_data": "slug: flare-for-go-developers\ntitle: Flare for Go Devs\nauthors: [dineshpinto]\ntags: [go, quickstart, solidity]\ndescription: Learn how to interact with Flare using geth.\nkeywords: [go, quickstart, solidity, smart-contract, flare-network]\nsidebar_position: 5"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "hardhat-foundry-starter-kit.mdx",
      "meta_data": "slug: hardhat-foundry-starter-kit\ntitle: Hardhat and Foundry Starter Kit\nsidebar_label: Hardhat & Foundry Starter Kit\ntags: [quickstart, hardhat, foundry, solidity]\nauthors: [filipkoprivec]\ndescription: Integrate Flare into Hardhat and Foundry.\nkeywords:\n  [hardhat, foundry, quickstart, solidity, smart-contract, flare-network]\nsidebar_position: 1"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "manage-flaredrops.mdx",
      "meta_data": "slug: manage-flaredrops\ntitle: Manage FlareDrops\ntags: [intermediate, solidity]\nauthors: [dineshpinto]\ndescription: Manage FlareDrop functionality in applications.\nkeywords: [intermediate, solidity, smart-contract, flare-network]\nsidebar_position: 7"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "using-flare-stake-tool.mdx",
      "meta_data": "title: Using Flare Stake Tool\ntags: [intermediate, solidity]\nauthors: [dineshpinto]\ndescription: Stake FLR using flare-stake-tool CLI.\nkeywords: [intermediate, solidity, smart-contract, flare-network]\nsidebar_position: 8"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "flare-for-python-developers.mdx",
      "meta_data": "slug: flare-for-python-developers\ntitle: Flare for Python Devs\nauthors: [dineshpinto]\ndescription: Learn how to interact with Flare using web3.py.\ntags: [python, quickstart, solidity]\nkeywords: [python, web3.py, quickstart, solidity, smart-contract, flare-network]\nsidebar_position: 3"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "flare-for-javascript-developers.mdx",
      "meta_data": "slug: flare-for-javascript-developers\ntitle: Flare for JavaScript Devs\nauthors: [dineshpinto]\ndescription: Learn how to interact with Flare using web3.js.\ntags: [javascript, quickstart, solidity]\nkeywords:\n  [\n    javascript,\n    web3.js,\n    ethers.js,\n    quickstart,\n    solidity,\n    smart-contract,\n    flare-network,\n  ]\nsidebar_position: 2"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "0-onboarding.mdx",
      "meta_data": "sidebar_position: 1\nunlisted: false\nslug: onboarding\ntitle: Onboarding\ndescription: Step-by-step guide for setting up infrastructure, credentials, and cloud instances for the Verifiable AI Hackathon.\nkeywords: [flare, ai, confidential-compute, hackathon, google-cloud, onboarding]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-cookbook.mdx",
      "meta_data": "sidebar_position: 2\nunlisted: false\ntitle: Cookbook\ndescription: Cookbook commands for managing Confidential VMs.\nkeywords: [flare, ai, confidential-compute, hackathon, google-cloud, onboarding]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "whitepapers.mdx",
      "meta_data": "slug: whitepapers\ntitle: Whitepapers\ndescription: Explore Flare's whitepapers, research, and analytics to gain deeper insights into its technology.\nkeywords: [whitepaper, research, flare-network, analytics, ftso]\nhide_table_of_contents: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "terminology.mdx",
      "meta_data": "slug: terminology\ntitle: Terminology\ndescription: Definitions of key terms used in the Flare network.\nkeywords: [terminology, flare-network, definitions]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "audits.mdx",
      "meta_data": "slug: audits\ntitle: Audits\ndescription: Security audits of the Flare Network and its components.\nkeywords: [audits, security, smart-contracts, flare-network]\nhide_table_of_contents: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "faqs.mdx",
      "meta_data": "slug: faqs\ntitle: FAQs\ndescription: Frequently asked questions when building on Flare.\nkeywords: [faq, frequently-asked-questions, flare-network, support]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-rpc-node.mdx",
      "meta_data": "sidebar_position: 1\nslug: rpc-node\ntitle: RPC Node\ndescription: Service application requests locally or publicly."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "2-validator-node.mdx",
      "meta_data": "sidebar_position: 2\nslug: validator-node\ntitle: Validator Node\ndescription: Secure Flare by reaching consensus on state transitions."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "_automated_registration.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "5-GCP-marketplace-nodes.mdx",
      "meta_data": "sidebar_position: 5\nslug: gcp-marketplace-nodes\ntitle: GCP Marketplace Nodes\ndescription: Pre-configured blockchain nodes in GCP marketplace"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "4-fdc-attestation-provider.mdx",
      "meta_data": "sidebar_position: 4\nslug: fdc-attestation-provider\ntitle: FDC Attestation Provider\ndescription: Provide attestations for FDC."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "6-flare-systems-provider.mdx",
      "meta_data": "sidebar_position: 6\ntitle: Flare Systems Provider\ndescription: Provide data for Flare's enshrined FTSO and FDC protocols.\nunlisted: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "3-ftso-data-provider.mdx",
      "meta_data": "sidebar_position: 3\nslug: ftso-data-provider\ntitle: FTSO Data Provider\ndescription: Provide block-latency and anchor feeds for FTSOv2."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "2-getting-started.mdx",
      "meta_data": "sidebar_position: 2\nunlisted: false\ntitle: Getting Started\ndescription: Learn how to verify data from other chains using FDC.\nkeywords:\n  [\n    fdc,\n    oracle,\n    flare-data-connector,\n    flare-network,\n    smart-contracts,\n    solidity,\n    remix,\n  ]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "3-attestation-types.mdx",
      "meta_data": "title: Attestation Types\ndescription: Learn about different attestation types supported by FDC.\nkeywords: [fdc, oracle, flare-data-connector, flare-network]\nsidebar_position: 3"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "1-overview.mdx",
      "meta_data": "sidebar_position: 1\nslug: overview\ntitle: FDC Overview\nauthors: [lukaavbreht, filipkoprivec]\ndescription: The Flare Data Connector (FDC) enables secure, on-chain attestation of external data.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nunlisted: false"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "5-reference.mdx",
      "meta_data": "title: FDC Reference\ndescription: Solidity reference for FDC smart contracts.\nkeywords:\n  [\n    solidity,\n    reference,\n    fdc,\n    flare-data-connector,\n    flare-network,\n    smart-contracts,\n  ]"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "payment.mdx",
      "meta_data": "title: Payment\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Retrieve a Payment transaction data from Bitcoin, Dogecoin, or XRPL.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 8\nunlisted: false"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "detect-balance-decrease.mdx",
      "meta_data": "title: Detect Balance Decrease\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Detect a UTXO or XRPL balance decreasing transaction.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 7\nunlisted: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "json-api.mdx",
      "meta_data": "title: Json Api\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Retrieve arbitrary Web2 data.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 8\nunlisted: false"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "confirm-block-height.mdx",
      "meta_data": "title: Confirm Block Height\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Confirm the block height on Bitcoin, Dogecoin or XRPL.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 4\nunlisted: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "verify-payment-nonexistence.mdx",
      "meta_data": "title: Verify Payment Nonexistence\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Verify the nonexistence of a UTXO or XRPL payment.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 9\nunlisted: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "check-address-validity.mdx",
      "meta_data": "title: Check Address Validity\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Check the validity of a Bitcoin, Dogecoin, or XRPL address.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 3\nunlisted: false"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "evm-connectivity.mdx",
      "meta_data": "title: EVM Connectivity\nslug: evm-connectivity\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Learn how to connect EVM chains to Flare using FDC.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 8\nunlisted: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "connect-evm-chains.mdx",
      "meta_data": "title: Connect to EVM Chains\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Relay transaction and event data from Ethereum.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 5\nunlisted: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "evm-transaction.mdx",
      "meta_data": "title: EVM Transaction\nauthors: [lukaavbreht, filipkoprivec]\ndescription: Retrieve the transaction data from Ethereum, Flare, or Songbird.\ntags: [intermediate, ethereum, fdc]\nkeywords: [ethereum, flare-data-connector, evm, flare-network]\nsidebar_position: 6\nunlisted: false"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "create-attestation-type.mdx",
      "meta_data": "title: Create Attestation Type\nauthors: [lukaavbreht, dineshpinto]\ndescription: Learn how to create a new attestation type.\ntags: [intermediate, fdc]\nkeywords: [intermediate, flare-data-connector, flare-network]\nsidebar_position: 6\nunlisted: true"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "payment.mdx",
      "meta_data": "title: Payment\ndescription: Information about a transaction on an external chain that is classified as a native currency payment.\nkeywords: [fdc, oracle, flare-data-connector, flare-network]\nsidebar_position: 5"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "balance-decreasing-transaction.mdx",
      "meta_data": "title: BalanceDecreasingTransaction\ndescription: Detects a transaction that either decreases the balance of a specified address.\nkeywords: [fdc, oracle, flare-data-connector, flare-network]\nsidebar_position: 2"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "json-api.mdx",
      "meta_data": "title: JsonApi\ndescription: An attestation request that fetches data from the given url and then edits the information with a jq transformation.\nkeywords: [fdc, oracle, flare-data-connector, flare-network]\nsidebar_position: 1"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "_transaction_success_status.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "_standard_payment_reference.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "evm-transaction.mdx",
      "meta_data": "title: EVMTransaction\ndescription: Information about an EVM transaction, including details on associated events if specified.\nkeywords: [fdc, oracle, flare-data-connector, flare-network]\nsidebar_position: 4"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "_standard_address_hash.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "_finality.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "address-validity.mdx",
      "meta_data": "title: AddressValidity\ndescription: Assertion whether a given string represents a valid address on an external blockchain.\nkeywords: [fdc, oracle, flare-data-connector, flare-network]\nsidebar_position: 1"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "referenced-payment-nonexistence.mdx",
      "meta_data": "title: ReferencedPaymentNonexistence\ndescription: Assertion that a payment agreed to be completed by a certain deadline, has not been made.\nkeywords: [fdc, oracle, flare-data-connector, flare-network]\nsidebar_position: 5"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "_addresses.mdx"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "confirmed-block-height-exists.mdx",
      "meta_data": "title: ConfirmedBlockHeightExists\ndescription: Assertion whether a specified block number is confirmed.\nkeywords: [fdc, oracle, flare-data-connector, flare-network]\nsidebar_position: 3"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFdcHub.md",
      "meta_data": "title: IFdcHub\nsidebar_position: 2\ndescription: Primary interface for interacting with FDC."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFdcVerification.md",
      "meta_data": "title: IFdcVerification\nsidebar_position: 3\ndescription: Interface for verifying FDC requests."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IEVMTransaction.mdx",
      "meta_data": "title: IEVMTransaction\nsidebar_position: 9\ndescription: Relay a transaction from an EVM chain."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IPayment.mdx",
      "meta_data": "title: IPayment\nsidebar_position: 10\ndescription: Relay a transaction in native currency."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "data-availability-api.mdx",
      "meta_data": "sidebar_label: Data Availability API\nhide_title: true\ndescription: OpenAPI specification for Data Availability API.\nsidebar_position: 1"
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IReferencedPaymentNonexistence.mdx",
      "meta_data": "title: IReferencedPaymentNonexistence\nsidebar_position: 11\ndescription: Assert whether an agreed-upon payment has not been made."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IBalanceDecreasingTransaction.mdx",
      "meta_data": "title: IBalanceDecreasingTransaction\nsidebar_position: 7\ndescription: Detect a transaction that decreases an address balance."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFdcRequestFeeConfigurations.md",
      "meta_data": "title: IFdcRequestFeeConfigurations\nsidebar_position: 4\ndescription: Interface for managing FDC request fee configuration."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IConfirmedBlockHeightExists.mdx",
      "meta_data": "title: IConfirmedBlockHeightExists\nsidebar_position: 8\ndescription: Assert that a block number is confirmed."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IFdcInflationConfigurations.md",
      "meta_data": "title: IFdcInflationConfigurations\nsidebar_position: 5\ndescription: Interface for managing FDC inflation configuration."
    },
    {
      "source_file": "flare_docs.csv",
      "last_updated": "2025-03-08 01:27:14",
      "file_name": "IAddressValidity.mdx",
      "meta_data": "title: IAddressValidity\nsidebar_position: 6\ndescription: Assert whether a string represents a valid address."
    }
  ],
  "embeddings": [
    [
      -0.017864391207695007,
      -0.04985478147864342,
      -0.04136081412434578,
      0.06796000897884369,
      0.05278758704662323,
      -0.029794765636324883,
      0.04797381907701492,
      0.05148470774292946,
      -0.038093943148851395,
      0.018051665276288986,
      -0.05316774547100067,
      0.05206126347184181,
      -0.0048372503370046616,
      0.00489447545260191,
      0.08940140902996063,
      0.060486435890197754,
      -0.0009047563071362674,
      -0.05978239327669144,
      0.07567848265171051,
      -0.0537969172000885,
      -0.08995787054300308,
      -0.07547076791524887,
      -0.03233233839273453,
      -0.03169166296720505,
      0.007006073836237192,
      0.0055183544754981995,
      -0.08178182691335678,
      0.027681689709424973,
      -0.04589824751019478,
      -0.06729023158550262,
      0.045987509191036224,
      -0.02088448777794838,
      -0.059811320155858994,
      0.05107490345835686,
      -0.08393771946430206,
      0.006081640254706144,
      -0.03386634215712547,
      -0.0005848069558851421,
      -0.04265281558036804,
      0.06573444604873657,
      0.027792707085609436,
      -0.05074072256684303,
      0.03732120245695114,
      -0.06508661806583405,
      -0.011281616054475307,
      -0.07119213044643402,
      0.017209431156516075,
      0.048713475465774536,
      0.024584762752056122,
      -0.0008766186074353755,
      0.08702355623245239,
      -0.029100097715854645,
      -0.05089753121137619,
      0.08802848309278488,
      0.03654050827026367,
      -0.0061935484409332275,
      -0.04715185984969139,
      -0.04333491623401642,
      -0.01310142781585455,
      -0.05128597468137741,
      0.10957898199558258,
      0.008907550014555454,
      -0.08542198687791824,
      0.03181641548871994,
      -0.027116484940052032,
      -0.041925255209207535,
      0.10113745182752609,
      0.11633165180683136,
      0.043542683124542236,
      -0.1037081703543663,
      -0.04190142825245857,
      -0.02365935407578945,
      0.04082358628511429,
      -0.018788179382681847,
      0.030258338898420334,
      -0.010595760308206081,
      0.0952046811580658,
      0.01922626793384552,
      0.025538349524140358,
      0.01657721772789955,
      0.010945683345198631,
      0.10207496583461761,
      -0.04712720215320587,
      0.001741308718919754,
      -0.04145311191678047,
      0.06614406406879425,
      -0.04521021991968155,
      0.04074688255786896,
      0.05215074494481087,
      0.0343983992934227,
      -0.042977701872587204,
      0.08501577377319336,
      -0.01999058946967125,
      0.019882816821336746,
      0.005349785089492798,
      0.011971321888267994,
      0.04804868996143341,
      -0.016955707222223282,
      -0.06431187689304352,
      0.09181390702724457,
      0.006105305161327124,
      -0.010405837558209896,
      -0.06259214133024216,
      -0.05627009645104408,
      -0.03528105840086937,
      -0.01876286044716835,
      -0.04512245953083038,
      0.06151836737990379,
      0.02536739967763424,
      0.017809228971600533,
      -0.05217543616890907,
      -0.026605887338519096,
      -0.018607251346111298,
      -0.04665115848183632,
      -0.09255407005548477,
      0.07639064639806747,
      -0.07441878318786621,
      0.012733910232782364,
      0.009845773689448833,
      -0.0024031405337154865,
      0.0732775330543518,
      0.05473794788122177,
      0.027915989980101585,
      -0.0196259543299675,
      -0.012068932875990868,
      0.06526212394237518,
      -0.020118361338973045,
      -4.371075284355195e-34,
      -0.029851919040083885,
      0.10014525055885315,
      -0.03683112934231758,
      0.0006373256910592318,
      0.03918037563562393,
      0.06914649903774261,
      0.015138530172407627,
      0.018832840025424957,
      -0.17271362245082855,
      0.0756741538643837,
      0.0014595348620787263,
      0.15277917683124542,
      0.01609206199645996,
      0.040514715015888214,
      0.025282518938183784,
      -0.11591746658086777,
      -0.033450011163949966,
      -0.0018827455351129174,
      0.07491375505924225,
      -0.12009584903717041,
      0.016894979402422905,
      -0.033863041549921036,
      0.028707008808851242,
      0.005531500093638897,
      0.0410446934401989,
      -0.026919003576040268,
      -0.014501226134598255,
      -0.0033147381618618965,
      0.12833786010742188,
      0.03813024237751961,
      0.007532825227826834,
      0.025576377287507057,
      0.04485036060214043,
      -0.017394354566931725,
      0.027680423110723495,
      -0.02317661978304386,
      -0.08138115704059601,
      -0.12421026825904846,
      -0.04655952751636505,
      -0.04969304800033569,
      -0.062401264905929565,
      0.028528498485684395,
      -0.09250864386558533,
      -0.01616959273815155,
      0.005184208042919636,
      -0.02201499417424202,
      -0.0084114084020257,
      0.027221545577049255,
      0.029550939798355103,
      -0.0380178764462471,
      -0.037019483745098114,
      -0.015157914720475674,
      -0.018527613952755928,
      -0.0025500026531517506,
      0.03691278398036957,
      0.0008933751960285008,
      0.013928210362792015,
      0.003977603279054165,
      -0.012257291004061699,
      0.03883671015501022,
      -0.006359908264130354,
      -0.0495096854865551,
      -0.05844563618302345,
      -0.05722369626164436,
      -0.012322050519287586,
      0.06436885893344879,
      0.04753877595067024,
      -0.02204248309135437,
      0.031953610479831696,
      0.016217302531003952,
      -0.013475270010530949,
      0.06657139211893082,
      -0.017293862998485565,
      0.12845101952552795,
      -0.03249064087867737,
      -0.0019303575390949845,
      0.019778579473495483,
      0.11848348379135132,
      -0.0029811884742230177,
      0.01627117395401001,
      -0.09893964976072311,
      -0.090184286236763,
      0.004526321776211262,
      0.1432374119758606,
      -0.0024408656172454357,
      0.01914447359740734,
      -0.006901407614350319,
      0.004427374806255102,
      -0.0009595562587492168,
      0.0028384323231875896,
      -0.06570487469434738,
      0.05801849439740181,
      0.07617824524641037,
      -0.03968888148665428,
      0.0901489332318306,
      6.17272333343686e-34,
      -0.06850466132164001,
      -0.014154539443552494,
      -0.06907631456851959,
      0.0237386804074049,
      0.058906156569719315,
      -0.002422464545816183,
      0.02249137870967388,
      -0.08835435658693314,
      -0.019805192947387695,
      0.10408952832221985,
      -0.060585904866456985,
      0.03854173421859741,
      0.09715144336223602,
      -0.03561779856681824,
      0.03129739314317703,
      -0.1282191276550293,
      0.007273831404745579,
      -0.09020742774009705,
      -0.0023529434110969305,
      0.013558880425989628,
      0.012088028714060783,
      0.07635607570409775,
      0.005841836333274841,
      -0.017964161932468414,
      0.040732383728027344,
      0.01580812968313694,
      -0.02324777841567993,
      -0.02999577485024929,
      -0.053781602531671524,
      0.08746455609798431,
      -0.010551302693784237,
      0.01221346016973257,
      -0.0019557783380150795,
      -0.07402719557285309,
      -0.0538116879761219,
      0.04302242770791054,
      0.03003610670566559,
      0.024374986067414284,
      0.02143108658492565,
      -0.030714428052306175,
      0.05131549388170242,
      -0.021732548251748085,
      0.02507179044187069,
      -0.01594318076968193,
      -0.03408893197774887,
      0.016102733090519905,
      -0.14183489978313446,
      0.007482618559151888,
      0.003971399739384651,
      -0.002901336643844843,
      -0.031721100211143494,
      0.023632697761058807,
      -0.014323516748845577,
      -0.022213906049728394,
      -0.009605049155652523,
      -0.03943045809864998,
      0.018179945647716522,
      0.024696318432688713,
      0.03415757417678833,
      0.0001253266673302278,
      0.03580022603273392,
      -0.04406779259443283,
      -0.04906298220157623,
      0.11857303977012634,
      0.08174704760313034,
      0.002748813945800066,
      0.06081383675336838,
      -0.05022429674863815,
      -0.05918556824326515,
      -0.01614137552678585,
      0.058401186019182205,
      -0.032374169677495956,
      0.006852142978459597,
      -0.05486464500427246,
      0.027637595310807228,
      -0.019817784428596497,
      0.0018859130796045065,
      0.04175102710723877,
      -0.030610809102654457,
      0.030151546001434326,
      0.0341089628636837,
      0.03900803253054619,
      0.05922485888004303,
      -0.01602642983198166,
      0.05788378417491913,
      -0.02946612797677517,
      0.03117172233760357,
      -0.015813056379556656,
      0.05967028811573982,
      0.029696743935346603,
      -0.07962299138307571,
      -0.0008552845101803541,
      -0.013617882505059242,
      0.019513780251145363,
      0.03877805545926094,
      -3.086366362481385e-08,
      0.0021105248015373945,
      0.017294559627771378,
      0.010608164593577385,
      0.06661579012870789,
      -0.04959286004304886,
      0.09290219098329544,
      0.011416180059313774,
      0.022579554468393326,
      -0.056841570883989334,
      0.04970245808362961,
      -0.06677251309156418,
      0.02306399494409561,
      0.02617485448718071,
      0.011599530465900898,
      0.015294334851205349,
      -0.04953719675540924,
      0.016439933329820633,
      0.023810772225260735,
      -0.076982282102108,
      -0.038558829575777054,
      -0.008943374268710613,
      0.03471868112683296,
      0.06259053945541382,
      -0.0018615772714838386,
      0.003312179818749428,
      -0.040847428143024445,
      0.050473883748054504,
      -0.012594852596521378,
      0.03345005214214325,
      -0.03217167779803276,
      -0.04919638857245445,
      -0.030070682987570763,
      0.055221039801836014,
      -0.07474707067012787,
      -0.11281243711709976,
      0.12422110140323639,
      -0.04131029173731804,
      0.04240279644727707,
      -0.021313123404979706,
      0.03317982703447342,
      -0.02170720510184765,
      0.06937657296657562,
      0.017249932512640953,
      -0.024318702518939972,
      -0.12998338043689728,
      0.005468286108225584,
      -0.12046383321285248,
      -0.0074765440076589584,
      0.04151978716254234,
      -0.028311485424637794,
      0.0394698791205883,
      -0.07448060065507889,
      0.023897171020507812,
      -0.02593417651951313,
      7.746819028398022e-05,
      0.01111733727157116,
      -0.008603585883975029,
      0.010006450116634369,
      0.04195191338658333,
      -0.02159661054611206,
      -0.005934534594416618,
      -0.02327999286353588,
      -0.020663311704993248,
      0.02986176311969757
    ],
    [
      -0.12457384914159775,
      -0.07777461409568787,
      -0.022411201149225235,
      0.0499056912958622,
      0.07543065398931503,
      0.011117521673440933,
      0.11599154025316238,
      0.09654241055250168,
      -0.01035165786743164,
      0.00715577881783247,
      -0.0019037927268072963,
      0.01596911996603012,
      -0.06722819805145264,
      0.05167865380644798,
      0.058344677090644836,
      -0.020445754751563072,
      0.023551801219582558,
      -0.020897390320897102,
      -0.008877726271748543,
      -0.05257492884993553,
      -0.036153968423604965,
      -0.14326080679893494,
      -0.05086131766438484,
      -0.03985678032040596,
      0.018745126202702522,
      -0.018838657066226006,
      0.012468904256820679,
      -0.038556862622499466,
      -0.025886937975883484,
      -0.04706092178821564,
      0.024697668850421906,
      0.05865991860628128,
      -0.06100126728415489,
      -0.019272128120064735,
      -0.05929236114025116,
      -0.0029910218436270952,
      0.00274320668540895,
      -0.043851107358932495,
      0.051300209015607834,
      -0.06640525907278061,
      -0.0005245499778538942,
      -0.1075393334031105,
      -0.03208896145224571,
      -0.0049096946604549885,
      -0.0232558511197567,
      -0.0108814537525177,
      0.11983685195446014,
      0.06331143528223038,
      -0.0029379792977124453,
      0.05831790342926979,
      0.043581873178482056,
      0.036109741777181625,
      -0.05058516561985016,
      0.09483850747346878,
      -0.08530005812644958,
      -0.05177975818514824,
      -0.02303420938551426,
      -0.09058895707130432,
      0.055422402918338776,
      0.001293911482207477,
      0.03852568939328194,
      -0.03574661165475845,
      -0.0157606340944767,
      0.06118218973278999,
      -0.022662639617919922,
      -0.06771724671125412,
      -0.002865542657673359,
      0.07105692476034164,
      0.019188378006219864,
      -0.06708966195583344,
      0.0327700711786747,
      0.008308252319693565,
      -0.04903247952461243,
      0.0265115424990654,
      0.011403853073716164,
      -0.006754966452717781,
      0.06963909417390823,
      0.013179589994251728,
      0.057007305324077606,
      0.029351452365517616,
      0.041710615158081055,
      0.0665065348148346,
      -0.01213044673204422,
      0.007695305161178112,
      -0.0021686111576855183,
      0.0036202871706336737,
      -0.01463761180639267,
      0.0330134779214859,
      -0.008510679006576538,
      0.013963064178824425,
      0.02875901572406292,
      0.02062087319791317,
      -0.002822579350322485,
      -0.017379384487867355,
      -0.01609582081437111,
      0.03955664113163948,
      0.03344104439020157,
      -0.021025538444519043,
      -0.012663252651691437,
      0.05641210824251175,
      -0.006610244978219271,
      0.02304154820740223,
      -0.07440748810768127,
      0.029769258573651314,
      -0.045646119862794876,
      -0.05628542974591255,
      -0.036269597709178925,
      -0.025873983278870583,
      0.09388761967420578,
      0.04789714515209198,
      -0.0703648254275322,
      -0.017748594284057617,
      -0.06371648609638214,
      -0.02651272341609001,
      -0.12003714591264725,
      0.09981473535299301,
      -0.14297187328338623,
      -0.015921957790851593,
      0.02962487004697323,
      0.014644712209701538,
      0.02422166056931019,
      0.05961744114756584,
      0.03779970109462738,
      0.01407661009579897,
      -0.002621285617351532,
      0.05556219816207886,
      -0.043654993176460266,
      2.98815145551238e-33,
      -0.06806216388940811,
      0.0975668728351593,
      -0.057162702083587646,
      -0.0441618375480175,
      -0.014990828931331635,
      0.025649884715676308,
      0.060533445328474045,
      -0.014752517454326153,
      -0.060757674276828766,
      0.057795342057943344,
      -0.08200231194496155,
      0.11180427670478821,
      0.018557623028755188,
      0.08420265465974808,
      0.011543677188456059,
      -0.11599072813987732,
      -0.043586891144514084,
      0.004200599156320095,
      0.10785266011953354,
      -0.06248011067509651,
      0.03323739022016525,
      -0.03653235360980034,
      0.013143927790224552,
      0.003139434615150094,
      0.11598100513219833,
      0.0008420824306085706,
      -0.03744158893823624,
      0.0012497223215177655,
      0.11657954752445221,
      0.059906039386987686,
      -0.04581615701317787,
      -0.01024454552680254,
      0.043584052473306656,
      0.05261630937457085,
      -0.000392631976865232,
      0.07309501618146896,
      -0.10691030323505402,
      -0.13792476058006287,
      -0.014468532055616379,
      -0.0429326668381691,
      -0.044756077229976654,
      0.029822522774338722,
      -0.1316893994808197,
      0.022029755637049675,
      -0.04569331929087639,
      -0.0009348426247015595,
      -0.0265327338129282,
      -0.017435502260923386,
      0.005047391168773174,
      -0.011969915591180325,
      0.002308204537257552,
      0.03267064318060875,
      -0.06469004601240158,
      -0.0535181425511837,
      0.09007860720157623,
      -0.043826304376125336,
      -0.04021165147423744,
      -0.05713718757033348,
      -0.026903899386525154,
      -0.0011117514222860336,
      -0.018993176519870758,
      -0.07144463062286377,
      -0.04102213308215141,
      0.013732786290347576,
      -0.07696094363927841,
      0.07487981766462326,
      0.024049032479524612,
      -0.021674564108252525,
      0.008219053037464619,
      0.004799559712409973,
      -0.035054273903369904,
      0.0562678724527359,
      0.06007695943117142,
      -0.014685315079987049,
      -0.05573863908648491,
      0.02670128270983696,
      0.07275045663118362,
      0.0401790551841259,
      0.011722731404006481,
      0.005500693805515766,
      -0.026542553678154945,
      -0.09364743530750275,
      0.062391363084316254,
      0.08317011594772339,
      0.0336032435297966,
      0.00757930101826787,
      -0.03748897835612297,
      0.0018563643097877502,
      0.005980915855616331,
      -0.063553586602211,
      -0.008866801857948303,
      -0.013698833994567394,
      0.053590476512908936,
      0.022919394075870514,
      0.04355647787451744,
      -2.7262678445384827e-33,
      -0.10759163647890091,
      0.012989390641450882,
      -0.03312079235911369,
      0.009028987027704716,
      -0.028882961720228195,
      0.02937217243015766,
      0.023881975561380386,
      0.0009706665296107531,
      0.020163975656032562,
      0.07476946711540222,
      -0.13308726251125336,
      0.030596479773521423,
      -0.039874106645584106,
      -0.03101852536201477,
      -0.024568872526288033,
      -0.07248304784297943,
      0.008365456946194172,
      -0.018626362085342407,
      0.06124311313033104,
      -0.012613635510206223,
      0.016743065789341927,
      0.02861388958990574,
      0.010672732256352901,
      0.048096705228090286,
      0.011264579370617867,
      -0.010929694399237633,
      -0.07750872522592545,
      -0.01738205924630165,
      0.025315819308161736,
      0.10556790232658386,
      0.024604763835668564,
      0.0015858779661357403,
      -0.015915177762508392,
      -0.030715245753526688,
      -0.004791873972862959,
      -0.02205057255923748,
      0.025379110127687454,
      0.08354770392179489,
      0.01598307676613331,
      0.010844326578080654,
      0.05304306000471115,
      -0.030012791976332664,
      0.006257269065827131,
      0.008438770659267902,
      -0.06758289784193039,
      0.04912290349602699,
      -0.01127399131655693,
      -0.023653483018279076,
      0.05647740140557289,
      -0.034220535308122635,
      0.0004195008077658713,
      0.00122987967915833,
      -0.07987400144338608,
      0.027469318360090256,
      -0.07516683638095856,
      -0.006754476577043533,
      0.11212078481912613,
      0.006881238892674446,
      -0.04835675656795502,
      -0.013451170176267624,
      0.07771767675876617,
      0.008444872684776783,
      0.07617949694395065,
      0.051554299890995026,
      0.07393509149551392,
      -0.02905585616827011,
      0.03139946237206459,
      0.009365346282720566,
      -0.05844157561659813,
      0.06848997622728348,
      0.11903171241283417,
      -0.05306405946612358,
      0.007826469838619232,
      0.0011428765719756484,
      0.08461292088031769,
      0.04026750847697258,
      0.01590145006775856,
      -0.022548168897628784,
      -0.045899055898189545,
      0.044582612812519073,
      0.011209358461201191,
      0.05840623378753662,
      0.03669044375419617,
      0.02345305122435093,
      -0.010621176101267338,
      -0.0008152340305969119,
      0.012958125211298466,
      -0.05869343504309654,
      0.08344308286905289,
      0.0135961240157485,
      -0.07402873784303665,
      -0.016556747257709503,
      0.05296741798520088,
      0.007235783152282238,
      -0.0004072745214216411,
      -4.1886291768378214e-08,
      -0.037013083696365356,
      -0.02708110213279724,
      0.03914238512516022,
      0.04036019742488861,
      -0.08331821858882904,
      0.062441565096378326,
      -0.04364379867911339,
      0.03878188878297806,
      -0.019285738468170166,
      -0.042993370443582535,
      -0.0060755289159715176,
      -0.017689239233732224,
      -0.029495494440197945,
      -0.027024244889616966,
      0.07179661095142365,
      -0.040623877197504044,
      0.02415664680302143,
      0.06435458362102509,
      -0.0587114542722702,
      -0.049559690058231354,
      0.007056745234876871,
      0.08180973678827286,
      0.05712262913584709,
      -0.0495641827583313,
      -0.011896628886461258,
      0.0057639251463115215,
      0.12162509560585022,
      0.05652716010808945,
      0.044163186103105545,
      0.011637483723461628,
      -0.1110386773943901,
      0.006510482635349035,
      0.04115177318453789,
      0.010414229705929756,
      -0.06482687592506409,
      0.05157732218503952,
      0.011451233178377151,
      -0.025461431592702866,
      -0.09056789427995682,
      0.07750055193901062,
      -0.03443409502506256,
      0.09132286161184311,
      -0.03821369633078575,
      -0.028744690120220184,
      -0.01105520036071539,
      0.03650731220841408,
      -0.07954993844032288,
      -0.06497211009263992,
      0.037847377359867096,
      0.0013338313437998295,
      0.04298940673470497,
      -0.049287114292383194,
      0.0006788142491132021,
      0.047905586659908295,
      0.005137070082128048,
      0.05939347296953201,
      -0.07567914575338364,
      0.051411330699920654,
      0.037784822285175323,
      -0.051849279552698135,
      -0.03584444522857666,
      -0.042197875678539276,
      0.014367320574820042,
      0.037225306034088135
    ],
    [
      -0.17605414986610413,
      -0.027193818241357803,
      -0.03110729157924652,
      0.030120767652988434,
      0.12127097696065903,
      0.0229178573936224,
      0.10601354390382767,
      0.06324594467878342,
      -0.05501015484333038,
      -0.03954991325736046,
      -0.0349767841398716,
      0.007038244511932135,
      -0.023021792992949486,
      0.03180130571126938,
      0.02499883435666561,
      0.03383995220065117,
      -0.019038476049900055,
      -0.0650261640548706,
      -0.007500872481614351,
      0.014537109062075615,
      -0.013994002714753151,
      -0.09525690972805023,
      -0.0739041194319725,
      0.016923442482948303,
      -0.03760446235537529,
      0.004287576302886009,
      -0.08028490096330643,
      0.016131769865751266,
      -0.04492257907986641,
      -0.044955622404813766,
      0.03932392969727516,
      0.07165256142616272,
      -0.0516219288110733,
      -0.016954634338617325,
      0.04959776997566223,
      -0.048953890800476074,
      -0.061135221272706985,
      -0.031017258763313293,
      -0.04199576377868652,
      -0.02451517805457115,
      -0.01512102223932743,
      -0.10308069735765457,
      -0.028921622782945633,
      0.017671680077910423,
      -0.0033236383460462093,
      -0.01163480244576931,
      0.05898822844028473,
      0.006554688327014446,
      -0.030036358162760735,
      0.10699779540300369,
      0.06118308752775192,
      -0.03535597771406174,
      0.03485512360930443,
      0.06058275327086449,
      -0.02376668155193329,
      0.038876719772815704,
      -0.04247824102640152,
      -0.05859888717532158,
      -0.03343072161078453,
      -0.017134010791778564,
      0.002676801523193717,
      -0.02998042292892933,
      -0.09112954139709473,
      0.06728548556566238,
      -0.015117272734642029,
      0.00599760003387928,
      0.05577508732676506,
      0.051784783601760864,
      0.10522560030221939,
      -0.07044228166341782,
      -0.014979235827922821,
      0.023841649293899536,
      -0.01858738623559475,
      0.04154874384403229,
      0.05948235094547272,
      0.10393847525119781,
      0.048888809978961945,
      0.04715907201170921,
      0.03397895023226738,
      -0.01409204676747322,
      0.037126410752534866,
      0.02503545768558979,
      0.016952956095337868,
      -0.0109718581661582,
      -0.0018607615493237972,
      -0.04881514608860016,
      0.023797785863280296,
      0.02392597496509552,
      0.01860804855823517,
      0.06654827296733856,
      0.07090698927640915,
      0.04966113343834877,
      0.012510092929005623,
      -0.010598592460155487,
      -0.019062386825680733,
      0.06901110708713531,
      -0.006251330021768808,
      -0.0184694305062294,
      -0.0043886564671993256,
      0.0850139707326889,
      -0.03586631268262863,
      -0.03701280802488327,
      0.004340911749750376,
      -0.02628079243004322,
      -0.00010313366510672495,
      -0.058216363191604614,
      -0.0250995010137558,
      0.04417378827929497,
      0.05455456301569939,
      -0.021940650418400764,
      0.017059484496712685,
      0.039359282702207565,
      0.055329445749521255,
      -0.06164643540978432,
      -0.024493619799613953,
      0.08955482393503189,
      -0.11204309016466141,
      -0.0295643899589777,
      0.05727690830826759,
      0.020938696339726448,
      0.0502898134291172,
      0.10994762927293777,
      0.04681723937392235,
      0.009085092693567276,
      0.03972618654370308,
      0.0461876317858696,
      -0.02876192331314087,
      1.785817813595935e-33,
      -0.013687142170965672,
      0.059554412961006165,
      -0.03642686828970909,
      -0.03206200152635574,
      -0.03271572291851044,
      -0.012199212796986103,
      0.06648120284080505,
      0.018324190750718117,
      -0.053219180554151535,
      0.04088455066084862,
      -0.03660322353243828,
      0.11826153099536896,
      -0.014058073982596397,
      -0.0063221268355846405,
      0.034073952585458755,
      -0.09452489763498306,
      -0.008622548542916775,
      -0.01668369211256504,
      0.062481969594955444,
      -0.05299871414899826,
      0.05654565617442131,
      -0.08023475110530853,
      0.01908673532307148,
      -0.055734794586896896,
      0.08950772136449814,
      0.03519032150506973,
      -0.0267320703715086,
      -0.030687525868415833,
      0.03622932732105255,
      0.07686164230108261,
      -0.023896094411611557,
      0.045020196586847305,
      0.06737424433231354,
      0.002879146719351411,
      -0.007205492816865444,
      0.038650136440992355,
      -0.08067931234836578,
      -0.09908691793680191,
      -0.005266028456389904,
      -0.06189281865954399,
      -0.04134225472807884,
      0.040698036551475525,
      -0.08047924190759659,
      0.02360582910478115,
      -0.013229787349700928,
      -0.10334671288728714,
      0.03550184890627861,
      0.016941852867603302,
      0.040922194719314575,
      -0.04537701979279518,
      -0.0005196697893552482,
      -0.02994026057422161,
      -0.045112114399671555,
      0.0005226331995800138,
      0.0514565110206604,
      0.04736989364027977,
      -0.02591547742486,
      -0.07860608398914337,
      0.018640613183379173,
      0.014741136692464352,
      0.05029778182506561,
      -0.012616004794836044,
      -0.029021235182881355,
      -0.06449025869369507,
      -0.06406931579113007,
      0.1065329909324646,
      0.046319629997015,
      -0.060862947255373,
      0.00923881959170103,
      -0.017999593168497086,
      -0.007178787607699633,
      0.004081804770976305,
      0.0213458389043808,
      0.01722448505461216,
      0.05501076579093933,
      0.011389059945940971,
      0.10086052864789963,
      0.05265625938773155,
      -0.02549090050160885,
      -0.0005146223702467978,
      -0.012526421807706356,
      -0.07544921338558197,
      0.0750994086265564,
      0.10931111127138138,
      -0.036779798567295074,
      -0.007747120689600706,
      0.03699110448360443,
      -0.007191753014922142,
      -0.01897186040878296,
      0.0002963731240015477,
      -0.020556410774588585,
      -0.05535607784986496,
      0.07918258756399155,
      -0.008638545870780945,
      -0.009031539782881737,
      -1.6411767234761064e-33,
      -0.09454614669084549,
      0.009952493943274021,
      -0.03403153643012047,
      -0.01301939319819212,
      0.017412932589650154,
      0.014625031501054764,
      0.03953064978122711,
      0.005001867655664682,
      -0.03222987800836563,
      0.02847968228161335,
      -0.0644964948296547,
      0.05408862233161926,
      -0.0397617444396019,
      -0.03982897102832794,
      -0.047702740877866745,
      -0.030882883816957474,
      -0.03092924878001213,
      -0.060803160071372986,
      -0.0017397574847564101,
      -0.007225541397929192,
      0.04621102288365364,
      0.06735332310199738,
      -0.020373694598674774,
      0.02788534201681614,
      -0.008374481461942196,
      -0.01206193771213293,
      0.02447867952287197,
      -0.051737599074840546,
      0.023622935637831688,
      0.0872398093342781,
      0.004144851118326187,
      0.023912964388728142,
      -0.008199104107916355,
      -0.025960227474570274,
      0.05469897389411926,
      -0.1031869575381279,
      0.08318203687667847,
      -0.022620677947998047,
      0.013919459655880928,
      -0.023959340527653694,
      0.09214537590742111,
      -0.027657197788357735,
      -0.048969872295856476,
      -0.02888210117816925,
      0.03298671916127205,
      0.04005211591720581,
      -0.060741692781448364,
      -0.0458625890314579,
      0.08234675228595734,
      -0.032975781708955765,
      -0.06795287877321243,
      -0.0643000528216362,
      -0.06398677825927734,
      0.07062985748052597,
      -0.03625425696372986,
      -0.005565911065787077,
      0.10533871501684189,
      -0.06901244074106216,
      -0.04051506146788597,
      -0.03456523269414902,
      0.030468858778476715,
      0.0362090989947319,
      -0.0430377833545208,
      -0.017356229946017265,
      0.10168177634477615,
      -0.03040187433362007,
      0.05674201622605324,
      -0.023474805057048798,
      -0.0352761447429657,
      -0.015543178655207157,
      0.03697647154331207,
      -0.0895315557718277,
      -0.005065444391220808,
      -0.07127908617258072,
      0.05380488932132721,
      0.053815826773643494,
      -0.007530689239501953,
      -0.0243515744805336,
      -0.06986569613218307,
      -0.003242561360821128,
      -0.038915619254112244,
      0.07081066071987152,
      0.017450779676437378,
      0.017627069726586342,
      0.02630671113729477,
      -0.06481962651014328,
      0.02913367934525013,
      -0.04944058880209923,
      0.011407577432692051,
      0.07498923689126968,
      -0.10166061669588089,
      -0.04116109386086464,
      -0.0047083208337426186,
      0.07503186166286469,
      0.055695343762636185,
      -5.612780284991459e-08,
      0.0407075397670269,
      0.120253786444664,
      -0.002405724488198757,
      0.08838116377592087,
      -0.024833491072058678,
      0.00013598320947494358,
      -0.026713205501437187,
      0.04574267193675041,
      -0.0731106698513031,
      0.009305710904300213,
      0.029624877497553825,
      0.01560479961335659,
      -0.008638259954750538,
      -0.05143928900361061,
      0.023234058171510696,
      -0.025126144289970398,
      -0.010249903425574303,
      0.025267697870731354,
      -0.1001996397972107,
      -0.07821504026651382,
      0.03617324307560921,
      0.0873267650604248,
      0.051310259848833084,
      -0.04725195840001106,
      -0.05582401901483536,
      -0.03219421207904816,
      0.08379100263118744,
      0.08450637012720108,
      0.07274215668439865,
      -0.05288770794868469,
      -0.06334102898836136,
      0.023998402059078217,
      0.05548467859625816,
      -0.005555796902626753,
      -0.1005057618021965,
      -0.009896781295537949,
      -0.02169901318848133,
      -0.020245777443051338,
      0.03483966737985611,
      0.11662621051073074,
      -0.04708872735500336,
      0.047687023878097534,
      -0.0040336293168365955,
      0.019687708467245102,
      -0.03113628923892975,
      -0.02148529514670372,
      -0.11858650296926498,
      -0.0676380917429924,
      -0.0011911260662600398,
      0.010063358582556248,
      0.061576638370752335,
      -0.03659970313310623,
      -0.04519300535321236,
      0.1252608746290207,
      0.04509534314274788,
      -0.0012050580698996782,
      -0.059767432510852814,
      -0.010516218841075897,
      0.013273819349706173,
      -0.07769744843244553,
      -0.01117696426808834,
      -0.10743398219347,
      -0.03923868015408516,
      0.02824215404689312
    ],
    [
      -0.05499114468693733,
      -0.003579656360670924,
      -0.011545974761247635,
      -0.020787181332707405,
      0.09491497278213501,
      -0.023477653041481972,
      0.05230629816651344,
      0.0166885145008564,
      -0.02783164568245411,
      -0.04748277738690376,
      -0.010903559625148773,
      -0.0590534433722496,
      0.0011121901916339993,
      0.021758249029517174,
      -0.002918082056567073,
      0.027456391602754593,
      -0.0638008862733841,
      0.017551198601722717,
      -0.06803756207227707,
      0.008342043496668339,
      -0.04439407214522362,
      -0.08804631978273392,
      -0.12196940928697586,
      0.02549385279417038,
      0.07322646677494049,
      -0.019313329830765724,
      -0.02803672105073929,
      0.028515011072158813,
      -0.038213424384593964,
      -0.05380389839410782,
      -0.08500392735004425,
      0.039307691156864166,
      -0.0641864687204361,
      -0.019847437739372253,
      0.04665344953536987,
      0.017169449478387833,
      -0.028168946504592896,
      0.01879228465259075,
      -0.037638988345861435,
      -0.01415081974118948,
      0.05058855190873146,
      -0.017835786566138268,
      -0.0609758198261261,
      0.02520943433046341,
      0.026925697922706604,
      0.06886021047830582,
      0.023451639339327812,
      0.003747146110981703,
      0.006165450904518366,
      0.09037084132432938,
      -0.0030938300769776106,
      0.017694635316729546,
      0.010280235670506954,
      0.03395518288016319,
      -0.08296365290880203,
      -0.012201812118291855,
      -0.029272930696606636,
      -0.044192176312208176,
      0.016141220927238464,
      0.00702682277187705,
      0.034115906804800034,
      -5.498152313521132e-05,
      0.01665285788476467,
      0.04735017940402031,
      0.005779936444014311,
      -0.03882760927081108,
      0.027038270607590675,
      0.021546607837080956,
      0.04092181846499443,
      -0.0695597231388092,
      -0.045592132955789566,
      -0.017231876030564308,
      -0.022682636976242065,
      -0.025076596066355705,
      -0.03767622634768486,
      0.049950405955314636,
      0.11378426104784012,
      0.048480499535799026,
      0.02002665027976036,
      0.03291028365492821,
      0.004559708759188652,
      0.04371461272239685,
      0.02501026727259159,
      -0.021485326811671257,
      -0.04362931102514267,
      -0.04276574030518532,
      -0.004633563105016947,
      0.04826117679476738,
      0.0123515073210001,
      -0.008194325491786003,
      0.01651250198483467,
      0.05559023842215538,
      -0.0065169064328074455,
      0.006974506191909313,
      0.06766990572214127,
      0.10260161757469177,
      -0.031135229393839836,
      -0.07419239729642868,
      -0.043816834688186646,
      0.008153043687343597,
      0.015441479161381721,
      -0.002599617699161172,
      -0.01217650156468153,
      -0.027860911563038826,
      -0.01410842314362526,
      -0.0642174556851387,
      0.005335622932761908,
      0.0589049756526947,
      0.1102466955780983,
      0.027812650427222252,
      0.00554884085431695,
      0.043146662414073944,
      -0.0030036901589483023,
      -0.05233895406126976,
      -0.05464163422584534,
      0.16525200009346008,
      -0.08467971533536911,
      -0.08884242922067642,
      0.0871272161602974,
      0.08993785828351974,
      0.01803523674607277,
      0.09816940873861313,
      -0.012437190860509872,
      -0.03910483792424202,
      0.037408530712127686,
      0.04799501597881317,
      -0.02363191358745098,
      3.870931917274579e-33,
      -0.0730435699224472,
      -0.01843881979584694,
      -0.03771580010652542,
      0.06224815547466278,
      -0.017908703535795212,
      0.013004419393837452,
      0.01373981311917305,
      -0.0767548680305481,
      -0.05710921436548233,
      -0.0640283077955246,
      -0.02352174185216427,
      0.05722621828317642,
      -0.07787486165761948,
      -0.04801631718873978,
      -0.05520286783576012,
      -0.13148640096187592,
      0.07610958814620972,
      -0.01197504810988903,
      0.14460109174251556,
      -0.05390298366546631,
      -0.01849537342786789,
      -0.0027677654288709164,
      -0.028150958940386772,
      -0.009781310334801674,
      0.05747819319367409,
      -0.0307009294629097,
      0.0005965205491520464,
      -0.08430361747741699,
      0.06163254752755165,
      0.06250809133052826,
      -0.03925647214055061,
      -0.0199337936937809,
      -0.08441800624132156,
      -0.020597077906131744,
      -0.07081446051597595,
      0.10732358694076538,
      -0.12264673411846161,
      -0.03475373983383179,
      -0.027235224843025208,
      0.028261657804250717,
      -0.0951412171125412,
      0.056522514671087265,
      -0.010265500284731388,
      -0.06906969845294952,
      -0.012823573313653469,
      -0.10678935796022415,
      0.10002990812063217,
      0.032864347100257874,
      -0.0035016140900552273,
      -0.009362024255096912,
      -0.059644151479005814,
      -0.0389523021876812,
      -0.05106176435947418,
      0.016549862921237946,
      -0.002753104083240032,
      0.0076195052824914455,
      -0.0008135748212225735,
      -0.05029432103037834,
      -0.04784419387578964,
      0.008369485847651958,
      -0.02036980539560318,
      0.021788524463772774,
      -0.1217445358633995,
      0.029512004926800728,
      -0.039069466292858124,
      0.028030965477228165,
      0.025004655122756958,
      -0.05035573989152908,
      -0.01909632980823517,
      -0.012120611034333706,
      -0.005190196447074413,
      -0.08101671189069748,
      0.02550623193383217,
      0.08248542249202728,
      -0.04578804224729538,
      -0.0005630871164612472,
      0.03596241772174835,
      0.04178229719400406,
      0.0015291970921680331,
      0.09229997545480728,
      0.024301208555698395,
      -0.006599814165383577,
      -0.0024536100681871176,
      0.013635996729135513,
      -0.018726041540503502,
      -0.010291262529790401,
      0.031142471358180046,
      -0.029870474711060524,
      0.013684196397662163,
      -0.029511453583836555,
      0.0012138873571529984,
      0.011832463555037975,
      0.0729624405503273,
      -0.005938385147601366,
      0.011078684590756893,
      -5.008832122047646e-33,
      -0.09054294973611832,
      -0.021226365119218826,
      -0.009627750143408775,
      0.05137385055422783,
      0.027232840657234192,
      0.0068947626277804375,
      0.08410915732383728,
      0.04374369978904724,
      -0.041807129979133606,
      -0.08443770557641983,
      -0.1041019856929779,
      0.07386970520019531,
      -0.03649004548788071,
      0.002349143847823143,
      -0.11294639855623245,
      -0.010676716454327106,
      -0.043220777064561844,
      -0.034393060952425,
      0.0893230065703392,
      -0.0142501937225461,
      -0.017009051516652107,
      0.11419212073087692,
      -0.011953177861869335,
      0.07175280153751373,
      -0.04916893690824509,
      0.011784625239670277,
      -0.0485709048807621,
      0.033091574907302856,
      -0.013912398368120193,
      0.0017789896810427308,
      0.02453547529876232,
      -0.01409920770674944,
      0.016930310055613518,
      0.009682041592895985,
      0.011447637341916561,
      -0.06866791099309921,
      0.03731534630060196,
      0.023908793926239014,
      -0.008817000314593315,
      0.020890560001134872,
      0.08011870831251144,
      -0.044690970331430435,
      -0.014985345304012299,
      -0.06652481853961945,
      0.008262925781309605,
      0.09621591866016388,
      0.022976690903306007,
      -0.08837785571813583,
      0.1287248134613037,
      0.07211608439683914,
      -0.0535486564040184,
      -0.017302529886364937,
      -0.046280063688755035,
      0.03578256443142891,
      -0.05290856957435608,
      -0.014387405477464199,
      0.07683120667934418,
      0.06511834263801575,
      -0.10074647516012192,
      -0.019803917035460472,
      0.0596458800137043,
      0.09864620864391327,
      0.020085016265511513,
      0.024120302870869637,
      0.060021497309207916,
      0.0464269295334816,
      0.030106496065855026,
      -0.001323646167293191,
      0.00441365223377943,
      -0.04634108766913414,
      0.026054874062538147,
      -0.0009178975597023964,
      -0.024379640817642212,
      -0.08814696222543716,
      0.04191003367304802,
      0.036961909383535385,
      0.04337047412991524,
      -0.021310677751898766,
      0.021362992003560066,
      -0.07280562072992325,
      0.006731633562594652,
      0.06691122055053711,
      -0.008106685243546963,
      0.05470993369817734,
      0.030194444581866264,
      -0.05058783292770386,
      0.01778593100607395,
      -0.017197493463754654,
      0.022692523896694183,
      0.02935510315001011,
      -0.10113037377595901,
      -0.10675924271345139,
      -0.03873518481850624,
      0.0499354787170887,
      0.005465140100568533,
      -5.87412856134506e-08,
      0.03237379714846611,
      0.031396422535181046,
      0.027895694598555565,
      0.066937655210495,
      -0.014699460938572884,
      -0.059634018689394,
      -0.017356472089886665,
      0.0602516233921051,
      0.024533752351999283,
      0.11204085499048233,
      -0.019402775913476944,
      0.03437073156237602,
      -0.005905571393668652,
      0.007491184398531914,
      -0.04565780609846115,
      0.030335111543536186,
      0.08326081186532974,
      0.04257854446768761,
      -0.024145621806383133,
      -0.009406939148902893,
      0.023094739764928818,
      0.05248555541038513,
      -0.017207534983754158,
      -0.002881706226617098,
      0.03080667182803154,
      -0.01901610568165779,
      0.06715700030326843,
      0.04862318933010101,
      0.03828293830156326,
      -0.050389815121889114,
      -0.06624872237443924,
      0.011096549220383167,
      0.03293895721435547,
      -0.007726360112428665,
      -0.11028139293193817,
      0.017767896875739098,
      -0.08808106184005737,
      -0.01714472845196724,
      -0.016790959984064102,
      0.07563260942697525,
      -0.04843594506382942,
      0.07259408384561539,
      0.033475056290626526,
      -0.06834731251001358,
      -0.02368570677936077,
      -0.03105267882347107,
      -0.1006215363740921,
      -0.02763194590806961,
      -0.0036171621177345514,
      -0.04659627005457878,
      0.0026658785063773394,
      -0.012681694701313972,
      0.06363365799188614,
      0.10227262228727341,
      0.07149744033813477,
      0.03659361973404884,
      -0.04182197153568268,
      0.0975477397441864,
      0.017802326008677483,
      -0.007942073047161102,
      0.028345201164484024,
      -0.11205388605594635,
      0.010243693366646767,
      -0.05159415677189827
    ],
    [
      -0.06524873524904251,
      -0.04983992129564285,
      0.016148662194609642,
      -0.020218312740325928,
      0.0164922047406435,
      -0.035183534026145935,
      -0.020447105169296265,
      -0.05945410951972008,
      -0.07927211374044418,
      -0.036680761724710464,
      0.00921958964318037,
      -0.010387386195361614,
      -0.08835019171237946,
      -0.003378954716026783,
      0.011335210874676704,
      0.07769718766212463,
      -0.05995175987482071,
      -0.10636325925588608,
      0.022223234176635742,
      0.001428113435395062,
      0.05848701670765877,
      0.026396792382001877,
      -0.03967238962650299,
      -0.07679062336683273,
      -0.01321699284017086,
      -0.019790329039096832,
      0.012174522504210472,
      0.12286677211523056,
      -0.028886396437883377,
      -0.08148934692144394,
      0.09723618626594543,
      0.06873396784067154,
      -0.052495185285806656,
      -0.01686323992908001,
      0.07445045560598373,
      -0.0621543750166893,
      -0.06417980790138245,
      0.002441922901198268,
      0.12771227955818176,
      0.04868978261947632,
      0.07442308217287064,
      -0.0520186722278595,
      0.09477634727954865,
      -0.034060582518577576,
      0.09089555591344833,
      0.024436593055725098,
      0.004142271354794502,
      0.013716557994484901,
      0.07456985861063004,
      -0.032183922827243805,
      0.039560385048389435,
      0.028675246983766556,
      -0.019803576171398163,
      -0.002315699588507414,
      0.1060592532157898,
      0.01853526569902897,
      -0.03390311077237129,
      -0.06117046996951103,
      0.0370904915034771,
      0.025294853374361992,
      0.11468183249235153,
      -0.04161752760410309,
      -0.02631746232509613,
      -0.04041074588894844,
      -0.058244362473487854,
      -0.05404691770672798,
      -0.04982134699821472,
      -0.012519678100943565,
      -0.006869134493172169,
      -0.07480364292860031,
      -0.09452025592327118,
      0.06424272060394287,
      -0.006717873737215996,
      0.03631477802991867,
      -0.03642222285270691,
      0.0817781612277031,
      -0.006729308515787125,
      -0.031940024346113205,
      -0.010193378664553165,
      -0.02280741184949875,
      0.04229440167546272,
      -0.05631474032998085,
      0.06898245960474014,
      0.03861277550458908,
      -0.025555629283189774,
      0.04187214747071266,
      -0.05877544730901718,
      0.02942810393869877,
      0.05304591357707977,
      0.06114502251148224,
      0.002266489202156663,
      -0.056767262518405914,
      -0.03902093693614006,
      0.0820307508111,
      -0.0934416800737381,
      0.07462126016616821,
      0.081349678337574,
      -0.023336276412010193,
      -0.11890242248773575,
      0.028244499117136,
      -0.02694523334503174,
      -0.03016146644949913,
      -0.044530823826789856,
      0.03825249522924423,
      0.0065780626609921455,
      -0.00878174975514412,
      -0.05396866053342819,
      0.11225198209285736,
      -0.03653877601027489,
      0.04517374560236931,
      -0.00369460042566061,
      -0.03676951304078102,
      -0.09563591331243515,
      -0.06251003593206406,
      0.0034078608732670546,
      -0.04636302590370178,
      -0.01654462330043316,
      -0.0009850675705820322,
      -0.0076329526491463184,
      -0.080477274954319,
      0.013029467314481735,
      0.00938622560352087,
      0.013458061031997204,
      -0.028118791058659554,
      -0.03624830022454262,
      -0.0022972801234573126,
      -0.0058065676130354404,
      1.39383184703837e-32,
      0.070501409471035,
      0.11059057712554932,
      -0.028379123657941818,
      -0.009097199887037277,
      0.0066748810932040215,
      -0.039311330765485764,
      -0.02837509661912918,
      0.0211875531822443,
      0.0044630770571529865,
      0.03379713371396065,
      -0.02109048329293728,
      -0.003337141126394272,
      0.045317377895116806,
      -0.019575193524360657,
      -0.038664594292640686,
      -0.021663304418325424,
      0.027995089069008827,
      0.035256192088127136,
      -0.12348635494709015,
      -0.037382423877716064,
      -0.0398230142891407,
      0.0025924097280949354,
      -0.023063816130161285,
      -0.026914561167359352,
      0.024745602160692215,
      0.10143587738275528,
      -0.009500987827777863,
      0.027152029797434807,
      0.002376002259552479,
      0.017810208722949028,
      -0.0014157945988699794,
      -0.0026339462492614985,
      0.04698263853788376,
      -0.03347726911306381,
      0.12075746804475784,
      -0.05581197515130043,
      -0.11084091663360596,
      -0.1492832750082016,
      -0.12051291018724442,
      -0.009589320048689842,
      0.0252994392067194,
      0.005977599415928125,
      -0.13927634060382843,
      0.0357607863843441,
      -0.01003924198448658,
      0.0038907891139388084,
      0.007340642623603344,
      0.009945621713995934,
      0.17543275654315948,
      -0.007939628325402737,
      -0.08042042702436447,
      0.05352487415075302,
      -0.08175245672464371,
      0.02258264645934105,
      0.05789985880255699,
      0.030328867956995964,
      -0.0132884057238698,
      -0.013392729684710503,
      0.03299863636493683,
      0.001697504660114646,
      -0.05124504119157791,
      0.0020835220348089933,
      -0.08818027377128601,
      -0.017720971256494522,
      -0.005943008232861757,
      -0.020123187452554703,
      0.06264424324035645,
      -0.020002666860818863,
      -0.0039945864118635654,
      0.03452066704630852,
      0.05578657612204552,
      -0.030809367075562477,
      0.037067171186208725,
      0.1266615390777588,
      -0.015568431466817856,
      -0.014780635014176369,
      -0.01468045637011528,
      0.10163341462612152,
      -0.060862839221954346,
      -0.0112250791862607,
      -0.024461207911372185,
      -0.02671181783080101,
      -0.027584027498960495,
      -0.011661868542432785,
      -0.02363944798707962,
      -0.04754745960235596,
      0.010875668376684189,
      -0.013341022655367851,
      0.06137046590447426,
      0.021998345851898193,
      -0.06701910495758057,
      0.027382446452975273,
      -0.04635052755475044,
      -0.0017994549125432968,
      -0.07875493913888931,
      -1.6460780941086538e-32,
      -0.05592961236834526,
      0.011970365419983864,
      -0.09944389760494232,
      -0.07854394614696503,
      -0.11374233663082123,
      0.0165497325360775,
      0.07420363277196884,
      0.050743453204631805,
      0.04196903109550476,
      0.06581267714500427,
      -0.0069667017087340355,
      0.0735587626695633,
      0.05661792308092117,
      -0.050611138343811035,
      -0.005416314583271742,
      -0.04844498634338379,
      0.045037295669317245,
      0.01667538471519947,
      -0.0390343964099884,
      0.01974853314459324,
      0.0100456103682518,
      0.017685044556856155,
      -0.03513312339782715,
      -0.028040746226906776,
      -0.08443913608789444,
      0.013076847419142723,
      0.0998535230755806,
      0.004359858110547066,
      -0.06688277423381805,
      -0.005624196492135525,
      0.005517536774277687,
      0.0063020274974405766,
      -0.04598473757505417,
      0.05892584100365639,
      -0.016734525561332703,
      -0.003152923658490181,
      0.015089320950210094,
      0.033520009368658066,
      0.08946827054023743,
      -0.015843484550714493,
      0.06383378803730011,
      0.06991773098707199,
      -0.05738886073231697,
      0.09663316607475281,
      -0.05739465355873108,
      -0.03612590208649635,
      0.026601336896419525,
      -0.06185420975089073,
      0.020081723108887672,
      -0.008697092533111572,
      -0.003543444210663438,
      0.034105733036994934,
      -0.04525504633784294,
      0.06022866442799568,
      -0.011538133956491947,
      -0.020890656858682632,
      0.051241401582956314,
      -0.0498637929558754,
      0.047575730830430984,
      -0.0077146622352302074,
      0.05308159068226814,
      -0.06250054389238358,
      -0.026151275262236595,
      0.0992284044623375,
      0.05174560844898224,
      -0.01422136276960373,
      0.0050148614682257175,
      -0.09155134111642838,
      0.007288631983101368,
      -0.015067864209413528,
      0.09869447350502014,
      -0.10306795686483383,
      -0.04852059483528137,
      0.04178258031606674,
      0.03092801757156849,
      -0.017035601660609245,
      0.018011000007390976,
      0.049281105399131775,
      -0.0821063220500946,
      0.0262287687510252,
      0.01985425315797329,
      0.024676406756043434,
      -0.010173817165195942,
      -0.07080050557851791,
      0.0031615737825632095,
      -0.04069513827562332,
      0.05862308293581009,
      0.02926250360906124,
      0.018676266074180603,
      -0.02802613005042076,
      -0.02681705728173256,
      0.001262913690879941,
      -0.06938310712575912,
      -0.01366418320685625,
      -0.031122954562306404,
      -5.178421957907631e-08,
      -0.011940158903598785,
      0.000673917937092483,
      -0.0062693082727491856,
      0.021176403388381004,
      0.0015923366881906986,
      0.05402428284287453,
      0.006154266186058521,
      -0.034982629120349884,
      -0.017672033980488777,
      0.017186474055051804,
      0.04293162748217583,
      0.024747315794229507,
      -0.07566739618778229,
      0.016428276896476746,
      0.01297962386161089,
      -0.046879228204488754,
      -0.02250145748257637,
      0.027296865358948708,
      -0.0637165755033493,
      -0.02423943020403385,
      -0.015533318743109703,
      0.03429917246103287,
      0.04205240681767464,
      -0.054146695882081985,
      -0.02130562998354435,
      -0.000290336727630347,
      0.021584492176771164,
      0.03488921746611595,
      0.0029536359943449497,
      0.035876158624887466,
      -0.022876441478729248,
      0.00453424034640193,
      0.05122845992445946,
      -0.04032042622566223,
      -0.023618413135409355,
      0.08814077079296112,
      0.010020286776125431,
      0.0017514568753540516,
      0.028123261407017708,
      -0.019530970603227615,
      -0.043978478759527206,
      -0.09717634320259094,
      0.027649274095892906,
      0.01462511159479618,
      0.001636515953578055,
      0.02613997831940651,
      -0.09873601794242859,
      -0.06785691529512405,
      0.008390012197196484,
      -0.09583058953285217,
      0.01403538603335619,
      -0.09164810180664062,
      -0.05343324691057205,
      -0.02848658338189125,
      -0.062007322907447815,
      -0.008809352293610573,
      -0.08976079523563385,
      -0.034374434500932693,
      -0.022492269054055214,
      -0.0222189798951149,
      0.07280214130878448,
      0.02010972797870636,
      -0.020063083618879318,
      -0.004667653702199459
    ],
    [
      -0.07798533886671066,
      0.004209119360893965,
      -0.011431237682700157,
      0.02475348487496376,
      0.073244109749794,
      -0.10107851028442383,
      -0.025440184399485588,
      0.09476453810930252,
      -0.05293764919042587,
      -0.01702350750565529,
      -0.020172731950879097,
      0.026582816615700722,
      -0.015973739326000214,
      -0.008087276481091976,
      0.07700774818658829,
      0.044706255197525024,
      0.03030257672071457,
      -0.047170232981443405,
      0.07482651621103287,
      -0.020564837381243706,
      -0.016231011599302292,
      -0.10324589908123016,
      -0.0008438003133051097,
      -0.06382083892822266,
      -0.059422723948955536,
      0.0723455548286438,
      -0.017793918028473854,
      0.02863222546875477,
      -0.00893170665949583,
      -0.058353401720523834,
      0.11189091950654984,
      0.0021071243099868298,
      -0.1123000979423523,
      0.025934865698218346,
      -0.12198852002620697,
      -0.007904356345534325,
      0.06657464057207108,
      -0.030834615230560303,
      -0.04055634140968323,
      0.022145124152302742,
      0.02108605019748211,
      -0.07096611708402634,
      -0.04475112631917,
      -0.04005642980337143,
      -0.010641445405781269,
      -0.07508858293294907,
      0.013014893047511578,
      0.012667631730437279,
      -0.011514558456838131,
      0.0038167196325957775,
      -0.053780462592840195,
      -0.03405621275305748,
      -0.02350623905658722,
      0.06613583117723465,
      0.10358534753322601,
      0.017734982073307037,
      -0.0242777056992054,
      -0.04672103747725487,
      -0.003105047158896923,
      -0.010270056314766407,
      0.03716276213526726,
      0.03010684624314308,
      -0.026694366708397865,
      0.059399113059043884,
      -0.014993328601121902,
      -0.019215799868106842,
      0.07554382085800171,
      0.129656121134758,
      0.0772307887673378,
      -0.0665232241153717,
      -0.06531253457069397,
      0.00926346704363823,
      -0.0014135070377960801,
      -0.018540021032094955,
      -0.023515257984399796,
      0.0031141196377575397,
      0.034324564039707184,
      -0.011794011108577251,
      0.016365578398108482,
      -0.12138698995113373,
      0.041792359203100204,
      0.0742257758975029,
      -0.03158338740468025,
      0.03624695912003517,
      -0.010444664396345615,
      0.0005687099182978272,
      0.01050102524459362,
      0.07280173897743225,
      -0.020046545192599297,
      -0.015445970930159092,
      0.06843946874141693,
      0.04674593731760979,
      -0.01104197558015585,
      0.05739004537463188,
      0.03282645717263222,
      0.088838592171669,
      0.04231799766421318,
      -0.011986803263425827,
      -0.023305043578147888,
      0.08357051014900208,
      -0.04941001161932945,
      -0.03294510021805763,
      -0.06732799857854843,
      0.027272270992398262,
      -0.041801996529102325,
      -0.04614263400435448,
      -0.022565096616744995,
      0.06655477732419968,
      0.04393976926803589,
      -0.012875079177320004,
      -0.06257331371307373,
      -0.012945296242833138,
      -0.12404149025678635,
      -0.08670245856046677,
      -0.03270628675818443,
      -0.020961398258805275,
      -0.060477130115032196,
      0.001705186441540718,
      -0.0002393768954789266,
      0.07286633551120758,
      0.09829298406839371,
      0.022365914657711983,
      -0.0189978014677763,
      0.05278607830405235,
      0.09991742670536041,
      -0.03146427869796753,
      0.041870854794979095,
      7.113767815546039e-33,
      0.048021040856838226,
      0.11858178675174713,
      -0.055295586585998535,
      0.00232331152074039,
      0.04041079804301262,
      -0.0031042713671922684,
      0.05432971939444542,
      -0.009672831743955612,
      -0.11850772798061371,
      0.12151730060577393,
      -0.020831294357776642,
      0.045143019407987595,
      -0.03244967386126518,
      0.024618707597255707,
      -0.002419800730422139,
      -0.09277822822332382,
      -0.007894921116530895,
      -0.018704846501350403,
      0.10500162839889526,
      -0.012302830815315247,
      0.024682991206645966,
      -0.03700438514351845,
      0.07010326534509659,
      -0.019950181245803833,
      0.06411243975162506,
      0.07696168124675751,
      0.037588417530059814,
      0.07477463036775589,
      0.08548155426979065,
      0.03935515880584717,
      0.04376700147986412,
      -0.07507660984992981,
      0.04265710711479187,
      0.03783603757619858,
      0.08226250857114792,
      -0.06629244983196259,
      -0.06506326049566269,
      -0.1269158571958542,
      -0.06920010596513748,
      -0.044205956161022186,
      -0.02734810672700405,
      0.012614336796104908,
      -0.07735335826873779,
      0.02691568247973919,
      -0.04315069690346718,
      -0.04021130129694939,
      -0.0018941974267363548,
      -0.026911640539765358,
      0.032949697226285934,
      -0.03696442022919655,
      0.011436665430665016,
      -0.007687049452215433,
      -0.01952286623418331,
      -0.0033374978229403496,
      0.029913567006587982,
      -0.01864330843091011,
      -0.0232533011585474,
      -0.07480192184448242,
      0.016133034601807594,
      0.030890408903360367,
      -0.017097946256399155,
      -0.08900504559278488,
      -0.046988535672426224,
      -0.07400260120630264,
      -0.023141898214817047,
      0.06546656042337418,
      0.002420517150312662,
      -0.00010559249494690448,
      0.010553929023444653,
      0.025124890729784966,
      0.021569276228547096,
      0.013891766779124737,
      0.058981869369745255,
      0.10775565356016159,
      0.03520400449633598,
      0.03736782819032669,
      0.06435580551624298,
      0.03495960310101509,
      -0.038424573838710785,
      0.022324679419398308,
      -0.10762647539377213,
      -0.08956466615200043,
      -0.004012035205960274,
      0.06679241359233856,
      0.033186059445142746,
      0.010250921361148357,
      0.00046591876889579,
      0.012607628479599953,
      -0.010944733396172523,
      0.014289784245193005,
      0.01624283753335476,
      0.03437252715229988,
      0.10436244308948517,
      -0.05944962427020073,
      -0.04285813122987747,
      -6.31462414418683e-33,
      -0.05343649536371231,
      -0.011978551745414734,
      -0.06879407912492752,
      0.026397237554192543,
      0.0034962419886142015,
      -0.006073541007936001,
      -0.003595739835873246,
      0.0750056728720665,
      -0.016336657106876373,
      0.04156588017940521,
      0.019880332052707672,
      0.007536663673818111,
      0.019595792517066002,
      -0.149880513548851,
      -0.01477685384452343,
      -0.03838680312037468,
      0.002629457972943783,
      -0.0897350162267685,
      -0.03608311712741852,
      0.03904614970088005,
      -0.03687100484967232,
      0.041727930307388306,
      -0.04179196432232857,
      0.04016643390059471,
      -0.005315429996699095,
      0.0657036155462265,
      0.008307250216603279,
      -0.042640071362257004,
      0.0022670698817819357,
      0.07342541217803955,
      -0.03984782099723816,
      -0.05669001117348671,
      -0.008106578141450882,
      -0.07851196825504303,
      -0.007517158053815365,
      0.05676594749093056,
      0.027408558875322342,
      0.046085622161626816,
      -0.04759329557418823,
      -0.010528916493058205,
      0.06996101140975952,
      0.032987575978040695,
      -0.04846533387899399,
      -0.03149077668786049,
      -0.06929776072502136,
      0.028484398499131203,
      -0.11408153921365738,
      0.06696271896362305,
      0.01792140305042267,
      0.0100582055747509,
      0.03770437464118004,
      0.014151809737086296,
      -0.003123341128230095,
      -0.03837127611041069,
      -0.007602667436003685,
      -0.04002325236797333,
      0.033332400023937225,
      0.004544711206108332,
      0.007399270310997963,
      0.05114823952317238,
      0.07345004379749298,
      -0.12359079718589783,
      -0.00796930119395256,
      0.07104239612817764,
      0.04187552258372307,
      0.023466553539037704,
      -0.07081544399261475,
      -0.011467592790722847,
      -0.09883695095777512,
      0.09279133379459381,
      0.054010678082704544,
      0.0019391506211832166,
      -0.043851274996995926,
      -0.004783652722835541,
      0.06502583622932434,
      -0.02265542931854725,
      -0.021423665806651115,
      -0.031085191294550896,
      -0.02333754301071167,
      0.08490881323814392,
      0.036156944930553436,
      0.08648128807544708,
      -0.013963268138468266,
      -0.06763690710067749,
      0.07035038620233536,
      -0.007960082963109016,
      -0.0031311826314777136,
      -0.026563305407762527,
      0.02097904682159424,
      -0.06608501076698303,
      -0.11131046712398529,
      0.09298347681760788,
      -0.062176115810871124,
      0.07258447259664536,
      0.06695565581321716,
      -6.375977079642325e-08,
      -0.0248736459761858,
      -0.03045828640460968,
      0.04994554445147514,
      0.009835582226514816,
      -0.0318172425031662,
      0.015024282038211823,
      -0.008275684900581837,
      -0.031429871916770935,
      0.020172996446490288,
      0.017816927284002304,
      -0.012503860518336296,
      0.04383945092558861,
      -0.02169199474155903,
      -0.025248100981116295,
      0.0073655578307807446,
      0.031144291162490845,
      0.031669773161411285,
      0.004599387291818857,
      -0.04877488687634468,
      -0.07954813539981842,
      0.011424549855291843,
      0.04221688583493233,
      -0.01289922371506691,
      -0.06114121899008751,
      0.09631820023059845,
      0.04017677530646324,
      0.08473866432905197,
      0.045266009867191315,
      0.011016789823770523,
      -0.05358225852251053,
      -0.0282280333340168,
      -0.06778527051210403,
      0.04368723928928375,
      0.005553167778998613,
      -0.057978153228759766,
      0.06373754143714905,
      -0.09167317301034927,
      0.02668577991425991,
      -0.015811815857887268,
      -0.0012881128350272775,
      -0.001473626121878624,
      0.05641679838299751,
      0.017807135358452797,
      -0.009175910614430904,
      -0.01702849194407463,
      -0.03351939469575882,
      -0.07324552536010742,
      0.021000133827328682,
      -0.007508480921387672,
      0.012185429222881794,
      0.03425011783838272,
      -0.11763257533311844,
      -0.010956172831356525,
      -0.0208385419100523,
      0.056109655648469925,
      -0.02230842038989067,
      -0.016687151044607162,
      -0.0047060600481927395,
      0.04149246588349342,
      0.012275060638785362,
      -0.014021999202668667,
      -0.04004525765776634,
      0.0030063448939472437,
      -0.00011742980859708041
    ],
    [
      0.061768174171447754,
      0.004107805900275707,
      -0.03740707039833069,
      0.05636030435562134,
      -0.009240319952368736,
      0.049235787242650986,
      0.048401426523923874,
      0.050541479140520096,
      -0.0022843608167022467,
      0.049740154296159744,
      0.01984434202313423,
      -0.014739499427378178,
      -0.013505061157047749,
      -0.10124541819095612,
      -0.003935746382921934,
      -0.0028441627509891987,
      -0.052643608301877975,
      -0.032171234488487244,
      -0.028970863670110703,
      0.051094572991132736,
      0.0014340314082801342,
      0.014516029506921768,
      0.026239043101668358,
      -0.0682041347026825,
      -0.0025520173367112875,
      0.08956849575042725,
      -0.05394876375794411,
      -0.0038004089146852493,
      -0.08366459608078003,
      0.0037419674918055534,
      -0.06757237017154694,
      0.07068414241075516,
      -0.059659190475940704,
      0.013103350065648556,
      0.08985256403684616,
      -0.03938945755362511,
      -0.001869665109552443,
      0.01444969605654478,
      0.031539883464574814,
      0.09351083636283875,
      -0.025851979851722717,
      -0.05215650796890259,
      0.03817608579993248,
      -0.12913107872009277,
      -0.06788190454244614,
      -0.10679463297128677,
      -0.07464881241321564,
      -0.027555320411920547,
      0.021206865087151527,
      -0.0022124024108052254,
      -0.07180513441562653,
      0.07994924485683441,
      -0.03245287016034126,
      -0.03211294114589691,
      0.05811253935098648,
      0.06969393044710159,
      -0.02515561506152153,
      -0.014668900519609451,
      0.008910141885280609,
      -0.05583806335926056,
      -0.03159552440047264,
      -0.0020401582587510347,
      0.041726354509592056,
      -0.04600987210869789,
      -0.011689729057252407,
      0.028832925483584404,
      -0.013862866908311844,
      0.09130916744470596,
      0.003340434981510043,
      -0.0330888107419014,
      -0.015564405359327793,
      0.09639251977205276,
      0.004735552705824375,
      -0.018418271094560623,
      0.044262830168008804,
      -0.0749409943819046,
      -0.006391887553036213,
      0.06589771807193756,
      0.0064638336189091206,
      -0.16309209167957306,
      0.005030617117881775,
      -0.04789489880204201,
      0.0018945776391774416,
      -0.007399389520287514,
      0.027110237628221512,
      0.040042709559202194,
      0.039134036749601364,
      -0.012780461460351944,
      0.012415722012519836,
      -0.005287096370011568,
      0.025001423433423042,
      0.027535809203982353,
      0.01225893571972847,
      0.021517997607588768,
      -0.05427248030900955,
      0.035057470202445984,
      -0.009297877550125122,
      0.04719710350036621,
      -0.038273561745882034,
      0.056403107941150665,
      0.010978050529956818,
      -0.03353041410446167,
      -0.03929676488041878,
      0.12338279187679291,
      0.015442386269569397,
      -0.08454415202140808,
      0.01932399347424507,
      -0.03220633789896965,
      0.03997618332505226,
      -0.02295169234275818,
      -0.003202646505087614,
      0.06619611382484436,
      -0.09369351714849472,
      -0.0868365466594696,
      -0.08991494029760361,
      -0.026971440762281418,
      0.0018626886885613203,
      -0.0688668042421341,
      0.08576591312885284,
      0.031400032341480255,
      0.046711843460798264,
      -0.02673190087080002,
      -0.1285819411277771,
      0.0434378907084465,
      -0.041912972927093506,
      -0.00898489449173212,
      0.03273596987128258,
      1.0631861511767876e-32,
      0.018152736127376556,
      -0.07829457521438599,
      0.010080617852509022,
      -0.019017286598682404,
      0.08459071815013885,
      -0.005621790885925293,
      0.006251716520637274,
      0.05060449615120888,
      0.011575459502637386,
      0.06388881802558899,
      -0.07343504577875137,
      -0.006101578939706087,
      -0.06671660393476486,
      -0.0503607802093029,
      -0.07482562214136124,
      -0.07465419918298721,
      -0.026507599279284477,
      -0.004605613183230162,
      0.019240152090787888,
      -0.06894899904727936,
      -0.020346708595752716,
      -0.024812934920191765,
      0.06685670465230942,
      -0.01575404591858387,
      -0.00464788218960166,
      0.01869729720056057,
      -0.007065535988658667,
      0.07626507431268692,
      0.04129664599895477,
      0.009028656408190727,
      0.07508695125579834,
      -0.003125106217339635,
      0.11975106596946716,
      0.00626829918473959,
      -0.03378857299685478,
      0.00843969639390707,
      -0.07442965358495712,
      0.02747887559235096,
      0.023120954632759094,
      0.054848812520504,
      -0.033365026116371155,
      -0.01826261170208454,
      -0.04812614992260933,
      0.010516917333006859,
      -0.013343621045351028,
      -0.05898980796337128,
      0.04333214834332466,
      0.04258154705166817,
      0.06499353051185608,
      -0.0678686648607254,
      -0.024398356676101685,
      0.06619587540626526,
      -0.055302463471889496,
      0.006571574602276087,
      -0.030776837840676308,
      0.013542704284191132,
      -0.09954234212636948,
      0.029893875122070312,
      0.028063133358955383,
      0.018692204728722572,
      -0.10617407411336899,
      -0.016701344400644302,
      0.04649541527032852,
      -0.008228163234889507,
      -0.034450557082891464,
      0.07808154821395874,
      0.008539043366909027,
      0.014864236116409302,
      0.00876877922564745,
      -0.07780183106660843,
      0.01983281411230564,
      -0.08391086757183075,
      0.10540781170129776,
      0.01074410043656826,
      0.11816851794719696,
      -0.010983062908053398,
      0.04619664326310158,
      -0.04511832073330879,
      -0.059660956263542175,
      -0.053848739713430405,
      -0.011179137043654919,
      -0.0024700930807739496,
      -0.05510063096880913,
      0.025104116648435593,
      0.011115189641714096,
      -0.00011772831931011751,
      0.05277739837765694,
      -0.02901914156973362,
      0.05497244745492935,
      0.05020665004849434,
      -0.044343866407871246,
      0.033839140087366104,
      -0.06147895008325577,
      -0.10836845636367798,
      0.04279330000281334,
      -1.0323762973049416e-32,
      0.05453823506832123,
      0.03382143750786781,
      -0.024150872603058815,
      -0.029873643070459366,
      0.001431996002793312,
      0.023703278973698616,
      0.036562561988830566,
      0.02388934977352619,
      0.03829403221607208,
      0.062190569937229156,
      0.02926814742386341,
      -0.009538105688989162,
      -0.07598144561052322,
      -0.1069495752453804,
      -0.0426056906580925,
      0.04738858714699745,
      -0.020021243020892143,
      0.04563263803720474,
      0.030051857233047485,
      -0.03412935510277748,
      -0.023231424391269684,
      0.03468170017004013,
      -0.0006078333244659007,
      0.06848936527967453,
      -0.07593297958374023,
      -0.053217656910419464,
      0.013792548328638077,
      -0.023875785991549492,
      0.018656892701983452,
      0.019289858639240265,
      0.02333606220781803,
      0.024939922615885735,
      -0.095552958548069,
      0.10583964735269547,
      -0.005792917683720589,
      0.0065618157386779785,
      0.018337367102503777,
      0.032850269228219986,
      -0.08109056949615479,
      0.07378293573856354,
      -0.000723572273273021,
      0.009182869456708431,
      0.007014133036136627,
      -0.022973304614424706,
      -0.011818577535450459,
      0.005521763581782579,
      0.10623271763324738,
      -0.008730403147637844,
      -0.05206497013568878,
      0.029040593653917313,
      0.02405591495335102,
      -0.12396667152643204,
      -0.05945739522576332,
      0.0011289205867797136,
      -0.023298924788832664,
      0.030200565233826637,
      0.006899097468703985,
      -0.005538998171687126,
      -0.04119262844324112,
      -0.018284520134329796,
      -0.0036370870657265186,
      -0.034177057445049286,
      0.05594673007726669,
      0.00934397242963314,
      0.11858682334423065,
      0.03969106823205948,
      0.025297215208411217,
      0.012218785472214222,
      0.08010873943567276,
      0.07120140641927719,
      -0.01226248312741518,
      0.035020314157009125,
      -0.010908964090049267,
      0.012898394837975502,
      0.059028029441833496,
      0.04272134602069855,
      -0.028584996238350868,
      0.010169566608965397,
      -0.02139371819794178,
      -0.005271227099001408,
      0.07558697462081909,
      0.0428067222237587,
      0.003810326335951686,
      -0.14718489348888397,
      -0.09689110517501831,
      -0.014359829016029835,
      0.07988597452640533,
      0.09963592886924744,
      -0.04880007728934288,
      -0.004720521159470081,
      -0.027713259682059288,
      -0.03687325492501259,
      0.046161580830812454,
      0.04636988043785095,
      -0.04258635267615318,
      -5.807993375128717e-08,
      -0.10382766276597977,
      0.019461004063487053,
      -0.06657968461513519,
      -0.00040677920333109796,
      0.027090564370155334,
      -0.059453535825014114,
      0.07764871418476105,
      0.016119319945573807,
      -0.033061619848012924,
      -0.09348277002573013,
      0.04305659234523773,
      0.05049954727292061,
      0.04810848459601402,
      -0.07636047154664993,
      0.006541668437421322,
      -0.03158724680542946,
      -0.04048515856266022,
      0.015982329845428467,
      -0.042993154376745224,
      0.023180944845080376,
      0.06031821295619011,
      0.10003362596035004,
      0.06339617818593979,
      0.010168131440877914,
      0.09100741147994995,
      0.0035195292439311743,
      -0.03147178888320923,
      0.008423568680882454,
      -0.01902364008128643,
      0.07960804551839828,
      0.021834326907992363,
      -0.033815186470746994,
      0.017447207123041153,
      -0.0702080950140953,
      0.0348551981151104,
      -0.03706497326493263,
      0.058220382779836655,
      -0.01874578557908535,
      0.03182033449411392,
      0.03754233196377754,
      -0.05062509700655937,
      -0.005777487065643072,
      -0.10154865682125092,
      0.04030149430036545,
      -0.004316067323088646,
      -0.047644756734371185,
      -0.11780885607004166,
      0.109453484416008,
      0.06626422703266144,
      -0.031417060643434525,
      0.028729325160384178,
      0.04134224355220795,
      0.018314646556973457,
      -0.07082169502973557,
      -0.07133093476295471,
      -0.03392036259174347,
      0.019824961200356483,
      0.07521850615739822,
      -0.03845939040184021,
      -0.04178464040160179,
      -0.06673260778188705,
      0.01837010681629181,
      0.0029990621842443943,
      -0.0005247915396466851
    ],
    [
      6.247924466151744e-05,
      -0.09085819125175476,
      -0.10789887607097626,
      0.03551415726542473,
      0.09736894071102142,
      0.038981299847364426,
      -0.04965135455131531,
      0.08636574447154999,
      -0.016619862988591194,
      -0.04907627031207085,
      0.03437231108546257,
      -0.004474906250834465,
      -0.04327736794948578,
      -0.015027794986963272,
      0.07310761511325836,
      -0.04175284132361412,
      0.02740868180990219,
      -0.059230074286460876,
      0.04801294580101967,
      0.028625288978219032,
      -0.01128298044204712,
      -0.05311818793416023,
      0.07058387994766235,
      -0.099848672747612,
      0.007641591131687164,
      0.050034862011671066,
      -0.04677743464708328,
      0.026463443413376808,
      0.08795876801013947,
      -0.05238106846809387,
      0.05886395648121834,
      -0.003651547012850642,
      0.0291668102145195,
      -0.038385458290576935,
      0.07083500176668167,
      0.10154689848423004,
      0.021544678136706352,
      -0.07946862280368805,
      -0.07751524448394775,
      0.0017516320804134011,
      0.01168784499168396,
      -0.05349426344037056,
      0.021361256018280983,
      -0.06775878369808197,
      -0.07865060865879059,
      -0.10171343386173248,
      0.006663000676780939,
      -0.02807309478521347,
      0.03194257244467735,
      -0.06656325608491898,
      -0.09414367377758026,
      -0.044401127845048904,
      -0.03259321674704552,
      -0.07588784396648407,
      0.035483166575431824,
      0.015589172020554543,
      0.07609479129314423,
      0.03313162550330162,
      0.02700676955282688,
      -0.006846921052783728,
      -0.05301644653081894,
      0.016951564699411392,
      -0.0186688844114542,
      0.004190885927528143,
      0.005446470808237791,
      -0.015316870994865894,
      0.06649325788021088,
      0.03966249153017998,
      0.018079102039337158,
      -0.05840536579489708,
      -0.08470484614372253,
      0.03575556352734566,
      -0.002600082429125905,
      0.030832253396511078,
      -0.023926451802253723,
      -0.06632401794195175,
      -0.04232332482933998,
      0.11044052243232727,
      -0.01831149123609066,
      -0.15281999111175537,
      0.09670643508434296,
      -0.05863945186138153,
      0.04195798933506012,
      -0.019605938345193863,
      0.05080946907401085,
      0.04788718372583389,
      0.04036358371376991,
      -0.016607210040092468,
      0.00868688803166151,
      0.09714066237211227,
      -0.06670596450567245,
      0.10787784308195114,
      -0.05635572597384453,
      0.034310922026634216,
      0.09926377236843109,
      0.059470586478710175,
      -0.06510122865438461,
      0.038012463599443436,
      0.003452474484220147,
      0.09125558286905289,
      -0.04849064722657204,
      -0.004319929983466864,
      -0.021128617227077484,
      0.07465117424726486,
      -0.013183308765292168,
      -0.05615955963730812,
      -0.024265935644507408,
      0.08282721042633057,
      -0.006424817256629467,
      -0.036073993891477585,
      0.031049776822328568,
      -0.03944962099194527,
      0.014323905110359192,
      -0.08337725698947906,
      -0.009925401769578457,
      -0.002550793346017599,
      0.00808042660355568,
      -0.017657296732068062,
      0.023964811116456985,
      0.043095190078020096,
      0.08972756564617157,
      -0.005346720106899738,
      -0.029587294906377792,
      0.01782085932791233,
      -0.006632915697991848,
      -0.034594520926475525,
      0.014735010452568531,
      4.590439887127408e-33,
      0.05759308487176895,
      -0.04628315940499306,
      -0.0547126904129982,
      0.09937171638011932,
      0.03797149658203125,
      0.04445381835103035,
      0.027813978493213654,
      0.05359972268342972,
      -0.05308098345994949,
      0.0710499957203865,
      0.018525756895542145,
      -0.059809211641550064,
      -0.06558554619550705,
      0.055619679391384125,
      -0.023529333993792534,
      -0.06884758174419403,
      -0.02345341071486473,
      -0.0058929575607180595,
      0.011228240095078945,
      -0.05454420670866966,
      0.06077997386455536,
      0.01437717117369175,
      0.003901782911270857,
      0.04467569664120674,
      -0.07729627192020416,
      0.04859764873981476,
      -0.0002468783932272345,
      0.008451102301478386,
      0.02654961682856083,
      -0.0043363794684410095,
      0.06479983031749725,
      -0.023494374006986618,
      0.004486929625272751,
      0.008913162164390087,
      0.03354538604617119,
      -0.12048972398042679,
      -0.08655150979757309,
      -0.0030689616687595844,
      -0.09203887730836868,
      -0.020907297730445862,
      0.021766923367977142,
      -0.011538941413164139,
      -0.07571601867675781,
      -0.03943833336234093,
      -0.004739499185234308,
      -0.055589672178030014,
      -0.020414162427186966,
      0.04998813197016716,
      0.05001245066523552,
      -0.0770120769739151,
      0.028221135959029198,
      0.06564690917730331,
      -0.02221934124827385,
      -0.03577936440706253,
      0.03208025544881821,
      0.04669618606567383,
      -0.08675525337457657,
      -0.015904882922768593,
      -0.012529130093753338,
      -0.057057999074459076,
      -0.021650930866599083,
      0.08070828765630722,
      0.021464355289936066,
      -0.03453901410102844,
      0.05548162758350372,
      0.035383835434913635,
      0.03210831433534622,
      0.0053054518066346645,
      0.0015356913208961487,
      0.011737098917365074,
      -0.024612024426460266,
      -0.005474044010043144,
      0.03989453613758087,
      -0.003533171722665429,
      0.06572333723306656,
      0.03551087528467178,
      -0.01641893945634365,
      -0.00013412053522188216,
      -0.023216992616653442,
      -0.06713396310806274,
      -0.05059271678328514,
      0.030727071687579155,
      0.04082968086004257,
      -0.039323993027210236,
      0.017422188073396683,
      -0.02372855320572853,
      0.00558432238176465,
      -0.013921585865318775,
      0.04353529214859009,
      0.006067360285669565,
      0.027296632528305054,
      -0.029330460354685783,
      -0.0797787606716156,
      -0.07849457114934921,
      -0.0009696051711216569,
      -5.996878102925981e-33,
      0.03201219439506531,
      0.08194376528263092,
      -0.05550868809223175,
      -0.07402866333723068,
      -0.001761763938702643,
      -0.0033589855302125216,
      -0.001677669701166451,
      -0.026249943301081657,
      0.049885354936122894,
      0.056792475283145905,
      0.03623228520154953,
      -0.00748842116445303,
      -0.014064500108361244,
      -0.11020106822252274,
      -0.06342529505491257,
      0.03851846605539322,
      -0.031586334109306335,
      -0.03558148816227913,
      -0.04355546459555626,
      -0.014658435247838497,
      -0.0855676457285881,
      0.023491570726037025,
      0.1257394701242447,
      0.021095605567097664,
      -0.010632133111357689,
      0.011630724184215069,
      0.06258979439735413,
      0.03935667872428894,
      -0.009220948442816734,
      0.06861088424921036,
      0.0682116448879242,
      -0.001827897853218019,
      -0.11207734793424606,
      0.02532430924475193,
      -0.026986489072442055,
      -0.022435758262872696,
      0.04128694161772728,
      -0.005967434495687485,
      -0.02392342872917652,
      0.020351020619273186,
      0.096779003739357,
      0.04918713495135307,
      -0.06743355095386505,
      -0.04825760796666145,
      -0.015281690284609795,
      0.0068010431714355946,
      0.0059649404138326645,
      -0.11741238087415695,
      -0.033350925892591476,
      -0.0455385223031044,
      0.0136937964707613,
      -0.03466629981994629,
      0.004330988507717848,
      -0.008046540431678295,
      0.0296020545065403,
      -0.03362850844860077,
      0.05331772193312645,
      0.059819672256708145,
      -0.01593690738081932,
      0.0019297382095828652,
      0.08156558871269226,
      -0.040188051760196686,
      -0.0241559911519289,
      -0.029566429555416107,
      0.04844561591744423,
      -0.018700595945119858,
      -0.04083753749728203,
      0.08829179406166077,
      -0.05303596705198288,
      0.06052761152386665,
      -0.035704512149095535,
      -0.02635807916522026,
      0.04612168297171593,
      -0.005068712402135134,
      0.02004917338490486,
      0.07243786752223969,
      0.08991722017526627,
      0.04036116600036621,
      -0.026034321635961533,
      -0.01494216825813055,
      0.032045505940914154,
      0.0027557804714888334,
      -0.05725263059139252,
      -0.12917651236057281,
      -0.03336897864937782,
      -0.0054796538315713406,
      0.04781726747751236,
      0.08827129006385803,
      0.09824910014867783,
      0.0016150614246726036,
      -0.03403127193450928,
      0.06510651111602783,
      0.07003726065158844,
      0.02053825370967388,
      0.07607153058052063,
      -5.8271165670475966e-08,
      -0.1265876144170761,
      -0.027297189459204674,
      -0.04059533402323723,
      -0.002974550472572446,
      0.004781551193445921,
      -0.002925894921645522,
      0.029893383383750916,
      -0.03789525106549263,
      -0.029368596151471138,
      -0.08571596443653107,
      -0.029747260734438896,
      0.0031359728891402483,
      0.04197365790605545,
      -0.052611082792282104,
      -0.021116480231285095,
      -0.026395441964268684,
      -0.04022775962948799,
      0.12290138751268387,
      -0.016251038759946823,
      -0.07069894671440125,
      -0.04846484214067459,
      -0.023208538070321083,
      0.062227409332990646,
      0.02256368286907673,
      -0.003261226462200284,
      -0.0851111188530922,
      0.019621560350060463,
      -0.08637529611587524,
      -0.021570952609181404,
      0.01951570250093937,
      -0.009420813992619514,
      0.04201915115118027,
      -0.021000906825065613,
      -0.11755944043397903,
      -0.037964388728141785,
      0.026397084817290306,
      0.0253420602530241,
      -0.05628393962979317,
      0.0012363084824755788,
      0.026053937152028084,
      0.02425246126949787,
      0.04744362831115723,
      -0.02781696990132332,
      -0.007741803303360939,
      0.0345614068210125,
      -2.6583766157273203e-06,
      0.003165262984111905,
      0.027834216132760048,
      0.0034009607043117285,
      0.038252707570791245,
      -0.03363066166639328,
      0.013848715461790562,
      -0.08634636551141739,
      0.036226820200681686,
      0.06793510168790817,
      -0.02299954742193222,
      0.004464884288609028,
      0.06827562302350998,
      -0.02637622505426407,
      0.010199285112321377,
      -0.1255304366350174,
      -0.011485118418931961,
      0.14040246605873108,
      -0.0177227184176445
    ],
    [
      -0.05781322345137596,
      -0.06579460203647614,
      -0.07969816029071808,
      0.045414142310619354,
      0.11146464943885803,
      -0.05085623264312744,
      -0.0026819538325071335,
      0.08734460920095444,
      -0.020109212026000023,
      -0.005359665956348181,
      -0.07579131424427032,
      0.04751325026154518,
      -0.06453077495098114,
      -0.00618711207062006,
      0.03170100226998329,
      -0.019792718812823296,
      0.08105121552944183,
      -0.023403147235512733,
      0.0020111168269068003,
      0.011356438510119915,
      -0.04112490639090538,
      -0.10384591668844223,
      -0.02864009328186512,
      -0.058362267911434174,
      -0.028194930404424667,
      0.03985939547419548,
      -0.06555286794900894,
      -0.012620029039680958,
      0.02653202787041664,
      -0.050453804433345795,
      0.030138373374938965,
      -0.001403433852829039,
      -0.08149784058332443,
      -0.012156795710325241,
      -0.032739244401454926,
      0.009632056578993797,
      0.07327665388584137,
      -0.04122763127088547,
      -0.05525779724121094,
      0.02705742046236992,
      -0.00022713995713274926,
      -0.11096951365470886,
      -0.07443926483392715,
      -0.002468497259542346,
      -0.070797860622406,
      -0.08904612809419632,
      0.03525395691394806,
      0.022801822051405907,
      -0.04151678457856178,
      -0.03569270297884941,
      -0.03439328074455261,
      -0.010266071185469627,
      -0.04286673665046692,
      0.0800224244594574,
      0.05563276633620262,
      -0.026906339451670647,
      -0.020358039066195488,
      0.006788985338062048,
      -0.015633782371878624,
      -0.012299256399273872,
      0.017550155520439148,
      -0.02818852663040161,
      -0.04249470308423042,
      0.03605325147509575,
      0.009529992938041687,
      0.025293581187725067,
      0.05528571456670761,
      0.05190309137105942,
      0.06990732252597809,
      -0.0016046056989580393,
      -0.04606161639094353,
      -0.005935491994023323,
      -0.03953324258327484,
      0.029994916170835495,
      -0.008514847606420517,
      0.0604935921728611,
      0.07657402753829956,
      0.008878474123775959,
      0.04546641558408737,
      -0.15383505821228027,
      0.0762481614947319,
      0.012788240797817707,
      -0.01773437298834324,
      -0.0737466812133789,
      0.04968991130590439,
      -0.011745844967663288,
      -0.031959205865859985,
      0.022697439417243004,
      0.042825017124414444,
      -0.01634761318564415,
      0.07942160964012146,
      0.05223177745938301,
      0.03856925293803215,
      -0.00834771990776062,
      0.05224507674574852,
      0.0815180316567421,
      0.02234824001789093,
      -0.06773918122053146,
      -0.04517536982893944,
      0.08682014793157578,
      -0.05164287984371185,
      0.010611728765070438,
      -0.0608975850045681,
      0.024445179849863052,
      -0.04875778406858444,
      -0.08079823851585388,
      -0.015916602686047554,
      0.03025789000093937,
      -0.006541809532791376,
      -0.0034843592438846827,
      -0.04073731601238251,
      0.003056218149140477,
      -0.02860959619283676,
      -0.08019157499074936,
      -0.03877689689397812,
      0.014163131825625896,
      -0.10897757112979889,
      -0.03246435895562172,
      0.03984452039003372,
      0.06453947722911835,
      0.0446896068751812,
      -0.0006521030445583165,
      0.01821906492114067,
      0.07483523339033127,
      0.04612317681312561,
      0.00901053100824356,
      -0.04126705229282379,
      4.061919994582445e-33,
      -0.039022184908390045,
      0.10153835266828537,
      -0.0961352288722992,
      -0.0165572352707386,
      -0.021188005805015564,
      -0.0071616340428590775,
      -0.011482001282274723,
      0.004600635729730129,
      -0.10985062271356583,
      0.09628326445817947,
      -0.043266281485557556,
      0.04809897765517235,
      -0.045314665883779526,
      0.023743614554405212,
      0.0560673326253891,
      -0.06993378698825836,
      0.03251418471336365,
      0.07449907809495926,
      0.0696784257888794,
      0.0038041300140321255,
      0.0857931450009346,
      0.015293767675757408,
      0.05712144076824188,
      -0.041056372225284576,
      0.060670312494039536,
      0.056935377418994904,
      -0.0028957475442439318,
      0.023306969553232193,
      0.08218959718942642,
      0.07941507548093796,
      -0.02299393340945244,
      -0.050543371587991714,
      0.032814472913742065,
      -0.034559767693281174,
      0.04631323367357254,
      -0.09957165271043777,
      -0.11419215053319931,
      -0.09172190725803375,
      -0.07881874591112137,
      -0.06861578673124313,
      -0.010553347878158092,
      0.040682099759578705,
      -0.09850600361824036,
      0.01716075837612152,
      0.017834749072790146,
      -0.031938035041093826,
      -0.0002423181722406298,
      -0.003705283161252737,
      -0.030772147700190544,
      -0.05196129158139229,
      0.05447317659854889,
      0.016523266211152077,
      -0.09089696407318115,
      -0.006669106427580118,
      0.06785350292921066,
      -0.02435259521007538,
      0.02491142600774765,
      -0.025079643353819847,
      0.04898111894726753,
      0.02794918231666088,
      0.02391114830970764,
      -0.063219353556633,
      -0.014037687331438065,
      -0.10346443206071854,
      0.04723510518670082,
      0.07060695439577103,
      0.01844434253871441,
      0.04455020651221275,
      -0.014620776288211346,
      0.05811411887407303,
      -0.02112533152103424,
      -0.009416460059583187,
      0.04636766389012337,
      0.05183818191289902,
      0.055762600153684616,
      0.02556362748146057,
      0.08034214377403259,
      0.014972822740674019,
      -0.03186119347810745,
      -0.002661638194695115,
      -0.1623949110507965,
      -0.037643615156412125,
      -0.018211234360933304,
      0.03653451055288315,
      -0.003928198479115963,
      -0.021325450390577316,
      -0.010758264921605587,
      -0.02238444797694683,
      -0.058148302137851715,
      -0.06296670436859131,
      0.0892774909734726,
      0.010355127975344658,
      0.04696594178676605,
      -0.019473368301987648,
      -0.06559867411851883,
      -4.832562336038029e-33,
      -0.047175947576761246,
      -0.001233988325111568,
      -0.1158011257648468,
      0.008952055126428604,
      -0.07893481850624084,
      -0.014136610552668571,
      -0.02785162627696991,
      0.0005653618136420846,
      0.02189183421432972,
      0.02639036439359188,
      0.031282201409339905,
      -0.010725797154009342,
      -0.039240289479494095,
      -0.1050012856721878,
      -0.013790161348879337,
      -0.06496730446815491,
      0.04996219277381897,
      -0.07818827778100967,
      -0.04402170702815056,
      0.0012190655106678605,
      -0.020586466416716576,
      0.046327847987413406,
      0.015284224413335323,
      0.09725746512413025,
      -0.008961429819464684,
      0.05294618383049965,
      0.003646311117336154,
      -0.010594896040856838,
      -0.05015786364674568,
      0.03852526471018791,
      -0.03743824362754822,
      -0.0178692527115345,
      -0.04117294028401375,
      -0.07376131415367126,
      -0.02036789245903492,
      0.042852044105529785,
      0.04465549439191818,
      0.02431594394147396,
      -0.04188105836510658,
      0.02149350382387638,
      0.1179371178150177,
      0.10185018926858902,
      -0.02563086710870266,
      0.0024319614749401808,
      -0.0645718052983284,
      0.007030393462628126,
      -0.07458773255348206,
      -0.04685508832335472,
      0.047150347381830215,
      -0.02467355504631996,
      0.06438290327787399,
      -0.018002940341830254,
      -0.015555480495095253,
      0.02480548806488514,
      -0.01742299646139145,
      -0.015039382502436638,
      0.014652026817202568,
      0.04650241136550903,
      -0.02218947932124138,
      0.09376569092273712,
      0.07460236549377441,
      -0.08274035155773163,
      -0.003015981987118721,
      0.06786975264549255,
      0.09361279010772705,
      0.04508979991078377,
      -0.05907149612903595,
      -0.013337168842554092,
      -0.02573227509856224,
      0.09810912609100342,
      0.0873679369688034,
      -0.03699349984526634,
      -0.057303767651319504,
      0.06423147022724152,
      0.020241010934114456,
      0.019081031903624535,
      0.030837971717119217,
      -0.05906171351671219,
      -0.036097392439842224,
      0.027878345921635628,
      -0.07602537423372269,
      0.057810693979263306,
      -0.02719210274517536,
      -0.03634657338261604,
      0.04071599990129471,
      -0.04741772636771202,
      -0.0007241683197207749,
      0.0009108328958973289,
      0.06675755232572556,
      -0.047090090811252594,
      -0.04741869494318962,
      0.03408680856227875,
      -0.026617595925927162,
      0.07838744670152664,
      0.06028105318546295,
      -5.7848875911759023e-08,
      -0.04871692508459091,
      -0.0207438413053751,
      0.03241373226046562,
      0.05944317206740379,
      0.05425885692238808,
      -0.023194964975118637,
      -0.047399260103702545,
      -0.004359292332082987,
      -0.033015862107276917,
      0.014769304543733597,
      -0.022584959864616394,
      0.023391883820295334,
      0.0038777082227170467,
      -0.06136021018028259,
      0.08060549944639206,
      0.03450653329491615,
      0.009437250904738903,
      -0.0101955970749259,
      -0.08865644782781601,
      -0.13941578567028046,
      0.05173800513148308,
      0.06411421298980713,
      -0.034932494163513184,
      -0.05764975771307945,
      0.031183086335659027,
      -0.03241948038339615,
      0.09653086215257645,
      0.021201975643634796,
      0.09647853672504425,
      -0.00469571677967906,
      -0.0457080714404583,
      -0.030060887336730957,
      0.036037493497133255,
      0.02041202038526535,
      -0.038881395012140274,
      0.10701556503772736,
      -0.0560748353600502,
      0.05797671526670456,
      -0.05453592911362648,
      0.011809166520833969,
      -0.009433192200958729,
      0.017854923382401466,
      -0.03599313274025917,
      0.009469046257436275,
      0.00683298334479332,
      0.059791240841150284,
      -0.06172225996851921,
      0.047236546874046326,
      -0.018224354833364487,
      -0.008035445585846901,
      0.04191720113158226,
      -0.022256411612033844,
      -0.023375317454338074,
      0.04855678975582123,
      0.00751468213275075,
      -0.05013394355773926,
      -0.056937459856271744,
      0.008790567517280579,
      0.03468170389533043,
      -0.007999575696885586,
      -0.008236104622483253,
      -0.026381121948361397,
      0.05399050563573837,
      0.0038408825639635324
    ],
    [
      -0.061236973851919174,
      -0.10719111561775208,
      -0.08635549247264862,
      0.05383040010929108,
      0.10140080749988556,
      -0.011542610824108124,
      -0.08679767698049545,
      0.08351083099842072,
      0.06012081727385521,
      -0.05543392896652222,
      -0.004442751873284578,
      0.05312440171837807,
      -0.07898738235235214,
      -0.07675980031490326,
      0.05038934573531151,
      -0.07453864812850952,
      0.07011052966117859,
      -0.016209296882152557,
      0.01693800836801529,
      -0.020409731194376945,
      0.004566342569887638,
      -0.04861581325531006,
      -0.0599934458732605,
      -0.0735420286655426,
      -0.045464739203453064,
      0.01795784942805767,
      -0.0730917677283287,
      0.018895233049988747,
      0.09886936843395233,
      0.01433104183524847,
      -0.007619576063007116,
      -0.015396748669445515,
      -0.05316804349422455,
      0.009531388990581036,
      0.0047736275009810925,
      0.04081282019615173,
      0.09123039245605469,
      -0.02999849058687687,
      -0.07913751900196075,
      -0.029582548886537552,
      0.06624927371740341,
      -0.06910807639360428,
      -0.04331791028380394,
      0.004328444600105286,
      -0.04056193679571152,
      -0.10256358981132507,
      -0.0016152100870385766,
      0.0693943202495575,
      -0.0814099982380867,
      -0.06855102628469467,
      -0.07422392070293427,
      0.03332343325018883,
      -0.020690489560365677,
      0.04817042127251625,
      0.04237346723675728,
      0.001169057795777917,
      0.08250580728054047,
      0.05178088694810867,
      -0.019671505317091942,
      -0.009115925058722496,
      -0.015585703775286674,
      -0.022277019917964935,
      -0.0028751729987561703,
      -0.02355794422328472,
      -0.01634165458381176,
      0.016552090644836426,
      0.004526299890130758,
      0.07496512681245804,
      0.05566496402025223,
      -2.6011613954324275e-05,
      -0.08838178962469101,
      0.008499790914356709,
      -0.02756967954337597,
      0.061373233795166016,
      0.09847388416528702,
      -0.07648354768753052,
      -0.010145415551960468,
      0.07648755609989166,
      -0.0076369065791368484,
      -0.1873788982629776,
      0.02141377329826355,
      -0.04670099914073944,
      -0.03599131852388382,
      -0.0714225247502327,
      -0.03842473775148392,
      0.013348634354770184,
      0.024832239374518394,
      0.044067755341529846,
      0.011271295137703419,
      0.0376763641834259,
      0.059915609657764435,
      0.060224518179893494,
      -0.02030687779188156,
      0.017522824928164482,
      0.055562086403369904,
      0.0159858800470829,
      -0.03291561082005501,
      0.031165460124611855,
      0.017918525263667107,
      0.03099742718040943,
      -0.021348414942622185,
      3.001681761816144e-05,
      -0.082563616335392,
      0.03944781422615051,
      -0.05298310145735741,
      -0.0783882886171341,
      0.006748962681740522,
      0.06185794249176979,
      -0.017818335443735123,
      -0.009779956191778183,
      0.054873764514923096,
      -0.0008003106340765953,
      0.005153017118573189,
      -0.0471491739153862,
      -0.00837633665651083,
      0.008307915180921555,
      0.0002352666633669287,
      -0.007828298956155777,
      0.0786287933588028,
      0.10660924762487411,
      0.03035571612417698,
      0.02182912267744541,
      -0.019551798701286316,
      -0.026790061965584755,
      -0.009125285781919956,
      -0.04574618861079216,
      0.024021923542022705,
      5.531826456459775e-33,
      -0.0791248083114624,
      0.023799655959010124,
      -0.08465052396059036,
      0.019242528825998306,
      -0.018584927543997765,
      -0.03251919522881508,
      0.004461341071873903,
      -0.014128136448562145,
      -0.023855943232774734,
      0.07012966275215149,
      -0.0599469430744648,
      -0.00467396667227149,
      -0.05971540883183479,
      -0.005429960787296295,
      -0.04002346843481064,
      -0.06761717051267624,
      0.04445285350084305,
      0.0631556436419487,
      0.12310641258955002,
      0.05965369567275047,
      0.09738516062498093,
      0.007880304008722305,
      0.04402868449687958,
      0.029510250315070152,
      0.05581822618842125,
      0.04695822298526764,
      -0.021748699247837067,
      0.0057455310598015785,
      0.027628539130091667,
      0.035413000732660294,
      -0.017377234995365143,
      -0.04354139417409897,
      -0.0015283494722098112,
      -0.047429781407117844,
      0.046252474188804626,
      -0.10543031990528107,
      0.002142480807378888,
      -0.08527315407991409,
      -0.07103331387042999,
      -0.07373010367155075,
      0.052874550223350525,
      0.007087069097906351,
      -0.05707833915948868,
      -0.03422033414244652,
      -0.009711195714771748,
      -0.09024874120950699,
      -0.005231908056885004,
      -0.0027015458326786757,
      0.03464597836136818,
      -0.027883877977728844,
      0.07249970734119415,
      0.05229710787534714,
      -0.01699996367096901,
      -0.07778022438287735,
      0.037397898733615875,
      -0.02093789540231228,
      -0.030317207798361778,
      0.011154775507748127,
      0.09681939333677292,
      0.015903234481811523,
      0.003855907591059804,
      -0.03648141399025917,
      -0.0016953357262536883,
      -0.06364469230175018,
      0.12889398634433746,
      0.04931309446692467,
      -0.009992552921175957,
      0.011300483718514442,
      -0.006347415968775749,
      0.025834335014224052,
      -0.032854583114385605,
      -0.020456742495298386,
      0.09372128546237946,
      0.09381890296936035,
      0.069765605032444,
      -0.017081163823604584,
      -0.039822325110435486,
      -0.005573908798396587,
      0.05143212527036667,
      -0.05338367819786072,
      -0.10838356614112854,
      0.005677975248545408,
      -0.03664449229836464,
      -0.008310296572744846,
      -0.014314034953713417,
      -0.00525318831205368,
      -0.027367733418941498,
      -0.03644932061433792,
      -0.03318478912115097,
      -0.05475964769721031,
      0.03362322598695755,
      -0.025926370173692703,
      0.01372001226991415,
      -0.03426248952746391,
      0.025492984801530838,
      -7.057119273411974e-33,
      0.07142019271850586,
      -0.028599748387932777,
      -0.04589739069342613,
      -0.023921338841319084,
      -0.040965866297483444,
      0.008525116369128227,
      -0.05883695185184479,
      -0.02150469645857811,
      0.06550491601228714,
      0.09268384426832199,
      0.06620506942272186,
      -0.01496691070497036,
      -0.04510971158742905,
      -0.08866211026906967,
      -0.038013625890016556,
      0.03580090031027794,
      0.03769461065530777,
      -0.06374023854732513,
      -0.03653017804026604,
      -0.046299125999212265,
      -0.035351213067770004,
      -0.02863265946507454,
      0.08000092953443527,
      0.07100874185562134,
      -0.0822661891579628,
      0.010339563712477684,
      0.03291179612278938,
      0.09112772345542908,
      -0.09559926390647888,
      0.009188209660351276,
      0.002905102912336588,
      0.0010436733718961477,
      -0.0518825426697731,
      -0.05458073690533638,
      -0.031117426231503487,
      0.045355599373579025,
      0.0029626290779560804,
      0.020217537879943848,
      -0.005825662519782782,
      0.009049066342413425,
      0.10273542255163193,
      0.07138295471668243,
      -0.008580859750509262,
      -0.0691058486700058,
      -0.05598890408873558,
      0.017402391880750656,
      -0.02355237863957882,
      -0.07394231110811234,
      -0.08057284355163574,
      -0.08480194956064224,
      0.05495605617761612,
      0.033664681017398834,
      0.01776404120028019,
      -0.019595878198742867,
      -0.006285209208726883,
      0.07511402666568756,
      0.07176538556814194,
      0.03955893963575363,
      0.023128902539610863,
      0.08986246585845947,
      0.0913279801607132,
      -0.08846639841794968,
      0.018226943910121918,
      0.03322094678878784,
      0.07797584682703018,
      0.03492243215441704,
      0.0023331064730882645,
      -0.023830560967326164,
      -0.017315326258540154,
      0.0915827602148056,
      0.026264313608407974,
      0.03314293175935745,
      -0.016116071492433548,
      0.017409488558769226,
      -0.03288320079445839,
      0.02471233159303665,
      0.08893585950136185,
      -0.017573567107319832,
      -0.034160271286964417,
      -0.0057575153186917305,
      -0.07514912635087967,
      0.0058044493198394775,
      -0.003229303052648902,
      -0.02787543088197708,
      -0.021416213363409042,
      -0.05736107751727104,
      -0.01748964563012123,
      0.05619087815284729,
      0.1100936233997345,
      -0.05658344924449921,
      -0.06104705110192299,
      0.00209868629463017,
      0.004476606845855713,
      -0.038342949002981186,
      0.03518129512667656,
      -5.36885202961912e-08,
      -0.11234442889690399,
      -0.01392823364585638,
      -0.018605919554829597,
      0.012721996754407883,
      -0.043362561613321304,
      0.008060401305556297,
      -0.07851318269968033,
      0.0005675603169947863,
      -0.022590162232518196,
      0.00207801116630435,
      -0.04950890690088272,
      -0.008739311248064041,
      0.020090661942958832,
      -0.06792598217725754,
      0.08427533507347107,
      0.01963042840361595,
      0.05202309042215347,
      0.0033813142217695713,
      -0.049105044454336166,
      -0.1240750104188919,
      0.04985819384455681,
      0.04576782509684563,
      0.004789402242749929,
      0.015017659403383732,
      0.032000958919525146,
      -0.038367003202438354,
      0.07928057014942169,
      0.0007999801891855896,
      0.05844547599554062,
      -0.0192195363342762,
      0.003057988127693534,
      0.051556218415498734,
      -0.005470883101224899,
      0.029116664081811905,
      -0.005717345047742128,
      0.016619021072983742,
      -0.034973036497831345,
      0.04098643735051155,
      -0.02642817609012127,
      0.04330344498157501,
      0.03816698119044304,
      0.02822510153055191,
      -0.10808549076318741,
      -0.022136056795716286,
      0.06391178071498871,
      0.02932680957019329,
      -0.09677993506193161,
      0.0730808824300766,
      -0.03099098615348339,
      0.010481064207851887,
      0.04834664240479469,
      0.010187597945332527,
      -0.060401178896427155,
      0.06370678544044495,
      0.02891218662261963,
      -0.02377512864768505,
      -0.07008989155292511,
      -0.0030404317658394575,
      0.037290338426828384,
      -0.04027849808335304,
      -0.04304387792944908,
      0.044633522629737854,
      0.07757951319217682,
      -0.02483334019780159
    ],
    [
      -0.04123616963624954,
      -0.0870228037238121,
      -0.11001470685005188,
      0.061121515929698944,
      0.06040859594941139,
      -0.06175777316093445,
      -0.004360643215477467,
      -0.030481800436973572,
      0.053803157061338425,
      -0.06233612820506096,
      -0.055683888494968414,
      0.011920254677534103,
      -0.01899223029613495,
      -0.03147551044821739,
      -0.005618677474558353,
      -0.07877136021852493,
      0.03298831358551979,
      -0.008506625890731812,
      -0.009770309552550316,
      -0.0702715739607811,
      -0.009455489926040173,
      -0.09262712299823761,
      -0.005870388355106115,
      -0.024902990087866783,
      -0.004373894073069096,
      0.06999451667070389,
      -0.03387730196118355,
      -0.0008054329082369804,
      0.0001948442222783342,
      -0.04306488484144211,
      0.09170672297477722,
      0.010066155344247818,
      -0.05376468226313591,
      0.018979515880346298,
      -0.03254931420087814,
      -0.014635526575148106,
      0.04016062244772911,
      -0.025260522961616516,
      -0.0028992341831326485,
      0.027477869763970375,
      0.11131513118743896,
      -0.10827485471963882,
      -0.04102404788136482,
      -0.01865367963910103,
      -0.04527543485164642,
      -0.06358679383993149,
      -0.01985182799398899,
      0.03526649996638298,
      -0.0587025061249733,
      -0.0337260402739048,
      -0.09735888987779617,
      0.027040433138608932,
      -0.05118344724178314,
      0.09882230311632156,
      0.06296256929636002,
      -0.00016608908481430262,
      -0.005717943422496319,
      0.0023525385186076164,
      0.00045977902482263744,
      0.003210409078747034,
      0.0007215401856228709,
      -0.030285660177469254,
      -0.0024058830458670855,
      0.029606686905026436,
      0.003280310658738017,
      0.06034531816840172,
      -0.011301705613732338,
      0.09007482975721359,
      0.09090556204319,
      -0.0448634997010231,
      -0.017034459859132767,
      0.03551841154694557,
      -0.04668155685067177,
      0.06479184329509735,
      0.011509685777127743,
      -0.0020053319167345762,
      0.037759535014629364,
      0.012658873572945595,
      -0.024384789168834686,
      -0.16190999746322632,
      -0.020615439862012863,
      -0.028230741620063782,
      0.002537849359214306,
      0.004243175033479929,
      0.06279758363962173,
      0.022368161007761955,
      0.07301657646894455,
      0.07622355222702026,
      0.009033968672156334,
      0.0336734913289547,
      0.030267132446169853,
      0.03568792715668678,
      0.017544513568282127,
      0.08382052928209305,
      0.02641325257718563,
      0.07478591799736023,
      0.044718775898218155,
      0.015129799954593182,
      -0.025430990383028984,
      0.0657498836517334,
      -0.025899536907672882,
      -0.00807082001119852,
      -0.07158435881137848,
      0.08652359247207642,
      -0.02931288629770279,
      -0.09617093205451965,
      -0.0422917865216732,
      0.058434583246707916,
      -0.056374866515398026,
      -0.020786350592970848,
      -0.026563815772533417,
      0.07472768425941467,
      -0.0658133402466774,
      -0.09033934026956558,
      -0.015666119754314423,
      0.006604481488466263,
      -0.02070116437971592,
      -0.0037274756468832493,
      0.053330495953559875,
      0.06965991109609604,
      0.04176147282123566,
      0.0020132646895945072,
      -0.002095249481499195,
      0.0315520204603672,
      0.04510414972901344,
      0.0005307472310960293,
      -0.041417576372623444,
      8.311083749623403e-33,
      -0.027358554303646088,
      0.08224553614854813,
      -0.03049515374004841,
      -0.07165133208036423,
      -0.021771207451820374,
      0.0046267639845609665,
      -0.03349317982792854,
      0.038298700004816055,
      -0.02654479630291462,
      0.10641463100910187,
      -0.06229699030518532,
      0.02717791683971882,
      -0.05676332116127014,
      0.03379879146814346,
      0.010062167420983315,
      -0.102875716984272,
      0.04623965546488762,
      0.04750637337565422,
      0.08303065598011017,
      -0.05064612254500389,
      0.03784412145614624,
      0.012611936777830124,
      0.015250965021550655,
      -0.037625934928655624,
      0.05466677248477936,
      0.0655333399772644,
      -0.020322803407907486,
      0.011380434036254883,
      0.04740853235125542,
      0.0550362728536129,
      0.03762860968708992,
      -0.03781422600150108,
      0.016624638810753822,
      -0.016413923352956772,
      0.05202525109052658,
      -0.05891522765159607,
      -0.0624970868229866,
      -0.10438333451747894,
      -0.05221289396286011,
      -0.03329240158200264,
      0.014249559491872787,
      0.004989105276763439,
      -0.06970368325710297,
      -0.018055830150842667,
      -0.11759370565414429,
      -0.043052613735198975,
      -0.023647790774703026,
      -0.02274421602487564,
      -0.028351861983537674,
      -0.009361298754811287,
      0.09930790960788727,
      0.040805939584970474,
      -0.006556808948516846,
      -0.02039739117026329,
      0.0376904271543026,
      -0.04322771728038788,
      -0.027277376502752304,
      -0.042745042592287064,
      0.08660467714071274,
      0.07511040568351746,
      -0.007467643357813358,
      -0.06256000697612762,
      -0.006313116289675236,
      -0.03904267027974129,
      0.013648886233568192,
      0.0995142012834549,
      0.0602802075445652,
      0.026387948542833328,
      -0.004226045683026314,
      0.061606600880622864,
      -0.031445372849702835,
      -0.011579121463000774,
      0.055286940187215805,
      0.03180921450257301,
      0.054649174213409424,
      -0.019561493769288063,
      -0.017833273857831955,
      -0.009182256646454334,
      -0.0251512061804533,
      0.0013180823298171163,
      -0.03992139548063278,
      -0.04887046292424202,
      -0.020923148840665817,
      0.034486379474401474,
      -0.07242076843976974,
      0.05718166008591652,
      -0.03191083297133446,
      -0.07046979665756226,
      -0.036455318331718445,
      0.01759541593492031,
      -0.02369469404220581,
      0.03137843683362007,
      0.043234311044216156,
      -0.07727754861116409,
      -0.04660819470882416,
      -6.76107175584135e-33,
      -0.05793289467692375,
      -0.049239687621593475,
      -0.060631223022937775,
      0.02377019263803959,
      -0.045847080647945404,
      -0.06147129461169243,
      -0.047535959631204605,
      0.040347956120967865,
      0.07472294569015503,
      0.07450167834758759,
      -0.002381349680945277,
      -0.05642976239323616,
      -0.015317520126700401,
      -0.10540124028921127,
      -0.01530323177576065,
      0.0521203875541687,
      0.03399856761097908,
      -0.017639514058828354,
      0.024163881316781044,
      -0.041547711938619614,
      -0.0629168152809143,
      0.06173236295580864,
      -0.052763376384973526,
      0.028732798993587494,
      0.017005838453769684,
      0.04588768258690834,
      0.06300180405378342,
      0.08182550221681595,
      -0.007994456216692924,
      -0.012537223286926746,
      -0.02052583359181881,
      0.003383382922038436,
      -0.08514741063117981,
      -0.08512043207883835,
      -0.05939008295536041,
      0.1193053275346756,
      0.015485980547964573,
      0.033294759690761566,
      -0.03547830134630203,
      0.0064187608659267426,
      0.06189452111721039,
      0.10514793545007706,
      -0.030831262469291687,
      0.024760540574789047,
      -0.03264534845948219,
      0.024842549115419388,
      -0.013905933126807213,
      0.05988064035773277,
      -0.0019471058622002602,
      0.037850137799978256,
      0.05788927897810936,
      -0.0218069925904274,
      0.034286096692085266,
      0.021955562755465508,
      0.003224227810278535,
      0.0027450760826468468,
      0.029108889400959015,
      0.03189758583903313,
      -0.0005573548842221498,
      -0.0388895645737648,
      0.055714111775159836,
      -0.07655315101146698,
      0.000851721502840519,
      0.02113029547035694,
      0.1452566534280777,
      0.0032468391582369804,
      0.003993049263954163,
      -0.0636509582400322,
      -0.009961363859474659,
      0.06693456321954727,
      0.16865204274654388,
      -0.03359673172235489,
      -0.06685209274291992,
      0.006707043386995792,
      0.01099342294037342,
      0.022748615592718124,
      -0.011427855119109154,
      0.023569615557789803,
      -0.08615350723266602,
      0.08765874058008194,
      0.0036080507561564445,
      0.09140267968177795,
      0.03621602803468704,
      -0.045968346297740936,
      0.0027925106696784496,
      -0.0032977622468024492,
      0.053612541407346725,
      0.06092562898993492,
      0.037875279784202576,
      -0.024315275251865387,
      -0.042908258736133575,
      0.050482023507356644,
      -0.07668069005012512,
      0.08495566993951797,
      0.031718987971544266,
      -5.273427206020642e-08,
      -0.08034545928239822,
      -0.0521492063999176,
      -0.09865527600049973,
      0.05100450664758682,
      0.040999885648489,
      -0.010301713831722736,
      -0.07375750690698624,
      -0.0289081372320652,
      -0.009069216437637806,
      -0.08448920398950577,
      0.0749870240688324,
      -0.016056034713983536,
      0.03869996592402458,
      -0.029041780158877373,
      0.05123862996697426,
      -0.014622722752392292,
      -0.006400395650416613,
      -0.04953920841217041,
      -0.05914394184947014,
      -0.061199214309453964,
      0.07969976216554642,
      0.10826819390058517,
      0.018813563510775566,
      -0.016879400238394737,
      0.06966415792703629,
      -0.00682974886149168,
      0.10466717183589935,
      0.047160692512989044,
      0.025783000513911247,
      0.012677631340920925,
      -0.03454894945025444,
      -0.05386383831501007,
      0.07637070119380951,
      -0.05566462129354477,
      0.01233529020100832,
      0.09286701679229736,
      -0.03845155984163284,
      0.016893256455659866,
      -0.018993819132447243,
      0.03438299521803856,
      0.0045118629932403564,
      -0.06031560152769089,
      -0.03470996394753456,
      0.02726828120648861,
      -0.05664410814642906,
      0.005031362175941467,
      -0.1457105129957199,
      0.06234126165509224,
      0.03575509414076805,
      -0.007752919103950262,
      0.07058092951774597,
      -0.04603612795472145,
      -0.014313776977360249,
      0.00444386899471283,
      0.003306824015453458,
      -0.05251016840338707,
      -0.021963048726320267,
      -0.032575223594903946,
      0.08201093971729279,
      -0.042346302419900894,
      0.006255231332033873,
      -0.021354202181100845,
      -0.00558837503194809,
      -0.0068303002044558525
    ],
    [
      -0.00588408624753356,
      0.007248600944876671,
      -0.08614395558834076,
      0.08281466364860535,
      0.06709310412406921,
      0.013632917776703835,
      -0.03578213229775429,
      0.032425835728645325,
      -0.02476978674530983,
      -0.09876860678195953,
      -0.056658126413822174,
      -0.01949228160083294,
      -0.0345306396484375,
      -0.011776075698435307,
      0.009250535629689693,
      -0.07285141199827194,
      -0.02604103274643421,
      0.03364240378141403,
      -0.0339965783059597,
      -0.06988824158906937,
      0.02790973335504532,
      0.016641603782773018,
      0.05469643697142601,
      -0.0594029575586319,
      -0.04783719405531883,
      0.01908086985349655,
      -0.0145342368632555,
      -0.05009939521551132,
      -0.03338924050331116,
      -0.007434271275997162,
      0.06542690098285675,
      -0.044878873974084854,
      -0.005801271181553602,
      -0.029018359258770943,
      -0.0011288572568446398,
      0.05467010661959648,
      0.02117057703435421,
      -0.06129426136612892,
      0.031351953744888306,
      0.02961653470993042,
      0.03802969679236412,
      -0.05645617097616196,
      -0.041030578315258026,
      -0.06041010841727257,
      -0.04247341305017471,
      -0.03642229735851288,
      -0.05342617630958557,
      0.008931067772209644,
      -0.0030384899582713842,
      -0.022531596943736076,
      -0.10863934457302094,
      0.04921881854534149,
      -0.016224568709731102,
      -0.0167019534856081,
      -0.005995363928377628,
      0.0546792633831501,
      0.019449792802333832,
      -0.005679698195308447,
      -0.023605015128850937,
      0.005244059022516012,
      -0.0253401231020689,
      -0.030130937695503235,
      0.06029891595244408,
      0.018227335065603256,
      -0.02607331983745098,
      0.01926140859723091,
      -0.015947828069329262,
      0.05506732314825058,
      -0.01633598282933235,
      -0.06876613199710846,
      0.01433945819735527,
      -0.005709972698241472,
      -0.044207096099853516,
      0.05900928005576134,
      0.021276183426380157,
      -0.09850861132144928,
      -0.03386300057172775,
      0.03286151960492134,
      -0.0689905434846878,
      -0.12558527290821075,
      -0.04910456761717796,
      -0.06271364539861679,
      0.03706715628504753,
      0.028527813032269478,
      0.06308197230100632,
      0.08396925032138824,
      0.01219428051263094,
      0.05374683812260628,
      0.090966135263443,
      0.13847391307353973,
      -0.0005062509444542229,
      -0.011844713240861893,
      0.006104813423007727,
      0.08251623064279556,
      0.021766405552625656,
      0.07224170118570328,
      0.009425293654203415,
      0.029077647253870964,
      -0.08501750230789185,
      0.0465964712202549,
      -0.023400576785206795,
      0.021090803667902946,
      -0.02406819351017475,
      0.06635122746229172,
      0.025330178439617157,
      -0.04351907595992088,
      -0.0195667315274477,
      0.051682934165000916,
      -0.034724149852991104,
      0.012632044963538647,
      0.019610831514000893,
      0.07188081741333008,
      0.018956491723656654,
      -0.09074805676937103,
      -0.037792205810546875,
      -0.057755954563617706,
      0.054145149886608124,
      0.0007863965583965182,
      0.14265833795070648,
      0.07938921451568604,
      0.1574048399925232,
      -0.042572058737277985,
      -0.07799716293811798,
      0.07289330661296844,
      -0.030597493052482605,
      0.008601740933954716,
      0.010170891880989075,
      3.9437806082728975e-33,
      0.012921718880534172,
      -0.031222287565469742,
      0.014408335089683533,
      -0.013287181034684181,
      -0.04040487855672836,
      -0.008674166165292263,
      0.023146556690335274,
      0.0199656393378973,
      -0.021218040958046913,
      0.03275574743747711,
      -0.0744856745004654,
      0.04851575940847397,
      -0.05210164189338684,
      -0.010966381058096886,
      -0.0858568549156189,
      -0.06604986637830734,
      -0.021240629255771637,
      0.002869676100090146,
      0.05874183401465416,
      0.0033385115675628185,
      -0.025552187114953995,
      0.005549771245568991,
      0.04434593766927719,
      0.025524739176034927,
      0.02499704621732235,
      0.04659726470708847,
      -0.054444774985313416,
      0.054207831621170044,
      -0.04240790009498596,
      0.008944496512413025,
      0.08279482275247574,
      -0.05570971965789795,
      -0.04169932007789612,
      -0.0598459355533123,
      -0.04695842042565346,
      -0.05594826862215996,
      -0.04333548620343208,
      -0.025599023327231407,
      -0.1121329516172409,
      -0.034165799617767334,
      0.08746718615293503,
      -0.009322685189545155,
      -0.03849492594599724,
      0.02888995036482811,
      -0.0890900120139122,
      0.0065343063324689865,
      0.019215362146496773,
      0.009590833447873592,
      0.02437491901218891,
      0.04383563622832298,
      0.06326448172330856,
      0.007379147689789534,
      0.009322680532932281,
      -0.01737307384610176,
      0.004490090534090996,
      -0.05976662039756775,
      -0.08896454423666,
      -0.027937158942222595,
      0.0357983261346817,
      -0.01061068195849657,
      -0.01602020114660263,
      0.04728848487138748,
      0.10032966732978821,
      -0.05275948345661163,
      0.016475779935717583,
      0.02064821869134903,
      0.03511982783675194,
      0.013862049207091331,
      -0.05836765468120575,
      -0.01794332265853882,
      -0.01996546983718872,
      -0.054743487387895584,
      0.09473854303359985,
      0.0053936936892569065,
      0.05522393435239792,
      -0.08649419248104095,
      -0.039970286190509796,
      -0.09363716095685959,
      0.014729270711541176,
      -0.036397457122802734,
      0.07226870208978653,
      0.03835055232048035,
      -0.0382455475628376,
      -0.039432041347026825,
      -0.013389588333666325,
      0.17639823257923126,
      0.049189649522304535,
      -0.015027967281639576,
      0.06872043013572693,
      0.059318799525499344,
      0.011674673296511173,
      0.020643163472414017,
      0.00748528353869915,
      -0.10092588514089584,
      -0.03356590494513512,
      -4.3075083151180685e-33,
      -0.06873855739831924,
      -0.04901242256164551,
      -0.08008183538913727,
      -0.03478722274303436,
      -0.047083575278520584,
      -0.029138915240764618,
      0.007211978547275066,
      0.05661211162805557,
      0.1134500578045845,
      0.047988295555114746,
      -0.004188448656350374,
      -0.07913005352020264,
      0.0009707924327813089,
      -0.030880749225616455,
      0.04922826588153839,
      0.14538410305976868,
      -0.03978624939918518,
      0.02036626636981964,
      0.03453321009874344,
      -0.023191282525658607,
      -0.07214014232158661,
      0.04643930494785309,
      -0.018566934391856194,
      0.04533984512090683,
      0.01291890162974596,
      -0.006354365963488817,
      0.03140413016080856,
      0.050153035670518875,
      -0.048256855458021164,
      -0.0720791295170784,
      0.060204796493053436,
      0.02392960526049137,
      -0.1259828805923462,
      0.08646620064973831,
      -0.02849475108087063,
      0.04167323186993599,
      -0.01991027407348156,
      0.026810845360159874,
      -0.0015403599245473742,
      0.019324220716953278,
      0.008468545973300934,
      -0.005778919905424118,
      -0.06276998668909073,
      0.06773973256349564,
      -0.023659251630306244,
      0.043799884617328644,
      0.03948763385415077,
      0.09736863523721695,
      -0.020793480798602104,
      0.04728958383202553,
      0.015622181817889214,
      -0.06367126852273941,
      -0.012093005701899529,
      -0.033958543092012405,
      -0.00680834474042058,
      0.017877910286188126,
      0.059793855994939804,
      0.057662419974803925,
      -0.03183074668049812,
      -0.03565126657485962,
      -0.00790582224726677,
      -0.07525105774402618,
      -0.02342592552304268,
      -0.025094671174883842,
      0.0654674619436264,
      -0.01853206939995289,
      0.0440518781542778,
      0.03490489348769188,
      0.009938322007656097,
      0.027103129774332047,
      0.034772589802742004,
      -0.021507637575268745,
      0.06665758043527603,
      0.009316216222941875,
      0.06000063195824623,
      0.09127788990736008,
      0.0644901916384697,
      0.012522253207862377,
      -0.0992414578795433,
      0.03179554641246796,
      0.06787187606096268,
      0.0712437629699707,
      0.04071972891688347,
      -0.10147613286972046,
      -0.018290536478161812,
      -0.026648836210370064,
      0.056671205908060074,
      0.09557437151670456,
      -0.03128334507346153,
      0.0019085732055827975,
      0.01624627225100994,
      -0.0011717512970790267,
      0.03163830563426018,
      0.03711328282952309,
      0.06446712464094162,
      -4.63516407478437e-08,
      -0.07240865379571915,
      -0.11444561183452606,
      -0.10087194293737411,
      0.009969578124582767,
      0.02109653316438198,
      0.0020508880261331797,
      -0.00548634072765708,
      -0.05822662636637688,
      -0.0403367318212986,
      -0.10996170341968536,
      -0.002628252375870943,
      0.009022356010973454,
      0.010456565767526627,
      0.008494115434587002,
      0.028950171545147896,
      0.007717193104326725,
      -0.0323617085814476,
      0.0825103297829628,
      -0.033345598727464676,
      0.055723559111356735,
      0.05667216330766678,
      0.048444975167512894,
      0.00888341385871172,
      -0.013866079971194267,
      0.06278466433286667,
      -0.026518182829022408,
      -0.0218450129032135,
      -0.052269212901592255,
      -0.016831910237669945,
      -0.0008029930177144706,
      -0.023281212896108627,
      -0.03708196431398392,
      0.01355251669883728,
      -0.05236201360821724,
      0.0435849167406559,
      0.01231896597892046,
      0.004842784721404314,
      -0.06390218436717987,
      -0.037744686007499695,
      0.05975351855158806,
      0.05257793888449669,
      -0.033051345497369766,
      -0.03480716794729233,
      0.01376310084015131,
      -0.0871577113866806,
      0.011121089570224285,
      -0.1338396668434143,
      0.04501783475279808,
      0.0809532105922699,
      0.05940888822078705,
      0.01036794949322939,
      -0.028338128700852394,
      0.0428999625146389,
      -0.056369420140981674,
      -0.10707370191812515,
      -0.03006574511528015,
      0.010320841334760189,
      -0.04597783461213112,
      0.037977106869220734,
      0.010054322890937328,
      -0.014069227501749992,
      0.054688505828380585,
      0.05064937099814415,
      0.018469931557774544
    ],
    [
      -0.07982927560806274,
      0.028781896457076073,
      -0.11109444499015808,
      0.05034322664141655,
      -0.008904492482542992,
      -0.016966193914413452,
      0.04302247613668442,
      0.015421368181705475,
      0.03636297211050987,
      0.011717895045876503,
      -0.01811433769762516,
      -0.12448553740978241,
      -0.015603995881974697,
      -0.038102053105831146,
      -0.08354149758815765,
      -0.07027572393417358,
      0.06013770028948784,
      -0.04512900114059448,
      -0.014179090969264507,
      -0.09838283807039261,
      0.049688879400491714,
      0.10137220472097397,
      0.01555535476654768,
      -0.04198304936289787,
      0.08774732053279877,
      -0.07834966480731964,
      -0.04004453867673874,
      -0.031999848783016205,
      0.036470677703619,
      -0.013706711120903492,
      0.04674244299530983,
      0.011396580375730991,
      -0.01565467193722725,
      -0.043101098388433456,
      0.0053885821253061295,
      -0.050432249903678894,
      0.0439281091094017,
      -0.03969966620206833,
      -0.015078759752213955,
      0.05779031664133072,
      0.059551432728767395,
      -0.014006207697093487,
      -0.0019779144786298275,
      -0.0008601655717939138,
      -0.010890078730881214,
      -0.04327879846096039,
      -0.08781217783689499,
      0.09793063253164291,
      -0.0160712618380785,
      0.01961185783147812,
      -0.05604565888643265,
      0.006153929978609085,
      -0.003941040951758623,
      0.07129739969968796,
      0.10159507393836975,
      -0.05988626927137375,
      0.01603373885154724,
      -0.014594443142414093,
      -0.02105715312063694,
      0.03787108138203621,
      -0.004665907938033342,
      -0.0331498347222805,
      -0.000732756219804287,
      -0.014529328793287277,
      -0.06039687618613243,
      0.06792578846216202,
      -0.039368126541376114,
      0.034031666815280914,
      -0.047029923647642136,
      -0.03952808678150177,
      -0.035146377980709076,
      0.04920509085059166,
      -0.009083712473511696,
      -0.018709255382418633,
      0.0182056725025177,
      -0.00213955482468009,
      0.035672105848789215,
      0.0477285236120224,
      0.014057688415050507,
      -0.1535205990076065,
      -0.03277665376663208,
      -0.040107183158397675,
      -0.00013171389582566917,
      -0.020110026001930237,
      0.07314865291118622,
      -0.028723036870360374,
      0.05860459432005882,
      0.023338081315159798,
      0.1278359740972519,
      0.010941902175545692,
      0.10191714763641357,
      0.05823853239417076,
      -0.07082691788673401,
      -0.030828779563307762,
      -0.016662659123539925,
      0.038199327886104584,
      -0.034731920808553696,
      -0.057876963168382645,
      -0.023058587685227394,
      0.025848982855677605,
      -0.09697901457548141,
      0.04288769140839577,
      -0.066055528819561,
      0.03688175976276398,
      0.028241446241736412,
      -0.020341968163847923,
      0.057702913880348206,
      0.11698950082063675,
      -0.0567738302052021,
      0.03248915821313858,
      0.0006752134650014341,
      0.028178496286273003,
      0.05082586035132408,
      -0.034101590514183044,
      -0.00514279305934906,
      0.039684493094682693,
      0.026818467304110527,
      -0.042394865304231644,
      0.1640966832637787,
      -0.010475552640855312,
      0.054770372807979584,
      0.06920564919710159,
      -0.036914266645908356,
      0.01126870047301054,
      0.018338525667786598,
      -0.025141775608062744,
      -0.05417275056242943,
      2.1879039214893525e-33,
      -0.04022279381752014,
      0.028188901022076607,
      -0.015986163169145584,
      -0.08376988023519516,
      -0.10508570820093155,
      -0.013889358378946781,
      0.013718514703214169,
      0.06171894073486328,
      0.006557007785886526,
      0.03394962102174759,
      -0.06725303828716278,
      0.05244055390357971,
      -0.02758435718715191,
      -0.006470667198300362,
      0.025803303346037865,
      -0.03257467970252037,
      0.015075177885591984,
      0.06147325038909912,
      0.08600015193223953,
      0.042424120008945465,
      0.020304925739765167,
      -0.046598419547080994,
      0.0617656484246254,
      -0.05273475870490074,
      0.017182935029268265,
      0.10869669169187546,
      0.03701016306877136,
      0.011159124784171581,
      0.037862565368413925,
      0.030991891399025917,
      0.08457188308238983,
      -0.024300599470734596,
      0.010451502166688442,
      -0.04392073303461075,
      -0.00873709749430418,
      -0.016938548535108566,
      0.005604153033345938,
      -0.024417664855718613,
      -0.0596919022500515,
      0.029449252411723137,
      -0.023802386596798897,
      0.06656717509031296,
      -0.06314917653799057,
      -0.06092670559883118,
      -0.16600440442562103,
      -0.023049039766192436,
      0.027628934010863304,
      -0.01910497061908245,
      0.09921064227819443,
      0.01303001306951046,
      0.019001921638846397,
      0.0034266826696693897,
      0.0055983238853514194,
      -0.07894983142614365,
      0.017695564776659012,
      -0.05740928649902344,
      -0.022784925997257233,
      0.051034703850746155,
      0.043883755803108215,
      0.02974722534418106,
      -0.005949239246547222,
      -0.03194035589694977,
      0.0301598459482193,
      -0.03820418938994408,
      -0.05918257310986519,
      0.02508021518588066,
      0.015870265662670135,
      -0.03288153558969498,
      -0.0018355497159063816,
      0.012226281687617302,
      -0.021900048479437828,
      -0.0212949700653553,
      0.0683596208691597,
      0.012896512635052204,
      0.014576741494238377,
      -0.05591975897550583,
      -0.012888312339782715,
      -0.11031891405582428,
      -0.018023567274212837,
      -0.02363758347928524,
      0.021588193252682686,
      -0.005468590650707483,
      0.017719220370054245,
      0.011967966333031654,
      0.028825826942920685,
      0.018631678074598312,
      -0.0024721568915992975,
      0.03395719826221466,
      -0.054924800992012024,
      -0.040155597031116486,
      -0.02737126499414444,
      -0.009752624668180943,
      -0.0014951586490496993,
      -0.05240269750356674,
      -0.030147111043334007,
      -2.4753971462638518e-33,
      -0.0744171217083931,
      0.06601820141077042,
      -0.027210401371121407,
      -0.0023360964842140675,
      -0.027811547741293907,
      -0.07429855316877365,
      0.0037738513201475143,
      0.02480386197566986,
      0.11549735069274902,
      0.027207545936107635,
      -0.04432999715209007,
      -0.029379112645983696,
      -0.07348822802305222,
      -0.036927152425050735,
      0.05875037610530853,
      0.011631090193986893,
      -0.04598330706357956,
      -0.13452541828155518,
      0.014156155288219452,
      -0.04062351584434509,
      -0.1026352271437645,
      0.07307049632072449,
      0.033411528915166855,
      -0.015895303338766098,
      -0.02843037061393261,
      0.06356094032526016,
      0.03132599964737892,
      0.04131505265831947,
      -0.07506633549928665,
      -0.005620481446385384,
      -0.006445017177611589,
      -0.07887036353349686,
      -0.07195957005023956,
      -0.022043226286768913,
      -0.0492524690926075,
      0.053248997777700424,
      0.0728117972612381,
      0.04102587327361107,
      -0.016342416405677795,
      -0.02134634740650654,
      0.03746538236737251,
      0.03822271525859833,
      -0.0046776942908763885,
      -0.019378215074539185,
      -0.02173798903822899,
      0.02058262564241886,
      -0.06721372902393341,
      0.007747736293822527,
      -0.0050603486597537994,
      -0.012468828819692135,
      0.008179575204849243,
      0.012446779757738113,
      -0.013357928954064846,
      0.05907336249947548,
      -0.08523432910442352,
      0.054602060467004776,
      0.08284373581409454,
      0.05332520604133606,
      0.06749717146158218,
      -0.025461824610829353,
      0.031940750777721405,
      -0.08238684386014938,
      0.016288790851831436,
      -0.01709246262907982,
      0.06413612514734268,
      0.027568912133574486,
      0.03794042393565178,
      -0.06995827704668045,
      0.04348771646618843,
      0.04980464652180672,
      0.1231512650847435,
      0.02934262715280056,
      0.002879893872886896,
      0.014089415781199932,
      -0.048038121312856674,
      0.10572595149278641,
      0.08519613742828369,
      -0.015975557267665863,
      0.010995261371135712,
      0.12506116926670074,
      0.01669253408908844,
      0.06161471828818321,
      0.060997117310762405,
      -0.044567566365003586,
      -0.04470381885766983,
      -0.06796751916408539,
      0.0714460238814354,
      0.031467318534851074,
      -0.022161103785037994,
      0.019779525697231293,
      -0.08396979421377182,
      -0.007195930927991867,
      -0.004273510072380304,
      0.054769039154052734,
      0.0023135796654969454,
      -4.578680545819225e-08,
      -0.0019856253638863564,
      -0.10504613071680069,
      -0.06720161437988281,
      0.049585118889808655,
      -0.010821071453392506,
      -0.014451702125370502,
      -0.08826418220996857,
      0.008463112637400627,
      -0.026372306048870087,
      -0.052848752588033676,
      0.07185650616884232,
      -0.025668375194072723,
      0.05443163588643074,
      -0.016904372721910477,
      0.02452543005347252,
      -0.06777302175760269,
      0.0069884308613836765,
      0.015024600550532341,
      -0.08084379136562347,
      -0.04711555689573288,
      0.055410273373126984,
      0.1006689965724945,
      -0.04269222170114517,
      -0.07918161898851395,
      0.033973272889852524,
      -0.05901981145143509,
      0.03945138677954674,
      0.03805677965283394,
      0.014444139786064625,
      -0.045778851956129074,
      0.008128662593662739,
      0.016530465334653854,
      0.06016474589705467,
      0.00020096928346902132,
      0.047960784286260605,
      0.06974231451749802,
      -0.04480300843715668,
      0.05081219971179962,
      -0.00530717708170414,
      0.14934878051280975,
      -0.013169077225029469,
      -0.04466168209910393,
      -0.0464126393198967,
      -0.014297694899141788,
      0.08599277585744858,
      0.022304600104689598,
      -0.11038393527269363,
      0.047253984957933426,
      0.022355085238814354,
      -0.005650396924465895,
      0.051589351147413254,
      -0.03144817054271698,
      -0.005505081731826067,
      -0.018987737596035004,
      -0.02014700323343277,
      -0.07769607752561569,
      -0.012821304611861706,
      -0.06003103777766228,
      0.01630891114473343,
      0.05552114546298981,
      0.02960808388888836,
      -0.018206467851996422,
      -0.005422241520136595,
      -0.019837601110339165
    ],
    [
      -0.0658610612154007,
      -0.0019621693063527346,
      -0.048719003796577454,
      0.09323197603225708,
      0.06324007362127304,
      -0.022128447890281677,
      -0.007569326087832451,
      -0.05907759070396423,
      0.0018888749182224274,
      -0.06234540417790413,
      0.004198766313493252,
      -0.003046952188014984,
      -0.035966936498880386,
      -0.0770951360464096,
      -0.025633981451392174,
      -0.056554533541202545,
      0.028805552050471306,
      -0.08300820738077164,
      -0.020564155653119087,
      -0.09307854622602463,
      0.05531786382198334,
      0.04595986381173134,
      -0.0032724232878535986,
      -0.03379837051033974,
      0.008924467489123344,
      -0.0155995674431324,
      -0.045446593314409256,
      -0.014314815402030945,
      -0.002418041229248047,
      -0.021768726408481598,
      0.07542157918214798,
      0.024360282346606255,
      -0.06113889813423157,
      -0.038202617317438126,
      0.009406374767422676,
      -0.02107497677206993,
      0.07144317030906677,
      -0.05419015884399414,
      0.04385099187493324,
      0.015051059424877167,
      0.06533028185367584,
      -0.026318462565541267,
      -0.00960022397339344,
      -0.043981485068798065,
      0.05345916002988815,
      0.026626892387866974,
      -0.11494214832782745,
      0.011169767938554287,
      -0.08211915194988251,
      -0.0684347152709961,
      -0.04397596791386604,
      0.0518234446644783,
      -0.009576543234288692,
      0.1240137591958046,
      0.18973520398139954,
      0.00290109496563673,
      -0.03026406280696392,
      0.019632991403341293,
      -0.025277506560087204,
      0.05882435292005539,
      0.049624428153038025,
      -0.03278046473860741,
      -0.01601445861160755,
      -0.035612452775239944,
      -0.025030286982655525,
      0.026685738936066628,
      0.007389916107058525,
      0.00671573169529438,
      0.0384954959154129,
      -0.0777973085641861,
      -0.055261675268411636,
      0.05920011177659035,
      -0.0031843576580286026,
      -0.02317945286631584,
      0.05245181545615196,
      0.0257873497903347,
      0.02903672866523266,
      -0.014420260675251484,
      -0.025179918855428696,
      -0.16223207116127014,
      -0.04656413197517395,
      -0.016469871625304222,
      0.00042900993139483035,
      0.019207974895834923,
      -0.00032987401937134564,
      -0.06069127470254898,
      0.053694967180490494,
      -0.004659393336623907,
      0.09532688558101654,
      0.0896667093038559,
      0.03513042628765106,
      0.04251984506845474,
      -0.07067374885082245,
      -0.00010399040911579505,
      0.03347603231668472,
      0.045340005308389664,
      -0.004485744517296553,
      -0.014872562140226364,
      -0.06360162794589996,
      0.07036334276199341,
      -0.08065494149923325,
      -0.003703327849507332,
      -0.039303336292505264,
      0.0790286585688591,
      0.005109821446239948,
      -0.03546464070677757,
      -0.047468151897192,
      0.11352330446243286,
      -0.055352143943309784,
      0.047376327216625214,
      -0.03873204067349434,
      0.09131518006324768,
      0.02964833751320839,
      -0.04964298754930496,
      -0.013237363658845425,
      -0.008426230400800705,
      0.0526910200715065,
      0.017562681809067726,
      0.10074708610773087,
      0.02089213952422142,
      0.08869699388742447,
      0.03817838430404663,
      0.014264547266066074,
      0.05242010951042175,
      0.002215603832155466,
      0.01600665971636772,
      0.009977982379496098,
      8.232270526820615e-33,
      -0.007079374976456165,
      0.027395129203796387,
      -0.03386240452528,
      -0.06385327875614166,
      -0.005317503586411476,
      -0.02763957343995571,
      0.035965122282505035,
      0.010872257873415947,
      0.019236886873841286,
      0.03568321838974953,
      -0.044597119092941284,
      0.05859534069895744,
      -0.058176878839731216,
      0.03763085603713989,
      -0.013167057186365128,
      -0.07705946266651154,
      0.10160847008228302,
      0.06807292997837067,
      0.0594785213470459,
      -0.009798053652048111,
      0.03970574215054512,
      0.010052239522337914,
      -0.017047587782144547,
      -0.07216749340295792,
      0.04382792487740517,
      0.037019334733486176,
      0.035143569111824036,
      0.021352054551243782,
      -0.11099928617477417,
      0.015708396211266518,
      0.04920186102390289,
      -0.012219841592013836,
      -0.01686331070959568,
      -0.02673254907131195,
      0.07493086159229279,
      -0.1139044538140297,
      -0.06020502373576164,
      -0.03969161957502365,
      -0.09343201667070389,
      -0.05143836513161659,
      0.05187702178955078,
      0.05324215814471245,
      -0.09837816655635834,
      0.0019842435140162706,
      -0.06463747471570969,
      -0.044978149235248566,
      -0.014526213519275188,
      -0.0063399956561625,
      0.07051064819097519,
      -0.055324044078588486,
      0.1130995899438858,
      0.01749933324754238,
      0.03830727934837341,
      -0.08802159130573273,
      0.03073510155081749,
      -0.05273168534040451,
      0.00220865523442626,
      0.012413276359438896,
      0.04576319083571434,
      0.06143133342266083,
      0.026486903429031372,
      -0.023567648604512215,
      -0.016288820654153824,
      -0.008817627094686031,
      0.03402414917945862,
      0.042101431638002396,
      0.008483151905238628,
      -0.032794248312711716,
      0.0017564806621521711,
      -0.013105121441185474,
      -0.03971053659915924,
      -0.005366083700209856,
      0.0010679421247914433,
      -0.005217879544943571,
      0.01392576564103365,
      -0.07499533891677856,
      -0.027018070220947266,
      -0.0731378123164177,
      -0.02296619489789009,
      -0.05522523447871208,
      0.046514954417943954,
      0.033910565078258514,
      -0.0060004619881510735,
      0.04433136433362961,
      -0.01877703331410885,
      0.0009215506725013256,
      0.0031937004532665014,
      -0.01214190199971199,
      0.026265205815434456,
      -0.020088965073227882,
      -0.04758785665035248,
      -0.03551332652568817,
      0.026770565658807755,
      -0.06522837281227112,
      -0.04119240120053291,
      -7.958273813903479e-33,
      0.002338255988433957,
      0.010527834296226501,
      -0.04345957189798355,
      -0.03996803238987923,
      -0.028589420020580292,
      -0.08379536867141724,
      0.0028032218106091022,
      0.06525811553001404,
      0.13232040405273438,
      0.0213587936013937,
      0.0416671447455883,
      -0.05895829573273659,
      0.01072933804243803,
      -0.05450502410531044,
      -0.0075995647348463535,
      0.08993393927812576,
      -0.05158831179141998,
      -0.14728344976902008,
      -0.030631352216005325,
      0.004767719190567732,
      -0.0710269883275032,
      0.03117113746702671,
      0.08604083210229874,
      -0.0012459981953725219,
      -0.03879837691783905,
      0.023623323068022728,
      0.06328975409269333,
      0.08469720929861069,
      -0.11068224161863327,
      -0.09285055100917816,
      -0.004943341948091984,
      -0.03978396952152252,
      -0.05910775810480118,
      0.021042024716734886,
      -0.014990855939686298,
      0.05369187518954277,
      0.02711586467921734,
      0.020850034430623055,
      -0.05192577838897705,
      0.025089874863624573,
      0.06602349877357483,
      0.08027680963277817,
      -0.033966902643442154,
      0.051893021911382675,
      -0.03287549689412117,
      0.05847037211060524,
      -0.022077640518546104,
      0.048876550048589706,
      -0.03506128862500191,
      0.0018671969883143902,
      0.016292663291096687,
      -0.010827972553670406,
      0.003317558206617832,
      0.0197627991437912,
      -0.025862546637654305,
      0.005909170024096966,
      0.057472750544548035,
      0.007595214992761612,
      0.07750697433948517,
      -0.0014595597749575973,
      0.08381025493144989,
      -0.08888988941907883,
      -0.039582278579473495,
      -0.011086033657193184,
      0.08879145234823227,
      -0.011703762225806713,
      -0.0022168694995343685,
      -0.07803232967853546,
      0.01964716613292694,
      0.010043428279459476,
      0.12643341720104218,
      -0.013538580387830734,
      -0.0053467946127057076,
      -0.030382227152585983,
      0.030954930931329727,
      0.06278763711452484,
      0.03377828374505043,
      -0.01148881483823061,
      -0.025113902986049652,
      0.10533321648836136,
      -0.03789209946990013,
      0.059235237538814545,
      -0.0018404823495075107,
      -0.05647465959191322,
      -0.03171347454190254,
      -0.022008219733834267,
      0.037658095359802246,
      0.045997925102710724,
      0.014544124715030193,
      0.004262753762304783,
      -0.031840238720178604,
      -0.011473514139652252,
      -0.010756871663033962,
      0.07422745227813721,
      0.032823335379362106,
      -5.9330972135285265e-08,
      0.004230530932545662,
      -0.08226460963487625,
      -0.10584871470928192,
      0.0030726520344614983,
      0.02404741197824478,
      -0.007253776304423809,
      -0.039882298558950424,
      -0.009754282422363758,
      0.03233179822564125,
      -0.10398122668266296,
      0.05130497366189957,
      -0.0057032788172364235,
      0.014934970065951347,
      -0.01961939036846161,
      0.05901182070374489,
      -0.14236602187156677,
      -0.006712969858199358,
      -0.008324721828103065,
      -0.09067235887050629,
      -0.025660410523414612,
      0.03512982279062271,
      0.036294128745794296,
      -0.019268320873379707,
      -0.07891232520341873,
      0.07917190343141556,
      -0.09195545315742493,
      0.08043236285448074,
      -0.012509026564657688,
      -0.006012520287185907,
      0.03972965478897095,
      0.026642952114343643,
      -0.007809442467987537,
      0.07373388111591339,
      -0.009323828853666782,
      0.029370389878749847,
      0.11200644075870514,
      -0.042167965322732925,
      0.060377757996320724,
      0.025427991524338722,
      0.12220034748315811,
      0.028513103723526,
      0.0076650031842291355,
      -0.06871691346168518,
      0.0005223559564910829,
      -0.009866742417216301,
      -0.03310152143239975,
      -0.05402930825948715,
      0.04356227442622185,
      0.05341031774878502,
      0.025881052017211914,
      -0.004965699277818203,
      -0.05200126767158508,
      -0.039358049631118774,
      -0.01846783421933651,
      -0.03365112468600273,
      -0.06652544438838959,
      -0.02465602569282055,
      -0.046523574739694595,
      0.04693238437175751,
      0.034468743950128555,
      -0.020986737683415413,
      -0.010733595117926598,
      -0.007537685800343752,
      -0.010990787297487259
    ],
    [
      -0.08289337903261185,
      0.030378393828868866,
      -0.0723739042878151,
      0.060628581792116165,
      -0.005754588171839714,
      -0.01700114645063877,
      -0.022737454622983932,
      -0.014512789435684681,
      -0.0022937743924558163,
      -0.07808118313550949,
      -0.00938211940228939,
      -0.10398337990045547,
      -0.0025732163339853287,
      -0.07855717092752457,
      0.020402483642101288,
      -0.03490402176976204,
      0.06147041916847229,
      8.113353032968007e-06,
      -0.036572735756635666,
      -0.11658637225627899,
      0.06137740984559059,
      0.09283266216516495,
      0.01174872275441885,
      -0.050560351461172104,
      -0.020499661564826965,
      -0.04545484483242035,
      -0.03138883039355278,
      -0.0008700230973772705,
      -0.02460797317326069,
      -0.057717591524124146,
      0.10922375321388245,
      -0.009307886473834515,
      -0.05908831208944321,
      0.011501392349600792,
      0.010750474408268929,
      0.0092721963301301,
      0.018291635438799858,
      -0.043581414967775345,
      0.06290505081415176,
      0.020630178973078728,
      0.05002447962760925,
      -0.017233308404684067,
      0.017273074015975,
      -0.030735375359654427,
      0.010299271903932095,
      -0.014616217464208603,
      -0.09203489124774933,
      0.01821400225162506,
      -0.024361707270145416,
      -0.05632061883807182,
      -0.08467020839452744,
      -0.009187615476548672,
      -0.00803636759519577,
      0.11269069463014603,
      0.14761745929718018,
      0.007746584247797728,
      -0.03322083503007889,
      -0.029271142557263374,
      -0.03759913519024849,
      0.06943617016077042,
      -0.007786020170897245,
      -0.009340044111013412,
      0.03441172093153,
      0.004303916823118925,
      -0.08908691257238388,
      -0.03896445408463478,
      -0.03579859435558319,
      0.05148224160075188,
      0.039556268602609634,
      -0.08807356655597687,
      -0.026581482961773872,
      0.04489942267537117,
      -0.05605841800570488,
      -0.0168414656072855,
      0.020795531570911407,
      -0.0003813125076703727,
      0.04070090129971504,
      0.00229916675016284,
      -0.046566057950258255,
      -0.12307599186897278,
      -0.04162006452679634,
      0.0499899685382843,
      0.009178103879094124,
      -0.055460117757320404,
      0.04453836753964424,
      0.034566935151815414,
      0.0025835568085312843,
      0.06206543743610382,
      0.004910085815936327,
      0.11203929781913757,
      -0.040257684886455536,
      -0.028314806520938873,
      0.05968467891216278,
      -0.013449463061988354,
      0.06373670697212219,
      0.04575023055076599,
      0.012610691599547863,
      -0.032919272780418396,
      -0.03916746750473976,
      0.05083258077502251,
      -0.11680658906698227,
      0.01136234775185585,
      -0.06875370442867279,
      0.0004205868754070252,
      -0.021381331607699394,
      -0.0208439864218235,
      -0.017300128936767578,
      0.10645714402198792,
      -0.0011283488711342216,
      0.04176849126815796,
      -0.013494303449988365,
      0.08332585543394089,
      0.02431424893438816,
      -0.04838067293167114,
      -0.07803552597761154,
      -0.02820420078933239,
      -0.0013345833867788315,
      -0.01817425526678562,
      0.11913331598043442,
      -0.014673995785415173,
      0.08963542431592941,
      0.00898063275963068,
      -0.03347397968173027,
      0.08784370869398117,
      0.002501436974853277,
      0.025707250460982323,
      -0.002428322797641158,
      3.919598485424575e-33,
      0.0008975975215435028,
      0.01640324667096138,
      0.014319679699838161,
      -0.03215344250202179,
      -0.0555865652859211,
      -0.03161877393722534,
      -0.017407698556780815,
      0.011116648092865944,
      -0.006730207707732916,
      0.04839226230978966,
      -0.04410348832607269,
      0.05936788022518158,
      -0.07428295165300369,
      0.0168890580534935,
      0.0011040109675377607,
      -0.03566174954175949,
      0.03393709659576416,
      0.0843156948685646,
      0.000742528703995049,
      -0.01614592969417572,
      -0.03084752894937992,
      0.00528464512899518,
      0.005985491909086704,
      -0.06317666918039322,
      0.03488835692405701,
      0.0319519117474556,
      0.00014775869203731418,
      0.005052999127656221,
      0.0035931668244302273,
      0.012646804563701153,
      0.06006484106183052,
      -0.08666042238473892,
      -0.011745127849280834,
      -0.04848456755280495,
      0.014715248718857765,
      -0.08464669436216354,
      -0.025249619036912918,
      -0.01879693940281868,
      -0.1422319859266281,
      0.003562321187928319,
      0.04715520143508911,
      0.041006579995155334,
      -0.0815487653017044,
      0.041992731392383575,
      -0.04129839688539505,
      0.0265253484249115,
      0.003968270029872656,
      -0.006404367741197348,
      0.06486363708972931,
      -0.025608934462070465,
      0.07942584156990051,
      0.005540886893868446,
      0.05182483792304993,
      -0.06597743928432465,
      -0.010373596101999283,
      -0.02429971843957901,
      -0.018499726429581642,
      -0.016779426485300064,
      -0.016902636736631393,
      0.015403227880597115,
      -0.061494871973991394,
      -0.004730318207293749,
      0.05431073531508446,
      -0.005660996772348881,
      0.06520994007587433,
      0.006587164476513863,
      0.0870276391506195,
      -0.025991272181272507,
      -0.0012715092161670327,
      0.07300825417041779,
      -0.016784870997071266,
      -0.08427318930625916,
      0.006184985861182213,
      -0.016040751710534096,
      0.08095249533653259,
      -0.06799871474504471,
      -0.05950110778212547,
      -0.09423934668302536,
      -0.06309248507022858,
      0.02877432480454445,
      0.04187112674117088,
      0.041689373552799225,
      0.008509578183293343,
      -0.011642003431916237,
      -0.01610029861330986,
      0.10026182979345322,
      -0.019951626658439636,
      -0.023272594437003136,
      0.03358610346913338,
      0.004067455418407917,
      -0.034008581191301346,
      0.036905765533447266,
      -0.03320495784282684,
      -0.0347135104238987,
      -0.013533743098378181,
      -5.274310541683152e-33,
      -0.06867550313472748,
      0.02968897484242916,
      -0.03863934427499771,
      -0.05826425179839134,
      -0.04738772287964821,
      -0.10168472677469254,
      -0.026424698531627655,
      0.08615747839212418,
      0.06124090775847435,
      0.024309983476996422,
      0.003704479429870844,
      -0.06441480666399002,
      -0.0023704280611127615,
      -0.06970395147800446,
      0.06571784615516663,
      0.02642247825860977,
      -0.0807037204504013,
      -0.06580369174480438,
      -0.04366610199213028,
      0.0276765376329422,
      -0.045574575662612915,
      0.10058096796274185,
      0.00055268983123824,
      0.009663861244916916,
      0.04422343149781227,
      0.02246987819671631,
      0.04726434499025345,
      0.11372451484203339,
      -0.07939548045396805,
      -0.09078922867774963,
      0.019099023193120956,
      -0.017030322924256325,
      -0.09859795868396759,
      0.014013814739882946,
      -0.09876439720392227,
      0.04357359558343887,
      0.02231145091354847,
      0.015612276270985603,
      -0.05010228231549263,
      0.08383583277463913,
      -0.022227181121706963,
      0.04851827025413513,
      -0.05898746848106384,
      0.04808705672621727,
      -0.08149481564760208,
      -0.021832410246133804,
      -0.0015667654806748033,
      0.07561446726322174,
      0.043094515800476074,
      0.015081983990967274,
      0.04484548047184944,
      -0.014291045255959034,
      -0.005647687707096338,
      0.0007478998741135001,
      0.07022476196289062,
      -0.01012533251196146,
      0.027508191764354706,
      0.02369435876607895,
      0.05537001043558121,
      -0.05418859422206879,
      0.04105762019753456,
      -0.047749172896146774,
      0.01700330525636673,
      -0.011078103445470333,
      0.05626415088772774,
      -0.053016457706689835,
      0.014524128288030624,
      -0.07502592355012894,
      0.03747863695025444,
      -0.01980903372168541,
      0.09596491605043411,
      -0.031093427911400795,
      -0.020230434834957123,
      0.01929357647895813,
      0.005765540525317192,
      0.06726901978254318,
      0.063502736389637,
      0.013138874433934689,
      -0.03247155621647835,
      0.09966602921485901,
      0.011039305478334427,
      0.040771618485450745,
      0.06499548256397247,
      -0.0001027945545502007,
      0.011559741571545601,
      -0.0871160700917244,
      0.11642685532569885,
      0.10586926341056824,
      -0.0006640775827690959,
      0.0416850820183754,
      0.007713160943239927,
      0.007319803815335035,
      0.05442545935511589,
      0.08035390079021454,
      0.010261527262628078,
      -4.847946399877401e-08,
      -0.014525680802762508,
      -0.07420650124549866,
      -0.14283299446105957,
      0.04073130711913109,
      -0.019835125654935837,
      0.032525110989809036,
      -0.07982033491134644,
      -0.06746114045381546,
      -0.009736881591379642,
      -0.0569741390645504,
      -0.012806755490601063,
      0.023295124992728233,
      0.02385091595351696,
      0.0205782912671566,
      0.06018785387277603,
      -0.11998536437749863,
      0.010247142985463142,
      0.03782300651073456,
      -0.04626016318798065,
      0.07433555275201797,
      0.04378155618906021,
      -0.007614754140377045,
      -0.05979214236140251,
      -0.10766240209341049,
      0.07726440578699112,
      -0.09400849044322968,
      0.030942410230636597,
      -0.01127783115953207,
      0.0180658046156168,
      0.042653463780879974,
      -0.005636708345264196,
      0.009266809560358524,
      0.00016471648996230215,
      0.01032503042370081,
      0.046407174319028854,
      0.06964268535375595,
      -0.0038957661017775536,
      0.031188305467367172,
      0.019532224163413048,
      0.09965623170137405,
      0.04274314269423485,
      0.0003981668269261718,
      0.0074599916115403175,
      0.016644714400172234,
      -0.08991550654172897,
      -0.017639512196183205,
      -0.014017677865922451,
      0.046899933367967606,
      0.08775916695594788,
      0.06991956382989883,
      -0.030527686700224876,
      -0.08853322267532349,
      0.01631709560751915,
      -0.07614237070083618,
      -0.04387887939810753,
      -0.057852424681186676,
      -0.037487681955099106,
      0.00551978312432766,
      0.034353289753198624,
      0.027464866638183594,
      0.04473935812711716,
      0.015268943272531033,
      0.014279255643486977,
      0.012386993505060673
    ],
    [
      -0.09070957452058792,
      0.024163929745554924,
      -0.08850083500146866,
      0.023165661841630936,
      0.007595100440084934,
      0.0495353601872921,
      0.025892091915011406,
      0.12745171785354614,
      0.007447080221027136,
      0.08020739257335663,
      -0.0002698699536267668,
      -0.11676132678985596,
      -0.007938082329928875,
      0.04301716387271881,
      0.005221271421760321,
      -0.012777257710695267,
      0.08712881803512573,
      0.07739368826150894,
      -0.048030171543359756,
      -0.0007818227168172598,
      0.046324148774147034,
      -0.05135812982916832,
      -0.020084284245967865,
      -0.0018781243124976754,
      0.1077699065208435,
      -0.06332473456859589,
      -0.024736594408750534,
      0.04136363044381142,
      0.026864919811487198,
      -0.012107448652386665,
      0.023801783099770546,
      0.03383592516183853,
      0.015058983117341995,
      -0.028251193463802338,
      0.01770315133035183,
      -0.07013742625713348,
      -0.031172536313533783,
      -0.025665469467639923,
      -0.05244601145386696,
      0.0203960333019495,
      -0.02972923405468464,
      0.023396087810397148,
      -0.017217837274074554,
      -0.053057651966810226,
      0.03903905674815178,
      -0.06473039835691452,
      -0.01315759215503931,
      0.031773392111063004,
      -0.033452894538640976,
      0.03567207604646683,
      0.026064475998282433,
      -0.013823254033923149,
      -0.000465438119135797,
      -0.004385859239846468,
      -0.0005965676973573864,
      -0.0010554250329732895,
      0.0043895067647099495,
      -0.03742310032248497,
      0.01694214716553688,
      -0.025432204827666283,
      -0.03571323677897453,
      0.00047389132669195533,
      0.004603566136211157,
      -0.03115423209965229,
      -0.04602845758199692,
      0.0045943791046738625,
      0.09129850566387177,
      0.034622736275196075,
      0.007628339342772961,
      -0.12095023691654205,
      0.018036343157291412,
      -0.026989543810486794,
      0.02274097502231598,
      -0.05801932141184807,
      0.040558964014053345,
      -0.03153006732463837,
      -0.06449680775403976,
      0.0001474995369790122,
      0.05724245309829712,
      -0.09787912666797638,
      -0.010122147388756275,
      0.037273064255714417,
      -0.05903163552284241,
      0.017220446839928627,
      0.06308750063180923,
      -0.01890511065721512,
      0.1171213760972023,
      0.020665843039751053,
      0.11498667299747467,
      0.03480510786175728,
      0.03396710753440857,
      0.10776463896036148,
      -0.17018602788448334,
      0.012724148109555244,
      -0.030971424654126167,
      -0.014712649397552013,
      -0.13714072108268738,
      -0.08846326172351837,
      0.0017199220601469278,
      0.06659188121557236,
      -0.008287838660180569,
      0.01738329604268074,
      0.046265680342912674,
      0.0013093053130432963,
      0.013820485211908817,
      -0.07191180437803268,
      0.04455593600869179,
      0.06503448635339737,
      0.025181341916322708,
      0.032121337950229645,
      0.010726768523454666,
      0.03163335099816322,
      -0.016861768439412117,
      -0.07999113947153091,
      0.020351700484752655,
      0.06760822981595993,
      0.06252661347389221,
      -0.022916419431567192,
      0.04453544691205025,
      -0.03800473362207413,
      0.12219370901584625,
      0.011426401324570179,
      -0.14725366234779358,
      0.01506438571959734,
      -0.017261173576116562,
      0.02708079293370247,
      0.042020708322525024,
      1.1114897119775709e-32,
      -0.053757745772600174,
      -0.024617129936814308,
      0.03561953455209732,
      -0.016395069658756256,
      -0.04564426839351654,
      0.053924668580293655,
      -0.008444121107459068,
      0.060587067157030106,
      -0.0995449423789978,
      -0.04686303809285164,
      0.010665222071111202,
      0.1614733636379242,
      -0.03118511103093624,
      0.03746001422405243,
      -0.004686100874096155,
      -0.11735899746417999,
      0.025817984715104103,
      0.034375134855508804,
      0.053671590983867645,
      -0.0618734247982502,
      -0.004301919601857662,
      -0.04791061207652092,
      0.0249177236109972,
      0.030189724639058113,
      -0.001478044199757278,
      0.05993413180112839,
      0.023160962387919426,
      0.017882753163576126,
      -0.07240254431962967,
      -0.005232608877122402,
      0.06080254167318344,
      -0.008001361973583698,
      0.022993845865130424,
      -0.08861080557107925,
      -0.0626441165804863,
      -0.01345380675047636,
      -0.012919665314257145,
      -0.006978483870625496,
      -0.021858131512999535,
      -0.013458050787448883,
      -0.055194009095430374,
      0.041476260870695114,
      -0.023159721866250038,
      -0.0036528718192130327,
      -0.0410921648144722,
      -0.03884855657815933,
      0.003790028393268585,
      0.00848444364964962,
      0.03675980120897293,
      -0.06411503255367279,
      0.021760568022727966,
      -0.02799179218709469,
      -0.010991227813065052,
      -0.06625953316688538,
      -0.0043731993064284325,
      0.030977578833699226,
      -0.03602898120880127,
      0.02917311154305935,
      0.03488817438483238,
      0.0019070818088948727,
      -0.10479152947664261,
      -0.04117504507303238,
      -0.013908110558986664,
      0.012537471950054169,
      -0.10222765803337097,
      0.09244722127914429,
      -0.05663301795721054,
      -0.06801620125770569,
      -0.0478351004421711,
      0.0653843805193901,
      -0.06612317264080048,
      0.029380496591329575,
      0.014893530867993832,
      -0.007396008353680372,
      -0.028756309300661087,
      -0.07107571512460709,
      0.028283093124628067,
      0.038193024694919586,
      0.033734697848558426,
      -0.04930412024259567,
      -0.05775166675448418,
      -0.08815138787031174,
      0.07736463844776154,
      0.033618271350860596,
      0.04291340708732605,
      -0.08119790256023407,
      -0.022785820066928864,
      -0.011618106625974178,
      -0.0010827817022800446,
      -0.05198365077376366,
      -0.036665305495262146,
      -0.00959445908665657,
      0.03442799672484398,
      -0.01396998856216669,
      0.01563391461968422,
      -1.1661090569885285e-32,
      -0.0007073546294122934,
      0.08207746595144272,
      -0.0609518326818943,
      0.03756168484687805,
      -0.007047875318676233,
      0.05320601165294647,
      -0.038589220494031906,
      -0.019660435616970062,
      -0.03945472836494446,
      -0.00046234464389272034,
      -0.052685920149087906,
      0.018367374315857887,
      -0.0019547732081264257,
      -0.00488744443282485,
      -0.003475695848464966,
      -0.004916997626423836,
      -0.05862230062484741,
      -0.08162710070610046,
      -0.013873721472918987,
      0.023564351722598076,
      -0.04681873321533203,
      0.12105067819356918,
      0.012684110552072525,
      0.01565919630229473,
      0.005237245466560125,
      -0.0195410568267107,
      -0.008567151613533497,
      0.020536372438073158,
      -0.011783674359321594,
      -0.015656329691410065,
      -0.0716528668999672,
      -0.07478559762239456,
      -0.08188383281230927,
      -0.013285902328789234,
      0.02355637028813362,
      -0.01908157393336296,
      0.10194507241249084,
      -0.04108481481671333,
      -0.08703429996967316,
      0.14927805960178375,
      -0.009872580878436565,
      -0.030343055725097656,
      -0.010183957405388355,
      -0.07049469649791718,
      0.01681327633559704,
      0.025746332481503487,
      0.033724941313266754,
      0.014076066203415394,
      0.04341466352343559,
      -0.04105624929070473,
      0.015166656114161015,
      0.04843047261238098,
      -0.017593538388609886,
      0.10780157148838043,
      -0.12213695049285889,
      0.003383383620530367,
      -0.015136472880840302,
      0.021895773708820343,
      0.053323179483413696,
      0.004075849428772926,
      -0.00808887742459774,
      -0.05380251631140709,
      -0.040584251284599304,
      0.012429610826075077,
      -0.03073282167315483,
      0.014362689107656479,
      0.005281184799969196,
      -0.04995735362172127,
      0.02701517753303051,
      0.014168118126690388,
      0.07343070209026337,
      -0.03369975462555885,
      0.11952690780162811,
      -0.09290160983800888,
      -0.06317243725061417,
      -0.002220574300736189,
      0.028226811438798904,
      -0.0440843440592289,
      0.03501666709780693,
      0.01432975847274065,
      0.06952888518571854,
      0.06410142034292221,
      0.12005121260881424,
      -0.065035879611969,
      -0.07532836496829987,
      -0.005043570417910814,
      -0.02892449125647545,
      0.11896294355392456,
      -0.00682884780690074,
      0.042228326201438904,
      -0.14678558707237244,
      -0.050354745239019394,
      -0.011651702225208282,
      0.05381573736667633,
      0.012239348143339157,
      -7.127156465003281e-08,
      -0.0346134714782238,
      0.030334413051605225,
      0.023233626037836075,
      0.04282449558377266,
      0.014008469879627228,
      -0.04058654233813286,
      0.023143138736486435,
      -0.00451547559350729,
      -0.03450726717710495,
      -0.003777714679017663,
      0.10477962344884872,
      -0.03156101703643799,
      -0.0021788242738693953,
      -0.015933066606521606,
      0.057540230453014374,
      -0.008647119626402855,
      0.02930898778140545,
      0.0726698487997055,
      -0.05175286531448364,
      0.020531989634037018,
      0.010633638128638268,
      0.08433032035827637,
      0.0013278782134875655,
      -0.08423992991447449,
      0.013142253272235394,
      -0.019433315843343735,
      -0.037997055798769,
      0.08587697148323059,
      0.004879449028521776,
      -0.00041793944546952844,
      0.054085686802864075,
      0.043452635407447815,
      0.055121682584285736,
      -0.018723534420132637,
      0.027791088446974754,
      0.07664363086223602,
      -0.03832878917455673,
      0.0699608325958252,
      0.06814032793045044,
      0.0035045987460762262,
      -0.007100790273398161,
      -0.03641129657626152,
      -0.06427512317895889,
      0.017737438902258873,
      0.024620911106467247,
      0.024338936433196068,
      0.0005513255600817502,
      -0.004025949165225029,
      0.02170064114034176,
      0.012159724719822407,
      0.026102595031261444,
      -0.040527936071157455,
      -0.05139230191707611,
      -0.005307675339281559,
      -0.022231249138712883,
      -0.007391653023660183,
      -0.023674914613366127,
      -0.00665275240316987,
      -0.08502355217933655,
      -0.03222094848752022,
      0.05779658257961273,
      -0.08171379566192627,
      -0.07722567766904831,
      0.015813201665878296
    ],
    [
      -0.11322125047445297,
      -0.009765059687197208,
      -0.04172266647219658,
      0.036034829914569855,
      0.0005653115222230554,
      -0.003022599732503295,
      -0.037245869636535645,
      0.0208546444773674,
      -8.306056406581774e-05,
      0.04292101785540581,
      -0.013384277001023293,
      -0.01430389191955328,
      -0.05487588793039322,
      -0.05684533715248108,
      -0.020423872396349907,
      0.023009438067674637,
      0.059416260570287704,
      -0.05403227359056473,
      0.0007641545962542295,
      -0.08292487263679504,
      0.04365537315607071,
      0.03081860952079296,
      -0.009046286344528198,
      0.03646611049771309,
      0.027983158826828003,
      -0.026914378628134727,
      -0.1057090014219284,
      -0.023679275065660477,
      0.01598612405359745,
      -0.0016980590298771858,
      0.03511364012956619,
      -0.0285017192363739,
      0.012715552933514118,
      -0.02508600987493992,
      -0.01861148700118065,
      -0.011710871942341328,
      -0.04398210346698761,
      -0.01739956997334957,
      -0.0008843699470162392,
      0.007055322173982859,
      -0.017022648826241493,
      -0.012765266932547092,
      0.0032975771464407444,
      -0.03384345397353172,
      0.007427114527672529,
      -0.0149069894105196,
      -0.09642766416072845,
      0.014911821112036705,
      -0.1158268079161644,
      -0.01190599612891674,
      -0.07813920080661774,
      0.07056153565645218,
      -0.0311315655708313,
      0.06616146117448807,
      0.10295075178146362,
      0.013880257494747639,
      0.036802712827920914,
      0.027715682983398438,
      -0.0047414046712219715,
      0.05375942587852478,
      -0.01386022288352251,
      -0.07598558813333511,
      0.0027529876679182053,
      -0.048356469720602036,
      1.5247512237692717e-05,
      -0.019435767084360123,
      0.025138268247246742,
      0.018347347155213356,
      0.0165412575006485,
      -0.03244852274656296,
      -0.019460055977106094,
      0.052251625806093216,
      -0.0029327813535928726,
      -0.021807048469781876,
      0.062221772968769073,
      -0.03089822642505169,
      -0.02059568092226982,
      0.0461026132106781,
      -0.032196130603551865,
      -0.14555718004703522,
      -0.06755374372005463,
      -0.046339333057403564,
      -0.06572405248880386,
      -0.037344977259635925,
      0.0298322644084692,
      -0.0624748058617115,
      0.06868232041597366,
      0.02460123412311077,
      0.09396117925643921,
      0.033256370574235916,
      0.06613597273826599,
      0.03790295869112015,
      -0.045126643031835556,
      0.06758783757686615,
      0.02135102078318596,
      -0.007420185953378677,
      -0.003930089063942432,
      -0.004413484130054712,
      -0.06895360350608826,
      0.08445575833320618,
      -0.018174096941947937,
      0.016536584123969078,
      -0.15003155171871185,
      0.035349804908037186,
      0.03959006443619728,
      -0.05829786881804466,
      0.04337051138281822,
      0.08258610218763351,
      -0.06422409415245056,
      -0.04833389073610306,
      -0.00040436649578623474,
      0.0725720003247261,
      0.022952944040298462,
      -0.054785262793302536,
      -0.05113956704735756,
      -0.014377905987203121,
      0.07915469259023666,
      -0.006089801900088787,
      0.10721627622842789,
      0.029096320271492004,
      0.1185770109295845,
      0.040631189942359924,
      -0.025686323642730713,
      -0.016382290050387383,
      -0.004601772874593735,
      0.009171823039650917,
      0.10678749531507492,
      8.834181674475198e-33,
      0.07186121493577957,
      0.020351549610495567,
      -0.04479694366455078,
      -0.031196704134345055,
      0.025254521518945694,
      -1.0266949175274931e-05,
      0.013569207862019539,
      -0.005913599859923124,
      0.003669984871521592,
      0.016488946974277496,
      0.001871855347417295,
      0.003472371259704232,
      0.00016697132377885282,
      0.05331767722964287,
      -0.001464078202843666,
      -0.13701215386390686,
      0.08088842779397964,
      0.07289478927850723,
      -0.004505566321313381,
      0.00982491485774517,
      0.08326894789934158,
      -0.08220052719116211,
      -0.03796457126736641,
      -0.05530078709125519,
      0.041353583335876465,
      0.0731528103351593,
      -0.014298305846750736,
      0.009630468674004078,
      -0.05973277986049652,
      0.020828600972890854,
      0.02043297328054905,
      -0.03297426179051399,
      0.0031298301182687283,
      -0.03093613311648369,
      0.06315583735704422,
      -0.005043369717895985,
      -0.06750238686800003,
      -0.04752657935023308,
      0.017522934824228287,
      -0.08218874037265778,
      -0.01578626222908497,
      0.0274000633507967,
      -0.11906954646110535,
      0.01262382511049509,
      -0.03835103288292885,
      -0.0902436301112175,
      -0.04672911763191223,
      0.028265535831451416,
      -0.008969267830252647,
      -0.01888534240424633,
      0.06898945569992065,
      0.03999733179807663,
      0.022205660119652748,
      -0.0944959819316864,
      -0.0510464571416378,
      -0.0463644415140152,
      0.0042720395140349865,
      0.03577837720513344,
      0.06301591545343399,
      0.04538743942975998,
      0.016643213108181953,
      -0.029011517763137817,
      -0.03509486839175224,
      -0.024157024919986725,
      -0.030122272670269012,
      0.08562280237674713,
      0.0012113125994801521,
      -0.07373292744159698,
      0.033405523747205734,
      0.010536529123783112,
      -0.07516423612833023,
      0.07751558721065521,
      -0.007835608907043934,
      0.06844054162502289,
      0.004414631053805351,
      -0.019855616614222527,
      -0.0318271778523922,
      -0.019104620441794395,
      -0.053981930017471313,
      -0.15112051367759705,
      0.05660231411457062,
      -0.01760699227452278,
      -0.058641429990530014,
      -0.007807370740920305,
      0.05965911224484444,
      0.002862661611288786,
      -0.04514420032501221,
      0.06648890674114227,
      -0.05051065981388092,
      -0.012778395786881447,
      -0.03805633261799812,
      -0.04816849157214165,
      0.0800672098994255,
      -0.010755447670817375,
      0.031215710565447807,
      -8.301975137772469e-33,
      0.009720752947032452,
      0.0030284998938441277,
      -0.028470387682318687,
      0.004796362016350031,
      0.02099132537841797,
      -0.06259725987911224,
      -0.04860296472907066,
      0.05429261177778244,
      0.015263399109244347,
      0.020649729296565056,
      -0.02395464852452278,
      0.02242238074541092,
      0.012119967490434647,
      -0.015150688588619232,
      -0.030943142250180244,
      0.0404009148478508,
      -0.034134190529584885,
      -0.10280749201774597,
      -0.029991690069437027,
      0.0035949149169027805,
      -0.077012799680233,
      0.04079313948750496,
      -0.01991455629467964,
      0.03732772916555405,
      -0.07119468599557877,
      0.07467281818389893,
      0.025285057723522186,
      0.0635690689086914,
      -0.01099946815520525,
      -0.06492545455694199,
      -0.05757232755422592,
      -0.05415995419025421,
      -0.14189554750919342,
      -0.0349307656288147,
      0.046731140464544296,
      0.03816293179988861,
      0.028640905395150185,
      0.026066415011882782,
      -0.09249398857355118,
      0.1343013346195221,
      0.0818290039896965,
      0.08016501367092133,
      -0.043995704501867294,
      0.0254678875207901,
      0.021728429943323135,
      0.09031341969966888,
      -0.008139664307236671,
      0.028336068615317345,
      -0.1032395213842392,
      -0.03954464569687843,
      0.018722733482718468,
      0.02578018233180046,
      0.03284166753292084,
      0.08732914179563522,
      0.0023196900729089975,
      0.005394238047301769,
      -0.023983292281627655,
      -0.039381880313158035,
      0.049780599772930145,
      0.020127858966588974,
      0.012176737189292908,
      -0.03816640004515648,
      0.04850919917225838,
      -0.03400544077157974,
      0.10461172461509705,
      -0.014247603714466095,
      -0.03945566341280937,
      -0.044434722512960434,
      0.0469135083258152,
      0.04898391291499138,
      0.09334977716207504,
      -0.0013688477920368314,
      0.0500679574906826,
      -0.058533091098070145,
      0.02525254897773266,
      0.0006398193654604256,
      0.030499925836920738,
      -0.017645535990595818,
      0.004933043383061886,
      0.09342382848262787,
      -0.02108170837163925,
      0.06876169890165329,
      0.05850932002067566,
      -0.02727697230875492,
      -0.019809413701295853,
      0.03140437230467796,
      0.02736770361661911,
      0.07646144926548004,
      0.008011633530259132,
      -0.09369097650051117,
      -0.057383060455322266,
      -0.03200073167681694,
      -0.0203182864934206,
      0.028505591675639153,
      -0.05774547904729843,
      -6.253455353544268e-08,
      0.03502464294433594,
      -0.03877030313014984,
      -0.09508448094129562,
      0.02701830491423607,
      0.026465021073818207,
      0.0010346552589908242,
      -0.06445317715406418,
      -0.041206855326890945,
      -0.02509227953851223,
      -0.11788272857666016,
      0.114005446434021,
      0.01274796947836876,
      0.05890882387757301,
      -0.029082780703902245,
      0.06726603209972382,
      -0.06333600729703903,
      -0.008176753297448158,
      0.008131616748869419,
      -0.06139888986945152,
      -0.043898098170757294,
      0.046684734523296356,
      0.0004771716776303947,
      0.036082446575164795,
      -0.07364685833454132,
      0.051297836005687714,
      -0.05154332518577576,
      0.07715851068496704,
      0.05613452196121216,
      0.05380694940686226,
      -0.02778257057070732,
      0.04796430841088295,
      0.045430056750774384,
      0.13472925126552582,
      -0.00030583466286771,
      0.04134330525994301,
      0.10685727745294571,
      0.004882595967501402,
      0.05245477706193924,
      0.06297554820775986,
      0.09094210714101791,
      0.04095893353223801,
      -0.025410879403352737,
      -0.07465985417366028,
      0.03255271911621094,
      -0.01119699515402317,
      -0.018789179623126984,
      -0.06100337207317352,
      -0.010779481381177902,
      -0.011968478560447693,
      -0.014320582151412964,
      -0.027893707156181335,
      -0.036169469356536865,
      0.03580315783619881,
      0.018413372337818146,
      0.025095563381910324,
      -0.053421396762132645,
      -0.007640042807906866,
      -0.07903540134429932,
      0.025866705924272537,
      -0.018603451550006866,
      0.01576819270849228,
      -0.044390346854925156,
      -0.043112244457006454,
      0.06098083034157753
    ],
    [
      -0.13974083960056305,
      -0.06447697430849075,
      -0.056698303669691086,
      0.04740200564265251,
      0.10281404852867126,
      0.0527886226773262,
      -0.056533366441726685,
      0.08713424205780029,
      0.04726063832640648,
      -0.09509235620498657,
      -0.01740373857319355,
      0.03657294064760208,
      -0.008443132042884827,
      -0.024442307651042938,
      0.024667609483003616,
      -0.03974892199039459,
      0.02733451873064041,
      -0.04581902548670769,
      -0.0232788547873497,
      0.02889508567750454,
      0.017771894112229347,
      0.0024513606913387775,
      -0.013788105919957161,
      -0.06603629887104034,
      -0.08106749504804611,
      0.006305783521384001,
      -0.015332544222474098,
      -0.014334325678646564,
      0.0712624341249466,
      0.025830818340182304,
      0.05473410338163376,
      0.07208623737096786,
      -0.07263217866420746,
      -0.034183163195848465,
      -0.02477356232702732,
      0.07566937804222107,
      0.08400975912809372,
      -0.03315941244363785,
      -0.07845008373260498,
      -0.021203594282269478,
      -0.0455988310277462,
      -0.09916502982378006,
      -0.0005744118243455887,
      0.018614377826452255,
      -0.05006757378578186,
      -0.06439188122749329,
      -0.008103281259536743,
      0.024289622902870178,
      -0.013722135685384274,
      -0.033437129110097885,
      -0.05284229665994644,
      0.07004836946725845,
      0.030432485044002533,
      0.024163756519556046,
      0.09446420520544052,
      -0.0006182465585879982,
      0.041541777551174164,
      0.027433795854449272,
      -0.04057585448026657,
      0.00790402665734291,
      -0.02771785855293274,
      0.05912211537361145,
      -0.019568877294659615,
      -0.0029758126474916935,
      -0.0016077092150226235,
      0.007479383144527674,
      0.006631029769778252,
      0.09506447613239288,
      0.049532800912857056,
      -0.003131994977593422,
      -0.11175071448087692,
      0.025053247809410095,
      -0.04464290663599968,
      0.09250777214765549,
      0.08147671818733215,
      -0.06930329650640488,
      -0.012929541058838367,
      0.032853253185749054,
      -0.01948501355946064,
      -0.18613527715206146,
      0.014828055165708065,
      -0.0332864485681057,
      0.0009691696031950414,
      -0.03399094194173813,
      0.023915695026516914,
      0.03836693614721298,
      -0.013630641624331474,
      -0.02652748115360737,
      0.02265215292572975,
      0.10774120688438416,
      0.04190683364868164,
      0.0605570487678051,
      -0.027111709117889404,
      0.02406102977693081,
      0.03204388543963432,
      0.029484976083040237,
      -0.009999464266002178,
      0.06233552098274231,
      -0.04752738028764725,
      0.0922604575753212,
      -0.0846809446811676,
      -0.010213912464678288,
      -0.08787399530410767,
      0.06233803182840347,
      0.004217340610921383,
      -0.11768210679292679,
      -0.0260914396494627,
      0.0148207051679492,
      -0.007123041898012161,
      -0.05566079914569855,
      0.028692003339529037,
      -0.05643971264362335,
      -0.013387711718678474,
      -0.052918486297130585,
      -0.014840683899819851,
      0.026952629908919334,
      0.006971691269427538,
      0.05464087426662445,
      0.06796852499246597,
      0.038663599640131,
      0.03518873453140259,
      0.010516899637877941,
      -0.048553649336099625,
      0.01986275613307953,
      0.007860125042498112,
      -0.0029497251380234957,
      0.04769919812679291,
      5.5811428525805856e-33,
      0.027898315340280533,
      -0.026882685720920563,
      -0.061536699533462524,
      0.07608550786972046,
      -0.03291470929980278,
      -0.036821164190769196,
      -0.02108900062739849,
      0.011100202798843384,
      -0.045491237193346024,
      0.08181025087833405,
      0.003137042047455907,
      0.03060445375740528,
      -0.045556191354990005,
      -0.029834633693099022,
      -0.0032948318403214216,
      -0.06657899171113968,
      -0.013904697261750698,
      0.05991054326295853,
      0.0476975291967392,
      -0.02952810563147068,
      0.0943412184715271,
      0.009496458806097507,
      0.07337857782840729,
      0.02689053677022457,
      0.043037112802267075,
      0.09848017245531082,
      0.062347088009119034,
      0.0318690650165081,
      0.07304853200912476,
      0.03854004293680191,
      -0.051118236035108566,
      -0.03651498258113861,
      0.004095007665455341,
      -0.03729685768485069,
      -0.021914975717663765,
      -0.0883074402809143,
      -0.07972179353237152,
      -0.1013941541314125,
      -0.09727676957845688,
      -0.09296643733978271,
      0.026506446301937103,
      -0.001262868638150394,
      -0.05309522524476051,
      0.009982208721339703,
      0.016307702288031578,
      -0.13206453621387482,
      -0.012211084365844727,
      0.04668956622481346,
      0.0373377650976181,
      -0.045458197593688965,
      0.04323216900229454,
      0.046689216047525406,
      0.019065087661147118,
      -0.024025751277804375,
      0.035478562116622925,
      -0.006532205268740654,
      -0.021085411310195923,
      0.05595626309514046,
      0.024289019405841827,
      -0.0068875509314239025,
      -0.015763461589813232,
      0.008142183534801006,
      0.01971217803657055,
      -0.05059546232223511,
      0.09532459080219269,
      0.04690676927566528,
      -0.04465588554739952,
      0.011822332628071308,
      0.0021217111498117447,
      -0.012033936567604542,
      -0.04604851454496384,
      -0.060973409563302994,
      0.08679459244012833,
      0.06361408531665802,
      0.06720831245183945,
      -0.029125764966011047,
      0.005348795559257269,
      -0.023365391418337822,
      0.04036036506295204,
      -0.09710495173931122,
      -0.08479557186365128,
      -0.011773365549743176,
      -0.009309294633567333,
      -0.011474788188934326,
      0.006985534448176622,
      -0.024675918743014336,
      -0.03706653043627739,
      -0.039354484528303146,
      -0.026946496218442917,
      -0.03543960303068161,
      -0.004313533194363117,
      -0.009013202972710133,
      0.01964479871094227,
      -0.05528844892978668,
      0.01969408430159092,
      -8.104032174669566e-33,
      0.026942603290081024,
      -0.02049575001001358,
      -0.07529264688491821,
      -0.0621335431933403,
      -0.034957606345415115,
      -0.009753928519785404,
      -0.05449710413813591,
      -0.03601686283946037,
      0.05158253014087677,
      0.051192864775657654,
      0.06753329187631607,
      -0.020266998559236526,
      -0.015658726915717125,
      -0.054869696497917175,
      -0.020113755017518997,
      0.03056100383400917,
      -0.022889647632837296,
      -0.062457773834466934,
      -0.06893188506364822,
      -0.0025488079991191626,
      -0.03949108347296715,
      0.02275015413761139,
      0.0904795452952385,
      0.06302843242883682,
      -0.07708947360515594,
      -0.030982084572315216,
      0.00442656222730875,
      0.09007974714040756,
      -0.05813963711261749,
      0.03334898501634598,
      0.06023247539997101,
      -0.01269412599503994,
      -0.10869433730840683,
      -0.008389756083488464,
      -0.013890859670937061,
      -0.02407618798315525,
      0.02066112495958805,
      0.01773960143327713,
      -0.025621920824050903,
      0.01899741031229496,
      0.0832076147198677,
      0.08919651806354523,
      -0.00786204170435667,
      -0.001822702237404883,
      -0.0496286079287529,
      -0.018818961456418037,
      -0.032020967453718185,
      -0.08140210062265396,
      -0.011709054931998253,
      -0.06932676583528519,
      0.005238404963165522,
      -0.04277912154793739,
      0.00458438228815794,
      -0.017094768583774567,
      -0.054841767996549606,
      0.03546556830406189,
      0.04035753011703491,
      0.056687384843826294,
      -0.004973978269845247,
      0.07419196516275406,
      0.10019660741090775,
      -0.055826764553785324,
      0.01407268363982439,
      0.02340342290699482,
      0.06751847267150879,
      0.011843112297356129,
      -0.022428790107369423,
      0.04548819363117218,
      0.023010676726698875,
      0.06087817624211311,
      0.08331377059221268,
      0.004670965019613504,
      -0.016830846667289734,
      -0.00026724685449153185,
      0.014098449610173702,
      0.04683415964245796,
      0.07190710306167603,
      -0.0723055899143219,
      -0.05604195222258568,
      -0.0013166259741410613,
      -0.013630456291139126,
      0.0058864206075668335,
      -0.006233615335077047,
      -0.011429758742451668,
      -0.058863524347543716,
      -0.06659004837274551,
      0.025774547830224037,
      0.12579089403152466,
      0.06378184258937836,
      -0.01891838200390339,
      -0.04317093268036842,
      0.016706246882677078,
      -0.05744171142578125,
      0.025686629116535187,
      0.029705528169870377,
      -5.613984299657204e-08,
      -0.1391393095254898,
      0.0017374231247231364,
      -0.016907574608922005,
      -0.06901231408119202,
      0.044564854353666306,
      -0.02044030837714672,
      -0.08233815431594849,
      -0.10006149113178253,
      -0.031122930347919464,
      -0.05357792600989342,
      -0.059125784784555435,
      -0.023959483951330185,
      0.0038405004888772964,
      -0.09569013863801956,
      0.07802761346101761,
      -0.03742700070142746,
      -0.002159311668947339,
      0.04334012418985367,
      -0.09924270957708359,
      -0.0071222796104848385,
      0.04522918537259102,
      0.025885725393891335,
      -0.02933688834309578,
      0.0017432054737582803,
      0.04774085059762001,
      -0.040531281381845474,
      0.06458336859941483,
      -0.008939151652157307,
      0.018274450674653053,
      0.00913170911371708,
      0.0034759913105517626,
      0.062382545322179794,
      -0.007151210214942694,
      -0.0055886986665427685,
      -0.04756123200058937,
      0.12022127211093903,
      0.008587492629885674,
      -0.026244651526212692,
      -0.02593570575118065,
      0.029952246695756912,
      0.007046757265925407,
      0.05666186287999153,
      -0.10255299508571625,
      0.012771657668054104,
      0.043465834110975266,
      0.010924878530204296,
      -0.03937653452157974,
      0.010442657396197319,
      -0.03518660366535187,
      0.058007944375276566,
      -0.06176351010799408,
      -0.017781773582100868,
      -0.01878807321190834,
      0.06095181778073311,
      0.01791500300168991,
      0.012354263104498386,
      -0.0872369334101677,
      0.02905086800456047,
      0.042144499719142914,
      -0.03347674012184143,
      -0.030266784131526947,
      0.050491657108068466,
      0.15908703207969666,
      0.006685440428555012
    ],
    [
      0.03772792965173721,
      0.018257100135087967,
      -0.036690566688776016,
      0.006489142309874296,
      -0.017547594383358955,
      0.021326398476958275,
      0.06233619153499603,
      0.03979942947626114,
      -0.03852010890841484,
      0.041618023067712784,
      -0.007741610519587994,
      0.010965652763843536,
      -0.04017166793346405,
      -0.0026209447532892227,
      -0.011995109729468822,
      0.018336409702897072,
      -0.04929298534989357,
      -0.05147086828947067,
      -0.022829603403806686,
      0.08304575085639954,
      0.01619771309196949,
      0.08698400110006332,
      0.0007472290308214724,
      -0.048768434673547745,
      -0.04751535877585411,
      0.07825401425361633,
      -0.12360910326242447,
      -0.08253491669893265,
      -0.07359369844198227,
      0.0023063509725034237,
      0.0413178987801075,
      0.09893504530191422,
      -0.05570298060774803,
      0.017247306182980537,
      0.09477166086435318,
      -0.06948641687631607,
      -0.05097866430878639,
      -0.08523906022310257,
      0.03694580867886543,
      0.06528253108263016,
      0.008040194399654865,
      -0.050532713532447815,
      -0.010589739307761192,
      -0.09074766933917999,
      -0.054627612233161926,
      -0.07664971053600311,
      -0.01767711155116558,
      -0.0008780317730270326,
      0.043415144085884094,
      0.039660580456256866,
      -0.10286392271518707,
      0.00025726313469931483,
      -0.10258421301841736,
      -0.04710858315229416,
      0.03940129652619362,
      0.07046473771333694,
      -0.055779486894607544,
      -0.056060947477817535,
      -0.016941020265221596,
      -0.01852671429514885,
      -0.01174939051270485,
      -0.0027393426280468702,
      0.002681001555174589,
      0.04288846626877785,
      -0.07852884382009506,
      0.03781895712018013,
      -0.03749652951955795,
      0.0688982754945755,
      0.00602978328242898,
      -0.04101697728037834,
      0.021671531721949577,
      0.029538288712501526,
      -0.018443280830979347,
      -0.04320257902145386,
      0.055265214294195175,
      -0.030100369825959206,
      0.01684817485511303,
      0.06698111444711685,
      -0.040968235582113266,
      -0.19142594933509827,
      0.04808667302131653,
      -0.029267190024256706,
      0.053380656987428665,
      -0.005269563756883144,
      0.012961065396666527,
      0.028204405680298805,
      -0.00894980225712061,
      0.021916072815656662,
      0.028799396008253098,
      -0.0017811065772548318,
      0.023225896060466766,
      -0.061743494123220444,
      0.004758781287819147,
      0.033884573727846146,
      -0.07118211686611176,
      0.03765317052602768,
      0.04405679181218147,
      0.009616872295737267,
      -0.04972151294350624,
      0.05285528302192688,
      0.02024950087070465,
      -0.043002933263778687,
      -0.015699969604611397,
      0.12878413498401642,
      0.02235739305615425,
      -0.0347115732729435,
      -0.021031539887189865,
      -0.03665216639637947,
      -0.032250404357910156,
      -0.04815862327814102,
      0.011889434419572353,
      0.061482205986976624,
      -0.08731400966644287,
      -0.13720209896564484,
      -0.0446789413690567,
      0.009186845272779465,
      0.024990661069750786,
      -0.03821749985218048,
      0.06282858550548553,
      0.06821373105049133,
      0.048774588853120804,
      -0.051794469356536865,
      -0.03596682846546173,
      0.027814999222755432,
      -0.07515660673379898,
      0.025886593386530876,
      0.015204284340143204,
      5.4046728651893436e-33,
      0.027390319854021072,
      -0.05160769447684288,
      -0.07127486914396286,
      0.02149602770805359,
      0.0981084555387497,
      -0.03469173610210419,
      0.027612295001745224,
      0.03386716917157173,
      -0.038824789226055145,
      0.039757195860147476,
      -0.0632292628288269,
      0.01253906823694706,
      -0.016826540231704712,
      0.0027089149225503206,
      -0.1108618900179863,
      0.01602211967110634,
      -0.03332628682255745,
      -0.00593333737924695,
      -0.029516594484448433,
      -0.08077017962932587,
      -0.08894895017147064,
      -0.008367760106921196,
      0.021067440509796143,
      -0.02868437021970749,
      -0.005873274523764849,
      0.07596339285373688,
      -0.035339679569005966,
      0.062522754073143,
      0.01728040724992752,
      0.011990377679467201,
      0.10472098737955093,
      -0.033322837203741074,
      0.10917328298091888,
      -0.008762338198721409,
      -0.04317758232355118,
      0.030992647632956505,
      -0.12195265293121338,
      -0.049745459109544754,
      -0.04070405662059784,
      0.03934745490550995,
      -0.04839489609003067,
      -0.03553985431790352,
      -0.0017789443954825401,
      0.030558232218027115,
      0.013319484889507294,
      -0.06751126796007156,
      -0.005570058710873127,
      0.0577598474919796,
      0.06573435664176941,
      -0.01838698238134384,
      -0.02915790118277073,
      0.012111528776586056,
      -0.037763211876153946,
      0.028781305998563766,
      0.00461991410702467,
      -0.04128773510456085,
      -0.1276913285255432,
      0.049533262848854065,
      -0.002734936075285077,
      0.017555536702275276,
      -0.07338159531354904,
      -0.05213792622089386,
      -0.03758343309164047,
      0.014627132564783096,
      -0.026354368776082993,
      0.0431273877620697,
      0.0424804650247097,
      0.043701548129320145,
      -0.009241419844329357,
      -0.10103027522563934,
      0.026630664244294167,
      -0.03173045068979263,
      0.055536847561597824,
      0.044291626662015915,
      0.050250325351953506,
      -0.03499848023056984,
      0.054735008627176285,
      -0.03114679455757141,
      -0.08588950335979462,
      -0.01639762707054615,
      -0.01233949139714241,
      -0.005023317877203226,
      -0.05730822682380676,
      0.02899324521422386,
      -0.06365183740854263,
      0.03203188255429268,
      0.11119840294122696,
      -0.06148099526762962,
      0.0514301098883152,
      0.02631283551454544,
      -0.0027178532909601927,
      0.03413020446896553,
      -0.02637564390897751,
      -0.10015465319156647,
      0.03979134559631348,
      -1.0551695735777673e-32,
      0.007176454644650221,
      -0.016882048919796944,
      -0.0996784120798111,
      -0.059994086623191833,
      -0.07670809328556061,
      0.027060160413384438,
      0.1094212606549263,
      0.0632655993103981,
      0.0197288878262043,
      0.030463073402643204,
      0.006448150612413883,
      0.08020748943090439,
      -0.006475578993558884,
      -0.1251421719789505,
      -0.05573902279138565,
      0.016337929293513298,
      -0.03508969396352768,
      0.0256938636302948,
      0.015592885203659534,
      0.044458385556936264,
      0.00028711315826512873,
      -0.008944675326347351,
      0.006407523062080145,
      0.050127062946558,
      -0.03917660936713219,
      -0.05684482678771019,
      0.03474293276667595,
      -0.06359526515007019,
      -0.031992487609386444,
      -0.042186833918094635,
      0.06811759620904922,
      0.009062711149454117,
      -0.13217401504516602,
      0.11037078499794006,
      0.004963865038007498,
      0.013504854403436184,
      -0.056293778121471405,
      0.07654150575399399,
      -0.05278114229440689,
      0.0008348381379619241,
      -0.013134737499058247,
      0.02472253143787384,
      -0.022626109421253204,
      0.031524788588285446,
      -0.02427290938794613,
      -0.004127807449549437,
      0.055196356028318405,
      -0.026365622878074646,
      -0.02950568124651909,
      0.011388679035007954,
      -0.0015837628161534667,
      -0.10794666409492493,
      0.010554410517215729,
      -0.028521880507469177,
      -0.04593270272016525,
      0.02776118740439415,
      0.02036057971417904,
      -0.0582129992544651,
      -0.09389142692089081,
      -0.048016637563705444,
      0.09001435339450836,
      -0.038765061646699905,
      0.0336022786796093,
      -0.0029564981814473867,
      0.04165884479880333,
      0.010631552897393703,
      -0.04502316564321518,
      0.000851159798912704,
      -0.013978672213852406,
      0.032450057566165924,
      0.0095107676461339,
      -0.01653350330889225,
      -0.047717202454805374,
      0.010133017785847187,
      0.041917040944099426,
      0.05144715681672096,
      -0.012547219172120094,
      -0.01493916753679514,
      -0.09723514318466187,
      -0.014830981381237507,
      0.05458423122763634,
      0.03920641541481018,
      -0.039100393652915955,
      -0.15625102818012238,
      -0.08647066354751587,
      -0.024486536160111427,
      0.03592042252421379,
      0.058428436517715454,
      -0.0701570138335228,
      -0.03418701887130737,
      -0.024452082812786102,
      0.013654527254402637,
      0.05227605998516083,
      -0.011396408081054688,
      -0.028716230764985085,
      -5.076558196037695e-08,
      -0.10869520902633667,
      0.03681018576025963,
      -0.0696246549487114,
      -0.006682530511170626,
      -0.026386916637420654,
      0.02531837485730648,
      0.06012772396206856,
      -0.0248631089925766,
      -0.049923885613679886,
      -0.05417979136109352,
      -0.02088317833840847,
      0.03570955619215965,
      0.007439883425831795,
      -0.007491571828722954,
      -0.05294986069202423,
      0.02187153697013855,
      0.02928776666522026,
      -0.020137745887041092,
      -0.03676280379295349,
      -0.020792527124285698,
      0.0026237000711262226,
      0.06535583734512329,
      0.12628404796123505,
      -0.02388843707740307,
      0.00914896372705698,
      0.056621402502059937,
      -0.03523939102888107,
      0.010410604067146778,
      0.030934173613786697,
      0.014082344248890877,
      0.04579143598675728,
      -0.02050085738301277,
      0.0015581852057948709,
      -0.026981724426150322,
      0.007705249823629856,
      0.04373762756586075,
      0.07371928542852402,
      -0.002278962405398488,
      -0.0052163852378726006,
      -0.04030897840857506,
      -0.04050803929567337,
      -0.09977087378501892,
      -0.04839175194501877,
      0.017207857221364975,
      -0.04681095853447914,
      -0.0534290075302124,
      -0.1036037802696228,
      0.045879922807216644,
      0.08468272536993027,
      -0.029381370171904564,
      0.045168329030275345,
      -0.04084233194589615,
      0.0016568097053095698,
      -0.04538923501968384,
      -0.06347847729921341,
      -0.017428401857614517,
      0.04343612864613533,
      0.015176227316260338,
      0.025289982557296753,
      -0.0401509553194046,
      -0.05132052302360535,
      0.019280990585684776,
      -0.02088635414838791,
      0.06764546036720276
    ],
    [
      -0.006497329566627741,
      -0.029577970504760742,
      -0.03475349396467209,
      0.03108169697225094,
      0.0752435177564621,
      0.022764883935451508,
      -0.03865323215723038,
      0.004586965776979923,
      -0.012363194487988949,
      -0.06496728211641312,
      0.02381562441587448,
      0.043670654296875,
      -6.919691804796457e-05,
      -0.04710812121629715,
      0.026929479092359543,
      -0.010157116688787937,
      -0.02075001411139965,
      0.04271300509572029,
      0.013015269301831722,
      -0.05743210390210152,
      -0.024295542389154434,
      -0.04407026991248131,
      0.061810534447431564,
      0.013538658618927002,
      -0.02956536039710045,
      0.01358003169298172,
      -0.07107850909233093,
      -0.03902025893330574,
      -0.03959530591964722,
      -0.014021445997059345,
      0.08120658248662949,
      -0.0605442151427269,
      -0.07676380127668381,
      -0.04896537587046623,
      0.015837974846363068,
      0.007223612163215876,
      -0.037674855440855026,
      -0.06526938825845718,
      0.017880914732813835,
      0.04199253395199776,
      0.06537159532308578,
      -0.018793947994709015,
      0.006954653654247522,
      -0.09902788698673248,
      -0.020934652537107468,
      -0.02976057678461075,
      -0.0508914440870285,
      -0.013433338142931461,
      -0.022518713027238846,
      0.018273936584591866,
      -0.09432904422283173,
      0.06553446501493454,
      0.022514302283525467,
      -0.018061695620417595,
      0.03203197196125984,
      0.06156203895807266,
      0.00694541959092021,
      0.034740470349788666,
      0.0028096926398575306,
      0.010560624301433563,
      -0.0143723851069808,
      -0.05041252076625824,
      -0.0020797119941562414,
      -0.01935371197760105,
      -0.05714178457856178,
      -0.022205736488103867,
      -0.04393830522894859,
      0.08744784444570541,
      0.023288164287805557,
      -0.012720324099063873,
      0.02339915931224823,
      -0.03719295561313629,
      0.05945342034101486,
      0.006637440994381905,
      -0.03984539210796356,
      -0.11874088644981384,
      0.006210407242178917,
      0.05518718063831329,
      -0.046248115599155426,
      -0.10625897347927094,
      -0.07554666697978973,
      -0.1026109904050827,
      0.0006162045174278319,
      -0.009733041748404503,
      0.015745829790830612,
      0.10770650953054428,
      0.024914491921663284,
      0.046184517443180084,
      0.06066565588116646,
      0.061321984976530075,
      0.0381271131336689,
      0.005095989443361759,
      0.0030796776991337538,
      0.05821448192000389,
      0.019623849540948868,
      0.06925195455551147,
      -0.026404106989502907,
      0.039047881960868835,
      -0.07778292149305344,
      0.05785291641950607,
      0.05062910541892052,
      0.024788489565253258,
      -0.039589256048202515,
      0.07406137138605118,
      -0.007885846309363842,
      -0.033665772527456284,
      -0.0559241883456707,
      0.08583245426416397,
      -0.004727997351437807,
      0.043624576181173325,
      0.0261783916503191,
      0.037875883281230927,
      0.024399520829319954,
      -0.09107854962348938,
      -0.09504356235265732,
      -0.038704100996255875,
      0.05468076467514038,
      -0.018505427986383438,
      0.10894725471735,
      0.06212012842297554,
      0.17135867476463318,
      -0.006920888554304838,
      -0.0686461478471756,
      0.04090749844908714,
      0.0022571675945073366,
      -0.02445197105407715,
      0.01511515025049448,
      4.289668351634417e-33,
      0.004983100574463606,
      -0.01979329250752926,
      0.01509852521121502,
      -0.04586946219205856,
      0.008515913039445877,
      -0.02819191664457321,
      0.006122251972556114,
      0.022148309275507927,
      -0.038238219916820526,
      -0.0013727376936003566,
      -0.05336841940879822,
      0.007337694056332111,
      -0.07832209765911102,
      -0.02721921168267727,
      -0.10934560000896454,
      -0.08021202683448792,
      0.013958835043013096,
      -0.006235862150788307,
      0.06991422176361084,
      0.024140387773513794,
      -0.07123249024152756,
      -0.037292007356882095,
      -0.004484002478420734,
      -0.009346846491098404,
      -0.0183958001434803,
      0.053960125893354416,
      -0.018745964393019676,
      0.0786321684718132,
      -0.043973371386528015,
      0.029461849480867386,
      0.06942159682512283,
      -0.04627691209316254,
      -0.04783819615840912,
      -0.0309453047811985,
      0.008593704551458359,
      -0.03461942449212074,
      -0.08527418971061707,
      -0.01992916874587536,
      -0.11203239113092422,
      -0.06341145187616348,
      0.0632789134979248,
      -0.03001386485993862,
      -0.03733530268073082,
      0.007527862675487995,
      -0.06426595151424408,
      -0.002787165343761444,
      0.08846942335367203,
      0.0627150908112526,
      0.02556932158768177,
      -0.025267846882343292,
      0.053289271891117096,
      0.03085101582109928,
      0.0025011091493070126,
      -0.0749715268611908,
      0.004923875443637371,
      0.010220015421509743,
      -0.10682275891304016,
      -0.04360971227288246,
      0.041162870824337006,
      -0.007703928276896477,
      -0.020145827904343605,
      -0.021341726183891296,
      0.06934306025505066,
      -0.1021241769194603,
      0.03778046369552612,
      0.054214686155319214,
      0.05072092264890671,
      0.04199662804603577,
      -0.02144627273082733,
      0.00987418182194233,
      0.03065718337893486,
      -0.030068233609199524,
      0.05432271584868431,
      0.04870755970478058,
      0.03998875990509987,
      -0.036120496690273285,
      -0.042922161519527435,
      -0.05327189341187477,
      0.04193723946809769,
      -0.035106368362903595,
      0.0672461986541748,
      -0.045336201786994934,
      -0.046187806874513626,
      0.01132016722112894,
      0.001713995705358684,
      0.11646156013011932,
      0.04576876759529114,
      0.03830300644040108,
      0.0660364180803299,
      0.061182986944913864,
      0.001568897278048098,
      -0.02082081139087677,
      0.06370536237955093,
      -0.0992182046175003,
      -0.061827220022678375,
      -4.905179234244045e-33,
      0.008936788886785507,
      -0.031126873567700386,
      -0.07614374160766602,
      -0.041695836931467056,
      -0.018937276676297188,
      0.020908789709210396,
      0.027986593544483185,
      0.1028013527393341,
      0.04467657580971718,
      0.0551055371761322,
      -0.023483194410800934,
      -0.026507243514060974,
      0.01434362307190895,
      -0.031190261244773865,
      -0.002293759025633335,
      0.1476111263036728,
      0.03171415999531746,
      0.024297550320625305,
      0.012350148521363735,
      -0.0718638151884079,
      0.006982868071645498,
      0.011044001206755638,
      -0.0799558237195015,
      0.10008204728364944,
      -0.009120861999690533,
      -0.010126105509698391,
      0.10081207752227783,
      0.05444864556193352,
      -0.06538873165845871,
      -0.017795505002141,
      0.05380677059292793,
      -0.048572152853012085,
      -0.1499369591474533,
      0.023898569867014885,
      0.018698271363973618,
      0.09254488348960876,
      -0.05265678092837334,
      0.03925492614507675,
      -0.07753802835941315,
      0.03398550674319267,
      -0.022659771144390106,
      -0.021904734894633293,
      -0.053752921521663666,
      0.033703602850437164,
      0.004450256936252117,
      0.017360690981149673,
      0.03661248832941055,
      0.11828211694955826,
      -0.026874514296650887,
      0.005306368228048086,
      -0.004827707074582577,
      -0.07190248370170593,
      0.009048867970705032,
      -0.057799164205789566,
      -0.0037389129865914583,
      0.04830214008688927,
      0.03232704848051071,
      0.019943881779909134,
      -0.032586827874183655,
      -0.0687488317489624,
      -0.01049004402011633,
      -0.1442083865404129,
      -0.055302590131759644,
      0.01253383420407772,
      0.035896554589271545,
      -0.03081810660660267,
      0.027982009574770927,
      -0.02312513440847397,
      -0.014634732156991959,
      0.03608061000704765,
      0.02352253720164299,
      0.029038071632385254,
      0.09412308037281036,
      -0.04937147721648216,
      0.0037779079284518957,
      0.08787741512060165,
      0.09175460785627365,
      0.041931454092264175,
      -0.055632006376981735,
      0.003423563204705715,
      0.05554623156785965,
      0.03196264058351517,
      0.07398632168769836,
      -0.1085376963019371,
      -0.021474847570061684,
      -0.013697585090994835,
      0.020017093047499657,
      0.11978714168071747,
      -0.019604986533522606,
      -0.01306819636374712,
      0.0020084164571017027,
      0.010787563398480415,
      0.008015519939363003,
      0.056944314390420914,
      0.05181531235575676,
      -4.43958931839461e-08,
      -0.05593059957027435,
      -0.06163669377565384,
      -0.06703279167413712,
      0.008022580295801163,
      -0.025053774937987328,
      0.07963927835226059,
      0.042191553860902786,
      -0.04981956630945206,
      -0.04168118163943291,
      -0.08619101345539093,
      -0.015743786469101906,
      0.06853430718183517,
      -0.0018471322255209088,
      0.04135811701416969,
      0.016673527657985687,
      -0.008978810161352158,
      -0.020968805998563766,
      0.06702425330877304,
      -0.03480149805545807,
      -0.0033737567719072104,
      0.04654405266046524,
      0.04482610151171684,
      0.06836990267038345,
      -0.01678035967051983,
      0.059010349214076996,
      0.002694124123081565,
      -0.017137467861175537,
      0.008687471970915794,
      -0.0039121238514781,
      -0.0035168714821338654,
      0.022189151495695114,
      -0.060847990214824677,
      0.029952289536595345,
      -0.11983655393123627,
      0.020655330270528793,
      -0.006420306861400604,
      0.006349766161292791,
      -0.021885689347982407,
      0.021379457786679268,
      0.07020970433950424,
      0.011438832618296146,
      -0.022829212248325348,
      -0.02515053190290928,
      0.025397226214408875,
      -0.13586480915546417,
      -0.029954517260193825,
      -0.12140762060880661,
      0.048846982419490814,
      0.015038548037409782,
      0.04664741829037666,
      0.021524108946323395,
      -0.07178572565317154,
      0.010834518820047379,
      -0.08167354762554169,
      -0.017934298142790794,
      -0.03792863339185715,
      0.01884687878191471,
      -0.05701587721705437,
      -0.02944321185350418,
      -0.0013598018558695912,
      0.029703417792916298,
      0.0746883824467659,
      0.03176262602210045,
      0.02620081603527069
    ],
    [
      -0.007316645700484514,
      -0.0007266915054060519,
      -0.07250269502401352,
      0.08620060235261917,
      0.12599553167819977,
      -0.09555235505104065,
      -0.07281069457530975,
      0.08139363676309586,
      0.06373048573732376,
      0.016844244673848152,
      -0.05893600359559059,
      0.03405269235372543,
      -0.020452536642551422,
      -0.020588485524058342,
      0.0006298899534158409,
      -0.03846254199743271,
      0.051542021334171295,
      -0.000928982743062079,
      -0.01237606629729271,
      -0.03751436620950699,
      -0.03284020349383354,
      -0.12286761403083801,
      0.04095441848039627,
      -0.08239045739173889,
      0.0004982147365808487,
      0.029464902356266975,
      -0.059123121201992035,
      0.003272309433668852,
      0.05263121798634529,
      -0.06134782359004021,
      0.0883808508515358,
      -0.007984377443790436,
      0.0032639680430293083,
      0.02318415604531765,
      -0.056657541543245316,
      0.034629739820957184,
      0.07236193120479584,
      -0.06641009449958801,
      -0.07074642926454544,
      0.01005953922867775,
      0.04681910574436188,
      -0.05868913605809212,
      -0.033553410321474075,
      -0.005796876270323992,
      -0.05532599613070488,
      -0.026546774432063103,
      -0.025252481922507286,
      0.07868058979511261,
      -0.055077776312828064,
      -0.02831140346825123,
      -0.058128468692302704,
      -0.05365823209285736,
      -0.041152775287628174,
      0.014762005768716335,
      0.049864381551742554,
      -0.0008957089157775044,
      0.023446671664714813,
      -0.017319515347480774,
      0.05306228995323181,
      -0.02088596113026142,
      0.025828439742326736,
      -0.013287742622196674,
      -0.05669078975915909,
      0.012195277027785778,
      0.04570676386356354,
      0.01757880114018917,
      0.06987583637237549,
      0.022428661584854126,
      0.05241590365767479,
      -0.009709738194942474,
      0.01949944905936718,
      0.011458290740847588,
      -0.0062074302695691586,
      -0.019490860402584076,
      0.01660982519388199,
      -0.00606145104393363,
      -0.011007314547896385,
      0.012211131863296032,
      0.00762188620865345,
      -0.16081687808036804,
      0.06958328187465668,
      -0.027308927848935127,
      0.00317698554135859,
      -0.004465070553123951,
      0.07869181036949158,
      -0.05061860382556915,
      0.010418996214866638,
      0.029277747496962547,
      -0.004740488715469837,
      -0.011594526469707489,
      -0.014722314663231373,
      0.11015467345714569,
      -0.016265396028757095,
      -0.013196127489209175,
      0.015568534843623638,
      0.06923521310091019,
      -0.03539935126900673,
      -0.07816421985626221,
      -0.02533723972737789,
      0.09332314878702164,
      -0.04122444987297058,
      -0.03939403221011162,
      -0.007191209122538567,
      -0.0202071201056242,
      0.0426027737557888,
      -0.06914453953504562,
      -0.0021071042865514755,
      0.11334341764450073,
      -0.003468223148956895,
      0.009962215088307858,
      0.02024766057729721,
      0.05180296301841736,
      -0.0766649842262268,
      -0.00251332251355052,
      0.06814074516296387,
      -0.016572393476963043,
      -0.017121877521276474,
      0.022331736981868744,
      0.021311206743121147,
      0.0873822420835495,
      0.06542888283729553,
      -0.0009291516616940498,
      -0.0352882482111454,
      -0.0010529739083722234,
      0.035140812397003174,
      -0.0020457610953599215,
      -0.01817184127867222,
      9.819866013734334e-33,
      -0.010480472818017006,
      0.046911850571632385,
      -0.04454641416668892,
      -0.029157884418964386,
      0.0015864204615354538,
      0.009283495135605335,
      -0.016796225681900978,
      -0.08573701977729797,
      -0.11864268034696579,
      0.053703706711530685,
      -0.060849402099847794,
      0.07907380163669586,
      -0.05221262201666832,
      0.05416788160800934,
      0.031547125428915024,
      -0.15439312160015106,
      0.044500887393951416,
      0.11598408222198486,
      0.07499497383832932,
      0.020550411194562912,
      0.09084819257259369,
      0.003642650553956628,
      0.05681821331381798,
      0.00116641481872648,
      0.05156343802809715,
      0.039713338017463684,
      0.003870875108987093,
      0.005452965851873159,
      0.03746994212269783,
      0.03739044442772865,
      0.0028054378926753998,
      -0.002724493620917201,
      0.002435397356748581,
      -0.018209466710686684,
      0.017066486179828644,
      -0.08344697207212448,
      -0.03249233588576317,
      -0.06673481315374374,
      -0.08761253207921982,
      -0.02009410411119461,
      0.021679379045963287,
      0.031248517334461212,
      -0.10203529894351959,
      -0.053552139550447464,
      -0.0908803716301918,
      0.002822889480739832,
      0.03704679757356644,
      -0.022666016593575478,
      0.0036148629151284695,
      -0.0112075824290514,
      0.06692828983068466,
      0.002732546767219901,
      -0.02938692457973957,
      -0.023256797343492508,
      0.048391107469797134,
      -0.03901541605591774,
      0.026354804635047913,
      -0.03780394047498703,
      0.096674345433712,
      -0.02594628371298313,
      0.04690000042319298,
      -0.07196229696273804,
      0.001636836095713079,
      -0.06123211234807968,
      0.08685114979743958,
      0.028775939717888832,
      -0.01903720386326313,
      0.045113421976566315,
      -0.01322027388960123,
      0.06882726401090622,
      0.0292283333837986,
      0.047811925411224365,
      0.06887135654687881,
      -0.009219978004693985,
      0.05375966802239418,
      0.007428376469761133,
      -0.004189383238554001,
      0.010909822769463062,
      -0.03891121596097946,
      0.02563490904867649,
      -0.16044512391090393,
      0.00816627498716116,
      0.0071946061216294765,
      -0.03754351660609245,
      0.007036936469376087,
      0.005527649074792862,
      0.02983582764863968,
      0.03941644728183746,
      -0.11588960140943527,
      -0.029064154252409935,
      0.008723592385649681,
      0.01624096743762493,
      0.003198446938768029,
      -0.0783115029335022,
      -0.08724803477525711,
      -7.44021067829305e-33,
      -0.02918940596282482,
      -0.00020104838768020272,
      -0.04042893648147583,
      0.1073797270655632,
      -0.016208365559577942,
      -0.028720038011670113,
      -0.05669863522052765,
      0.01939663104712963,
      0.03712943568825722,
      0.025051288306713104,
      0.09978505969047546,
      -0.03365015611052513,
      -0.06953784823417664,
      -0.10242845863103867,
      -0.01817665807902813,
      -0.07451087236404419,
      0.04743540659546852,
      -0.06333962827920914,
      -0.06839966028928757,
      -0.058466095477342606,
      -0.07434473186731339,
      0.009360984899103642,
      0.02796650491654873,
      0.10336443036794662,
      -0.016261007636785507,
      0.028167448937892914,
      0.045732736587524414,
      -0.0037986920215189457,
      -0.02823374979197979,
      -0.029234277084469795,
      -0.06359443068504333,
      -0.03994448482990265,
      -0.027076954022049904,
      -0.08324039727449417,
      0.029030390083789825,
      0.03397674486041069,
      0.003049327526241541,
      0.06099797040224075,
      -0.048841748386621475,
      0.07850427180528641,
      0.06860034167766571,
      0.05828074738383293,
      -0.08856222033500671,
      -0.021600302308797836,
      -0.04679624363780022,
      -0.01635473035275936,
      -0.025022506713867188,
      -0.015523235313594341,
      0.0017190990038216114,
      -0.024282395839691162,
      0.05693116784095764,
      -0.015760330483317375,
      0.02266829088330269,
      0.00728133600205183,
      -0.022027112543582916,
      0.019096899777650833,
      0.006273599807173014,
      0.023171843960881233,
      -0.002309921197593212,
      0.09517072141170502,
      0.09397702664136887,
      -0.07918041944503784,
      -0.05467899888753891,
      0.04320923984050751,
      0.05503997579216957,
      0.03187011554837227,
      -0.09067901223897934,
      -0.02259635180234909,
      -0.05380306392908096,
      0.19991984963417053,
      0.05906851589679718,
      0.023399416357278824,
      0.011260997503995895,
      0.031068678945302963,
      -0.009310110472142696,
      -0.02211172878742218,
      0.07548685371875763,
      -0.0013633959461003542,
      0.04349055513739586,
      -0.00286236428655684,
      -0.06473816186189651,
      0.05103038623929024,
      -0.00942534301429987,
      -0.0030417379457503557,
      0.04256220906972885,
      -0.006678503472357988,
      0.008006364107131958,
      0.013513622805476189,
      0.06954494118690491,
      0.027271592989563942,
      -0.08094953745603561,
      0.015197690576314926,
      -0.030364247038960457,
      0.030258964747190475,
      0.08716116845607758,
      -6.626498105788414e-08,
      -0.11540018767118454,
      -0.00583114568144083,
      0.016252141445875168,
      0.0734594389796257,
      0.01905825361609459,
      0.02039499580860138,
      -0.0014096415834501386,
      -0.023434655740857124,
      0.002481242408975959,
      0.0034276072401553392,
      0.036504704505205154,
      -0.04420864209532738,
      -0.016245556995272636,
      -0.05324366316199303,
      0.062468186020851135,
      0.024815954267978668,
      0.08240965008735657,
      0.0015264227986335754,
      -0.04598361253738403,
      -0.12696728110313416,
      -0.013676418922841549,
      0.0050436449237167835,
      -0.05871905758976936,
      -0.05884001776576042,
      0.04662415385246277,
      -0.0028617780189961195,
      0.0406133309006691,
      0.07974928617477417,
      0.03289201110601425,
      -0.05289366841316223,
      -0.0219894926995039,
      -0.02091171219944954,
      -0.018075568601489067,
      0.004340528044849634,
      -0.03599408268928528,
      0.05865222588181496,
      -0.0995878279209137,
      0.0450703501701355,
      -0.0301436185836792,
      0.010685320943593979,
      0.008048519492149353,
      0.056307487189769745,
      0.012545409612357616,
      -0.004954381845891476,
      0.039695389568805695,
      0.06599149107933044,
      -0.02563340961933136,
      0.05991020053625107,
      -0.035524819046258926,
      0.00877065397799015,
      0.046774063259363174,
      -0.05401018261909485,
      -0.04508998990058899,
      0.10049528628587723,
      0.0608820803463459,
      -0.04258017987012863,
      0.01961980015039444,
      -0.011464697308838367,
      0.01093688141554594,
      0.02464914508163929,
      0.04792248457670212,
      -0.05098528787493706,
      -0.04348401725292206,
      -0.004343735985457897
    ],
    [
      -0.003275638446211815,
      -0.005448539275676012,
      -0.07244546711444855,
      0.048797789961099625,
      0.05510606989264488,
      -0.04410593584179878,
      -0.02549021877348423,
      -0.08058646321296692,
      0.022006718441843987,
      -0.060284484177827835,
      -0.009930035099387169,
      -0.028735408559441566,
      0.08621208369731903,
      -0.07247705012559891,
      -0.034739069640636444,
      -0.042409785091876984,
      -0.07623869180679321,
      0.0036918416153639555,
      -0.04204680398106575,
      -0.014727933332324028,
      0.05397813767194748,
      -0.022613195702433586,
      -0.02823471464216709,
      -0.018741395324468613,
      -0.00578425545245409,
      -0.019142478704452515,
      -0.015982912853360176,
      0.08803869038820267,
      0.016683591529726982,
      -0.05981499329209328,
      0.09777342528104782,
      -0.018092332407832146,
      -0.03156283497810364,
      0.0006154750590212643,
      -0.015819789841771126,
      0.06651971489191055,
      0.069411501288414,
      -0.054839860647916794,
      0.00047998997615650296,
      -0.00487595796585083,
      0.10596974194049835,
      -0.08142852038145065,
      0.0010373136028647423,
      -0.027963848784565926,
      -0.03287791833281517,
      0.005549023859202862,
      -0.05827632546424866,
      -0.034515853971242905,
      -0.08385618031024933,
      -0.02035011351108551,
      -0.04765293002128601,
      -0.005278874654322863,
      -0.036691196262836456,
      0.09198947995901108,
      0.05304066091775894,
      0.019604627043008804,
      -0.06123935803771019,
      0.018899494782090187,
      -0.010500719770789146,
      -0.007741858251392841,
      0.056593820452690125,
      -0.021179936826229095,
      0.028770240023732185,
      0.03278204798698425,
      -0.02814745157957077,
      0.030473222956061363,
      -0.0817074328660965,
      0.010094462893903255,
      0.007950284518301487,
      -0.01012523751705885,
      -0.0244744922965765,
      -0.04404325410723686,
      -0.029962625354528427,
      0.06891507655382156,
      -0.004573252983391285,
      0.05889694020152092,
      0.026335813105106354,
      -0.04735429584980011,
      -0.0019945993553847075,
      -0.08108469098806381,
      -0.04789109528064728,
      -0.01739388331770897,
      0.041218604892492294,
      0.010598643682897091,
      0.07681447267532349,
      0.054363276809453964,
      0.05622834339737892,
      0.00993407890200615,
      0.01587778702378273,
      0.0843544602394104,
      0.011966938152909279,
      -0.015019824728369713,
      0.04912525787949562,
      0.054513439536094666,
      0.048941243439912796,
      0.058448921889066696,
      0.037564948201179504,
      0.03617020696401596,
      -0.07356549054384232,
      0.037802353501319885,
      -0.01260217372328043,
      0.0071457913145422935,
      -0.06548544764518738,
      0.03498036414384842,
      0.014364522881805897,
      -0.040700219571590424,
      -0.09586513787508011,
      0.07039280235767365,
      -0.022068209946155548,
      -0.04351368919014931,
      -0.01612149365246296,
      0.08699065446853638,
      -0.03807990252971649,
      -0.13585984706878662,
      -0.1524079591035843,
      0.018803557381033897,
      -0.07862356305122375,
      -0.027220267802476883,
      0.05389033257961273,
      0.012184911407530308,
      0.10647103190422058,
      0.01872226595878601,
      -0.022980190813541412,
      0.0291742030531168,
      -0.0040250513702631,
      -0.050233833491802216,
      -0.0036051501519978046,
      5.7023660748511186e-33,
      -0.026555297896265984,
      0.02958901785314083,
      0.022001219913363457,
      -0.08042445778846741,
      0.025667935609817505,
      -0.008623635396361351,
      -0.029310856014490128,
      0.022374460473656654,
      -0.050319671630859375,
      0.03399902954697609,
      -0.03769751265645027,
      0.05366792157292366,
      -0.02579392120242119,
      0.03482126444578171,
      0.022134307771921158,
      -0.02539944276213646,
      0.07277460396289825,
      0.05880778282880783,
      0.05274024233222008,
      -0.06640860438346863,
      -0.006802400108426809,
      -0.01114037074148655,
      0.03066195733845234,
      -0.06366359442472458,
      0.07147980481386185,
      0.05023571103811264,
      -0.015537640079855919,
      -0.04846379533410072,
      -0.010754610411822796,
      0.03549958020448685,
      0.03267911076545715,
      -0.05148489400744438,
      -0.0065468293614685535,
      -0.019620919600129128,
      0.027805270627141,
      -0.07705164700746536,
      0.010848131030797958,
      -0.05375527963042259,
      -0.09047354012727737,
      -0.02003459818661213,
      0.08079781383275986,
      0.0068890429101884365,
      -0.04379575327038765,
      -0.030887803062796593,
      -0.08556671440601349,
      0.05943343788385391,
      0.04335499554872513,
      0.02062135748565197,
      0.005796121899038553,
      -0.003574448637664318,
      0.11185616999864578,
      0.021583564579486847,
      0.019095785915851593,
      -0.06159971281886101,
      -0.006157060153782368,
      -0.06843931972980499,
      -0.02286631241440773,
      -0.03449438884854317,
      0.010602936148643494,
      0.02465437911450863,
      -0.017545975744724274,
      -0.016289135441184044,
      0.04736924171447754,
      -0.03948063403367996,
      0.001657694112509489,
      0.07709996402263641,
      0.08621656894683838,
      -0.04187968745827675,
      -0.04579353705048561,
      0.06879778951406479,
      -0.06153837591409683,
      -0.011914768256247044,
      0.06893903762102127,
      0.01911543682217598,
      0.02085103839635849,
      -0.03834376111626625,
      -0.07484672218561172,
      -0.04133223369717598,
      0.035854827612638474,
      -0.02305387333035469,
      0.046352844685316086,
      -0.0642511248588562,
      -0.01786566525697708,
      0.013525760732591152,
      -0.11732475459575653,
      -0.0034037416335195303,
      -0.04181291162967682,
      -0.024148371070623398,
      -0.04068009555339813,
      -0.005328502506017685,
      0.010616705752909184,
      -0.014270219951868057,
      0.005226433742791414,
      -0.05288758501410484,
      -0.08718947321176529,
      -6.352521347373372e-33,
      -0.045792702585458755,
      -0.014718662947416306,
      -0.05858459323644638,
      0.0007608602754771709,
      -0.014652539044618607,
      -0.06087873876094818,
      0.013573791831731796,
      0.07516331225633621,
      0.03076261840760708,
      0.012663767673075199,
      0.001169348950497806,
      -0.038994792848825455,
      -0.0018082800088450313,
      -0.07220625132322311,
      -0.014109434559941292,
      0.03773267939686775,
      -0.009793522767722607,
      0.05693376809358597,
      -0.05232251062989235,
      -0.04254966974258423,
      0.02614866942167282,
      0.0934806615114212,
      -0.03151069954037666,
      0.117932990193367,
      0.09696163237094879,
      0.026987148448824883,
      0.12580302357673645,
      0.08840027451515198,
      -0.0060998606495559216,
      -0.03573107346892357,
      0.010959532111883163,
      0.000699821044690907,
      -0.04494805634021759,
      -0.05320068821310997,
      -0.07350289076566696,
      0.08964941650629044,
      0.02898508869111538,
      0.007661642972379923,
      0.02196011319756508,
      0.03119441121816635,
      0.08208604902029037,
      0.027476901188492775,
      -0.06371743977069855,
      0.06265003979206085,
      -0.0005238325102254748,
      -0.033172253519296646,
      -0.0358574353158474,
      0.13552476465702057,
      0.021013343706727028,
      0.02212752215564251,
      0.039409153163433075,
      0.0038000887725502253,
      0.05710059776902199,
      -0.020391302183270454,
      -0.009922318160533905,
      0.04282539337873459,
      -0.03142407163977623,
      0.0068105109967291355,
      -0.00865893717855215,
      -0.04958111792802811,
      0.029447561129927635,
      0.015691719949245453,
      0.011199606582522392,
      0.020173393189907074,
      0.08809950947761536,
      -0.02177586406469345,
      -0.04076774790883064,
      -0.09946201741695404,
      -0.0893794372677803,
      0.024410583078861237,
      0.08837220072746277,
      -0.011949696578085423,
      -0.06510639935731888,
      -0.013626123778522015,
      -0.0019023149507120252,
      -0.025335637852549553,
      0.02411399967968464,
      -0.0016744734020903707,
      0.01113361306488514,
      0.0573236308991909,
      -0.003560616634786129,
      0.037262946367263794,
      0.11619234085083008,
      0.012399840168654919,
      0.08098296076059341,
      0.0015821944689378142,
      0.052995048463344574,
      0.12089572101831436,
      0.021136514842510223,
      0.016212332993745804,
      -0.024286391213536263,
      0.057242970913648605,
      -0.05309239774942398,
      0.11175379902124405,
      0.04404715076088905,
      -5.681789971845319e-08,
      -0.030333098024129868,
      -0.06662870943546295,
      -0.12358713150024414,
      0.028539517894387245,
      0.014870060607790947,
      0.07221417129039764,
      -0.0345902293920517,
      -0.054356567561626434,
      0.05081610381603241,
      -0.06936860084533691,
      0.09039232134819031,
      -0.007514066528528929,
      -0.08040767908096313,
      -0.0385487824678421,
      -0.006060964893549681,
      -0.07094437628984451,
      -0.04366912692785263,
      -0.024960510432720184,
      -0.07577788084745407,
      -0.05269593000411987,
      0.02071206271648407,
      0.031241346150636673,
      -0.031437408179044724,
      -0.06562197208404541,
      0.07265844941139221,
      -0.08883246779441833,
      0.043227992951869965,
      0.12478949129581451,
      0.009547267109155655,
      0.02861454151570797,
      -0.03728611394762993,
      -0.07582969963550568,
      0.05400226265192032,
      -0.014889891259372234,
      -0.05097508803009987,
      0.1209847554564476,
      -0.034121282398700714,
      0.030744317919015884,
      0.008590023964643478,
      0.04251449555158615,
      -0.0006141317426227033,
      -0.07975549250841141,
      -0.00247189006768167,
      -0.0024723089300096035,
      -0.09509775042533875,
      0.03190022334456444,
      -0.10521294921636581,
      0.0891130268573761,
      0.06423355638980865,
      0.01538852509111166,
      0.04683331400156021,
      -0.10453309118747711,
      -0.016055885702371597,
      0.004490099381655455,
      -0.020142633467912674,
      -0.04531067609786987,
      -0.010360686108469963,
      -0.01948147639632225,
      0.06639732420444489,
      0.02022416517138481,
      0.028042009100317955,
      -0.019897837191820145,
      0.036724891513586044,
      0.01850997656583786
    ],
    [
      -0.04144294932484627,
      -0.0154421953484416,
      -0.0647641271352768,
      0.08936457335948944,
      0.07690244913101196,
      0.001133000710979104,
      -0.033560607582330704,
      0.03532234951853752,
      0.027995025739073753,
      -0.006931609008461237,
      0.016469525173306465,
      0.004537912085652351,
      -0.06236354261636734,
      -0.031153038144111633,
      -0.04490302503108978,
      -0.08109065145254135,
      0.01353497989475727,
      -0.10066837072372437,
      -0.008839448913931847,
      -0.07437837868928909,
      0.034923117607831955,
      0.009581498801708221,
      -0.010786526836454868,
      -0.030419332906603813,
      0.003060794435441494,
      0.000527295982465148,
      -0.08948060125112534,
      -0.028562983497977257,
      -0.02078159712255001,
      -0.02434995397925377,
      0.0540311224758625,
      0.0007956922636367381,
      -0.03438795357942581,
      -0.01290449220687151,
      -0.010242427699267864,
      -0.029950127005577087,
      0.06237855181097984,
      -0.04655895382165909,
      0.026205386966466904,
      0.01120180543512106,
      0.0004461730131879449,
      -0.08161693811416626,
      0.022900521755218506,
      -0.013667287304997444,
      -0.0070121269673109055,
      -0.0592544749379158,
      -0.05668627843260765,
      0.03293881565332413,
      -0.06065329164266586,
      -0.023111216723918915,
      -0.07874594628810883,
      0.07461750507354736,
      0.0036570748779922724,
      0.13703124225139618,
      0.17763982713222504,
      -0.014788482338190079,
      -0.0026326559018343687,
      0.024484453722834587,
      -0.043427903205156326,
      -0.008869367651641369,
      -0.011947114951908588,
      -0.050567448139190674,
      -0.051742225885391235,
      -0.021768908947706223,
      -0.06541676074266434,
      0.011503935791552067,
      0.013196771033108234,
      0.050056520849466324,
      0.029552549123764038,
      -0.05250255763530731,
      -0.03910330682992935,
      0.06326141208410263,
      -0.03462963551282883,
      0.014365308918058872,
      0.0638965293765068,
      -0.03626726195216179,
      0.02652723155915737,
      0.01743639074265957,
      -0.04338843747973442,
      -0.12994301319122314,
      0.03605327755212784,
      -0.025631194934248924,
      -0.0009292045142501593,
      -0.04445264860987663,
      0.025646071881055832,
      0.01343871746212244,
      0.018943006172776222,
      -0.006772024091333151,
      0.01820017769932747,
      0.09619423002004623,
      -0.019530735909938812,
      0.08253958821296692,
      -0.043971747159957886,
      0.019847502931952477,
      -0.005527021363377571,
      0.04416622221469879,
      -0.04706141725182533,
      -0.027680067345499992,
      -0.012499752454459667,
      0.05439910665154457,
      -0.050786446779966354,
      0.022277619689702988,
      -0.08281496167182922,
      0.043895021080970764,
      -0.019403614103794098,
      -0.07049544900655746,
      -0.04682707414031029,
      0.11189287900924683,
      0.0017177811823785305,
      0.06757435947656631,
      0.009902024641633034,
      0.05358642339706421,
      0.011925441212952137,
      -0.03756596893072128,
      -0.015759875997900963,
      0.033879876136779785,
      -0.02935035340487957,
      0.022564677521586418,
      0.026894045993685722,
      0.024479541927576065,
      0.1089293360710144,
      0.030564505606889725,
      -0.06709101796150208,
      0.08403463661670685,
      0.03816061094403267,
      -0.02826480194926262,
      0.13237452507019043,
      9.520771027059203e-33,
      0.014856172725558281,
      0.029853245243430138,
      -0.06108354404568672,
      -0.045318469405174255,
      -0.0114016467705369,
      0.028577588498592377,
      0.03577643260359764,
      0.038304511457681656,
      -0.06006573513150215,
      0.04432602971792221,
      -9.863344894256443e-05,
      0.07453908771276474,
      -0.06257698684930801,
      0.0009054012480191886,
      -0.011920546181499958,
      -0.08832483738660812,
      0.007404167205095291,
      0.11615055799484253,
      0.03304847329854965,
      -0.06980150192975998,
      0.011006881482899189,
      -0.024524042382836342,
      0.012313570827245712,
      -0.07627248764038086,
      0.051743023097515106,
      0.05143948644399643,
      -0.006367327179759741,
      0.049161795526742935,
      -0.08125162869691849,
      0.033777255564928055,
      0.04379461705684662,
      -0.01935955137014389,
      0.004393087234348059,
      -0.05423978716135025,
      0.0843801274895668,
      -0.1284005492925644,
      -0.05067474767565727,
      -0.06915530562400818,
      -0.1389780193567276,
      -0.05164143815636635,
      0.029242539778351784,
      0.05205067992210388,
      -0.11348898708820343,
      -0.048362698405981064,
      -0.03461562469601631,
      -0.05254923924803734,
      -0.03070537932217121,
      0.029964597895741463,
      0.01743806153535843,
      0.012871027924120426,
      0.1031845435500145,
      0.044346053153276443,
      0.011855421587824821,
      -0.07017407566308975,
      0.07056625187397003,
      0.033168092370033264,
      -0.000650603324174881,
      -0.018283886834979057,
      0.035784970968961716,
      0.002278986619785428,
      0.06259239464998245,
      -0.012063260190188885,
      0.04057503864169121,
      -0.11507628858089447,
      0.06164667382836342,
      0.04598681256175041,
      0.020937474444508553,
      0.02298111282289028,
      0.012151040136814117,
      0.04022867605090141,
      -0.003649256657809019,
      -0.015233434736728668,
      0.045854076743125916,
      0.03851339593529701,
      0.02792271226644516,
      -0.03070976585149765,
      0.0009454292012378573,
      -0.021807385608553886,
      -0.021255744621157646,
      -0.08038987219333649,
      0.0011906131403520703,
      -0.05801895260810852,
      0.02243851125240326,
      -0.017339888960123062,
      -0.018335390836000443,
      0.05463225394487381,
      -0.01808706670999527,
      0.03768051415681839,
      -0.006857633590698242,
      -0.004640421364456415,
      -0.005827791057527065,
      -0.007234386168420315,
      0.01272228080779314,
      -0.03677379712462425,
      -0.06492231786251068,
      -9.53460879962029e-33,
      -0.041001830250024796,
      0.02159697748720646,
      -0.10139628499746323,
      -0.05106374993920326,
      -0.04009745642542839,
      -0.06008723005652428,
      -0.03517543151974678,
      0.07218832522630692,
      0.07541649043560028,
      0.020497318357229233,
      0.03684496879577637,
      -0.04475127160549164,
      -0.019415665417909622,
      -0.08072415739297867,
      0.0296014491468668,
      0.03279714658856392,
      -0.002088312292471528,
      -0.11282677203416824,
      -0.07802419364452362,
      0.01232452318072319,
      -0.05386693775653839,
      -0.009284812025725842,
      0.03853151202201843,
      0.06017500162124634,
      -0.004584760405123234,
      0.015901392325758934,
      0.10802939534187317,
      0.058006733655929565,
      -0.07634785771369934,
      -0.022388840094208717,
      0.05694315582513809,
      -0.05091007426381111,
      -0.11128980666399002,
      0.02026383951306343,
      -0.026216207072138786,
      0.022276317700743675,
      -0.014502767473459244,
      0.016307389363646507,
      -0.0032936958596110344,
      0.08414911478757858,
      0.04761035740375519,
      0.09706393629312515,
      -0.05576092377305031,
      -0.010296822525560856,
      -0.05420664697885513,
      -0.008691582828760147,
      -0.025401746854186058,
      0.03426521271467209,
      0.06533875316381454,
      -0.019891196861863136,
      0.03401393070816994,
      -0.004560108762234449,
      0.025393962860107422,
      0.02142590843141079,
      -0.019656909629702568,
      0.04994189739227295,
      0.061439018696546555,
      0.013939033262431622,
      0.0401599258184433,
      -0.05459567531943321,
      0.048020489513874054,
      -0.06132158637046814,
      -0.013778244145214558,
      0.02589523233473301,
      0.0932946503162384,
      -0.0037143125664442778,
      -0.03217519447207451,
      -0.03692352771759033,
      0.04248518496751785,
      0.08819923549890518,
      0.15370002388954163,
      -0.01563645899295807,
      0.00668783113360405,
      -0.024719655513763428,
      0.019645391032099724,
      0.08347921818494797,
      0.0529884397983551,
      0.035754039883613586,
      -0.050564587116241455,
      0.13275152444839478,
      -0.023505449295043945,
      0.0933775082230568,
      0.05464116111397743,
      -0.07666056603193283,
      -0.02361384406685829,
      -0.05024196207523346,
      0.00437243701890111,
      0.06996816396713257,
      0.0321691520512104,
      -0.0028640904929488897,
      -0.026182642206549644,
      0.011877911165356636,
      0.006619616877287626,
      0.018048735335469246,
      0.07108044624328613,
      -5.573997796659569e-08,
      -0.10738305747509003,
      -0.089535191655159,
      -0.0892777070403099,
      0.06404319405555725,
      0.02317075990140438,
      -0.006889196112751961,
      -0.006361353676766157,
      -0.05956168472766876,
      -0.06023562327027321,
      -0.10108642280101776,
      0.027694707736372948,
      0.007672812324017286,
      0.011575572192668915,
      -0.04901153966784477,
      0.0820065438747406,
      -0.1781017780303955,
      0.02953057549893856,
      -0.01681567169725895,
      -0.08203776925802231,
      -0.03967846557497978,
      0.03436855226755142,
      -0.01799728348851204,
      -0.02254290133714676,
      -0.058929797261953354,
      0.055962081998586655,
      -0.05674228072166443,
      0.007563680876046419,
      0.009614427573978901,
      0.024938156828284264,
      0.02055993117392063,
      0.023247716948390007,
      0.0217677503824234,
      -0.013269119895994663,
      -0.04097926244139671,
      -0.0326162725687027,
      0.08058963716030121,
      -0.0184401236474514,
      0.033220067620277405,
      -0.020694809034466743,
      0.06830795854330063,
      0.025321589782834053,
      -0.001587919075973332,
      -0.040328655391931534,
      0.013979223556816578,
      -0.015725430101156235,
      0.027224533259868622,
      -0.007162272464483976,
      0.013825859874486923,
      0.035926662385463715,
      0.004694900941103697,
      0.022262047976255417,
      -0.09419097751379013,
      -0.0002719483454711735,
      -0.005932023748755455,
      0.003551729489117861,
      -0.004007857292890549,
      0.01174194272607565,
      0.011019386351108551,
      -0.006550215184688568,
      -0.0150799211114645,
      -0.047400131821632385,
      0.05169617384672165,
      -0.013414005748927593,
      0.032984659075737
    ],
    [
      -0.04811526834964752,
      -0.040918827056884766,
      -0.05571911856532097,
      0.0902366042137146,
      0.07584603875875473,
      -0.05178651958703995,
      0.04795638844370842,
      0.058700550347566605,
      -0.025023169815540314,
      -0.020948559045791626,
      0.008203985169529915,
      -0.006572229787707329,
      -0.06035216152667999,
      -0.02486242540180683,
      0.009450260549783707,
      -0.03849683329463005,
      -0.037958912551403046,
      -0.09818203002214432,
      0.0007312321104109287,
      0.007104499265551567,
      0.07553598284721375,
      0.01795239746570587,
      -0.011649509891867638,
      -0.09745673090219498,
      -0.025345055386424065,
      0.013374359346926212,
      -0.028975654393434525,
      -0.01663772575557232,
      -0.009736537002027035,
      -0.01885674148797989,
      0.03341231867671013,
      0.09183411300182343,
      -0.1005759909749031,
      0.0037176301702857018,
      0.030208295211195946,
      0.007726627867668867,
      0.06769256293773651,
      -0.08741314709186554,
      0.00804825033992529,
      -0.012954408302903175,
      -0.03688006475567818,
      -0.028654247522354126,
      0.06710564345121384,
      -0.003151586279273033,
      0.023872923105955124,
      -0.04737447202205658,
      -0.019916661083698273,
      0.005691480357199907,
      -0.033087171614170074,
      -0.06358907371759415,
      -0.028926344588398933,
      0.036393072456121445,
      -0.024564536288380623,
      0.08623972535133362,
      0.1367301195859909,
      0.01365406159311533,
      -0.03865167498588562,
      -0.036115411669015884,
      0.004054342862218618,
      0.04979505017399788,
      0.012248178012669086,
      -0.006925185211002827,
      -0.06331335753202438,
      -0.03678222373127937,
      -0.06485822796821594,
      0.028256965801119804,
      0.022422419860959053,
      0.006285720504820347,
      0.03752307593822479,
      -0.1072118729352951,
      -0.12407002598047256,
      0.03367999568581581,
      -0.024596257135272026,
      -0.01924784854054451,
      0.08091101050376892,
      0.014026776887476444,
      0.03424278274178505,
      0.018503867089748383,
      -0.010841568000614643,
      -0.18002595007419586,
      0.0674394816160202,
      0.049381885677576065,
      0.051916733384132385,
      0.030833017081022263,
      0.014253776520490646,
      0.030420754104852676,
      -0.00693088723346591,
      -0.022635729983448982,
      0.05913049727678299,
      0.07686964422464371,
      0.0046275462955236435,
      -0.008466913364827633,
      -0.14981701970100403,
      -0.001578472089022398,
      0.01926516555249691,
      0.0662260428071022,
      0.01380156073719263,
      0.0247928686439991,
      -0.015118538402020931,
      0.05907725915312767,
      -0.03515281528234482,
      -0.07624385505914688,
      0.009303183294832706,
      0.029843036085367203,
      -0.06090829148888588,
      -0.06883782893419266,
      -0.019017789512872696,
      0.07645586878061295,
      -0.021338146179914474,
      -0.008681408129632473,
      -0.01808105781674385,
      0.02367667481303215,
      0.02965230867266655,
      -0.07074587792158127,
      -0.026815632358193398,
      0.031855955719947815,
      -0.02200615592300892,
      0.010598952881991863,
      0.030175842344760895,
      0.05493272468447685,
      0.05402150750160217,
      0.05119498074054718,
      -0.009358629584312439,
      0.07887954264879227,
      -0.022559121251106262,
      -0.012195435352623463,
      0.032782409340143204,
      1.0916935054889605e-32,
      0.016006389632821083,
      0.028812432661652565,
      -0.0589873269200325,
      0.01811336912214756,
      -0.03518225997686386,
      -0.005633519031107426,
      0.06801070272922516,
      0.01484692469239235,
      -0.0643220916390419,
      0.10162895917892456,
      -0.028067657724022865,
      0.10208892077207565,
      -0.07757009565830231,
      -0.00990359578281641,
      -0.027544891461730003,
      -0.08167833089828491,
      0.006982374005019665,
      0.09064387530088425,
      0.03918863460421562,
      -0.06129835918545723,
      0.018778065219521523,
      0.037446051836013794,
      0.0019797200802713633,
      -0.039102353155612946,
      0.07207489013671875,
      0.08116192370653152,
      -0.024831458926200867,
      0.0433419905602932,
      -0.04917116090655327,
      0.020375486463308334,
      0.04596802592277527,
      0.001984542468562722,
      0.0632951408624649,
      -0.020693041384220123,
      0.07767616957426071,
      -0.10348464548587799,
      -0.04911372438073158,
      -0.03017546981573105,
      -0.13470163941383362,
      -0.030465448275208473,
      0.019871482625603676,
      0.019542252644896507,
      -0.10539884120225906,
      -0.002809250494465232,
      0.013052795082330704,
      -0.09643585234880447,
      -0.02167922630906105,
      0.035841479897499084,
      0.11647193133831024,
      -0.05472235009074211,
      -0.0005053961649537086,
      0.05980014055967331,
      -0.006508483551442623,
      -0.008763749152421951,
      0.07156460732221603,
      0.021953966468572617,
      -0.03434367477893829,
      3.565279985195957e-05,
      -0.017209451645612717,
      0.03408438712358475,
      -0.016966793686151505,
      -0.02819572575390339,
      -0.04196614399552345,
      -0.061386317014694214,
      0.05581367760896683,
      0.015926014631986618,
      -0.007780661806464195,
      -0.013399125076830387,
      0.06370151042938232,
      0.029320860281586647,
      -0.03608611971139908,
      -0.017154475674033165,
      0.02652595564723015,
      0.07322938740253448,
      0.01597110740840435,
      -0.011512259021401405,
      -0.025579247623682022,
      0.034165795892477036,
      -0.0461009182035923,
      -0.08352889120578766,
      -0.08572737127542496,
      0.05998189374804497,
      0.024744242429733276,
      0.09568005800247192,
      0.04071391373872757,
      -0.037037983536720276,
      -0.008769305422902107,
      -0.02277020551264286,
      -0.014237316325306892,
      -0.09063497930765152,
      -0.006028282921761274,
      -0.019611753523349762,
      -0.0084648123010993,
      -0.0863380879163742,
      -0.008237324655056,
      -1.1246136655941202e-32,
      0.034208182245492935,
      -0.01455903984606266,
      -0.06478682160377502,
      -0.080970898270607,
      -0.056553035974502563,
      -0.03574298322200775,
      0.02099158801138401,
      -0.02597646228969097,
      0.0963289737701416,
      0.05011618137359619,
      0.07332340627908707,
      0.02137448452413082,
      0.0002673743001651019,
      -0.10456628352403641,
      -0.04478410258889198,
      0.0641726404428482,
      -0.08159257471561432,
      -0.1175270825624466,
      -0.004992903675884008,
      0.07086314260959625,
      -0.01951746828854084,
      0.032684873789548874,
      0.08974311500787735,
      0.020850224420428276,
      -0.10536382347345352,
      0.01045948639512062,
      0.03823033720254898,
      0.025345388799905777,
      -0.045304812490940094,
      0.041498616337776184,
      0.021447312086820602,
      -0.020059814676642418,
      -0.0832294225692749,
      0.052526410669088364,
      -0.02918969839811325,
      -0.033960022032260895,
      -0.019747311249375343,
      0.042945586144924164,
      -0.025366999208927155,
      0.06154274567961693,
      0.08064346015453339,
      0.09597856551408768,
      -0.035477884113788605,
      -0.0006902996101416647,
      -0.03964946046471596,
      0.018113184720277786,
      0.0130805354565382,
      -0.04750605672597885,
      0.014631136320531368,
      -0.11143554002046585,
      0.024091074243187904,
      -0.01303012017160654,
      -0.027044545859098434,
      -0.017598247155547142,
      -0.0327875055372715,
      0.0024279507342725992,
      0.055590465664863586,
      -0.007376056630164385,
      0.011216862127184868,
      0.03378302603960037,
      0.11228694766759872,
      -0.06481550633907318,
      0.03318572789430618,
      0.05130995437502861,
      0.024340664967894554,
      0.02251817099750042,
      -0.11040007323026657,
      -0.07018017768859863,
      0.014315109699964523,
      0.052474286407232285,
      0.06760109215974808,
      -0.09539695084095001,
      -0.0014246352948248386,
      -0.03129309043288231,
      0.03925088793039322,
      0.03977598622441292,
      0.0630284994840622,
      0.012042755261063576,
      -0.010267953388392925,
      0.1177387535572052,
      -0.000721827382221818,
      0.0412619486451149,
      -0.0443979911506176,
      -0.022661559283733368,
      -0.04932026565074921,
      -0.039213135838508606,
      -0.033228643238544464,
      0.08509820699691772,
      0.03574209287762642,
      0.007538100238889456,
      -0.05294063687324524,
      0.016089405864477158,
      0.009575385600328445,
      0.029778283089399338,
      -0.002372763119637966,
      -5.570676364641258e-08,
      -0.10288313776254654,
      -0.045899830758571625,
      -0.04408537596464157,
      -0.008763713762164116,
      -0.004953925497829914,
      0.0494813397526741,
      0.03473084792494774,
      0.0062172506004571915,
      -0.05491267517209053,
      -0.0596432089805603,
      -0.001962368143722415,
      0.0003862693556584418,
      0.014349616132676601,
      -0.024471404030919075,
      0.05253613740205765,
      -0.11160129308700562,
      0.0050285267643630505,
      0.0557643286883831,
      -0.08159370720386505,
      -0.01988637074828148,
      0.0024193592835217714,
      0.01931125856935978,
      0.001484778244048357,
      -0.018811846151947975,
      0.07837025076150894,
      -0.05733625590801239,
      0.013422287069261074,
      -0.027891704812645912,
      -0.009782494977116585,
      0.1001468375325203,
      0.037081051617860794,
      0.016077494248747826,
      -0.019469209015369415,
      -0.013580447062849998,
      -0.04893001168966293,
      0.10941152274608612,
      -0.029900837689638138,
      0.028825359418988228,
      -3.9581926102982834e-05,
      0.0345560684800148,
      0.024041607975959778,
      0.056044574826955795,
      -0.07392039895057678,
      0.02086382545530796,
      0.046273015439510345,
      0.005769951269030571,
      0.026195984333753586,
      0.034177105873823166,
      0.07962284237146378,
      -0.038682837039232254,
      -0.04233201593160629,
      -0.04323716461658478,
      -0.07376525551080704,
      0.012193658389151096,
      -0.00033475292730145156,
      0.025594118982553482,
      -0.050784073770046234,
      0.0688687264919281,
      0.004889988340437412,
      -0.01590629480779171,
      -0.11378607153892517,
      0.016449308022856712,
      0.013919346034526825,
      -0.02442108653485775
    ],
    [
      -0.12087314575910568,
      0.0029247875791043043,
      -0.025191323831677437,
      0.09985445439815521,
      -0.02649485133588314,
      0.028328539803624153,
      0.029762843623757362,
      0.0647600069642067,
      0.01947094313800335,
      0.016019422560930252,
      0.06525339186191559,
      -0.07768243551254272,
      -0.04343681409955025,
      0.02720143087208271,
      0.039857592433691025,
      0.021142762154340744,
      -0.00885961763560772,
      -0.11164727807044983,
      -0.01592664234340191,
      -0.016254132613539696,
      0.0285759549587965,
      -0.03414102643728256,
      -0.05795520916581154,
      -0.029998252168297768,
      0.010751644149422646,
      0.006677356082946062,
      -0.08036582916975021,
      -0.03286915645003319,
      -0.02636166475713253,
      -0.005368503276258707,
      0.04977334663271904,
      -0.04006071761250496,
      0.02721068449318409,
      -0.047437477856874466,
      0.057708706706762314,
      0.04733802378177643,
      -0.08262620866298676,
      -0.06660918891429901,
      -0.026299061253666878,
      -0.0562020018696785,
      -0.05652865394949913,
      -0.01358839776366949,
      0.005152122117578983,
      -0.020446281880140305,
      0.04235944151878357,
      -0.0327572301030159,
      -0.0526481568813324,
      0.005114782601594925,
      -0.06817536056041718,
      0.016544755548238754,
      0.056375306099653244,
      0.07032030075788498,
      0.01915578730404377,
      0.07984840124845505,
      0.043764423578977585,
      0.10827505588531494,
      0.003269084030762315,
      -0.05782095715403557,
      -0.011273319832980633,
      -0.019668854773044586,
      0.003446132643148303,
      -0.03643593192100525,
      -0.0500570572912693,
      -0.027604566887021065,
      -0.09995477646589279,
      -0.02480492740869522,
      0.030846623703837395,
      0.021677851676940918,
      0.012552223168313503,
      -0.07305353879928589,
      0.04619225487112999,
      0.001131561934016645,
      0.0011146075557917356,
      -0.014841752126812935,
      0.09774639457464218,
      0.018885638564825058,
      0.027493327856063843,
      0.01370900310575962,
      -0.02836289070546627,
      -0.13142447173595428,
      0.001003182609565556,
      -0.07038174569606781,
      -0.023789167404174805,
      -0.04936453700065613,
      0.05008012801408768,
      -0.06020202487707138,
      -0.03320666775107384,
      -0.02170005813241005,
      0.13549265265464783,
      0.0741373598575592,
      0.010687615722417831,
      0.05739283189177513,
      -0.09441220015287399,
      -0.04877958446741104,
      -0.013631139881908894,
      0.021304810419678688,
      0.016955019906163216,
      0.00949761364609003,
      -0.11035487800836563,
      0.1387612670660019,
      0.008531171828508377,
      -0.047947123646736145,
      -0.01845693588256836,
      0.027927596122026443,
      0.03421611338853836,
      -0.058844778686761856,
      0.018010104075074196,
      -0.00778891472145915,
      -0.038869865238666534,
      -0.03918427973985672,
      -0.03020768240094185,
      0.0023592417128384113,
      0.11120591312646866,
      -0.05486762523651123,
      -0.054928284138441086,
      0.07019602507352829,
      0.012272282503545284,
      0.011846666224300861,
      0.04674055054783821,
      -0.05097299441695213,
      0.07197768241167068,
      0.04041624069213867,
      -0.015020884573459625,
      0.02573271282017231,
      -0.018240615725517273,
      0.03568682819604874,
      0.0354737862944603,
      1.1883192145949494e-32,
      -0.00043514251592569053,
      -0.0367310605943203,
      -0.049762845039367676,
      -0.06371990591287613,
      0.043495889753103256,
      0.02164599299430847,
      0.09320832788944244,
      0.053435422480106354,
      -0.092435821890831,
      0.015300187282264233,
      0.004557162988930941,
      0.12700122594833374,
      -0.02437538653612137,
      0.04043512046337128,
      0.016484951600432396,
      -0.13332770764827728,
      0.02056543529033661,
      0.0571054182946682,
      0.10773137956857681,
      -0.07350152730941772,
      0.03886398673057556,
      -0.04172592982649803,
      -0.008667673915624619,
      -0.04957295209169388,
      -0.01826121285557747,
      0.06550861150026321,
      -0.016575759276747704,
      -0.042803239077329636,
      -0.0240084957331419,
      0.012107528746128082,
      0.058057751506567,
      0.017635460942983627,
      0.02107878215610981,
      -0.06365155428647995,
      -0.017831947654485703,
      -0.024637533351778984,
      -0.041748177260160446,
      -0.05866014212369919,
      -0.05199640244245529,
      -0.10273324698209763,
      -0.030703546479344368,
      0.07757195830345154,
      -0.09756525605916977,
      -0.007219206541776657,
      -0.027550194412469864,
      -0.0540604405105114,
      0.06353618949651718,
      0.07759124785661697,
      0.10045254230499268,
      0.03470369055867195,
      0.012523625046014786,
      -0.024105392396450043,
      -0.013152733445167542,
      0.000816371466498822,
      -0.021001756191253662,
      0.0043602678924798965,
      -0.04358693212270737,
      0.07471560686826706,
      0.029119832441210747,
      -0.04518280178308487,
      0.016369732096791267,
      -0.001009910018183291,
      -0.013505724258720875,
      -0.03117135539650917,
      -0.08923839777708054,
      0.07682658731937408,
      -0.027313876897096634,
      -0.03585090488195419,
      -0.006712328176945448,
      0.03731122985482216,
      -0.0632406696677208,
      0.029004482552409172,
      0.0396963432431221,
      0.020728029310703278,
      0.007307129446417093,
      0.029738424345850945,
      0.01486508920788765,
      -0.00964344572275877,
      0.011673341505229473,
      -0.12815861403942108,
      -0.026146335527300835,
      -0.00599263422191143,
      0.08306557685136795,
      0.10167853534221649,
      0.056276191025972366,
      -0.021662047132849693,
      -0.0309496708214283,
      -0.016684886068105698,
      0.02696067839860916,
      -0.019109351560473442,
      -0.030793558806180954,
      -0.017245149239897728,
      0.0192574393004179,
      0.031745899468660355,
      0.052466753870248795,
      -1.1379994605773152e-32,
      0.03786535933613777,
      0.037530191242694855,
      -0.043202925473451614,
      -0.02943725697696209,
      0.019165009260177612,
      0.018730752170085907,
      -0.016692176461219788,
      0.006225479766726494,
      0.04171307757496834,
      -0.008366462774574757,
      -0.002193310298025608,
      0.07631420344114304,
      0.041976381093263626,
      -0.025985943153500557,
      -0.0023479426745325327,
      -0.0165980476886034,
      -0.037602417171001434,
      -0.04880641773343086,
      0.015743087977170944,
      -0.0002615599369164556,
      -0.023268193006515503,
      0.11328889429569244,
      -0.06205374002456665,
      0.022336753085255623,
      -0.03178776055574417,
      0.05238577350974083,
      0.08001016825437546,
      -0.004846672527492046,
      -0.06618734449148178,
      0.04080909490585327,
      -0.006571212783455849,
      -0.04147101938724518,
      -0.06769754737615585,
      -0.015869928523898125,
      0.0773010104894638,
      -0.011394831351935863,
      -0.004446601495146751,
      0.015121382661163807,
      -0.07644841074943542,
      0.15474388003349304,
      0.04655998572707176,
      0.032017845660448074,
      0.017392342910170555,
      0.06131541356444359,
      -0.012960626743733883,
      -0.005048257764428854,
      0.002233377890661359,
      -0.07895004749298096,
      0.02891971543431282,
      -0.05140618979930878,
      -0.05751952528953552,
      -0.046315837651491165,
      -0.03655556961894035,
      0.07629113644361496,
      -0.05566981062293053,
      0.028679532930254936,
      0.029437026008963585,
      -0.05865689367055893,
      0.037526603788137436,
      -0.04636694863438606,
      0.0667274072766304,
      -0.06036096438765526,
      0.027729660272598267,
      0.006746395491063595,
      0.11261234432458878,
      -0.020094839856028557,
      -0.028411488980054855,
      -0.045536160469055176,
      0.04183538258075714,
      0.002859619213268161,
      0.0820252001285553,
      -0.03912275657057762,
      0.03662927821278572,
      -0.10283670574426651,
      0.04591919109225273,
      0.10852181166410446,
      0.04216152802109718,
      -0.00938241183757782,
      0.021686051040887833,
      0.00036587321665138006,
      -0.02405448444187641,
      0.04634464159607887,
      0.08612089604139328,
      -0.08078569918870926,
      -0.05709968879818916,
      -0.043599288910627365,
      -0.01464034616947174,
      0.10268453508615494,
      -0.05478790029883385,
      0.05752311274409294,
      -0.05139397084712982,
      -0.031058503314852715,
      0.13025908172130585,
      0.05850683152675629,
      0.03723578900098801,
      -6.714503797411453e-08,
      -0.05547839775681496,
      -0.01174208428710699,
      -0.01608363725244999,
      0.0006917940336279571,
      0.034188102930784225,
      -0.014711673371493816,
      -0.0068852403201162815,
      -0.0245962031185627,
      -0.0750734955072403,
      -0.05577285215258598,
      0.05196457356214523,
      0.054886095225811005,
      -0.022452251985669136,
      -0.09130115807056427,
      0.0439419224858284,
      -0.04781198874115944,
      -0.022553835064172745,
      0.04984103888273239,
      -0.11336872726678848,
      -0.009083982557058334,
      0.020674312487244606,
      0.04001479968428612,
      0.00036627345252782106,
      -0.1405780166387558,
      -0.009179960004985332,
      -0.059835534542798996,
      0.023205384612083435,
      0.037836704403162,
      0.009003504179418087,
      0.0196691881865263,
      0.015659183263778687,
      -0.012904377654194832,
      0.05525556579232216,
      -0.005793222691863775,
      0.02894049882888794,
      0.10868342220783234,
      -0.008678625337779522,
      0.008641000837087631,
      0.028670301660895348,
      0.010713848285377026,
      -0.041026562452316284,
      -0.03742396458983421,
      -0.11591695249080658,
      -0.001430494012311101,
      0.03863702341914177,
      0.0438988171517849,
      -0.07313919812440872,
      -0.029484981670975685,
      0.02965683676302433,
      -0.012316142208874226,
      -0.057611167430877686,
      -0.042558904737234116,
      -0.030661476776003838,
      -0.00800488144159317,
      0.0056401933543384075,
      -0.01039147563278675,
      -0.008965980261564255,
      0.02406671829521656,
      -0.02613946609199047,
      -0.036011531949043274,
      0.03150242939591408,
      -0.06768612563610077,
      -0.04173925891518593,
      0.014950471930205822
    ],
    [
      -0.06825264543294907,
      -0.027353091165423393,
      -0.13708552718162537,
      0.10011342167854309,
      0.027825264260172844,
      -0.024137962609529495,
      -0.025670669972896576,
      0.16027051210403442,
      0.01780753582715988,
      -0.00575426546856761,
      -0.02879236824810505,
      -0.08110504597425461,
      -0.11182041466236115,
      0.014615730382502079,
      0.015917818993330002,
      -0.07558783143758774,
      0.010415718890726566,
      0.006748905871063471,
      0.03669561818242073,
      -0.007046892773360014,
      0.005001222714781761,
      -0.027642928063869476,
      0.008842425420880318,
      -0.02361779473721981,
      -0.03253697603940964,
      -0.020621920004487038,
      -0.02270631492137909,
      0.03008604608476162,
      0.03154294937849045,
      0.08184292912483215,
      0.04063792526721954,
      0.04549108445644379,
      -0.09388326108455658,
      -0.030573882162570953,
      0.06041445955634117,
      -0.006988858804106712,
      0.041271403431892395,
      -0.037763286381959915,
      -0.06914988160133362,
      -0.024300873279571533,
      -0.003424515714868903,
      -0.07414569705724716,
      -0.033553048968315125,
      -0.044187095016241074,
      0.010400242172181606,
      -0.12225785106420517,
      0.013893082737922668,
      0.12030342221260071,
      0.05054694786667824,
      0.011733154766261578,
      -0.019038155674934387,
      0.03383633866906166,
      -0.023251108825206757,
      -0.024565869942307472,
      0.06243612617254257,
      0.019960543140769005,
      0.07156749814748764,
      0.02660997398197651,
      -0.009226813912391663,
      -0.07329431176185608,
      -0.03503943607211113,
      -0.02557174116373062,
      -0.07015155255794525,
      -0.014933829195797443,
      -0.03611525893211365,
      0.0293363519012928,
      0.054261136800050735,
      0.07586237788200378,
      0.0299302339553833,
      -0.05795813724398613,
      -0.06409361958503723,
      0.0058377934619784355,
      0.028013821691274643,
      -0.019372450187802315,
      0.04404566064476967,
      0.048599228262901306,
      0.081202432513237,
      0.08122728765010834,
      0.035471804440021515,
      -0.16369925439357758,
      0.06288743764162064,
      -0.04225234314799309,
      0.007310590706765652,
      -0.04853295907378197,
      0.004695093259215355,
      0.009917045012116432,
      0.06925476342439651,
      0.05984744057059288,
      0.09532643854618073,
      0.0701892301440239,
      0.07658227533102036,
      0.0192914679646492,
      -0.09487205743789673,
      0.0028772386722266674,
      0.020681215450167656,
      0.07694084942340851,
      -0.004424307961016893,
      0.06359194219112396,
      -0.001022979966364801,
      0.04960872232913971,
      -0.04509475827217102,
      -0.0927962064743042,
      -0.05356388911604881,
      0.06786391139030457,
      -0.020349860191345215,
      -0.04505596682429314,
      0.007197769824415445,
      0.016245627775788307,
      0.029132409021258354,
      -0.05962755158543587,
      0.008715039119124413,
      0.03429575264453888,
      -0.0503881573677063,
      -0.05974506214261055,
      0.015955990180373192,
      0.0012372552882879972,
      0.026132142171263695,
      -0.07233361154794693,
      0.03991437703371048,
      0.043313976377248764,
      0.03308004513382912,
      0.019014332443475723,
      -0.07334503531455994,
      0.053749311715364456,
      0.020766662433743477,
      -0.03968771547079086,
      0.031054923310875893,
      3.47532186489923e-33,
      0.002370276255533099,
      0.06358404457569122,
      0.01957189291715622,
      0.022221943363547325,
      -0.015389651991426945,
      -0.007559848017990589,
      0.06902404874563217,
      0.06210482120513916,
      -0.07241211086511612,
      0.07616671919822693,
      -0.017125824466347694,
      -0.01628713309764862,
      -0.04182850196957588,
      -0.048136502504348755,
      -0.043595898896455765,
      -0.1240290105342865,
      0.018240468576550484,
      -0.04308728128671646,
      0.07446346431970596,
      -0.00206415425054729,
      0.07487775385379791,
      0.009402507916092873,
      0.06091044843196869,
      -0.015541119500994682,
      -0.006952462252229452,
      0.07450523972511292,
      -0.03175036609172821,
      -0.0003996780433226377,
      0.028463464230298996,
      0.0496106892824173,
      0.01910541020333767,
      -0.07244350761175156,
      0.03665803000330925,
      0.024283336475491524,
      0.011071363463997841,
      -0.09041411429643631,
      0.00038631842471659184,
      -0.05387566611170769,
      -0.1090603768825531,
      -0.04039525240659714,
      0.01180125679820776,
      -0.04105698689818382,
      -0.025015434250235558,
      0.023616116493940353,
      -0.029459426179528236,
      -0.0881633460521698,
      0.04198331758379936,
      0.009159957990050316,
      0.08741103857755661,
      -0.06122037395834923,
      -0.04703985154628754,
      0.0454656258225441,
      -0.048204027116298676,
      -0.025850815698504448,
      0.07448139786720276,
      -0.0479070283472538,
      -0.032705437391996384,
      -0.033510975539684296,
      0.06029037758708,
      -0.005617490503937006,
      -0.02414788492023945,
      0.0089761633425951,
      -0.018452560529112816,
      0.01174573041498661,
      0.006076639052480459,
      0.06174097955226898,
      -0.036003924906253815,
      -0.0466703437268734,
      -0.043560341000556946,
      0.006437016185373068,
      0.03375398740172386,
      -0.02353937365114689,
      0.1070738211274147,
      0.10044842958450317,
      0.11370199173688889,
      0.04724114388227463,
      0.08447667956352234,
      0.02419872395694256,
      0.017183205112814903,
      -0.06297768652439117,
      -0.09390610456466675,
      0.0022668978199362755,
      0.011384950019419193,
      0.025849604979157448,
      -0.02612874284386635,
      0.0036684887018054724,
      -0.038058485835790634,
      0.006456627044826746,
      0.05349670723080635,
      -0.08592575788497925,
      0.032512713223695755,
      -0.048481766134500504,
      -0.013988886959850788,
      -0.07667765766382217,
      0.04229910299181938,
      -4.4857070138889885e-33,
      -0.011025877669453621,
      0.06973634660243988,
      -0.02567211352288723,
      -0.04208901524543762,
      -0.09168567508459091,
      -0.0027029779739677906,
      -0.03759698569774628,
      -0.0360485203564167,
      0.059650909155607224,
      0.06023697182536125,
      -0.012798501178622246,
      0.004329226911067963,
      -0.026008889079093933,
      -0.06885935366153717,
      -0.029683342203497887,
      -0.003138874424621463,
      -0.008214999921619892,
      -0.059463948011398315,
      0.014582677744328976,
      0.0005024024285376072,
      -0.06562890112400055,
      -0.003228166839107871,
      0.03500378504395485,
      0.02308049239218235,
      -0.129820317029953,
      -0.005467395763844252,
      0.05979808419942856,
      0.03033256344497204,
      -0.08598725497722626,
      0.06791215389966965,
      -0.004105028230696917,
      -0.010461640544235706,
      -0.06724553555250168,
      -0.02313464693725109,
      -0.05101373791694641,
      -0.03301677107810974,
      0.07215731590986252,
      0.04165337607264519,
      -0.027018873021006584,
      0.04172961413860321,
      0.03326674550771713,
      0.03951167315244675,
      -0.039646703749895096,
      -0.021248141303658485,
      -0.01041231956332922,
      -0.031688541173934937,
      -2.0950801626895554e-06,
      -0.11037096381187439,
      0.05844496190547943,
      -0.04177278280258179,
      0.005363635718822479,
      0.018235305324196815,
      -0.02801518514752388,
      0.03263753280043602,
      -0.09644005447626114,
      0.0028254841454327106,
      0.06411024183034897,
      0.008070598356425762,
      0.04180017486214638,
      0.07037349790334702,
      0.0827610045671463,
      -0.06342875212430954,
      0.0012249865103513002,
      0.06407016515731812,
      0.10415295511484146,
      -0.01853605918586254,
      -0.0156890656799078,
      3.935857239412144e-05,
      0.04442284256219864,
      0.05711435154080391,
      -0.022976038977503777,
      -0.02566773071885109,
      0.0021768808364868164,
      0.044548556208610535,
      0.05704425275325775,
      0.08344206213951111,
      0.014772316440939903,
      0.008436299860477448,
      0.023588668555021286,
      0.09834355860948563,
      0.04701976478099823,
      0.015167108736932278,
      -0.003307986306026578,
      -0.05254027247428894,
      -0.051852136850357056,
      -0.08946676552295685,
      0.03714917600154877,
      0.02570989355444908,
      -0.0056983730755746365,
      -0.048161525279283524,
      -0.05816046893596649,
      0.006077579688280821,
      0.05425266548991203,
      -0.01769452914595604,
      0.03407662734389305,
      -5.81617776163057e-08,
      -0.07827132940292358,
      0.0029067036230117083,
      -0.018763815984129906,
      0.04575013741850853,
      -0.038978222757577896,
      -0.017830997705459595,
      -0.005408552009612322,
      -0.0362807959318161,
      -0.07557830214500427,
      0.03273547813296318,
      -0.09040792286396027,
      -0.017178012058138847,
      0.04677411913871765,
      -0.044644735753536224,
      -0.02848029136657715,
      -0.03468358889222145,
      0.03239685297012329,
      0.048076238483190536,
      -0.05272025242447853,
      -0.057369884103536606,
      0.0766073688864708,
      0.06287461519241333,
      0.026260221377015114,
      -0.03487851470708847,
      0.04361235350370407,
      0.01250582467764616,
      0.04915691539645195,
      0.03753567859530449,
      0.07018738985061646,
      0.027745382860302925,
      -0.017372582107782364,
      0.017628677189350128,
      0.005031938198953867,
      -0.00034988854895345867,
      -0.06405267119407654,
      0.014454162679612637,
      -0.021751487627625465,
      0.06467367708683014,
      -0.0006131422123871744,
      0.07117706537246704,
      -0.03632034733891487,
      0.09081456065177917,
      -0.09561841189861298,
      -0.0034201405942440033,
      0.0733855590224266,
      0.013291449286043644,
      -0.13916119933128357,
      -0.010571558028459549,
      0.021088548004627228,
      -0.044664397835731506,
      0.09870042651891708,
      0.02878308668732643,
      -0.04302208125591278,
      0.00991467759013176,
      0.025893397629261017,
      -0.027575097978115082,
      -0.0636933371424675,
      0.05578933283686638,
      -0.029389910399913788,
      -0.04301983863115311,
      -0.05480007454752922,
      -0.020504744723439217,
      -0.029242847114801407,
      -0.04613950103521347
    ],
    [
      -0.06263183057308197,
      0.004588134121149778,
      -0.07671153545379639,
      -0.019440272822976112,
      0.03622430935502052,
      0.03012588806450367,
      0.0019315675599500537,
      0.03677225485444069,
      -0.025619806721806526,
      0.0007936034817248583,
      0.045361489057540894,
      -0.05402413755655289,
      -0.06266195327043533,
      0.03769887611269951,
      0.06801392883062363,
      0.010011672973632812,
      -0.025525927543640137,
      0.06440749019384384,
      -0.042345594614744186,
      0.02351975254714489,
      0.045653000473976135,
      -0.02699337899684906,
      0.011828060261905193,
      -0.03148506581783295,
      0.07674550265073776,
      0.04788194224238396,
      -0.018859505653381348,
      0.034763265401124954,
      0.002123844576999545,
      -0.002536880550906062,
      -0.003936324268579483,
      -0.049314018338918686,
      -0.06324324011802673,
      -0.024725038558244705,
      0.040000442415475845,
      0.0488845556974411,
      -0.11194892227649689,
      -0.0951043963432312,
      -0.07499505579471588,
      0.03609393164515495,
      -0.004317244980484247,
      0.01253573875874281,
      -0.06353846192359924,
      -0.0931403711438179,
      -0.07198844105005264,
      -0.05499749630689621,
      -0.012982078827917576,
      -0.028327954933047295,
      0.031491104513406754,
      -0.02801337093114853,
      -0.031001560389995575,
      0.002966082887724042,
      -0.0044986046850681305,
      -0.046346526592969894,
      -0.08032426983118057,
      0.03854718804359436,
      0.024389395490288734,
      -0.023595565930008888,
      0.016475901007652283,
      -0.05730559676885605,
      -0.0247956570237875,
      0.005532374605536461,
      0.06427700817584991,
      -0.012265062890946865,
      0.00461425818502903,
      0.021695006638765335,
      0.02868778631091118,
      0.10949856042861938,
      -0.01771334744989872,
      -0.047937046736478806,
      0.023988286033272743,
      -0.05855131894350052,
      -0.019959455356001854,
      -0.02308782748878002,
      0.021351506933569908,
      -0.10484851896762848,
      -0.013337910175323486,
      0.03967464342713356,
      -0.031664516776800156,
      -0.14161494374275208,
      -0.054239921271800995,
      -0.08762478083372116,
      0.005172146484255791,
      0.07470223307609558,
      0.05735081434249878,
      0.0633443295955658,
      0.05280226096510887,
      0.031622808426618576,
      0.1324201077222824,
      0.022301053628325462,
      -0.027190880849957466,
      0.0056943269446492195,
      -0.002070898190140724,
      0.07781755179166794,
      -0.04431076720356941,
      0.061507757753133774,
      -0.033685553818941116,
      0.011852136813104153,
      -0.07546737045049667,
      0.13851061463356018,
      -0.003953722305595875,
      -0.026164919137954712,
      0.007964354939758778,
      0.07808568328619003,
      0.030244437977671623,
      -0.02608012780547142,
      0.023748334497213364,
      0.029783179983496666,
      0.01883481629192829,
      0.009937891736626625,
      0.04182695224881172,
      0.051464151591062546,
      0.004659916739910841,
      -0.0846777930855751,
      -0.05117442086338997,
      0.011452113278210163,
      0.03672366216778755,
      0.0040942104533314705,
      0.11701095849275589,
      0.04236694797873497,
      0.16413789987564087,
      -0.025215234607458115,
      -0.08844716846942902,
      0.04628737270832062,
      -0.02951614186167717,
      -0.06202613562345505,
      -0.00960266962647438,
      4.072840704443569e-33,
      -0.024598343297839165,
      -0.07584866881370544,
      0.012751498259603977,
      0.034964025020599365,
      -0.0060293786227703094,
      0.0485089085996151,
      0.02902415581047535,
      0.060580309480428696,
      -0.10903654247522354,
      -0.05121740326285362,
      -0.06406068056821823,
      0.04203217476606369,
      -0.0267109926789999,
      0.0017465553246438503,
      -0.05774311721324921,
      -0.12393148988485336,
      -0.00901481881737709,
      -0.018307136371731758,
      0.10284262895584106,
      -0.018988078460097313,
      0.03168310970067978,
      0.002204652177169919,
      -0.0038093130569905043,
      0.059707507491111755,
      -0.040673039853572845,
      0.05434461683034897,
      0.010038675740361214,
      0.0010752232046797872,
      -0.07762052863836288,
      0.027880927547812462,
      0.10069657862186432,
      0.01630464568734169,
      0.0473390556871891,
      -0.00923540722578764,
      -0.05237099155783653,
      0.037939950823783875,
      -0.045312169939279556,
      -0.03992757201194763,
      -0.022170964628458023,
      -0.042997147887945175,
      -0.0010934848105534911,
      -0.007174930535256863,
      -0.049453213810920715,
      -0.007701927330344915,
      -0.07007298618555069,
      -0.07357783615589142,
      0.07749330997467041,
      0.06129572167992592,
      0.05015604570508003,
      -0.020584911108016968,
      -0.04927686229348183,
      -0.00042098245467059314,
      -0.00539292860776186,
      0.02290552668273449,
      -0.04351681470870972,
      -0.022533435374498367,
      -0.10353237390518188,
      0.009970545768737793,
      0.05440163239836693,
      -0.07030043005943298,
      -0.03302763029932976,
      0.03165994584560394,
      0.04956173524260521,
      -0.018703963607549667,
      -0.024696888402104378,
      0.06583862751722336,
      -0.05765384063124657,
      0.017597291618585587,
      -0.05077653005719185,
      -0.04229963198304176,
      -0.05169115215539932,
      0.00882143434137106,
      0.040427226573228836,
      -0.03004670888185501,
      0.011971873231232166,
      -0.03627079352736473,
      0.004019575659185648,
      -0.01750406250357628,
      0.010893586091697216,
      -0.05048174038529396,
      -0.014977197162806988,
      -0.0369906947016716,
      -0.051131412386894226,
      -0.03175169974565506,
      0.004253331106156111,
      0.004619625862687826,
      0.07097738981246948,
      8.567215991206467e-05,
      0.06286045908927917,
      0.042056381702423096,
      0.012426743283867836,
      0.012244950979948044,
      0.00021221961651463062,
      -0.053277622908353806,
      -0.02464335970580578,
      -5.054757951650304e-33,
      -0.02936629392206669,
      0.028565112501382828,
      -0.018732359632849693,
      0.044907014816999435,
      -0.007567004766315222,
      0.06871943175792694,
      0.031290266662836075,
      -0.027915069833397865,
      -0.016411414369940758,
      0.09762164205312729,
      -0.0347592793405056,
      0.02073109708726406,
      -0.04167446121573448,
      -0.06818126887083054,
      0.0714057981967926,
      0.07608026266098022,
      -0.0043878015130758286,
      0.025277070701122284,
      0.05066763237118721,
      -0.05767300724983215,
      0.007419009227305651,
      0.06861767172813416,
      -0.11525234580039978,
      0.025710243731737137,
      -0.010094800032675266,
      -0.04138796031475067,
      0.027404310181736946,
      -0.004792808089405298,
      -0.029230644926428795,
      0.04706433787941933,
      -0.031993765383958817,
      0.022427331656217575,
      -0.12170055508613586,
      0.028560295701026917,
      0.05572862923145294,
      0.023152098059654236,
      0.00023666859488002956,
      0.007981630973517895,
      -0.07341743260622025,
      -0.011164885014295578,
      -0.015425514429807663,
      -0.03444049879908562,
      -0.04077108949422836,
      0.017498670145869255,
      -0.017983021214604378,
      0.06022221967577934,
      0.07856330275535583,
      0.00657679932191968,
      0.03211578354239464,
      0.018942922353744507,
      0.07000695914030075,
      -0.07018136233091354,
      -0.012290602549910545,
      0.041806355118751526,
      -0.07929275184869766,
      0.036546073853969574,
      0.022102482616901398,
      0.005384244956076145,
      -0.029848869889974594,
      -0.025537988170981407,
      -0.04374309256672859,
      -0.05776354297995567,
      0.02081243321299553,
      -0.022829877212643623,
      -0.021786831319332123,
      -0.04628696292638779,
      -0.016483241692185402,
      0.03418577089905739,
      0.06894049048423767,
      -0.04017164185643196,
      0.005471863783895969,
      0.09785547107458115,
      0.14253371953964233,
      -0.1196734756231308,
      -0.011685534380376339,
      0.056817978620529175,
      0.06873837858438492,
      0.01228186022490263,
      -0.04320003464818001,
      -0.03129119426012039,
      0.05951836332678795,
      0.07882992923259735,
      0.08410415798425674,
      -0.14078950881958008,
      -0.06309060752391815,
      0.021550992503762245,
      0.024601059034466743,
      0.1634083092212677,
      -0.05746014788746834,
      -0.020748158916831017,
      -0.021167200058698654,
      -0.0003776853554882109,
      0.0728691816329956,
      0.022952791303396225,
      0.037350449711084366,
      -4.9023181958318673e-08,
      -0.08075214922428131,
      6.838139233877882e-05,
      -0.007857360877096653,
      0.009896616451442242,
      0.0004404541396070272,
      -0.009044373407959938,
      0.08240669220685959,
      0.048396579921245575,
      -0.04203984886407852,
      -0.017947612330317497,
      0.11723156273365021,
      0.06608769297599792,
      -0.008335326798260212,
      0.0064130122773349285,
      -0.003888593288138509,
      0.07966452836990356,
      -0.042252492159605026,
      0.1370900720357895,
      -0.039800070226192474,
      0.008654671721160412,
      0.06609150767326355,
      0.05423054099082947,
      0.05149701237678528,
      -0.024144494906067848,
      0.018527206033468246,
      0.03543510660529137,
      -0.048405665904283524,
      0.04145422205328941,
      -0.04118026793003082,
      -0.05429410934448242,
      0.02781963348388672,
      -0.008721048943698406,
      0.016332576051354408,
      -0.09323820471763611,
      -0.01258155982941389,
      0.023151885718107224,
      -0.005050045438110828,
      -0.037599291652441025,
      0.027982555329799652,
      -0.030510131269693375,
      -0.03276824206113815,
      -0.05455698072910309,
      -0.04996466264128685,
      0.04942825436592102,
      -0.0005045198486186564,
      -0.02882051095366478,
      -0.14951294660568237,
      0.04517465829849243,
      -0.004839831963181496,
      -0.021005528047680855,
      0.0330912247300148,
      -0.005019939970225096,
      -0.023320315405726433,
      0.00559997046366334,
      -0.035281550139188766,
      0.0031757752876728773,
      0.030972972512245178,
      -0.06740696728229523,
      -0.09720934927463531,
      -0.027192411944270134,
      0.05193329602479935,
      0.0017213242826983333,
      -0.022220151498913765,
      0.009525847621262074
    ],
    [
      -0.046511948108673096,
      -0.051753707230091095,
      -0.10613211989402771,
      0.04555350914597511,
      0.050097521394491196,
      -0.02844271995127201,
      0.03975547477602959,
      0.07181776314973831,
      -0.03902856633067131,
      -0.04042057693004608,
      0.04544700309634209,
      0.0005595163675025105,
      -0.056215573102235794,
      -0.02711259387433529,
      0.04571479186415672,
      -0.03522861376404762,
      -0.024278024211525917,
      0.041279908269643784,
      -0.03201071918010712,
      0.020561575889587402,
      0.05580293759703636,
      -0.04502014443278313,
      0.05501797795295715,
      -0.04991171509027481,
      -0.03868763893842697,
      0.05464303866028786,
      -0.04052017256617546,
      -0.018100323155522346,
      -0.011219611391425133,
      0.008349970914423466,
      0.022755049169063568,
      -0.04190674051642418,
      -0.07557373493909836,
      -0.03728463128209114,
      0.07867974042892456,
      0.07637862861156464,
      -0.04461856931447983,
      -0.0933976024389267,
      -0.08023598790168762,
      0.030659066513180733,
      0.024350067600607872,
      0.007856950163841248,
      -0.09852466732263565,
      -0.0838184803724289,
      -0.03165920823812485,
      -0.049491483718156815,
      -0.02858816087245941,
      0.017046431079506874,
      0.0014202832244336605,
      -0.03013271652162075,
      -0.08841727674007416,
      0.05720040947198868,
      -0.03203173726797104,
      -0.04170884191989899,
      -0.005178217776119709,
      0.013313574716448784,
      0.045409973710775375,
      -0.03102465160191059,
      -0.02275311015546322,
      -0.022074902430176735,
      -0.07965611666440964,
      0.004586989991366863,
      0.027087772265076637,
      -0.010848753154277802,
      0.03130968287587166,
      0.054981641471385956,
      -0.03422391787171364,
      0.09121130406856537,
      -0.0009620345663279295,
      -0.028914397582411766,
      -0.05214643105864525,
      -0.039061788469552994,
      -0.03267451748251915,
      0.0276936125010252,
      0.00536764319986105,
      -0.14956001937389374,
      0.03130592778325081,
      0.06477320939302444,
      -0.07498305290937424,
      -0.17553631961345673,
      -0.043593063950538635,
      -0.1195889487862587,
      0.04453181475400925,
      0.05166242644190788,
      0.02827763743698597,
      0.09652634710073471,
      -0.0019638310186564922,
      0.053469881415367126,
      0.07975099235773087,
      0.06275402009487152,
      0.009920117445290089,
      -0.007121250964701176,
      -0.043138954788446426,
      0.08181371539831161,
      -0.016419637948274612,
      0.08234664052724838,
      0.047308821231126785,
      0.0735827386379242,
      -0.04683930054306984,
      0.10341456532478333,
      0.005576232448220253,
      -0.006602747365832329,
      0.031738750636577606,
      0.059574078768491745,
      0.005087387282401323,
      -0.05443736910820007,
      0.03260042890906334,
      0.03401472792029381,
      0.047860145568847656,
      -0.018430376425385475,
      0.06792569905519485,
      0.04030342772603035,
      -0.0297490656375885,
      -0.05896027386188507,
      -0.016872840002179146,
      -0.03713228553533554,
      0.05911901593208313,
      -0.048383262008428574,
      0.13978202641010284,
      0.11722474545240402,
      0.11891157180070877,
      -0.018609777092933655,
      -0.06840228289365768,
      0.04633329063653946,
      -0.012032747268676758,
      -0.053553517907857895,
      0.0023128248285502195,
      5.2247314960433295e-33,
      -0.06967198103666306,
      -0.06595108658075333,
      0.01413855329155922,
      0.012766736559569836,
      0.008487101644277573,
      -0.008386191911995411,
      0.055173102766275406,
      0.04857523366808891,
      -0.07631824910640717,
      0.019645005464553833,
      -0.05759367346763611,
      0.0077323610894382,
      -0.04767455905675888,
      0.01984597183763981,
      -0.07779105752706528,
      -0.07070305198431015,
      -0.02612392231822014,
      -0.021375978365540504,
      0.11005867272615433,
      0.030908333137631416,
      0.041047632694244385,
      0.0023054610937833786,
      0.04465439170598984,
      0.053490251302719116,
      -0.04424494132399559,
      0.03272820636630058,
      -0.012131763622164726,
      0.05572592467069626,
      0.030928149819374084,
      0.027355410158634186,
      0.12053000181913376,
      -0.019035279750823975,
      -0.0270393043756485,
      -0.0009050244116224349,
      -0.03557209298014641,
      -0.04097282513976097,
      -0.050833482295274734,
      -0.053703658282756805,
      -0.10684110969305038,
      -0.0453750416636467,
      0.022497793659567833,
      -0.04937123507261276,
      -0.011511153541505337,
      0.02710498496890068,
      -0.07794345170259476,
      -0.08576653152704239,
      0.05025249347090721,
      0.045594241470098495,
      7.823860505595803e-05,
      -0.009988327510654926,
      -0.04451167583465576,
      0.025473181158304214,
      0.012864439748227596,
      0.06006364896893501,
      -0.023727333173155785,
      -0.050900187343358994,
      -0.07299114763736725,
      -0.0373108834028244,
      0.0649971216917038,
      -0.051658082753419876,
      0.0020698674488812685,
      0.025404049083590508,
      0.056766439229249954,
      -0.006517546251416206,
      0.023212570697069168,
      0.03859521821141243,
      -0.0324849858880043,
      0.03311345726251602,
      -0.04188738390803337,
      -0.06719262897968292,
      -0.03646641969680786,
      -0.013309814035892487,
      0.12128512561321259,
      0.0554950088262558,
      0.03137617185711861,
      0.005547191482037306,
      -0.04000861942768097,
      -0.030348194763064384,
      0.012778639793395996,
      -0.055328644812107086,
      0.0003035806876141578,
      0.04583018273115158,
      -0.010106474161148071,
      -0.029287107288837433,
      -0.04108799621462822,
      0.03382435813546181,
      0.06483612209558487,
      -0.04545168578624725,
      0.07050252705812454,
      0.026088209822773933,
      0.035074383020401,
      0.003100294852629304,
      -0.04901191592216492,
      -0.1399780809879303,
      -0.009595351293683052,
      -5.689449228645505e-33,
      -0.0077112289145588875,
      -0.023316873237490654,
      -0.042517393827438354,
      -0.0004031894786749035,
      -0.05549221858382225,
      0.00702913012355566,
      -0.021800976246595383,
      0.02963162586092949,
      0.10880466550588608,
      0.06147230416536331,
      -0.015766004100441933,
      0.017674949020147324,
      -0.001906904042698443,
      -0.0747549906373024,
      0.0823761522769928,
      0.11109037697315216,
      -0.012000891380012035,
      -0.01034641731530428,
      0.06019618734717369,
      -0.06531302630901337,
      -0.030786586925387383,
      0.02226884849369526,
      -0.0558149479329586,
      0.023932313546538353,
      -0.08561151474714279,
      0.0034899211023002863,
      0.03291549161076546,
      0.04827325418591499,
      -0.03907184302806854,
      -0.023558901622891426,
      -0.011795170605182648,
      0.012710273265838623,
      -0.08179591596126556,
      0.06466107815504074,
      0.0006515102577395737,
      0.039222512394189835,
      -0.027419425547122955,
      0.03967892378568649,
      -0.05476982891559601,
      0.0074042887426912785,
      0.03338063508272171,
      0.022331513464450836,
      -0.01831088773906231,
      -0.015238103456795216,
      -0.007866187952458858,
      0.06546377390623093,
      0.01387473288923502,
      -0.019847795367240906,
      -0.011481469497084618,
      -0.009823408909142017,
      0.04513430595397949,
      -0.06512701511383057,
      -0.030656937509775162,
      -0.04511576145887375,
      -0.044181808829307556,
      0.04926993325352669,
      0.09785151481628418,
      0.015764085575938225,
      -0.04940216243267059,
      -0.03857913613319397,
      0.016876358538866043,
      -0.0873795673251152,
      0.011750085279345512,
      -0.0032666742336004972,
      0.007921170443296432,
      -0.04940326511859894,
      0.01533480267971754,
      -0.010251885280013084,
      0.05428691580891609,
      -0.028340021148324013,
      -0.04841150715947151,
      0.01724301464855671,
      0.04259917512536049,
      -0.05494718998670578,
      0.029795026406645775,
      0.09039273113012314,
      0.051914047449827194,
      0.013219072483479977,
      -0.05411037802696228,
      -0.03082205168902874,
      0.0794820711016655,
      0.0369616337120533,
      0.050154488533735275,
      -0.08894322067499161,
      -0.017779823392629623,
      -0.040051162242889404,
      0.00914314016699791,
      0.13459575176239014,
      -0.08256719261407852,
      -0.03131979703903198,
      0.012245974503457546,
      0.019309500232338905,
      0.04211561754345894,
      0.043438658118247986,
      0.03023431822657585,
      -5.197486885322178e-08,
      -0.13318641483783722,
      -0.05055020749568939,
      -0.010217036120593548,
      0.03838406875729561,
      -0.012783525511622429,
      -0.03025236912071705,
      0.07537846267223358,
      0.021083179861307144,
      -0.05230363458395004,
      -0.046784285455942154,
      0.02168450877070427,
      0.03847925364971161,
      0.009858038276433945,
      0.005242730490863323,
      -0.002706404309719801,
      0.0716545358300209,
      -0.017014047130942345,
      0.0656045451760292,
      -0.059049442410469055,
      -0.041241519153118134,
      0.05703552067279816,
      0.07928428053855896,
      0.044141653925180435,
      0.04329276457428932,
      0.07862171530723572,
      0.06855141371488571,
      -0.02840406820178032,
      0.040415458381175995,
      -0.042288631200790405,
      -0.06015831604599953,
      0.008459165692329407,
      -0.0014415013138204813,
      0.018941624090075493,
      -0.0701606422662735,
      0.018851855769753456,
      0.009003900922834873,
      -0.01427528541535139,
      -0.03320950269699097,
      0.010593656450510025,
      0.024568980559706688,
      0.004092036746442318,
      -0.023799177259206772,
      -0.07584576308727264,
      0.04203648492693901,
      0.04164036735892296,
      -0.049603015184402466,
      -0.17200756072998047,
      0.04085587337613106,
      0.005948930978775024,
      -0.012809607200324535,
      0.03253684937953949,
      0.040710773319005966,
      0.017385555431246758,
      -0.000506702228449285,
      -0.06369379907846451,
      0.003210191847756505,
      -0.00837281346321106,
      -0.019367316737771034,
      -0.04308302327990532,
      0.015454081818461418,
      0.030994117259979248,
      0.0554853230714798,
      0.044376809149980545,
      0.012690125964581966
    ],
    [
      -0.05651288852095604,
      -0.04950069263577461,
      -0.07674887776374817,
      0.08129844814538956,
      0.04180963337421417,
      0.0205337256193161,
      -0.05379587039351463,
      0.0999748557806015,
      0.03920619934797287,
      0.013826470822095871,
      -0.07623027265071869,
      -0.07989266514778137,
      0.03218595311045647,
      -0.024404309689998627,
      0.03355734422802925,
      -0.09389057755470276,
      -0.04395734518766403,
      0.011670700274407864,
      -0.004066001158207655,
      -0.0554836168885231,
      0.022813690826296806,
      -0.013418896123766899,
      0.03082476556301117,
      0.037454597651958466,
      0.09694405645132065,
      -0.03492352366447449,
      -0.0157379861921072,
      0.0010676748352125287,
      0.03391958400607109,
      0.025745809078216553,
      -0.007196343969553709,
      -0.05704076215624809,
      0.030861536040902138,
      0.009690871462225914,
      -0.0016471503768116236,
      -0.04514899104833603,
      0.07379597425460815,
      -0.02051401138305664,
      0.02254435233771801,
      -0.027911890298128128,
      0.02011672407388687,
      -0.071775883436203,
      -0.00851108506321907,
      -0.08247755467891693,
      0.003965119831264019,
      -0.04302458465099335,
      -0.06339218467473984,
      0.10508107393980026,
      0.002348799491301179,
      0.05906771495938301,
      -0.01812664419412613,
      -0.018397286534309387,
      0.002799760550260544,
      0.0033048109617084265,
      0.04898921772837639,
      0.022180011495947838,
      0.14454001188278198,
      0.10011857002973557,
      0.04529473930597305,
      -0.031484488397836685,
      -0.015855863690376282,
      0.007944843731820583,
      -0.03290998190641403,
      -0.002945094835013151,
      -0.04122219234704971,
      0.009090051986277103,
      0.015585359185934067,
      0.020903881639242172,
      0.007088559214025736,
      -0.004767884034663439,
      -0.06339612603187561,
      -0.00626168679445982,
      0.07937248051166534,
      -0.09930368512868881,
      -0.015485921874642372,
      -0.04293361306190491,
      0.039299048483371735,
      -0.0032494000624865294,
      0.023945467546582222,
      -0.05099004507064819,
      -0.004378922283649445,
      -0.08233629912137985,
      -0.03659628704190254,
      -0.06850405037403107,
      0.02499476633965969,
      -0.06296011060476303,
      0.10253604501485825,
      0.00950252078473568,
      0.029869522899389267,
      0.006280978210270405,
      -0.014192036353051662,
      0.06605654209852219,
      0.018744299188256264,
      0.052490320056676865,
      0.06809429824352264,
      0.12583214044570923,
      -0.057514738291502,
      0.042515695095062256,
      0.03402048721909523,
      0.06084180995821953,
      -0.014637227170169353,
      0.02935020439326763,
      -0.09660401940345764,
      -0.005433494225144386,
      0.0330800861120224,
      -0.08591859042644501,
      0.006018819287419319,
      0.028139900416135788,
      0.01761258952319622,
      -0.012538984417915344,
      -0.014470163732767105,
      0.01680082455277443,
      0.015172750689089298,
      -0.060614269226789474,
      -0.033910121768713,
      -0.033254824578762054,
      0.10152885317802429,
      -0.08916853368282318,
      0.013330764137208462,
      0.025146132335066795,
      0.05238451808691025,
      -0.005167459137737751,
      -0.053910039365291595,
      0.057496700435876846,
      0.02900167927145958,
      -0.03060857579112053,
      0.09698193520307541,
      6.228010781682367e-33,
      -0.10211718827486038,
      -0.03904983773827553,
      0.046526454389095306,
      -0.06577297300100327,
      -0.06769391894340515,
      0.07519594579935074,
      -0.006369053386151791,
      0.06921137869358063,
      0.01475758757442236,
      0.017893856391310692,
      -0.006821368355304003,
      -0.009397486224770546,
      -0.018864864483475685,
      0.0053743100725114346,
      -0.07615174353122711,
      -0.11883744597434998,
      0.009739206172525883,
      0.01106425654143095,
      0.07511527836322784,
      -0.009430179372429848,
      0.00803318526595831,
      -0.040364209562540054,
      0.0638265311717987,
      0.04950082302093506,
      0.0230465866625309,
      0.0555567666888237,
      0.04763651639223099,
      0.036415740847587585,
      -0.021074090152978897,
      -0.016054686158895493,
      0.03607766330242157,
      -0.062033168971538544,
      0.013270778581500053,
      -0.05236698314547539,
      -0.03145670145750046,
      -0.11011619865894318,
      0.019670948386192322,
      0.044541195034980774,
      -0.04789960756897926,
      0.04587313160300255,
      0.0024258450139313936,
      0.023989282548427582,
      0.01221065316349268,
      -0.05407806113362312,
      -0.04359273985028267,
      0.08155737817287445,
      -0.02391396462917328,
      0.014432421885430813,
      0.04114990681409836,
      -0.10636872053146362,
      0.021145472303032875,
      0.020663240924477577,
      -0.08103307336568832,
      -0.0901808813214302,
      0.0776483342051506,
      -0.06348347663879395,
      0.008270594291388988,
      -0.04650614410638809,
      0.0634930282831192,
      -0.14063288271427155,
      -0.005357994697988033,
      0.01638856530189514,
      0.07309838384389877,
      -0.00722862733528018,
      0.04065665602684021,
      0.10279018431901932,
      0.04068243131041527,
      -0.012273740023374557,
      -0.07124559581279755,
      0.08646019548177719,
      -0.03368391469120979,
      -0.035578470677137375,
      0.02816285938024521,
      -0.0068643419072031975,
      0.05011316388845444,
      -0.0008564458694308996,
      0.030523203313350677,
      0.0005946523160673678,
      0.0396009236574173,
      -0.003370310878381133,
      -0.06960773468017578,
      0.010756825096905231,
      0.04123486950993538,
      0.012128488160669804,
      0.041518718004226685,
      -0.026923028752207756,
      -0.11320092529058456,
      0.003506762906908989,
      0.0379444845020771,
      -0.0309770330786705,
      0.016789644956588745,
      -0.029790012165904045,
      -0.06207622215151787,
      -0.0892893597483635,
      0.002794533036649227,
      -5.0995248172914475e-33,
      0.009577524848282337,
      0.1579209864139557,
      -0.04490780457854271,
      0.019135568290948868,
      -0.0550052635371685,
      -0.053008709102869034,
      -0.0622188039124012,
      0.04856281355023384,
      0.1114860400557518,
      0.0608389712870121,
      0.04790022596716881,
      -0.0283396877348423,
      -0.037010014057159424,
      -0.05023283138871193,
      -0.06877689808607101,
      0.06860526651144028,
      0.03926101326942444,
      -0.029511911794543266,
      0.0025569554418325424,
      -0.014640475623309612,
      -0.05687114968895912,
      0.03400539606809616,
      0.05974593386054039,
      0.02528136782348156,
      0.04899987950921059,
      0.05157206207513809,
      0.044316988438367844,
      0.061491187661886215,
      -0.023560767993330956,
      -0.026992229744791985,
      -0.03908436372876167,
      -0.08038280159235,
      -0.03962158039212227,
      0.03417181223630905,
      -0.07288528978824615,
      0.020979464054107666,
      0.030423860996961594,
      -0.01379595696926117,
      0.01950846053659916,
      0.11569324135780334,
      0.03540203720331192,
      -0.004569733049720526,
      -0.04300745949149132,
      -0.04739539697766304,
      0.029496509581804276,
      -0.0834159329533577,
      -0.04907995089888573,
      0.04815568029880524,
      -0.029602667316794395,
      -0.0601600706577301,
      0.04739343374967575,
      0.018003713339567184,
      -0.05051722377538681,
      0.010399067774415016,
      -0.0536486990749836,
      -0.0416342094540596,
      0.0023459014482796192,
      0.11547672748565674,
      0.04780750349164009,
      -0.0879993736743927,
      -0.017852837219834328,
      0.00176898087374866,
      0.012304272502660751,
      -0.010995612479746342,
      0.02573108673095703,
      -0.00397645216435194,
      -0.018415741622447968,
      -0.033332739025354385,
      0.03444227576255798,
      0.01953366957604885,
      0.041286077350378036,
      0.03458656370639801,
      0.040150243788957596,
      -0.012921461835503578,
      -0.064261294901371,
      0.03264230489730835,
      0.010310187935829163,
      0.02391231805086136,
      0.046442288905382156,
      0.024264248088002205,
      0.030599499121308327,
      0.08394651859998703,
      0.05905042216181755,
      -0.00951350387185812,
      -0.07643647491931915,
      0.01489286683499813,
      -0.05797163024544716,
      0.07738851755857468,
      0.11080525070428848,
      -0.017485488206148148,
      -0.1490470916032791,
      0.00869896449148655,
      -0.006453820038586855,
      0.011600707657635212,
      0.0551903173327446,
      -5.438177552719026e-08,
      -0.06544354557991028,
      -0.041201330721378326,
      -0.0190256480127573,
      0.030258143320679665,
      -0.0172241423279047,
      0.012873636558651924,
      -0.10607830435037613,
      -0.027307618409395218,
      -0.01370805874466896,
      -0.04179263487458229,
      0.06534922868013382,
      -0.017919987440109253,
      0.05697629973292351,
      -0.03106674551963806,
      -0.036758460104465485,
      -0.07071710377931595,
      0.035995375365018845,
      0.04931602254509926,
      -0.00045889749890193343,
      -0.05397677421569824,
      0.042699724435806274,
      0.03828323632478714,
      0.025606052950024605,
      -0.000801264017354697,
      0.07133249938488007,
      -0.07282061129808426,
      -0.0320747084915638,
      0.030263129621744156,
      -0.011729822494089603,
      0.012621941044926643,
      0.044131867587566376,
      0.010070744901895523,
      0.008559130132198334,
      -0.00630097184330225,
      0.04401412978768349,
      0.01078698318451643,
      -0.07920505106449127,
      0.055982090532779694,
      -0.006580079905688763,
      0.09786669164896011,
      -0.06179594621062279,
      -0.02304260805249214,
      -0.1354573518037796,
      -0.028301585465669632,
      -0.054457101970911026,
      -0.05662574991583824,
      -0.02255445159971714,
      -0.021699346601963043,
      0.06881745159626007,
      0.00839264690876007,
      0.068844735622406,
      -0.052471667528152466,
      0.0028238326776772738,
      -0.01574610359966755,
      0.02692999504506588,
      -0.10122696310281754,
      -0.019356973469257355,
      0.025185469537973404,
      -0.0033729011192917824,
      0.05320766568183899,
      -0.00560388807207346,
      -0.05263263359665871,
      0.011841525323688984,
      -0.05348994582891464
    ],
    [
      -0.019131869077682495,
      -0.053861457854509354,
      -0.1117524579167366,
      0.07901908457279205,
      0.07113059610128403,
      -0.02319425716996193,
      0.014154681004583836,
      0.07836741209030151,
      -0.040038514882326126,
      -0.009904460981488228,
      0.017599517479538918,
      0.007383365649729967,
      -0.0589170902967453,
      -0.009713341481983662,
      0.054943252354860306,
      -0.01749248430132866,
      -0.049849189817905426,
      0.0030550712253898382,
      -0.0154564892873168,
      0.025153663009405136,
      0.010775226168334484,
      -0.02847307361662388,
      0.08100473880767822,
      -0.0953003317117691,
      -0.020196594297885895,
      0.04395747929811478,
      -0.021075062453746796,
      -0.03304391726851463,
      -0.019491836428642273,
      0.02999988943338394,
      -0.0006962278857827187,
      -0.012556235305964947,
      -0.10166505724191666,
      -0.019603373482823372,
      0.08456658571958542,
      0.043789397925138474,
      0.005142435431480408,
      -0.07710656523704529,
      -0.07252519577741623,
      0.029441645368933678,
      0.0067709521390497684,
      -0.03234187886118889,
      -0.031949639320373535,
      -0.0796787366271019,
      -0.11754313856363297,
      -0.0923730656504631,
      -0.01341529656201601,
      0.026660507544875145,
      0.007464893627911806,
      -0.05467686429619789,
      -0.057949475944042206,
      0.0571979284286499,
      -0.03945353999733925,
      -0.03755723312497139,
      -0.01478513889014721,
      -0.013424497097730637,
      0.03651561960577965,
      -0.010633096098899841,
      -0.02791065163910389,
      -0.01828431524336338,
      -0.061453577131032944,
      0.01119342353194952,
      0.0042320010252296925,
      -0.03023817390203476,
      0.013890133239328861,
      0.05226331576704979,
      -0.009649931453168392,
      0.10372210294008255,
      0.011825574561953545,
      0.01841101050376892,
      -0.05741652473807335,
      0.010098908096551895,
      -0.0621362067759037,
      0.01397202629595995,
      0.04242709279060364,
      -0.1172536164522171,
      0.018686924129724503,
      0.07590147852897644,
      -0.09231827408075333,
      -0.1828545480966568,
      0.004695000126957893,
      -0.1016906201839447,
      0.03467583283782005,
      0.04175010696053505,
      0.03252817690372467,
      0.09333724528551102,
      0.0039865970611572266,
      0.030025271698832512,
      0.07021846622228622,
      0.051660556346178055,
      -0.022477222606539726,
      0.009501522406935692,
      -0.034961845725774765,
      0.044866111129522324,
      -0.01933225616812706,
      0.08051272481679916,
      0.02331783063709736,
      0.09106620401144028,
      -0.03861894831061363,
      0.0808495283126831,
      -0.016033895313739777,
      -0.015564975328743458,
      3.2031337468652055e-05,
      0.07959417253732681,
      0.018223509192466736,
      -0.042337194085121155,
      0.012587719596922398,
      0.05949797481298447,
      0.005402016453444958,
      -0.009853915311396122,
      0.06694158911705017,
      -0.0001644071890041232,
      0.016776977106928825,
      -0.05409262329339981,
      -0.015519197098910809,
      0.001268946100026369,
      0.05822116881608963,
      -0.008662336505949497,
      0.12404327094554901,
      0.12919458746910095,
      0.10771924257278442,
      0.010987809859216213,
      -0.07699448615312576,
      0.06167256459593773,
      -0.014901715330779552,
      -0.04825586453080177,
      -0.0044692582450807095,
      6.500934856004378e-33,
      -0.005989386700093746,
      -0.05235116556286812,
      -0.011598365381360054,
      0.008109821937978268,
      0.018544133752584457,
      0.04019809886813164,
      0.05390048027038574,
      0.052766840904951096,
      -0.059250351041555405,
      0.09047072380781174,
      -0.06375294178724289,
      0.006834287196397781,
      -0.06211785227060318,
      -0.04272105172276497,
      -0.07800082117319107,
      -0.09065964818000793,
      -0.028442200273275375,
      0.014695072546601295,
      0.09755992889404297,
      0.00298939342610538,
      0.002558265347033739,
      0.01707252860069275,
      0.0191158689558506,
      0.02275616116821766,
      -0.029671741649508476,
      0.05492401495575905,
      -0.010234714485704899,
      0.08287809789180756,
      -0.009306255728006363,
      0.005589898210018873,
      0.09232422709465027,
      0.008700094185769558,
      0.015893639996647835,
      0.005014635156840086,
      -0.014881642535328865,
      -0.04598386585712433,
      -0.07046876102685928,
      -0.023859351873397827,
      -0.0818713903427124,
      -0.015292884781956673,
      0.037802208214998245,
      -0.0323631688952446,
      -0.058875489979982376,
      -0.008809918537735939,
      -0.04688742384314537,
      -0.10279487073421478,
      0.046679604798555374,
      0.05075966566801071,
      0.042258769273757935,
      -0.0672764703631401,
      -0.006184122990816832,
      0.06181693449616432,
      -0.018079223111271858,
      0.04125164449214935,
      0.001925198477692902,
      -0.04559146985411644,
      -0.10818252712488174,
      -0.024823984131217003,
      0.06363658607006073,
      -0.033048566430807114,
      -0.01551202591508627,
      0.005874790251255035,
      0.02729589305818081,
      -0.03129715472459793,
      0.0339435338973999,
      0.009323717094957829,
      0.004402096848934889,
      0.06740493327379227,
      -0.015149679034948349,
      -0.03212699666619301,
      -0.0056480229832232,
      0.0063063595443964005,
      0.11151953041553497,
      0.053030263632535934,
      0.05561525374650955,
      0.015685316175222397,
      -0.005466761998832226,
      -0.016256334260106087,
      -0.02834748663008213,
      -0.05756920576095581,
      -0.019251083955168724,
      0.03270554170012474,
      -0.03463584929704666,
      -0.013318142853677273,
      0.017428353428840637,
      0.03147124499082565,
      0.03914622962474823,
      -0.006474515423178673,
      0.03990231081843376,
      -0.0076536210253834724,
      0.013769309967756271,
      0.008371377363801003,
      -0.03945071995258331,
      -0.17060507833957672,
      -0.00998561829328537,
      -6.79444918324898e-33,
      0.007538932841271162,
      -0.03700726479291916,
      -0.05153763294219971,
      -0.048271000385284424,
      -0.024824954569339752,
      0.02641320414841175,
      -0.004487726371735334,
      -0.01188853569328785,
      0.0932362899184227,
      0.08339885622262955,
      0.023296043276786804,
      -0.0008297953754663467,
      -0.01640862040221691,
      -0.12996098399162292,
      -0.00808855053037405,
      0.09210620820522308,
      -0.06271732598543167,
      -0.028793025761842728,
      0.05399169772863388,
      -0.06509728729724884,
      -0.033201511949300766,
      0.014528067782521248,
      0.025361312553286552,
      0.05283231660723686,
      -0.09840551018714905,
      -0.043992262333631516,
      0.021900909021496773,
      0.046201445162296295,
      -0.056849993765354156,
      0.031000640243291855,
      0.0326034352183342,
      0.03393362835049629,
      -0.09561275690793991,
      0.08066529780626297,
      -0.0034377151168882847,
      0.009885067120194435,
      -0.047970000654459,
      0.05534397438168526,
      -0.04191819578409195,
      0.047487761825323105,
      0.0006036385311745107,
      0.03333554416894913,
      -0.04226917400956154,
      0.01465702336281538,
      -0.02481648698449135,
      0.04474375396966934,
      0.051063671708106995,
      -0.07851811498403549,
      -0.0488157756626606,
      -0.0373707115650177,
      0.023864243179559708,
      -0.09164175391197205,
      -0.04667763039469719,
      -0.06492099165916443,
      -0.027341285720467567,
      0.04127414897084236,
      0.06717781722545624,
      0.03929893672466278,
      -0.07928428053855896,
      0.018114861100912094,
      0.05201021581888199,
      -0.04977286234498024,
      0.046176228672266006,
      0.013062428683042526,
      0.05106843635439873,
      0.010798179544508457,
      -0.02269401215016842,
      0.014288063161075115,
      0.02405274659395218,
      0.06252989172935486,
      -0.0025004844646900892,
      0.018523458391427994,
      0.043423496186733246,
      -0.00332256150431931,
      0.030291758477687836,
      0.07728447020053864,
      0.08046986907720566,
      0.03524216637015343,
      -0.07133640348911285,
      0.011681017465889454,
      0.033115558326244354,
      0.03024698607623577,
      -0.0026151647325605154,
      -0.11491512507200241,
      -0.055289387702941895,
      -0.03005882352590561,
      -0.018753821030259132,
      0.16484004259109497,
      -0.04555344954133034,
      -0.008215355686843395,
      -0.009833724237978458,
      0.01216923352330923,
      0.06617873907089233,
      -0.0026531561743468046,
      0.02052338607609272,
      -4.9384546230157866e-08,
      -0.15169155597686768,
      -0.007456759922206402,
      -0.062325503677129745,
      0.04878431558609009,
      -0.023652436211705208,
      0.0006742847035638988,
      0.06991260498762131,
      0.03433550149202347,
      -0.05989926680922508,
      -0.053532522171735764,
      -0.011991855688393116,
      0.03327994793653488,
      0.031793806701898575,
      -0.005597666371613741,
      -0.0010106394765898585,
      0.003123427275568247,
      0.0022801668383181095,
      0.0876198410987854,
      -0.04033324494957924,
      -0.049382589757442474,
      0.07333730161190033,
      0.08596311509609222,
      0.048038847744464874,
      0.07306244969367981,
      0.07164432108402252,
      0.005107433535158634,
      -0.027872934937477112,
      0.005563098471611738,
      -0.022873664274811745,
      0.01722070202231407,
      0.00592982629314065,
      -0.022143298760056496,
      -0.021380750462412834,
      -0.07906104624271393,
      -0.02934902161359787,
      -0.01302795298397541,
      -0.033166322857141495,
      -0.06424066424369812,
      -0.04550690948963165,
      0.020907318219542503,
      0.004328805487602949,
      0.012660842388868332,
      -0.10414700210094452,
      0.023475026711821556,
      0.021413180977106094,
      -0.0322706401348114,
      -0.13607512414455414,
      0.060949914157390594,
      0.0060647716745734215,
      -0.021196605637669563,
      0.017199696972966194,
      0.051599133759737015,
      0.020438697189092636,
      0.007180498912930489,
      -0.01155646238476038,
      0.03683554381132126,
      -0.009298913180828094,
      0.03933791071176529,
      -0.048159196972846985,
      -0.02292213961482048,
      -0.029439372941851616,
      0.03433268517255783,
      0.07187525182962418,
      0.003204506356269121
    ],
    [
      -0.08054100722074509,
      -0.036222267895936966,
      -0.07547234743833542,
      -0.03884279355406761,
      0.12800385057926178,
      -0.02945449948310852,
      0.0737605094909668,
      0.10051217675209045,
      0.08447713404893875,
      -0.04842100664973259,
      -0.023344991728663445,
      0.033532481640577316,
      -0.02634156122803688,
      0.024385010823607445,
      0.0568564236164093,
      -0.07252844423055649,
      -0.03514263406395912,
      0.008100920356810093,
      -0.04360327497124672,
      0.06233736127614975,
      -0.00013684650184586644,
      -0.15701527893543243,
      -0.03805198147892952,
      -0.002405408304184675,
      -0.01635400764644146,
      -0.024669324979186058,
      -0.02249615266919136,
      -0.02574865333735943,
      -0.01405378244817257,
      -0.10503535717725754,
      0.09779631346464157,
      0.03867043927311897,
      -0.026438232511281967,
      0.0005564576131291687,
      -0.05738288164138794,
      0.08010254800319672,
      -0.01813298650085926,
      0.027798553928732872,
      0.019718490540981293,
      -0.03138003498315811,
      -0.03282773122191429,
      -0.03242577984929085,
      0.01781872846186161,
      -0.006335537880659103,
      0.03740885108709335,
      0.043425895273685455,
      -0.011395363137125969,
      0.027962930500507355,
      -0.05539726838469505,
      0.03894708678126335,
      0.059490837156772614,
      -0.015086840838193893,
      -0.07588376104831696,
      0.10419613867998123,
      -0.03093245066702366,
      0.0513002946972847,
      -0.021498408168554306,
      0.0065571945160627365,
      0.03303194046020508,
      0.0122196264564991,
      0.03772195056080818,
      -0.01718447171151638,
      -0.053704384714365005,
      0.0090795224532485,
      -0.03142540156841278,
      0.018064558506011963,
      -0.0055386400781571865,
      0.031130297109484673,
      0.03342108428478241,
      0.01802707090973854,
      0.07125378400087357,
      -0.054027996957302094,
      -0.029240263625979424,
      -0.027255596593022346,
      0.08999203145503998,
      0.05610690265893936,
      0.006600666791200638,
      0.05288945510983467,
      -0.004999341443181038,
      -0.10580285638570786,
      0.02662091702222824,
      0.050248146057128906,
      0.05702200159430504,
      -0.049127060920000076,
      0.02940073423087597,
      0.005738277919590473,
      0.009129817597568035,
      0.029078371822834015,
      0.10665001720190048,
      0.041980452835559845,
      0.05524628981947899,
      -0.014413387514650822,
      0.08649952709674835,
      -0.022751517593860626,
      0.032416317611932755,
      0.023245932534337044,
      -0.03070160746574402,
      -0.010028950870037079,
      -0.02488984540104866,
      0.03974872827529907,
      0.009234562516212463,
      -0.04631733149290085,
      0.05828314647078514,
      0.09965632855892181,
      0.012027353048324585,
      -0.04646410793066025,
      0.013977628201246262,
      0.034370385110378265,
      0.027267539873719215,
      -0.015668898820877075,
      -0.010712453164160252,
      0.06894674152135849,
      0.02427315153181553,
      -0.09136691689491272,
      -0.0735776349902153,
      -0.02110176905989647,
      -0.12740536034107208,
      -0.09175864607095718,
      0.01605558954179287,
      -0.025837209075689316,
      0.09172896295785904,
      0.0654834657907486,
      0.02043287828564644,
      -0.004539192654192448,
      0.01223051268607378,
      -0.051607757806777954,
      -0.08955469727516174,
      6.220121745220411e-33,
      -0.0870731994509697,
      0.0338178351521492,
      -0.048498254269361496,
      -0.01788697950541973,
      -0.02815214917063713,
      -0.006621974520385265,
      0.03433053940534592,
      -0.04580770060420036,
      -0.062134746462106705,
      0.11094491928815842,
      0.021710850298404694,
      0.0009960687020793557,
      -0.02873927727341652,
      0.0692165344953537,
      -0.021837620064616203,
      -0.008743534795939922,
      -0.044246796518564224,
      -0.031047144904732704,
      0.07552339881658554,
      -0.007155457511544228,
      0.03981317952275276,
      0.03092114068567753,
      0.001731549040414393,
      0.009159988723695278,
      -0.004697990138083696,
      -0.008709041401743889,
      0.0007366988575085998,
      0.023721622303128242,
      0.019309524446725845,
      0.04080178588628769,
      0.01644613966345787,
      -0.024843523278832436,
      0.11732291430234909,
      0.05211407691240311,
      -0.030985841527581215,
      0.06120385602116585,
      -0.04714355617761612,
      -0.1325400322675705,
      -0.010163662023842335,
      -0.02307835966348648,
      0.043702132999897,
      0.026214895769953728,
      -0.05281100422143936,
      0.08550449460744858,
      -0.0008260743925347924,
      -0.08010219037532806,
      0.03678860515356064,
      0.0588851161301136,
      -0.01478754635900259,
      0.047139689326286316,
      -0.02442634105682373,
      -0.047480493783950806,
      -0.05689047649502754,
      0.003129882039502263,
      -0.0123621616512537,
      -0.016401216387748718,
      -0.12080127745866776,
      -0.03622919321060181,
      -0.042887333780527115,
      -0.02149786241352558,
      0.07801197469234467,
      -0.062135592103004456,
      -0.03647514432668686,
      0.023976586759090424,
      -0.0827573835849762,
      0.13672219216823578,
      0.0718260332942009,
      -0.044332992285490036,
      -0.0070194522850215435,
      0.0206157099455595,
      -0.07602057605981827,
      0.04411526396870613,
      -0.04017449915409088,
      0.04126313701272011,
      -0.0294023584574461,
      -0.048262227326631546,
      0.0945129469037056,
      0.07846763730049133,
      -0.008262001909315586,
      0.05818985402584076,
      -0.06743913888931274,
      -0.056561894714832306,
      -0.006280346307903528,
      0.13433021306991577,
      -0.07796341180801392,
      0.04421937093138695,
      0.049213990569114685,
      -0.05503734201192856,
      0.019340485334396362,
      -0.05915532261133194,
      0.03795621916651726,
      -0.10501024127006531,
      0.042555224150419235,
      0.04273471236228943,
      0.0079922154545784,
      -5.474398047292337e-33,
      -0.01938776858150959,
      -0.04263819381594658,
      -0.019758326932787895,
      0.0173034630715847,
      -0.008478200994431973,
      0.04638102650642395,
      0.0038497871719300747,
      -0.018072111532092094,
      -0.08486185222864151,
      -0.0615149661898613,
      -0.1147962287068367,
      0.04667504131793976,
      -0.049085043370723724,
      -0.04533768072724342,
      -0.009462972171604633,
      -0.07627508044242859,
      -0.05486059561371803,
      -0.005646638572216034,
      -0.008658346720039845,
      0.07804131507873535,
      -0.06085826829075813,
      0.038447704166173935,
      0.054746631532907486,
      0.10020961612462997,
      -0.02762005291879177,
      0.06829216331243515,
      -0.07565747946500778,
      -0.007235430646687746,
      0.03515958786010742,
      0.06658997386693954,
      -0.03595989570021629,
      -0.02575029991567135,
      -0.03663858771324158,
      -0.04350454732775688,
      -0.06678025424480438,
      -0.06969098001718521,
      0.005919283255934715,
      0.04388600215315819,
      -0.06717230379581451,
      -0.029051048681139946,
      0.056418318301439285,
      0.01194915920495987,
      -0.007372057065367699,
      0.031595610082149506,
      -0.04854580760002136,
      0.04944303631782532,
      0.015178502537310123,
      0.019893886521458626,
      0.0508468858897686,
      -0.024616671726107597,
      -0.008803077042102814,
      -0.03772670030593872,
      -0.028882348909974098,
      -0.003464699722826481,
      -0.06456820666790009,
      -0.016783474013209343,
      0.10905928909778595,
      -0.012970536015927792,
      0.01703565940260887,
      -0.017507843673229218,
      0.04440118744969368,
      -0.04538341239094734,
      0.017046986147761345,
      0.023009583353996277,
      0.0842319056391716,
      -0.02583729289472103,
      -0.058014340698719025,
      0.01983332633972168,
      -0.10470050573348999,
      0.14975480735301971,
      0.07250478118658066,
      -0.015395455062389374,
      -0.0010171177564188838,
      -0.01313561387360096,
      0.10231561213731766,
      0.016514884307980537,
      -0.03309325873851776,
      -0.07145140320062637,
      0.019627708941698074,
      0.00025502953212708235,
      -0.012044871225953102,
      0.049697354435920715,
      -0.007743694353848696,
      0.05808539688587189,
      0.04226326197385788,
      -0.01777370646595955,
      -0.02467344142496586,
      -0.04861946403980255,
      0.007889823988080025,
      0.014273196458816528,
      -0.058220501989126205,
      0.022296344861388206,
      0.09473183751106262,
      0.050690047442913055,
      0.04247713088989258,
      -4.90364833183321e-08,
      0.008649127557873726,
      0.018641414120793343,
      -0.030477790161967278,
      -0.044677525758743286,
      -0.059600554406642914,
      0.003484176006168127,
      -0.05929756909608841,
      -0.009230873547494411,
      -0.015573875978589058,
      0.05499044060707092,
      -0.037236712872982025,
      -0.0032832513097673655,
      -0.05669882521033287,
      -0.09263716638088226,
      -0.02496592327952385,
      -0.02400021441280842,
      -0.025425823405385017,
      0.05432666838169098,
      -0.06739997118711472,
      -0.058033887296915054,
      -0.05224832892417908,
      0.06705563515424728,
      0.03403535112738609,
      -0.09060581028461456,
      0.013654889538884163,
      0.02862190455198288,
      0.0790834128856659,
      0.05005132406949997,
      0.008263259194791317,
      0.017614271491765976,
      -0.017681846395134926,
      -0.001696089399047196,
      0.10007046908140182,
      -0.010640200227499008,
      -0.032046910375356674,
      0.05360562726855278,
      -0.007126980926841497,
      -0.011280573904514313,
      -0.0009852622170001268,
      0.02167586237192154,
      -0.02602011151611805,
      0.009752733632922173,
      0.0011859152000397444,
      0.00667314138263464,
      -0.049196287989616394,
      -0.00561544531956315,
      -0.05941018834710121,
      -0.01473297644406557,
      0.04611422121524811,
      0.012766228057444096,
      0.023029929026961327,
      -0.08196341246366501,
      -0.03168540447950363,
      0.03538956865668297,
      0.005499543156474829,
      -0.0480777770280838,
      -0.004913949873298407,
      0.008935588411986828,
      0.12974360585212708,
      -0.0015310412272810936,
      -0.002956288866698742,
      -0.029116032645106316,
      0.04543689638376236,
      -0.059362802654504776
    ],
    [
      -0.08561058342456818,
      -0.055381596088409424,
      -0.06625218689441681,
      -0.014712153002619743,
      0.11439762264490128,
      -0.07853756099939346,
      0.06481494009494781,
      0.10877218097448349,
      0.05873015150427818,
      -0.017927518114447594,
      -0.007024447433650494,
      0.007098893169313669,
      0.012305613607168198,
      -0.0023231785744428635,
      0.03526002913713455,
      -0.021833164617419243,
      -0.031225966289639473,
      -0.028750339522957802,
      -0.0229355338960886,
      0.051848895847797394,
      -0.00854666717350483,
      -0.1338503509759903,
      -0.025485696271061897,
      -0.01331992819905281,
      -0.022074708715081215,
      0.006267517805099487,
      -0.03707399219274521,
      -0.05934232473373413,
      -0.03822770714759827,
      -0.07623673975467682,
      0.09740570932626724,
      0.06523580104112625,
      -0.06710955500602722,
      0.0002696495794225484,
      -0.06881046295166016,
      0.07604434341192245,
      0.049575939774513245,
      0.02104581706225872,
      0.019501058384776115,
      -0.010635750368237495,
      0.009356283582746983,
      -0.04399313032627106,
      0.023716988041996956,
      -0.03723853826522827,
      0.02003680169582367,
      0.014610601589083672,
      -0.0015215962193906307,
      -0.001566959428600967,
      -0.045163776725530624,
      0.03560100123286247,
      0.004800466354936361,
      -0.03710455819964409,
      -0.06021723523736,
      0.13481518626213074,
      0.011700747534632683,
      0.054291434586048126,
      -0.042148832231760025,
      -0.03941091150045395,
      0.04971335828304291,
      -0.004878281615674496,
      0.017757542431354523,
      -0.011426190845668316,
      -0.06276965886354446,
      0.044078994542360306,
      -0.01821211352944374,
      -0.017981408163905144,
      -0.01685294508934021,
      0.06650685518980026,
      0.05814607813954353,
      -0.047673460096120834,
      0.06218387559056282,
      -0.03232607617974281,
      -0.012850224040448666,
      -0.08230120688676834,
      0.04709256440401077,
      0.07320546358823776,
      0.050866514444351196,
      0.028648441657423973,
      0.03599473461508751,
      -0.1279556304216385,
      0.030996764078736305,
      0.07217278331518173,
      0.06551916897296906,
      -0.00823116209357977,
      0.03989795222878456,
      -0.00967771653085947,
      0.03974805772304535,
      0.016471194103360176,
      0.03175581619143486,
      0.021537479013204575,
      0.05658181756734848,
      0.007279365789145231,
      0.009995881468057632,
      -0.0022317846305668354,
      0.006537056993693113,
      0.050696998834609985,
      -0.004297526553273201,
      -0.0607452467083931,
      -0.026480600237846375,
      0.10943416506052017,
      -0.03732815384864807,
      -0.03091598115861416,
      0.028224371373653412,
      0.06846919655799866,
      -0.003097774228081107,
      -0.05664984509348869,
      -0.049924347549676895,
      0.07869680970907211,
      0.012995711527764797,
      -0.0017016443889588118,
      -0.08267397433519363,
      0.022136986255645752,
      -0.037077419459819794,
      -0.07984650880098343,
      -0.06400910764932632,
      -0.02052413672208786,
      -0.10566899180412292,
      -0.10373665392398834,
      0.05918452516198158,
      -0.047558531165122986,
      0.09367362409830093,
      0.06121896207332611,
      0.015423063188791275,
      0.038000572472810745,
      0.03600450977683067,
      -0.05176045000553131,
      -0.0644712820649147,
      8.346752656331167e-33,
      -0.05023433640599251,
      0.06255802512168884,
      -0.027142707258462906,
      -0.05988146364688873,
      0.008411558344960213,
      -0.027923885732889175,
      -0.012200976721942425,
      -0.022617341950535774,
      -0.09589695930480957,
      0.0973486378788948,
      -0.014415568672120571,
      0.093410424888134,
      -0.04694487899541855,
      0.06576427072286606,
      0.000165770819876343,
      -0.052987515926361084,
      -0.040055807679891586,
      -0.04233444854617119,
      0.10200303047895432,
      -0.07630256563425064,
      0.02964641898870468,
      0.01710510067641735,
      0.02014937810599804,
      -0.039323776960372925,
      0.00044560484820976853,
      0.020918047055602074,
      0.03130704164505005,
      0.04832076653838158,
      0.042729452252388,
      0.05558301880955696,
      0.0305732823908329,
      -0.045472513884305954,
      0.13070806860923767,
      0.04164803773164749,
      -0.03598714619874954,
      0.038249798119068146,
      -0.09307300299406052,
      -0.16695889830589294,
      -0.06480330973863602,
      0.016492934897542,
      0.040622446686029434,
      -0.010114816948771477,
      -0.07161907851696014,
      0.04829112067818642,
      -0.018339144065976143,
      -0.03485001623630524,
      0.010985087603330612,
      0.05704657733440399,
      0.015417839400470257,
      0.049447234719991684,
      0.004255548119544983,
      -0.03774334117770195,
      -0.021784212440252304,
      0.0029744210187345743,
      -0.013618026860058308,
      -0.020027311518788338,
      -0.10029970854520798,
      -0.07318472117185593,
      -0.023431507870554924,
      -0.0422184020280838,
      0.052355289459228516,
      -0.07231741398572922,
      -0.030006168410182,
      0.0014862560201436281,
      -0.07218226045370102,
      0.12116502225399017,
      0.04328012466430664,
      0.0012015681713819504,
      0.013079584576189518,
      0.021915335208177567,
      -0.06835170835256577,
      0.04564706236124039,
      -0.006188924890011549,
      0.017226068302989006,
      0.0029178387485444546,
      -0.03626491501927376,
      0.09277673065662384,
      0.0772780105471611,
      -0.018919195979833603,
      0.0804280936717987,
      -0.09405586123466492,
      -0.08909665048122406,
      -0.021572120487689972,
      0.11245402693748474,
      -0.02890706993639469,
      0.01044505462050438,
      0.051391296088695526,
      -0.05204181373119354,
      0.003089959267526865,
      -0.04411822557449341,
      0.02795192040503025,
      -0.034303002059459686,
      0.032973453402519226,
      0.03565521165728569,
      -0.008028194308280945,
      -7.157621101671403e-33,
      -0.030097030103206635,
      -0.007418476976454258,
      -0.007614776026457548,
      0.017118660733103752,
      -0.005511480383574963,
      -0.0046577672474086285,
      -0.01415697205811739,
      0.00956790242344141,
      -0.0013979861978441477,
      -0.02668691799044609,
      -0.08082877844572067,
      0.04412289336323738,
      -0.026285182684659958,
      -0.11451781541109085,
      -0.02124117873609066,
      -0.0909605324268341,
      -0.003288425737991929,
      -0.04767581820487976,
      -0.019994571805000305,
      0.05287371948361397,
      -0.07000428438186646,
      0.04999670013785362,
      0.014875675551593304,
      0.054895780980587006,
      0.0034480385947972536,
      0.0689878985285759,
      -0.009115356020629406,
      0.0026349169202148914,
      0.014978881925344467,
      0.05091233178973198,
      -0.015943339094519615,
      -0.03444143012166023,
      -0.05421849712729454,
      -0.06189057603478432,
      -0.050297755748033524,
      0.02373727597296238,
      -0.007030080538243055,
      0.07749996334314346,
      -0.0526573471724987,
      -0.01535433903336525,
      0.09350338578224182,
      0.012593215331435204,
      -0.028634387999773026,
      0.0187285915017128,
      -0.03123687207698822,
      0.036418378353118896,
      -0.0697668045759201,
      -0.0025016304571181536,
      0.05704783648252487,
      -0.031996581703424454,
      0.028926944360136986,
      -0.023970644921064377,
      -0.0023907478898763657,
      -0.02529653161764145,
      -0.04889660328626633,
      0.0015330021269619465,
      0.08266738057136536,
      0.027662239968776703,
      0.0030592912808060646,
      -0.024381451308727264,
      0.08750233054161072,
      -0.09952658414840698,
      -0.007477674633264542,
      0.030398687347769737,
      0.06535652279853821,
      -0.0062378509901463985,
      -0.0797717496752739,
      0.004846317693591118,
      -0.09072928130626678,
      0.1507086306810379,
      0.07660248875617981,
      0.004980889149010181,
      -0.059034280478954315,
      -0.01713479310274124,
      0.11848308145999908,
      0.021471107378602028,
      -0.056422486901283264,
      -0.07991923391819,
      0.010401331819593906,
      0.03967494145035744,
      0.0032772403210401535,
      0.0599125474691391,
      0.015623588114976883,
      0.01590314507484436,
      0.02765485644340515,
      -0.02970551885664463,
      -0.030731957405805588,
      0.023940492421388626,
      0.015890702605247498,
      0.010531173087656498,
      -0.06596110761165619,
      0.0824008658528328,
      0.07727692276239395,
      0.08375055342912674,
      0.040540024638175964,
      -5.9401674690207074e-08,
      0.0238876361399889,
      -0.008175736293196678,
      2.731594577198848e-05,
      -0.005483102984726429,
      -0.026119593530893326,
      0.026406362652778625,
      -0.04330293461680412,
      -0.056519608944654465,
      -0.03305024281144142,
      0.053026486188173294,
      -0.024204347282648087,
      0.013952129520475864,
      -0.0527966283261776,
      -0.04887334629893303,
      -0.020671989768743515,
      -0.003986112307757139,
      0.004000404383987188,
      0.01214022096246481,
      -0.07870696485042572,
      -0.06469058990478516,
      -0.0707942321896553,
      0.0898774266242981,
      0.027539651840925217,
      -0.0725708156824112,
      0.024995751678943634,
      0.05329512059688568,
      0.09410861879587173,
      0.049939993768930435,
      -0.022537773475050926,
      0.0025256883818656206,
      -0.009794525802135468,
      0.004946344532072544,
      0.05137590691447258,
      -0.01967151276767254,
      -0.07915253937244415,
      0.10476221889257431,
      -0.016556356102228165,
      0.0012431531213223934,
      -0.034555792808532715,
      0.02881646528840065,
      -0.006405881606042385,
      0.037440232932567596,
      -0.0016995173646137118,
      -0.012010656297206879,
      -0.04016938805580139,
      0.0062422975897789,
      -0.05864519253373146,
      0.028747614473104477,
      0.0341300442814827,
      0.01236555352807045,
      0.028730370104312897,
      -0.07987269014120102,
      -0.042473189532756805,
      0.0020450546871870756,
      0.005324592348188162,
      -0.062307193875312805,
      -0.01036104466766119,
      0.023441853001713753,
      0.08940961211919785,
      -0.0009439949644729495,
      -0.008654444478452206,
      -0.05372092127799988,
      0.04937417060136795,
      -0.03784501180052757
    ],
    [
      -0.1016949787735939,
      -0.010183817707002163,
      -0.08725519478321075,
      -0.06073177978396416,
      0.045034732669591904,
      -0.02678750641644001,
      0.08653111755847931,
      0.07812067866325378,
      0.052670080214738846,
      0.025892361998558044,
      -0.02064364403486252,
      -0.0036934216041117907,
      0.021260062232613564,
      -0.010286673903465271,
      -0.016839126124978065,
      -0.07622802257537842,
      -0.017632577568292618,
      -0.08563009649515152,
      -0.012762229889631271,
      0.017743801698088646,
      0.04886610433459282,
      -0.1355827897787094,
      -0.050698548555374146,
      -0.0229314137250185,
      0.027971889823675156,
      -0.006020732223987579,
      -0.02221371792256832,
      -0.020287243649363518,
      -0.0020749871619045734,
      0.003994313534349203,
      0.0795665755867958,
      0.05457039922475815,
      0.0011370908468961716,
      0.014795124530792236,
      -0.042562078684568405,
      0.11407089978456497,
      -0.018162637948989868,
      0.01590670645236969,
      0.0030101980082690716,
      0.00176118197850883,
      -0.024670420214533806,
      0.014951384626328945,
      0.008073225617408752,
      -0.019161418080329895,
      0.07861284911632538,
      0.04966035485267639,
      0.0032603745348751545,
      0.04348888248205185,
      -0.08384299278259277,
      -0.0042411694303154945,
      0.04036649316549301,
      0.022456342354416847,
      -0.013727975077927113,
      0.1310255080461502,
      -0.04331164434552193,
      0.0451621487736702,
      0.06948615610599518,
      -0.0031895043794065714,
      0.015727711841464043,
      0.035917896777391434,
      -0.025379739701747894,
      -0.008480263873934746,
      -0.09273340553045273,
      0.026765022426843643,
      -0.0013493066653609276,
      -0.004057276528328657,
      -0.12657615542411804,
      0.005911215208470821,
      -0.02431929111480713,
      0.009324328042566776,
      0.04884982854127884,
      -0.08922285586595535,
      -0.10267724841833115,
      -0.06739018857479095,
      0.07469162344932556,
      -0.00969106424599886,
      -0.016465501859784126,
      0.03190993145108223,
      -0.05303290858864784,
      -0.083050936460495,
      -0.02609822526574135,
      0.06045368313789368,
      0.07934914529323578,
      -0.03656404837965965,
      0.03284826502203941,
      -0.029849955812096596,
      0.03157871216535568,
      0.05586453899741173,
      0.07624658942222595,
      0.04003332927823067,
      0.06457873433828354,
      0.02998572587966919,
      0.0596310980618,
      -0.021155869588255882,
      0.029093049466609955,
      0.06105305626988411,
      0.005620156414806843,
      0.022194352000951767,
      0.003466201014816761,
      0.06244269013404846,
      0.030927903950214386,
      0.055047158151865005,
      -0.02738611213862896,
      0.06116453930735588,
      0.014069433324038982,
      -0.004281851928681135,
      -0.02391037344932556,
      0.08736986666917801,
      -0.022183194756507874,
      -0.02271045744419098,
      -0.039157066494226456,
      0.059590015560388565,
      0.04668169468641281,
      -0.07283083349466324,
      -0.06929545104503632,
      0.042446475476026535,
      -0.07963180541992188,
      -0.016787532716989517,
      0.04090658202767372,
      -0.004547195043414831,
      0.10730879008769989,
      0.05038011446595192,
      -0.05735737085342407,
      -0.08570417761802673,
      0.004029502160847187,
      -0.015876485034823418,
      -0.01576565019786358,
      3.1770835197322614e-33,
      -0.10057952255010605,
      -0.031280502676963806,
      -0.010104971006512642,
      -0.07812146097421646,
      -0.036498844623565674,
      0.020460043102502823,
      0.0016560578951612115,
      0.04472246393561363,
      0.05844198912382126,
      0.11193303763866425,
      0.11150950938463211,
      -0.046796705573797226,
      0.0076870364136993885,
      0.0453607551753521,
      -0.08049996197223663,
      -0.033901333808898926,
      -0.019387368112802505,
      0.00605562049895525,
      0.06429650634527206,
      0.0007151866448111832,
      -0.007815091870725155,
      0.009892362169921398,
      -0.012241987511515617,
      0.021371522918343544,
      -0.01495165191590786,
      0.0012339873937889934,
      0.003813305404037237,
      -0.0007579961093142629,
      0.018413031473755836,
      0.022006046026945114,
      -0.005406050942838192,
      0.050386399030685425,
      0.026739340275526047,
      -0.008613510988652706,
      -0.06349369138479233,
      0.038144562393426895,
      -0.05971883609890938,
      -0.14599494636058807,
      -0.04473792761564255,
      -0.03796961158514023,
      0.060812048614025116,
      -0.009705784730613232,
      -0.06924521923065186,
      0.004502733703702688,
      -0.06491144001483917,
      -0.014374686405062675,
      -0.012054272927343845,
      0.011417973786592484,
      0.025985607877373695,
      0.0867701917886734,
      0.012777560390532017,
      -0.00038108957232907414,
      0.04252978786826134,
      0.077178455889225,
      -0.002507690107449889,
      0.06220842897891998,
      -0.04242299124598503,
      -0.05699320137500763,
      -0.015588803216814995,
      -0.03269103914499283,
      0.06674510985612869,
      -0.09212663769721985,
      -0.050115399062633514,
      0.05547527223825455,
      -0.05659175664186478,
      0.060372494161129,
      0.01809067092835903,
      -0.05156935378909111,
      0.0260168369859457,
      0.050878364592790604,
      -0.06717781722545624,
      0.037416111677885056,
      0.010352284647524357,
      0.010333732701838017,
      -0.015925519168376923,
      -0.03351219743490219,
      0.09523401409387589,
      0.10589589178562164,
      -0.04669542983174324,
      -0.0009710037265904248,
      -0.03159244358539581,
      0.004539360757917166,
      -0.008390557952225208,
      0.06397808343172073,
      -0.02286623604595661,
      0.013556011021137238,
      -0.030225927010178566,
      -0.03767760843038559,
      0.005550516303628683,
      -0.04439755529165268,
      0.02426118031144142,
      -0.09621457755565643,
      -0.0018409593030810356,
      0.10773297399282455,
      -0.05270859971642494,
      -2.104772226315231e-33,
      -0.021539798006415367,
      -0.02728467620909214,
      0.027585437521338463,
      0.014510099776089191,
      -0.004468328319489956,
      0.020303454250097275,
      -0.0892219990491867,
      0.02578425221145153,
      -0.0013895257143303752,
      -0.009212254546582699,
      -0.09877093881368637,
      0.023273659870028496,
      -0.04385097324848175,
      -0.010189794935286045,
      0.026136789470911026,
      -0.023286644369363785,
      -0.02709924429655075,
      0.003629267681390047,
      -0.05200893059372902,
      0.09996891766786575,
      0.008120049722492695,
      0.06914900988340378,
      0.0741259753704071,
      0.017712831497192383,
      -0.02006685733795166,
      0.056774482131004333,
      -0.05597915127873421,
      0.0562758669257164,
      0.06499870866537094,
      0.04952530935406685,
      0.007804349530488253,
      -0.085716612637043,
      -0.056078486144542694,
      -0.0007006585947237909,
      -0.0439162440598011,
      -0.04319868981838226,
      0.041630521416664124,
      0.10407260060310364,
      -0.04504930600523949,
      0.0558822937309742,
      0.07561878859996796,
      -0.01567687653005123,
      -0.010500399395823479,
      0.022435739636421204,
      -0.022295771166682243,
      0.05491016432642937,
      -0.02888893522322178,
      0.009476570412516594,
      0.019561724737286568,
      -0.0009809682378545403,
      -0.043419815599918365,
      0.004859541542828083,
      -0.03883901610970497,
      0.04162614792585373,
      -0.03972182795405388,
      0.009229146875441074,
      0.09354780614376068,
      -0.05480537191033363,
      0.06864499300718307,
      -0.07694072276353836,
      0.049303941428661346,
      -0.01211413275450468,
      0.04117908701300621,
      0.04734210669994354,
      0.05684082210063934,
      -0.05062348023056984,
      -0.08865243196487427,
      -0.0018552981782704592,
      -0.01619739644229412,
      0.12610362470149994,
      0.01032672356814146,
      0.02042272314429283,
      0.04743895307183266,
      0.006479600910097361,
      0.11968720704317093,
      0.07064343988895416,
      -0.02243960276246071,
      -0.13129408657550812,
      -0.005880675744265318,
      0.005306855775415897,
      -0.04584589973092079,
      0.040418315678834915,
      -0.0027305849362164736,
      0.03654419630765915,
      -0.04446236044168472,
      -0.06611063331365585,
      0.008536344394087791,
      -0.07106282562017441,
      0.0002787646953947842,
      -0.0023896016646176577,
      -0.015660397708415985,
      0.03330463916063309,
      0.12121392041444778,
      0.007607321720570326,
      0.011466930620372295,
      -4.8050214473960295e-08,
      0.0026292342226952314,
      -0.07940009981393814,
      0.013197510503232479,
      -0.04685881361365318,
      0.003317573107779026,
      -0.00657749455422163,
      -0.048129722476005554,
      0.007834834977984428,
      -0.04365022853016853,
      0.0372156985104084,
      0.030115583911538124,
      -0.027341797947883606,
      -0.04789784923195839,
      -0.05451089143753052,
      -0.06358251720666885,
      0.0008430747548118234,
      0.0033136068377643824,
      0.0023926307912915945,
      -0.08086692541837692,
      -0.027538832277059555,
      -0.050001565366983414,
      0.029416847974061966,
      0.05635170638561249,
      -0.008600853383541107,
      0.04266301915049553,
      -0.03704461455345154,
      0.0510646216571331,
      0.12489140778779984,
      -0.034826669842004776,
      0.03637269139289856,
      -0.06460786610841751,
      0.03972835838794708,
      0.13991214334964752,
      -0.032009243965148926,
      -0.08616938441991806,
      0.04166179522871971,
      -0.01190290879458189,
      -0.04623610898852348,
      0.0015434847446158528,
      -0.030209379270672798,
      -0.024015692993998528,
      -0.05152524635195732,
      -0.016922416165471077,
      -0.006056416314095259,
      0.008457573130726814,
      -0.0024209190160036087,
      -0.09189806878566742,
      0.03581027314066887,
      0.0499945767223835,
      -0.0760602280497551,
      0.024505043402314186,
      -0.07350631803274155,
      0.01620042510330677,
      -0.00432945229113102,
      0.05040913075208664,
      -0.050338637083768845,
      -0.018654953688383102,
      -0.011646224185824394,
      0.18133513629436493,
      -0.024165047332644463,
      -0.022436855360865593,
      0.04126346483826637,
      0.007073758170008659,
      -0.043803174048662186
    ],
    [
      -0.026727672666311264,
      -0.026303434744477272,
      -0.053842831403017044,
      -0.05909707769751549,
      0.04138126224279404,
      -0.05612179636955261,
      0.10165508836507797,
      0.08853141963481903,
      0.08289751410484314,
      -0.04867101088166237,
      0.08210168033838272,
      0.05328422039747238,
      0.01801326870918274,
      -0.019505422562360764,
      -0.04486386477947235,
      -0.11340835690498352,
      0.004289636388421059,
      -0.03173815831542015,
      -0.0961432158946991,
      0.08387395739555359,
      0.09193811565637589,
      -0.03874504193663597,
      -0.1079857349395752,
      0.047648970037698746,
      -0.01924165152013302,
      0.014261254109442234,
      -0.034269947558641434,
      -0.03145333006978035,
      0.044500548392534256,
      -0.05852782353758812,
      0.05181190371513367,
      0.06234120577573776,
      0.0333336777985096,
      0.004514393396675587,
      0.06815481930971146,
      0.09097644686698914,
      0.03133579343557358,
      -0.01751789264380932,
      -0.01165858656167984,
      -9.232049342244864e-05,
      0.013940387405455112,
      -0.01721818931400776,
      -0.01783156394958496,
      0.036697883158922195,
      0.021880969405174255,
      0.033819831907749176,
      -0.00834717322140932,
      0.010207179002463818,
      -0.043745338916778564,
      0.02078884094953537,
      -0.05014451593160629,
      -0.018793193623423576,
      -0.009405850432813168,
      0.153329536318779,
      -0.06777279824018478,
      -0.015539147891104221,
      -0.03472141921520233,
      -0.10202675312757492,
      -0.04716325178742409,
      0.0165251512080431,
      0.0004065009707119316,
      0.05737704411149025,
      -0.005161619745194912,
      0.015330095775425434,
      0.07391737401485443,
      -0.04776044562458992,
      -0.00960214901715517,
      0.012995468452572823,
      -0.015173918567597866,
      0.03646629676222801,
      0.08124730736017227,
      -0.10802632570266724,
      -0.06873367726802826,
      0.004146202001720667,
      0.024896329268813133,
      -0.004886493552476168,
      -0.028538459911942482,
      -0.022073136642575264,
      -0.04258299991488457,
      0.001420582877472043,
      0.004503462929278612,
      0.009733818471431732,
      0.046929530799388885,
      -0.08321954309940338,
      -0.11858934909105301,
      -0.034095119684934616,
      0.007089577149599791,
      -0.04399070888757706,
      0.11402606964111328,
      0.04213722050189972,
      0.005682954099029303,
      0.02266470529139042,
      0.06251887232065201,
      -0.04784499108791351,
      0.10141339898109436,
      0.01608763262629509,
      -0.011651667766273022,
      -0.04608071595430374,
      0.04478145390748978,
      0.028101740404963493,
      0.00739299738779664,
      0.00902187917381525,
      0.06326418370008469,
      -0.008850268088281155,
      -0.06257937848567963,
      -0.08171653002500534,
      -0.02722061239182949,
      0.10764522850513458,
      -0.017276007682085037,
      -0.022934727370738983,
      -0.05011967942118645,
      0.039040714502334595,
      0.09525451809167862,
      -0.07896904647350311,
      -0.024146152660250664,
      0.06495606899261475,
      -0.061428092420101166,
      -0.04975001513957977,
      0.04221636801958084,
      -0.04048469290137291,
      0.024002298712730408,
      0.06629639118909836,
      -0.06583637744188309,
      0.0062050363048911095,
      0.05399328097701073,
      0.05682092905044556,
      -0.06865081191062927,
      1.1242562051088748e-33,
      -0.06657876074314117,
      -0.06781895458698273,
      -0.061666280031204224,
      0.0530979223549366,
      -0.010079745203256607,
      0.03727077692747116,
      -0.021051734685897827,
      -0.07513706386089325,
      0.018608786165714264,
      0.1119767278432846,
      0.026348605751991272,
      -0.008667822927236557,
      -0.11388220638036728,
      0.0324813649058342,
      -0.05099679157137871,
      -0.08661309629678726,
      0.012578646652400494,
      0.03563296049833298,
      -0.008250026032328606,
      -0.013980366289615631,
      0.05248824879527092,
      0.03049318864941597,
      -0.027875714004039764,
      -0.016852207481861115,
      -0.009903667494654655,
      -0.052545834332704544,
      -0.06732872128486633,
      0.034697458148002625,
      -0.026899049058556557,
      0.018210651353001595,
      -0.00016645914001856,
      0.09022970497608185,
      0.03500533849000931,
      0.008840551599860191,
      -0.0995432436466217,
      0.07066136598587036,
      -0.1335413008928299,
      -0.05347846820950508,
      0.02827049419283867,
      0.013130349107086658,
      -0.04715374484658241,
      -0.01890386827290058,
      0.004016927909106016,
      0.02460681088268757,
      0.010846981778740883,
      -0.057782500982284546,
      -0.04536149650812149,
      0.018799960613250732,
      0.02175181172788143,
      -0.00020620319992303848,
      0.016858922317624092,
      -0.036949168890714645,
      0.004606342408806086,
      -0.0025813886895775795,
      -0.05513010919094086,
      0.0430065393447876,
      -0.034806299954652786,
      -0.05515080690383911,
      -0.1494688093662262,
      -0.0063054380007088184,
      0.06589595228433609,
      0.013003562577068806,
      -0.06911154836416245,
      0.015133490785956383,
      -0.04109346866607666,
      0.01082103792577982,
      0.016134118661284447,
      0.024111859500408173,
      0.02973501943051815,
      -0.0048540011048316956,
      -0.09842996299266815,
      0.03621601313352585,
      0.08366949111223221,
      0.014390122145414352,
      0.02061079815030098,
      -0.08299273997545242,
      0.030742276459932327,
      0.0014452867908403277,
      0.007088551297783852,
      0.025379396975040436,
      -0.05116301402449608,
      -0.014312716200947762,
      0.023178180679678917,
      0.09228747338056564,
      -0.017620805650949478,
      0.042616941034793854,
      -0.019714079797267914,
      -0.039065781980752945,
      -0.004198683425784111,
      0.008174917660653591,
      -0.033908575773239136,
      -0.061142291873693466,
      0.01782999373972416,
      0.08670585602521896,
      0.04188563674688339,
      -4.935832820835628e-33,
      0.001531184301711619,
      -0.05042513832449913,
      -0.06166774034500122,
      0.03023035079240799,
      -0.035471826791763306,
      -0.006263294722884893,
      -0.034077178686857224,
      0.05461586266756058,
      -0.010737366043031216,
      -0.09324108064174652,
      -0.11622194945812225,
      0.05367254838347435,
      -0.04623129218816757,
      -0.018179263919591904,
      -0.05003928765654564,
      -0.03202839195728302,
      0.037695594131946564,
      -0.012795677408576012,
      0.046991072595119476,
      0.044770777225494385,
      -0.009189726784825325,
      -0.013045684434473515,
      0.03508700430393219,
      0.0537792406976223,
      -0.00439090933650732,
      -0.01071274932473898,
      -0.0013581106904894114,
      0.10285242646932602,
      0.07877574115991592,
      0.031335264444351196,
      0.03921545669436455,
      -0.02988080121576786,
      0.02569737285375595,
      0.023095253854990005,
      -0.04992293193936348,
      -0.06414639949798584,
      -0.028563354164361954,
      0.002048938302323222,
      -0.008149703033268452,
      -0.029930254444479942,
      0.11909417808055878,
      -0.022120194509625435,
      -0.009532013908028603,
      -0.03209768235683441,
      0.015173564665019512,
      0.0466572642326355,
      0.0522800013422966,
      -0.08884745836257935,
      0.08689185231924057,
      -0.07328736782073975,
      -0.0049461242742836475,
      0.023366037756204605,
      0.019699223339557648,
      0.07812856882810593,
      0.011447394266724586,
      0.023187045007944107,
      0.027891267091035843,
      -0.027147576212882996,
      -0.059057414531707764,
      0.015259629115462303,
      0.005699720233678818,
      0.09717585891485214,
      -0.005460279528051615,
      0.04549841582775116,
      0.012716188095510006,
      -0.028194496408104897,
      -0.0704600140452385,
      -0.002371128648519516,
      -0.06613846123218536,
      0.022334864363074303,
      0.05316997319459915,
      -0.0592874214053154,
      -0.003417922416701913,
      -0.0522649809718132,
      0.12233246117830276,
      -0.008156749419867992,
      -0.10065588355064392,
      -0.06403456628322601,
      -0.028393352404236794,
      -0.05726196989417076,
      -0.0275832898914814,
      0.04353221878409386,
      -0.025702955201268196,
      0.09562646597623825,
      -0.0379815511405468,
      -0.05680365860462189,
      -0.02171831764280796,
      0.0018464132444933057,
      0.049902502447366714,
      0.039839960634708405,
      0.004571522120386362,
      -0.06971742957830429,
      0.07842426002025604,
      -0.04174297675490379,
      -0.04634635150432587,
      -5.26990326932264e-08,
      -0.0296542439609766,
      0.011146966367959976,
      0.04546736180782318,
      -0.06416210532188416,
      0.0057126861065626144,
      -0.026639580726623535,
      0.03322344273328781,
      0.004763702861964703,
      0.05711529031395912,
      0.04733416438102722,
      -0.06435107439756393,
      -0.003687181742861867,
      -0.02621779963374138,
      -0.11714820563793182,
      0.02000613696873188,
      0.015616173855960369,
      -0.06194213032722473,
      0.0089113162830472,
      -0.018357066437602043,
      0.019368015229701996,
      -0.07020731270313263,
      -0.04674922674894333,
      0.05943209305405617,
      0.017324799671769142,
      -0.008401782251894474,
      0.003889662679284811,
      0.08312424272298813,
      0.0955771952867508,
      -0.008359450846910477,
      0.05656459555029869,
      -0.05616713687777519,
      0.04462966322898865,
      0.03431891277432442,
      0.03372727334499359,
      -0.08397746831178665,
      0.043381210416555405,
      -0.011779827065765858,
      -0.04688915237784386,
      -0.03698163107037544,
      0.012562070973217487,
      -0.054093725979328156,
      -0.02153412066400051,
      0.012373258359730244,
      -0.02905203215777874,
      0.06664266437292099,
      -0.011592278257012367,
      -0.09164754301309586,
      0.030825907364487648,
      0.08605550974607468,
      -0.09732742607593536,
      -0.0074429986998438835,
      0.012582194060087204,
      0.006743280682712793,
      0.06943056732416153,
      0.027648666873574257,
      -0.037310708314180374,
      -0.01367278303951025,
      0.05503598973155022,
      0.049062687903642654,
      0.014465313404798508,
      0.03803111985325813,
      0.026978278532624245,
      0.07897626608610153,
      -0.06213696300983429
    ],
    [
      -0.05977470055222511,
      -0.014792327769100666,
      -0.07745147496461868,
      -0.04678253084421158,
      0.07290694862604141,
      -0.024176547303795815,
      0.16081298887729645,
      0.06594105064868927,
      0.10056711733341217,
      0.032870132476091385,
      0.008691689930856228,
      0.0006040981970727444,
      -0.017928188666701317,
      -0.015367676503956318,
      -0.02980455383658409,
      -0.0783078670501709,
      -0.02739013358950615,
      -0.03590516000986099,
      -0.03596252575516701,
      0.00282736262306571,
      0.06063777953386307,
      -0.10448595881462097,
      -0.05128660425543785,
      -0.02432214468717575,
      -0.0007437492022290826,
      -0.044885337352752686,
      -0.06514451652765274,
      0.005743092391639948,
      -0.017541252076625824,
      -0.04700002446770668,
      0.0568561926484108,
      -0.022547360509634018,
      0.042511869221925735,
      -0.009597303345799446,
      0.0008863942930474877,
      0.060420356690883636,
      -0.029884783551096916,
      -0.004589416086673737,
      -0.02787012606859207,
      -0.010317799635231495,
      -0.008695142343640327,
      -0.025702031329274178,
      0.01653161458671093,
      0.044121261686086655,
      0.0684213638305664,
      0.04534200206398964,
      0.022315548732876778,
      0.01177919376641512,
      -0.07609933614730835,
      0.003014008281752467,
      0.036092281341552734,
      0.023241788148880005,
      -0.040464404970407486,
      0.08807601779699326,
      -0.059301529079675674,
      0.05055692419409752,
      0.008446477353572845,
      -0.0014892912004143,
      -0.03205598518252373,
      -0.03993772342801094,
      -0.02831421233713627,
      -0.0921621173620224,
      -0.10469384491443634,
      -0.006611168384552002,
      -0.025297166779637337,
      0.02456635981798172,
      -0.015155819244682789,
      0.00042803926044143736,
      -0.021254029124975204,
      0.0197539571672678,
      0.05002736300230026,
      -0.04331328719854355,
      -0.04524209722876549,
      -0.06600016355514526,
      0.08257149159908295,
      0.03928606957197189,
      -0.06987827271223068,
      0.043875306844711304,
      -0.0053841411136090755,
      -0.03546416759490967,
      -0.013553665950894356,
      0.0052488138899207115,
      0.07009518146514893,
      -0.029940171167254448,
      0.07494828850030899,
      0.004259619861841202,
      0.0010683296713978052,
      -0.03002878651022911,
      0.0856858342885971,
      0.05519290640950203,
      -0.0031604706309735775,
      0.028982924297451973,
      0.10253740847110748,
      0.007415749132633209,
      -0.04867609590291977,
      0.11780423671007156,
      0.025329291820526123,
      0.004997525829821825,
      0.022979578003287315,
      0.05135199800133705,
      0.009869685396552086,
      0.037763431668281555,
      0.022530820220708847,
      0.009924262762069702,
      0.026932071894407272,
      -0.0388440303504467,
      -0.061927907168865204,
      0.05352189019322395,
      -0.05509180948138237,
      -0.06331103295087814,
      -0.013478044420480728,
      0.05763178691267967,
      0.11674627661705017,
      -0.018718918785452843,
      -0.03831886127591133,
      0.08776592463254929,
      -0.11561360955238342,
      -0.008266153745353222,
      -0.002034982433542609,
      -0.04830699786543846,
      0.06846343725919724,
      0.05142331123352051,
      0.05622601881623268,
      0.0003031788510270417,
      -0.020155973732471466,
      -0.04469608888030052,
      -0.01169001217931509,
      4.270176451245876e-33,
      -0.09174980968236923,
      0.01732102409005165,
      -0.03462987393140793,
      -0.04130055010318756,
      -0.04912182688713074,
      -0.027786530554294586,
      0.017287282273173332,
      0.03500863537192345,
      0.029951870441436768,
      0.07402888685464859,
      0.02328057400882244,
      0.03276671841740608,
      0.032966237515211105,
      0.02411779761314392,
      -0.007918788120150566,
      -0.0026475093327462673,
      -0.009259037673473358,
      0.011647062376141548,
      0.07844124734401703,
      -0.036625027656555176,
      0.06065667048096657,
      -0.019790858030319214,
      0.007342600729316473,
      0.008427895605564117,
      0.021213561296463013,
      0.030069654807448387,
      -0.05436508357524872,
      0.060101162642240524,
      -0.03345899283885956,
      0.03565217927098274,
      0.01618647761642933,
      0.057120636105537415,
      0.0645938292145729,
      -0.05138389766216278,
      -0.03846888616681099,
      0.05076737329363823,
      -0.03558621555566788,
      -0.07591278851032257,
      -0.05639255791902542,
      -0.04562624916434288,
      0.01735880598425865,
      0.02955067716538906,
      -0.024134447798132896,
      0.039592813700437546,
      -0.05533267557621002,
      -0.05704997107386589,
      0.001566951279528439,
      0.009213242679834366,
      -0.0071515366435050964,
      0.1319817453622818,
      -0.0193751472979784,
      -0.04813859239220619,
      0.04955347999930382,
      0.0729045420885086,
      -0.07408329844474792,
      0.015832124277949333,
      -0.04661693423986435,
      -0.07003210484981537,
      -0.041862085461616516,
      -0.0002764197706710547,
      0.08229498565196991,
      -0.06386490166187286,
      0.030929476022720337,
      0.025684619322419167,
      -0.06706634908914566,
      0.057700544595718384,
      0.05435679852962494,
      -0.060475680977106094,
      0.0013012172421440482,
      0.06526143848896027,
      -0.008361796848475933,
      0.056230898946523666,
      0.06662529706954956,
      -0.05945710092782974,
      0.04641997069120407,
      -0.051682647317647934,
      0.06083406135439873,
      0.07718159258365631,
      -0.04881814494729042,
      -0.03134649246931076,
      -0.04924396052956581,
      -0.03159298375248909,
      -0.019574007019400597,
      0.048075299710035324,
      0.0005068155005574226,
      0.039822038263082504,
      -0.019575387239456177,
      -0.11401121318340302,
      0.00872641708701849,
      -0.023426678031682968,
      0.059076640754938126,
      -0.09890235960483551,
      -0.008817259222269058,
      0.05546259507536888,
      0.020308515056967735,
      -2.845752069853768e-33,
      0.052909329533576965,
      -0.03763005882501602,
      -0.032125722616910934,
      -0.008097033016383648,
      -0.010289403609931469,
      0.00416323309764266,
      -0.026011139154434204,
      -0.02026660367846489,
      -0.008102412335574627,
      -0.03364838659763336,
      -0.12476050108671188,
      0.024318799376487732,
      0.022968042641878128,
      -0.001849598134867847,
      0.032305214554071426,
      -0.06366441398859024,
      0.0016908253310248256,
      -0.04847411438822746,
      0.03273744508624077,
      0.008767380379140377,
      0.00455077039077878,
      0.020740332081913948,
      0.04570255056023598,
      -0.013501543551683426,
      0.006384563632309437,
      0.05390190705657005,
      -0.047854699194431305,
      0.06823326647281647,
      0.00033955692197196186,
      0.004872498102486134,
      0.043355803936719894,
      -0.0876140370965004,
      -0.09030140936374664,
      -0.022786350920796394,
      -0.028262266889214516,
      -0.014216790907084942,
      0.04512115940451622,
      0.1256096065044403,
      -0.015500187873840332,
      0.09263923019170761,
      0.09635872393846512,
      -0.09011389315128326,
      0.034656282514333725,
      0.02572324499487877,
      0.015853390097618103,
      0.0012868477497249842,
      -0.004011508077383041,
      -0.03093186393380165,
      0.08608025312423706,
      -0.08626004308462143,
      0.03235217556357384,
      0.021926626563072205,
      -0.053231097757816315,
      0.07338979095220566,
      0.0009998271707445383,
      0.08121316134929657,
      0.10535124689340591,
      -0.04978194087743759,
      0.015872705727815628,
      -0.04107645899057388,
      -0.0027829965110868216,
      -0.05632077530026436,
      0.032950662076473236,
      0.11834494769573212,
      0.05841359496116638,
      -0.045324381440877914,
      -0.07160481065511703,
      -0.024609431624412537,
      -0.032839689403772354,
      0.1476539522409439,
      0.0055757551454007626,
      -0.020705174654722214,
      0.01854568161070347,
      -0.05787251517176628,
      0.06789910048246384,
      0.05963413044810295,
      -0.0673130601644516,
      -0.051385559141635895,
      -0.031257737427949905,
      -0.05978897586464882,
      -0.09127546846866608,
      0.007963856682181358,
      0.021348409354686737,
      0.07063296437263489,
      -0.054282575845718384,
      -0.07710250467061996,
      0.04926357418298721,
      -0.09658578783273697,
      0.009697374887764454,
      0.02459745667874813,
      0.008428797125816345,
      0.020750675350427628,
      0.15137088298797607,
      -0.012411516159772873,
      -0.021291160956025124,
      -5.216124421281165e-08,
      -0.06211073324084282,
      0.01760501228272915,
      -0.011879281140863895,
      0.01654873974621296,
      0.03165135905146599,
      0.012165243737399578,
      -0.06292498111724854,
      0.04874272644519806,
      -0.07971362769603729,
      0.01674601435661316,
      0.03624561429023743,
      -0.008975695818662643,
      -0.019922643899917603,
      -0.07041608542203903,
      5.192127446207451e-06,
      0.01071575190871954,
      -0.016215600073337555,
      -0.03684297576546669,
      -0.08688071370124817,
      -0.04315044730901718,
      -0.061255499720573425,
      0.017115360125899315,
      -0.0002146825281670317,
      -0.053402528166770935,
      0.020571934059262276,
      0.006439071614295244,
      0.08340490609407425,
      0.09413173049688339,
      0.008408413268625736,
      0.042328666895627975,
      -0.07324904948472977,
      0.006426647305488586,
      0.08394960314035416,
      0.049349769949913025,
      -0.007513896096497774,
      -0.009923476725816727,
      -0.0455700121819973,
      -0.04700445383787155,
      -0.023971639573574066,
      -0.033835530281066895,
      -0.0033641394693404436,
      -0.01870810054242611,
      0.0022313257213681936,
      0.044535305351018906,
      -0.006657658610492945,
      0.04530063644051552,
      -0.08988508582115173,
      0.028384648263454437,
      0.11350781470537186,
      -0.02992301434278488,
      -0.007821685634553432,
      -0.07068963348865509,
      -0.04498326778411865,
      0.042359475046396255,
      0.025569867342710495,
      -0.0901871919631958,
      0.029560791328549385,
      -0.0005513871437869966,
      0.14156800508499146,
      0.037390075623989105,
      0.017305631190538406,
      0.034462276846170425,
      -0.0401495136320591,
      -0.0695529505610466
    ],
    [
      0.023438306525349617,
      -0.007266279309988022,
      -0.15897364914417267,
      -0.02190862037241459,
      -0.11050432920455933,
      0.00961709301918745,
      0.06127568706870079,
      0.06826280802488327,
      -0.03315603360533714,
      0.05188366398215294,
      -0.005679017398506403,
      -0.07421334832906723,
      -0.03603693097829819,
      -0.030489925295114517,
      0.011101617477834225,
      -0.02002011425793171,
      0.007345333229750395,
      -0.07541776448488235,
      -0.021999018266797066,
      0.0251864455640316,
      0.0344756618142128,
      -0.058283157646656036,
      0.017793897539377213,
      -0.04514286667108536,
      -0.006204516626894474,
      -0.023858483880758286,
      -0.038549937307834625,
      0.007945910096168518,
      -0.06295508146286011,
      -0.06393618136644363,
      0.07968886941671371,
      0.037817828357219696,
      0.0852094441652298,
      0.001898058457300067,
      0.042129285633563995,
      0.012528297491371632,
      -0.003988384734839201,
      -0.04565945640206337,
      -0.01934676803648472,
      -0.017596926540136337,
      0.020583052188158035,
      -0.016979636624455452,
      -0.06603356450796127,
      -0.03760829567909241,
      -0.06790335476398468,
      0.004230280872434378,
      -0.03311639651656151,
      0.056429918855428696,
      -0.028624260798096657,
      0.04884907975792885,
      0.002160141244530678,
      -0.002356909215450287,
      0.0025039766915142536,
      -0.018494104966521263,
      -0.033222779631614685,
      0.11452905088663101,
      0.004022883251309395,
      0.026616079732775688,
      -0.0071028913371264935,
      -0.04429352283477783,
      -0.04429503157734871,
      -0.0005507883615791798,
      -0.047487158328294754,
      0.020727960392832756,
      -0.039243511855602264,
      0.10350850969552994,
      -0.0324832983314991,
      0.02357032336294651,
      -0.035432565957307816,
      -0.029916971921920776,
      0.01611652970314026,
      -0.08787444233894348,
      -0.021526340395212173,
      -0.07911587506532669,
      0.052659209817647934,
      -0.046632200479507446,
      -0.023068001493811607,
      0.016496362164616585,
      -0.014198069460690022,
      -0.10816573351621628,
      0.027124885469675064,
      0.012129920534789562,
      0.0101399514824152,
      0.017251379787921906,
      0.027972131967544556,
      0.02693873643875122,
      0.014467207714915276,
      0.00941453967243433,
      0.08594748377799988,
      0.018579859286546707,
      0.043058570474386215,
      -0.0326617993414402,
      -0.010935073718428612,
      -0.05453731492161751,
      0.06454474478960037,
      0.06913435459136963,
      0.006837211083620787,
      -0.04977768659591675,
      -0.026551606133580208,
      0.08749057352542877,
      0.014819111675024033,
      -0.00491672707721591,
      0.05136414244771004,
      0.11690318584442139,
      0.07468768209218979,
      -0.07319797575473785,
      0.06983015686273575,
      0.043977972120046616,
      -0.009938031435012817,
      0.01834552176296711,
      -0.002143140882253647,
      0.05510713905096054,
      0.012462785467505455,
      -0.08841496706008911,
      0.06852008402347565,
      0.010453587397933006,
      -0.009413644671440125,
      -0.022757040336728096,
      0.06211379915475845,
      0.013933420181274414,
      0.09513606131076813,
      -0.008797320537269115,
      -0.10788723081350327,
      0.001579068135470152,
      0.022085752338171005,
      0.09830460697412491,
      -0.04382888600230217,
      3.769562059905465e-33,
      -0.06466173380613327,
      -0.06703795492649078,
      0.04291410371661186,
      0.007004173472523689,
      0.03511904552578926,
      -0.005211629904806614,
      0.06746616959571838,
      0.042753495275974274,
      0.05858447775244713,
      0.05362537130713463,
      -0.0056933010928332806,
      0.03724556416273117,
      -0.08903851360082626,
      -0.029652874916791916,
      -0.03341155871748924,
      0.0015345767606049776,
      -0.035334520041942596,
      0.025910457596182823,
      0.1385967880487442,
      -0.016336269676685333,
      0.00399831123650074,
      -0.03193766996264458,
      -0.030267270281910896,
      -0.0574457012116909,
      0.06054970249533653,
      0.05453135445713997,
      -0.005336797796189785,
      0.023163078352808952,
      -0.04099634662270546,
      -0.005690679885447025,
      0.11877422034740448,
      0.008028578013181686,
      0.05396942421793938,
      0.021272527053952217,
      -0.1456589549779892,
      0.03595848008990288,
      -0.11370755732059479,
      -0.0015401291893795133,
      -0.026229195296764374,
      -0.020377561450004578,
      0.014808828011155128,
      -0.006479848176240921,
      0.0037513989955186844,
      0.028608983382582664,
      -0.08177223801612854,
      -0.05857842415571213,
      0.012665911577641964,
      0.05449219048023224,
      0.1351589411497116,
      0.0723671093583107,
      -0.010224629193544388,
      -0.018305394798517227,
      0.015229431912302971,
      0.030605487525463104,
      -0.02007376216351986,
      -0.015138482674956322,
      -0.04891362413764,
      -0.017531748861074448,
      -0.03269525244832039,
      -0.051496509462594986,
      -0.03426443785429001,
      -0.07404634356498718,
      0.033168401569128036,
      -0.03031771443784237,
      -0.011845600791275501,
      0.10785145312547684,
      0.02134242095053196,
      -0.04460207745432854,
      -0.027235452085733414,
      -0.01662268303334713,
      -0.11245369911193848,
      -0.047710832208395004,
      0.04001922532916069,
      -0.04992910847067833,
      -0.012454315088689327,
      -0.00403432035818696,
      0.06874255836009979,
      0.002635793760418892,
      -0.04569658264517784,
      -0.05311615392565727,
      -0.026446620002388954,
      0.08891426771879196,
      0.0009555589640513062,
      0.1123538389801979,
      0.05713659152388573,
      -0.04021657258272171,
      0.08900846540927887,
      -0.036992840468883514,
      0.014230001717805862,
      0.005973475985229015,
      0.007018692791461945,
      -0.007118190173059702,
      -0.0629933550953865,
      0.04541509225964546,
      0.009492551907896996,
      -3.6227115914190674e-33,
      0.06415937840938568,
      -0.05154028907418251,
      -0.0349387489259243,
      0.022198768332600594,
      -0.03362113982439041,
      0.007743001449853182,
      0.02323848195374012,
      0.04628623276948929,
      0.04298354312777519,
      0.05300650745630264,
      0.037821605801582336,
      0.05739467218518257,
      -0.05788952857255936,
      -0.09390230476856232,
      -0.011714046820998192,
      0.050620514899492264,
      -0.06010353937745094,
      0.01806633174419403,
      0.07915833592414856,
      -0.022280950099229813,
      -0.06507857143878937,
      0.06125522777438164,
      0.020536376163363457,
      -0.013911286368966103,
      -0.010740640573203564,
      -0.045490559190511703,
      0.07183096557855606,
      0.012340289540588856,
      0.033368732780218124,
      -0.07500359416007996,
      -0.014298386871814728,
      -0.03757083788514137,
      -0.07540220767259598,
      0.05172887444496155,
      -0.03029530867934227,
      -0.031203150749206543,
      0.02262670174241066,
      0.052893973886966705,
      -0.0924529954791069,
      0.12389755994081497,
      0.07086223363876343,
      0.022160552442073822,
      -0.09338168054819107,
      0.023611465469002724,
      0.0029399425256997347,
      0.0372527651488781,
      0.04143616557121277,
      -0.047057293355464935,
      -0.03370627015829086,
      -0.04834357649087906,
      0.0063436273485422134,
      -0.14106671512126923,
      0.014747214503586292,
      0.018137238919734955,
      -0.032286934554576874,
      0.08917853981256485,
      0.06464045494794846,
      -0.029108550399541855,
      -0.02607724256813526,
      -0.054003410041332245,
      0.019573748111724854,
      0.029648058116436005,
      -0.03297003358602524,
      0.051326535642147064,
      -0.01661107875406742,
      -0.023947034031152725,
      -0.03384508192539215,
      0.018233701586723328,
      -0.019527196884155273,
      0.055882420390844345,
      -0.025943418964743614,
      -0.05263429135084152,
      0.021609758958220482,
      -0.05275052785873413,
      0.0540444478392601,
      0.015514950267970562,
      -0.01956203207373619,
      -0.0859147384762764,
      -0.02068604901432991,
      -0.05342083424329758,
      -0.0021936832927167416,
      0.04699178785085678,
      -0.020613551139831543,
      -0.011667442508041859,
      -0.09309063851833344,
      0.03759079799056053,
      0.04675326123833656,
      0.0948200449347496,
      0.00524547602981329,
      0.09098184108734131,
      -0.06455763429403305,
      0.0450994111597538,
      0.043999411165714264,
      0.02670828066766262,
      -0.07758621871471405,
      -5.307899897388779e-08,
      -0.09007575362920761,
      0.015109439380466938,
      -0.012224721722304821,
      0.030301610007882118,
      0.01910938322544098,
      -0.01275781262665987,
      0.03242107108235359,
      -0.001578464056365192,
      -0.05643143877387047,
      0.0108730373904109,
      0.00484923180192709,
      -0.006037099752575159,
      0.02536056563258171,
      -0.05651652440428734,
      -0.03909183666110039,
      -0.051440536975860596,
      -0.01987837441265583,
      0.040053077042102814,
      -0.08704204857349396,
      -0.02114984765648842,
      -0.03181585296988487,
      0.09625141322612762,
      0.0516720749437809,
      -0.019813207909464836,
      0.05264539271593094,
      -0.0068063149228692055,
      -0.00321497512049973,
      0.044930629432201385,
      -0.03466902673244476,
      0.141374871134758,
      -0.016286227852106094,
      0.03797859698534012,
      0.08801840990781784,
      -0.09474349766969681,
      -0.11203622817993164,
      -0.005507472902536392,
      -0.00798063538968563,
      -0.020436881110072136,
      0.013031725771725178,
      -0.006917152088135481,
      -0.0498678982257843,
      -0.06690775603055954,
      -0.09157397598028183,
      -0.011840606108307838,
      -0.0021199495531618595,
      -0.007558903191238642,
      -0.04993573948740959,
      0.08577480912208557,
      0.12628783285617828,
      -0.07685719430446625,
      0.017803307622671127,
      0.05017922818660736,
      0.029405351728200912,
      0.008821947500109673,
      0.03130475431680679,
      -0.008655540645122528,
      -0.001941206748597324,
      0.018376005813479424,
      0.08960838615894318,
      0.03180856630206108,
      0.009261216968297958,
      0.014703551307320595,
      0.004327632952481508,
      -0.04112258553504944
    ],
    [
      0.05986148864030838,
      0.023980947211384773,
      -0.0323660708963871,
      0.044492870569229126,
      -0.010629016906023026,
      0.04651132971048355,
      0.08688297122716904,
      0.06691910326480865,
      -0.0024700877256691456,
      0.047618430107831955,
      0.025242360308766365,
      -0.0602424219250679,
      0.013046867214143276,
      -0.01925772614777088,
      0.0017435691552236676,
      -0.011231066659092903,
      -0.0398416668176651,
      -0.03322582691907883,
      -0.044908128678798676,
      0.06533969193696976,
      0.0646512359380722,
      0.06131169945001602,
      -0.03024967946112156,
      -0.0660502016544342,
      -0.04805804044008255,
      0.10358629375696182,
      -0.03662696108222008,
      0.01902567595243454,
      -0.08357949554920197,
      0.0144217973574996,
      -0.030240248888731003,
      0.049449093639850616,
      -0.0866360142827034,
      0.0380193255841732,
      0.12974151968955994,
      -0.053061872720718384,
      -0.03974635899066925,
      0.01022709533572197,
      0.0653834342956543,
      0.0684594064950943,
      -0.027805935591459274,
      -0.03708084300160408,
      0.03280947729945183,
      -0.13315363228321075,
      -0.021101558580994606,
      -0.11393565684556961,
      -0.04388373717665672,
      -0.05463945493102074,
      0.05161631107330322,
      0.013826749287545681,
      -0.06664733588695526,
      0.05505094677209854,
      -0.011639419943094254,
      -0.010889214463531971,
      0.08171112090349197,
      0.06896030157804489,
      -0.03175516799092293,
      -0.028178676962852478,
      -0.015753217041492462,
      -0.06513155996799469,
      -0.009876297786831856,
      -0.03364476189017296,
      0.0332091823220253,
      -0.021159835159778595,
      -0.05244201794266701,
      0.00972956046462059,
      -0.049485448747873306,
      0.06774159520864487,
      -0.03816976398229599,
      -0.02001204900443554,
      -0.03423416242003441,
      0.0439787283539772,
      -0.014951172284781933,
      -0.026321448385715485,
      0.04675200954079628,
      -0.01249721646308899,
      0.009045576676726341,
      0.0475284568965435,
      0.006610427517443895,
      -0.17040839791297913,
      0.03945252299308777,
      -0.024199580773711205,
      0.003836666001006961,
      0.0006269334116950631,
      0.018092097714543343,
      0.02895921841263771,
      0.03279777616262436,
      0.005463513545691967,
      0.03865153342485428,
      -0.012985726818442345,
      0.06040922924876213,
      -0.019743092358112335,
      0.030752146616578102,
      0.02761939726769924,
      -0.047642942517995834,
      0.033098820596933365,
      -0.010364606976509094,
      0.018424691632390022,
      -0.05061934515833855,
      0.07048263400793076,
      0.04265984892845154,
      -0.04343952238559723,
      -0.05191187933087349,
      0.09954338520765305,
      0.011939131654798985,
      -0.04462931677699089,
      0.00949995405972004,
      -0.03291056305170059,
      0.006176733411848545,
      -0.020503392443060875,
      -0.037214770913124084,
      0.07033558934926987,
      -0.11679483205080032,
      -0.1071346253156662,
      -0.09272706508636475,
      -0.02774224989116192,
      0.022050896659493446,
      -0.09330379962921143,
      0.03799080848693848,
      -0.03047230653464794,
      0.03487461805343628,
      -0.03929922729730606,
      -0.11258923262357712,
      0.05028960481286049,
      -0.06232130527496338,
      -0.008320807479321957,
      0.022722812369465828,
      4.114145739221541e-33,
      0.011018406599760056,
      -0.04003119096159935,
      -0.008060455322265625,
      -0.020239580422639847,
      0.07691606134176254,
      -0.047562021762132645,
      0.02253163605928421,
      0.05183231830596924,
      0.02724592760205269,
      0.05874260514974594,
      -0.0743471160531044,
      0.0024328192230314016,
      -0.05242741480469704,
      -0.037781722843647,
      -0.13465674221515656,
      -0.018154479563236237,
      -0.03431609272956848,
      -0.0021706128027290106,
      -0.011868705041706562,
      -0.03765913471579552,
      -0.016978591680526733,
      0.01645268313586712,
      0.06740307807922363,
      -0.02040836773812771,
      0.006759508512914181,
      0.005261356011033058,
      -0.05196597799658775,
      0.037059932947158813,
      0.014670008793473244,
      0.0067082419991493225,
      0.09034513682126999,
      0.006548832170665264,
      0.09806239604949951,
      0.02670631930232048,
      -0.01481463573873043,
      0.007899553515017033,
      -0.0706360936164856,
      -0.02511266991496086,
      0.008075150661170483,
      0.050701264292001724,
      -0.02871193177998066,
      -0.03406586870551109,
      -0.0058163548819720745,
      -0.004440217278897762,
      0.016514355316758156,
      -0.04406961053609848,
      0.03853395953774452,
      0.05601395666599274,
      0.06617627292871475,
      -0.06512363255023956,
      -0.0375148244202137,
      0.03315429389476776,
      -0.07029185444116592,
      0.021376416087150574,
      0.0198520477861166,
      -0.026327993720769882,
      -0.11668889969587326,
      0.026900898665189743,
      0.03029213659465313,
      0.041524339467287064,
      -0.14358682930469513,
      -0.019906800240278244,
      -0.0013766048941761255,
      0.021070638671517372,
      -0.030227957293391228,
      0.09878278523683548,
      0.005053357686847448,
      0.005034605506807566,
      -0.021126605570316315,
      -0.1191970556974411,
      0.023629717528820038,
      -0.06840106099843979,
      0.11388427764177322,
      0.035130396485328674,
      0.09228265285491943,
      -0.022541023790836334,
      0.04251011461019516,
      -0.01035474706441164,
      -0.07124034315347672,
      -0.02901512198150158,
      -0.03667433559894562,
      -0.028814153745770454,
      -0.06599874049425125,
      0.07204384356737137,
      -0.05607723817229271,
      -0.0032847204711288214,
      0.058253731578588486,
      -0.07373569905757904,
      0.06108139827847481,
      0.04134682938456535,
      -0.06198829784989357,
      -0.020518997684121132,
      -0.0832919180393219,
      -0.09852342307567596,
      0.03600454330444336,
      -7.449761569893481e-33,
      0.02979874424636364,
      0.0361674427986145,
      -0.02736089751124382,
      -0.07176504284143448,
      -0.03286626189947128,
      -0.00454531516879797,
      0.08116364479064941,
      0.04194484278559685,
      0.012735136784613132,
      0.04627019912004471,
      0.009976852685213089,
      -0.01351949106901884,
      -0.01886679045855999,
      -0.0759115070104599,
      -0.09157422184944153,
      0.058227211236953735,
      -0.05262813717126846,
      0.06207653507590294,
      0.017472343519330025,
      0.013317096047103405,
      0.007899753749370575,
      0.05605804920196533,
      -0.013258499093353748,
      0.056717436760663986,
      -0.0460476316511631,
      -0.023488027974963188,
      0.06664648652076721,
      -0.030427083373069763,
      0.009644624777138233,
      0.022827042266726494,
      0.02874203957617283,
      0.02797405607998371,
      -0.07568594813346863,
      0.14471206068992615,
      -0.011024843901395798,
      0.014432469382882118,
      0.024403873831033707,
      0.06958703696727753,
      -0.038400132209062576,
      0.09150919318199158,
      -0.03017604723572731,
      0.003567851148545742,
      -0.005429353564977646,
      -0.0019862460903823376,
      -0.011963879689574242,
      -0.029636060819029808,
      0.08580704033374786,
      -0.004051340278238058,
      -0.061452243477106094,
      0.0007091135485097766,
      0.00023022147070150822,
      -0.10690782964229584,
      -0.05734281986951828,
      0.008358638733625412,
      -0.05911396071314812,
      0.026314090937376022,
      0.0246517825871706,
      -0.025353897362947464,
      -0.039188336580991745,
      -0.03568698838353157,
      0.040465157479047775,
      0.006911925505846739,
      0.05652822554111481,
      0.024447893723845482,
      0.08793903887271881,
      -0.025799043476581573,
      0.0055382391437888145,
      -0.02643958106637001,
      0.05681060999631882,
      0.013249928131699562,
      -0.023258700966835022,
      -0.0246301107108593,
      -0.00874075386673212,
      0.005958674941211939,
      0.11108102649450302,
      0.03265683725476265,
      -0.04202494025230408,
      -0.022445008158683777,
      -0.033084966242313385,
      0.018924739211797714,
      0.047245707362890244,
      0.05148056149482727,
      0.007044803351163864,
      -0.1479296088218689,
      -0.08204545825719833,
      -0.00391460070386529,
      0.03498997539281845,
      0.0882885679602623,
      -0.07936378568410873,
      -0.012648255564272404,
      -0.05492405220866203,
      -0.0355311743915081,
      0.038969993591308594,
      0.013920390047132969,
      -0.022929035127162933,
      -5.220284293727673e-08,
      -0.06382094323635101,
      0.011207995936274529,
      -0.032342471182346344,
      -0.018398717045783997,
      -0.04428652301430702,
      -0.029926998540759087,
      0.07780992984771729,
      0.018217291682958603,
      -0.0627799853682518,
      -0.03396318480372429,
      0.039881397038698196,
      0.0675356313586235,
      -0.019845999777317047,
      -0.07583590596914291,
      -0.0693870559334755,
      -0.014987668953835964,
      -0.007066390477120876,
      -0.018823683261871338,
      -0.029674291610717773,
      -0.012653940357267857,
      0.0394461564719677,
      0.04245694726705551,
      0.050319571048021317,
      -0.019031178206205368,
      0.06915486603975296,
      0.00626419996842742,
      -0.03316331282258034,
      -0.006110075395554304,
      -0.013079116120934486,
      0.08780723810195923,
      0.04341188818216324,
      -0.0382077693939209,
      0.0015792391495779157,
      -0.04289991408586502,
      0.013062868267297745,
      -0.021607382223010063,
      0.0377066507935524,
      -0.0248572900891304,
      0.04410463199019432,
      0.013244959525763988,
      -0.06020800396800041,
      0.0018668039701879025,
      -0.10124586522579193,
      0.03603983670473099,
      0.061113253235816956,
      -0.03831519931554794,
      -0.1279068887233734,
      0.055085133761167526,
      0.11453535407781601,
      -0.07712798565626144,
      0.04445590078830719,
      -0.01945296861231327,
      -0.002679983153939247,
      -0.06949545443058014,
      -0.06831903010606766,
      -0.02651226334273815,
      0.01086344663053751,
      0.06443332880735397,
      0.01213103998452425,
      -8.763458754401654e-05,
      -0.07282177358865738,
      0.020712917670607567,
      -0.014835077337920666,
      -0.0006335575599223375
    ],
    [
      -0.045748498290777206,
      -0.03695378080010414,
      -0.08064360916614532,
      -0.025916749611496925,
      0.04601592198014259,
      -0.0633004754781723,
      -0.01688150316476822,
      -0.04962318763136864,
      -0.035420119762420654,
      -0.02190670557320118,
      -0.020530831068754196,
      0.02511267177760601,
      -0.015394050627946854,
      -0.079945407807827,
      -0.03687290474772453,
      0.0036984961479902267,
      0.05314061790704727,
      -0.13690873980522156,
      -0.00859302468597889,
      -0.0706319585442543,
      -0.07994531095027924,
      -0.08029553294181824,
      0.006417734548449516,
      0.016726678237318993,
      -0.04245021566748619,
      -0.014955909922719002,
      -0.07471337169408798,
      -0.011432030238211155,
      -0.044579245150089264,
      -0.04371260106563568,
      0.04619194567203522,
      0.0811765268445015,
      -0.036212336272001266,
      0.008667897433042526,
      0.00011202008317923173,
      -0.031052272766828537,
      0.05982975661754608,
      -0.027516810223460197,
      -0.0603606253862381,
      -0.00481761060655117,
      0.03336722403764725,
      -0.07984837144613266,
      -0.016774678602814674,
      -0.05708673223853111,
      -0.03460463136434555,
      -0.10549736768007278,
      -0.08026015013456345,
      -0.020311584696173668,
      -0.02615908719599247,
      -0.044403694570064545,
      -0.05555320158600807,
      -0.05017593875527382,
      0.04150422289967537,
      0.05989929288625717,
      0.0662137046456337,
      0.07886268943548203,
      -0.01459470670670271,
      0.009850534610450268,
      0.017912227660417557,
      0.002915792167186737,
      -0.015015754848718643,
      -0.028301414102315903,
      -0.06977848708629608,
      0.0500556118786335,
      0.0061789932660758495,
      6.179763295222074e-05,
      -0.05242304876446724,
      -0.03869645297527313,
      0.04646966606378555,
      -0.020713984966278076,
      0.005331241991370916,
      0.011203529313206673,
      -0.031115002930164337,
      -0.03999146446585655,
      0.06570383906364441,
      0.05454488471150398,
      0.0024538966827094555,
      -0.012569664977490902,
      0.11150427907705307,
      -0.06753624975681305,
      0.020885305479168892,
      -0.010764091275632381,
      -0.003720797598361969,
      -0.051350295543670654,
      0.040018096566200256,
      0.07189444452524185,
      -0.043185409158468246,
      -0.057489581406116486,
      -0.035383835434913635,
      0.00664934329688549,
      0.026603860780596733,
      -0.0773802250623703,
      0.04961433261632919,
      0.048775020986795425,
      0.03572581335902214,
      0.07827475666999817,
      0.011363721452653408,
      -0.07672308385372162,
      -0.01414462085813284,
      0.060853444039821625,
      0.01793752610683441,
      -0.09118732064962387,
      0.014553059823811054,
      0.01725151017308235,
      -0.05233223736286163,
      -0.037391792982816696,
      0.030876532196998596,
      0.08244188874959946,
      -0.01738538220524788,
      -0.04442586004734039,
      -0.047317132353782654,
      0.05368512496352196,
      -0.03463268652558327,
      -0.09957917034626007,
      -0.03757958486676216,
      -0.02881813794374466,
      -0.04600612446665764,
      -0.010709221474826336,
      0.008306697010993958,
      -0.04551089182496071,
      0.07642102986574173,
      0.007633149158209562,
      -0.0032727497164160013,
      -0.014198523946106434,
      0.12312110513448715,
      0.0455317460000515,
      -0.07244011014699936,
      -2.1395909199995642e-33,
      0.009065923281013966,
      -0.061168018728494644,
      -0.030432023108005524,
      -0.03137526288628578,
      0.09487149119377136,
      -0.07692413777112961,
      -0.01316027157008648,
      0.05057026445865631,
      -0.02154655195772648,
      0.041117746382951736,
      0.020944660529494286,
      -0.01082231942564249,
      -0.025385156273841858,
      -0.009629770182073116,
      0.06990025192499161,
      -0.0387418158352375,
      0.03908127173781395,
      0.027660643681883812,
      -0.007350139785557985,
      -0.09583216160535812,
      0.03787358105182648,
      -0.06330626457929611,
      -0.030156128108501434,
      -0.1066252738237381,
      0.09734564274549484,
      0.057166606187820435,
      -0.06520882248878479,
      0.044287022203207016,
      -0.008466701954603195,
      0.07844230532646179,
      0.04828571155667305,
      -0.009776197373867035,
      0.09079932421445847,
      0.041541893035173416,
      -0.0846402496099472,
      0.012861198745667934,
      -0.0476057305932045,
      -0.10866563022136688,
      -0.1028013750910759,
      -0.0015853317454457283,
      0.0003446658083703369,
      -0.03318190202116966,
      -0.07605814933776855,
      0.024383066222071648,
      -0.004105852451175451,
      -0.101812444627285,
      -0.03359242528676987,
      0.034162428230047226,
      0.027135275304317474,
      0.08331365883350372,
      -0.013129089958965778,
      -0.00556327635422349,
      0.035858333110809326,
      0.055265240371227264,
      0.0813203826546669,
      0.0782206803560257,
      0.04432069882750511,
      -0.05407968908548355,
      0.016235819086432457,
      0.0934595912694931,
      -0.06427262723445892,
      -0.03105885535478592,
      -0.052067916840314865,
      -0.05211099982261658,
      0.051326651126146317,
      0.0447174534201622,
      0.05121982842683792,
      -0.0596977137029171,
      -0.06493940949440002,
      0.04915516823530197,
      -0.0069437152706086636,
      -0.034282881766557693,
      -0.03641905635595322,
      0.019196132197976112,
      0.0066125281155109406,
      -0.029814666137099266,
      -0.005913507658988237,
      0.04413371905684471,
      0.02626328356564045,
      -0.060231126844882965,
      -0.009589655324816704,
      -0.02215813472867012,
      0.017415272071957588,
      0.10300999879837036,
      -0.0792798325419426,
      0.013410862535238266,
      0.011768876574933529,
      -0.08664274960756302,
      -0.02542853355407715,
      0.02175811305642128,
      0.02321677841246128,
      0.013804804533720016,
      0.0212244912981987,
      0.003447521012276411,
      -0.026269327849149704,
      -4.0307914348047325e-33,
      -0.0467180535197258,
      0.05314479023218155,
      -0.060141224414110184,
      0.03061840683221817,
      -0.04698355495929718,
      -0.005848844535648823,
      0.02974626049399376,
      -0.05076823756098747,
      -0.01389726996421814,
      0.01683938130736351,
      -0.07099071145057678,
      0.040553413331508636,
      -0.061066918075084686,
      -0.09309691190719604,
      0.03780191391706467,
      -0.03194007650017738,
      -0.030660152435302734,
      -0.029712561517953873,
      0.06371670216321945,
      0.10399013757705688,
      -0.021601824089884758,
      0.07827701419591904,
      0.027581097558140755,
      -0.01929127424955368,
      -0.046084925532341,
      -0.0922531932592392,
      0.036892879754304886,
      -0.005314006935805082,
      -0.06551221758127213,
      -0.060430992394685745,
      -0.0015759258531033993,
      -0.01960679143667221,
      -0.0771157443523407,
      -0.04830954968929291,
      0.012377485632896423,
      -0.0161130428314209,
      0.0476895347237587,
      0.06393145024776459,
      -0.018686586990952492,
      0.020600514486432076,
      0.041351329535245895,
      0.04577641189098358,
      -0.10787543654441833,
      -0.0093683497980237,
      -0.020171048119664192,
      -0.016419513151049614,
      -0.02365580014884472,
      0.06924157589673996,
      0.007222204003483057,
      -0.0759347677230835,
      -0.03878656402230263,
      -0.08107525110244751,
      0.11266783624887466,
      0.0924200490117073,
      -0.03879675641655922,
      0.05448780581355095,
      0.024688275530934334,
      0.024362502619624138,
      0.030369574204087257,
      -0.01853407919406891,
      0.03925236687064171,
      -0.07661869376897812,
      -0.09299090504646301,
      0.05053950473666191,
      0.11039591580629349,
      -0.039586931467056274,
      0.0014102429850026965,
      0.08062658458948135,
      0.025254106149077415,
      -0.01215322781354189,
      0.06081142649054527,
      -0.088898666203022,
      -0.003107622265815735,
      0.04308014735579491,
      0.016508307307958603,
      -0.05356905981898308,
      -0.09259477257728577,
      -0.08930715173482895,
      0.01882851868867874,
      0.04240524023771286,
      -0.012388776056468487,
      0.027775676921010017,
      -0.051775507628917694,
      -0.08034390211105347,
      -0.013446715660393238,
      -0.02766963467001915,
      0.07444141060113907,
      0.04232892394065857,
      0.0033940437715500593,
      0.025757357478141785,
      -0.04044874757528305,
      0.04369194433093071,
      -0.01041423436254263,
      0.049683526158332825,
      0.06386696547269821,
      -5.46156329050973e-08,
      0.018051443621516228,
      0.07067366689443588,
      -0.07905378192663193,
      -0.015134845860302448,
      0.03628232702612877,
      -0.020709961652755737,
      0.013274293392896652,
      -0.09126253426074982,
      -0.002066825283691287,
      0.06146954372525215,
      -0.045848339796066284,
      -0.020287079736590385,
      -0.009066980332136154,
      0.013012166135013103,
      -0.037567198276519775,
      -0.0450306311249733,
      -0.0009527010261081159,
      0.008327583782374859,
      -0.07884376496076584,
      -0.03750575706362724,
      -0.051304761320352554,
      0.1031016856431961,
      0.014669804833829403,
      -0.04292815923690796,
      -0.015866637229919434,
      0.0319487527012825,
      0.03825411573052406,
      0.07057397067546844,
      0.04607035592198372,
      0.08210530877113342,
      -0.09974022209644318,
      0.07205430418252945,
      0.017627190798521042,
      -0.024097055196762085,
      -0.054481763392686844,
      0.11782681196928024,
      -0.018484897911548615,
      0.03466744348406792,
      0.06318671256303787,
      0.01689763180911541,
      -0.03680124506354332,
      0.010865629650652409,
      0.002500512171536684,
      0.005828191991895437,
      -0.05892438068985939,
      -0.0029672030359506607,
      -0.10270188003778458,
      0.002790706930682063,
      0.043111275881528854,
      -0.06247396022081375,
      0.03506797179579735,
      -0.0322360098361969,
      -0.07298082858324051,
      0.0006841488066129386,
      0.061054665595293045,
      -0.06616979092359543,
      -0.013625560328364372,
      -0.03446318209171295,
      0.056021783500909805,
      0.007558625657111406,
      0.052862800657749176,
      0.04581879824399948,
      -0.036199141293764114,
      0.010504735633730888
    ],
    [
      -0.08818766474723816,
      -0.022062186151742935,
      -0.012716783210635185,
      -0.023136302828788757,
      0.003922423347830772,
      -0.07959950715303421,
      0.06262758374214172,
      0.034452758729457855,
      -0.003831155365332961,
      0.006197025533765554,
      0.02480832114815712,
      -0.03582741692662239,
      0.035448893904685974,
      0.0437171645462513,
      0.07426954805850983,
      0.041194889694452286,
      -0.009002967737615108,
      -0.10999583452939987,
      0.037396885454654694,
      -0.013889639638364315,
      0.09276396036148071,
      -0.030183400958776474,
      0.03812113031744957,
      -0.060321588069200516,
      0.006831884849816561,
      -0.06940155476331711,
      -0.02300124429166317,
      0.07007192075252533,
      -0.043410975486040115,
      -0.04609498381614685,
      0.07240469008684158,
      -0.0278191976249218,
      0.03252900019288063,
      0.030851684510707855,
      0.04520266130566597,
      0.10055340826511383,
      0.004203124437481165,
      0.05752478167414665,
      0.09544619172811508,
      0.018991146236658096,
      -0.0007767003844492137,
      -0.042757388204336166,
      -0.04477877914905548,
      -0.004271168727427721,
      0.010418581776320934,
      0.09631023555994034,
      0.022570515051484108,
      0.02349943295121193,
      -0.04580189660191536,
      0.03450460359454155,
      -0.049170415848493576,
      -0.07615064084529877,
      -0.020937498658895493,
      -0.005948218517005444,
      -0.017948854714632034,
      0.07044000923633575,
      0.022485336288809776,
      0.035336073487997055,
      0.03317270800471306,
      -0.08565840870141983,
      0.0017746728844940662,
      -0.052781786769628525,
      -0.034295953810214996,
      -0.010021861642599106,
      -0.041563935577869415,
      0.01568043977022171,
      -0.1105218306183815,
      0.020820440724492073,
      0.024338798597455025,
      -0.016550082713365555,
      0.06471501290798187,
      -0.013001713901758194,
      -0.05815834179520607,
      -0.021426627412438393,
      -0.06187496706843376,
      0.03265518322587013,
      -0.036549460142850876,
      0.09590910375118256,
      -0.051898058503866196,
      -0.07754746079444885,
      0.02869006246328354,
      0.02196056768298149,
      0.07142593711614609,
      0.004276283085346222,
      -0.042243003845214844,
      0.09722304344177246,
      0.021295497193932533,
      -0.017426129430532455,
      0.024434594437479973,
      0.05688147991895676,
      0.09862262010574341,
      -0.06868752837181091,
      0.08280741423368454,
      -0.01434758584946394,
      0.09488020837306976,
      0.07834634929895401,
      -0.021711567416787148,
      -0.011081119999289513,
      -0.09353057295084,
      0.04842207208275795,
      -0.006918488536030054,
      -0.09365780651569366,
      -0.026188774034380913,
      0.01998288370668888,
      0.051344312727451324,
      0.01968579925596714,
      0.01631411723792553,
      0.030576933175325394,
      0.011943095363676548,
      0.012309386394917965,
      -0.012803995050489902,
      0.04347388446331024,
      -0.035579849034547806,
      -0.04309702292084694,
      0.019071588292717934,
      -0.006052886601537466,
      0.038489703088998795,
      0.022614533081650734,
      0.010872647166252136,
      -0.04450984299182892,
      0.10045350342988968,
      -0.03218161687254906,
      -0.005770829971879721,
      -0.02940790168941021,
      0.0194535069167614,
      0.062230926007032394,
      0.015131454914808273,
      4.023737366673845e-33,
      -0.008714391849935055,
      0.1069994568824768,
      -0.10030311346054077,
      0.06265947222709656,
      0.0171465203166008,
      0.016381654888391495,
      -0.011216461658477783,
      -0.02221074141561985,
      -0.05735580250620842,
      0.026151712983846664,
      -0.008280538953840733,
      0.04332771152257919,
      -0.022578172385692596,
      -0.01528298668563366,
      -0.08096893876791,
      -0.03334730118513107,
      0.09102708101272583,
      0.03923170641064644,
      0.08466430008411407,
      -0.03305399417877197,
      0.04739832133054733,
      0.027633825317025185,
      0.000515629886649549,
      0.021984383463859558,
      -0.017834240570664406,
      0.09650568664073944,
      -0.0055573913268744946,
      -0.03666728362441063,
      0.0208436306566,
      0.005665233824402094,
      -0.019631311297416687,
      0.0251470860093832,
      0.045316874980926514,
      0.0737643837928772,
      -0.011133086867630482,
      -0.0008932247292250395,
      -0.12662968039512634,
      -0.10010457783937454,
      -0.05720894783735275,
      -0.026311425492167473,
      0.0348496250808239,
      -0.0035793292336165905,
      -0.015600962564349174,
      -0.03147929161787033,
      0.0330815464258194,
      -0.029844891279935837,
      0.012367919087409973,
      -0.01126344408839941,
      0.11319661140441895,
      0.0364295095205307,
      -0.03327000513672829,
      -0.05621404945850372,
      -0.03948252275586128,
      0.03646831214427948,
      0.03860833868384361,
      -0.10386679321527481,
      -0.051273785531520844,
      -0.06987252086400986,
      -0.014808227308094501,
      -0.11798694729804993,
      0.03272414207458496,
      0.013812505640089512,
      -0.028566667810082436,
      0.10499925911426544,
      0.02179284766316414,
      -0.059824034571647644,
      0.00467959139496088,
      -0.013365198858082294,
      0.011366882361471653,
      0.027178222313523293,
      0.017651230096817017,
      0.0348387286067009,
      -0.008166627027094364,
      0.05077655613422394,
      -0.11914587765932083,
      -0.07368355244398117,
      0.0067560444585978985,
      0.057085465639829636,
      -0.08097807317972183,
      0.008878822438418865,
      -0.008778260089457035,
      -0.01252242736518383,
      -0.008540689945220947,
      -0.017379913479089737,
      0.031848691403865814,
      -0.007118132431060076,
      0.07143953442573547,
      -0.04279137775301933,
      0.0234394334256649,
      0.08394939452409744,
      -0.02663438767194748,
      0.009857038035988808,
      -0.09150764346122742,
      0.08828497678041458,
      -0.12782634794712067,
      -3.928969012110552e-33,
      0.009086819365620613,
      -0.06182051822543144,
      0.03320593386888504,
      -0.027427230030298233,
      -0.04046877101063728,
      0.009734055027365685,
      0.03831029683351517,
      0.03665886074304581,
      -0.007128643337637186,
      -0.03738328069448471,
      -0.07679195702075958,
      0.019885046407580376,
      0.0236654132604599,
      -0.06836001574993134,
      0.00852767564356327,
      -0.008214132860302925,
      -0.047990452498197556,
      -0.003988234791904688,
      -0.04637259989976883,
      0.004791564308106899,
      -0.11184824258089066,
      0.0826200470328331,
      -0.050353486090898514,
      0.07498431950807571,
      0.04918351024389267,
      -0.0012546186335384846,
      0.038859665393829346,
      0.06042516976594925,
      0.07307308912277222,
      -0.09875202178955078,
      -0.00463912496343255,
      -0.01331320870667696,
      -0.054501648992300034,
      0.04868582636117935,
      0.015528610907495022,
      -0.060541775077581406,
      0.0330791212618351,
      0.10720296204090118,
      0.01705602928996086,
      0.04992515966296196,
      0.09751878678798676,
      -0.02983742766082287,
      -0.057413335889577866,
      -0.01159723661839962,
      -0.0004578297957777977,
      -0.02114039659500122,
      -0.03816402703523636,
      -0.003906261641532183,
      -0.07851901650428772,
      0.021482359617948532,
      0.03754207119345665,
      -0.11801387369632721,
      0.05209100991487503,
      -0.06858185678720474,
      -0.02597861737012863,
      0.022679012268781662,
      0.07392435520887375,
      0.010237605310976505,
      0.02875698171555996,
      -0.048377033323049545,
      0.055133335292339325,
      -0.11553898453712463,
      0.04331664368510246,
      0.11904085427522659,
      0.030059130862355232,
      -0.028830820694565773,
      -0.05681474506855011,
      0.061195094138383865,
      -0.06973135471343994,
      0.027170127257704735,
      0.06139219552278519,
      -0.10753200203180313,
      -0.06313936412334442,
      -0.035651110112667084,
      0.12839315831661224,
      -0.053246695548295975,
      -0.054802607744932175,
      -0.053166862577199936,
      -0.016968635842204094,
      -0.00044104806147515774,
      -0.03284430876374245,
      0.08311762660741806,
      -0.022427523508667946,
      0.04733944311738014,
      -0.003372542094439268,
      0.027623901143670082,
      0.0361749641597271,
      0.08373383432626724,
      -0.007858832366764545,
      0.006005075294524431,
      -0.04954250901937485,
      -0.023476025089621544,
      0.07417544722557068,
      0.030775748193264008,
      0.06156492233276367,
      -5.789418011659109e-08,
      -0.03947288170456886,
      0.017514869570732117,
      0.027612248435616493,
      -0.029645895585417747,
      -0.04507243260741234,
      0.011890402995049953,
      -0.029198497533798218,
      -0.09058841317892075,
      0.012306557968258858,
      0.009284764528274536,
      -0.07173725962638855,
      -0.0023799885530024767,
      -0.03485773503780365,
      -0.023779116570949554,
      -0.03238708898425102,
      -0.030394354835152626,
      -0.0554066076874733,
      0.02598710171878338,
      -0.0026493750046938658,
      -0.04815106466412544,
      -0.051015619188547134,
      0.0312935933470726,
      -0.006446069572120905,
      0.023147527128458023,
      -0.05750337988138199,
      -0.01144030038267374,
      0.02093447931110859,
      0.040709488093853,
      -0.06691774725914001,
      0.0920218825340271,
      -0.031635262072086334,
      -0.010165051557123661,
      0.10440318286418915,
      -0.006441842764616013,
      -0.06181951239705086,
      0.05615273118019104,
      -0.029945915564894676,
      -0.08928286284208298,
      0.020287001505494118,
      0.0010172988986596465,
      0.027877457439899445,
      0.0024119496811181307,
      -0.003538493299856782,
      -0.0293321143835783,
      -0.0777168869972229,
      -0.03351427987217903,
      0.0010147278662770987,
      -0.10202190279960632,
      0.038819532841444016,
      -0.056629475206136703,
      0.019916314631700516,
      0.03504945710301399,
      0.005246806424111128,
      0.08765080571174622,
      0.02603902667760849,
      -0.02453029341995716,
      0.05958395451307297,
      -0.017191922292113304,
      0.029650814831256866,
      0.047265566885471344,
      0.05277223140001297,
      0.01904839277267456,
      0.016944127157330513,
      -0.05337131768465042
    ],
    [
      -0.05421982705593109,
      -0.03853756934404373,
      -0.1093689352273941,
      -0.08965465426445007,
      0.04008374735713005,
      -0.05009717866778374,
      0.05203581973910332,
      0.1253541111946106,
      -0.006633729208260775,
      -0.0025977911427617073,
      -0.036746617406606674,
      0.020714202895760536,
      0.008622528985142708,
      0.01596563309431076,
      -0.03226533904671669,
      -0.03640678897500038,
      0.01512589119374752,
      -0.07781539112329483,
      0.021958887577056885,
      0.036073822528123856,
      -0.02457309141755104,
      -0.1007477194070816,
      -0.030114363878965378,
      -0.016072819009423256,
      -0.06587687134742737,
      0.016959937289357185,
      -0.009703296236693859,
      -0.03718303143978119,
      -0.05087254196405411,
      -0.0301786120980978,
      0.10892807692289352,
      0.03559891879558563,
      -0.010575031861662865,
      -0.04783265292644501,
      0.006818405352532864,
      0.08692272752523422,
      0.05904038995504379,
      0.015758881345391273,
      0.0035602690186351538,
      -0.06906677037477493,
      0.014450948685407639,
      -0.10461471229791641,
      0.0001999020460061729,
      -0.008148891851305962,
      0.03548097610473633,
      -0.007335590198636055,
      0.047911304980516434,
      -0.03672114759683609,
      0.021213430911302567,
      0.0784236341714859,
      -0.020557653158903122,
      -0.03264797851443291,
      -0.009762893430888653,
      0.08751844614744186,
      -0.03303764760494232,
      0.05370204895734787,
      0.025758998468518257,
      -0.02763860858976841,
      0.0198499858379364,
      -0.04061208292841911,
      -0.00685581611469388,
      0.001505887252278626,
      -0.04397381842136383,
      0.055497463792562485,
      -0.029735561460256577,
      0.012821652926504612,
      -0.10845612734556198,
      0.002047274261713028,
      0.06222357600927353,
      -0.01569395139813423,
      0.043817631900310516,
      -0.05462738871574402,
      0.0025491751730442047,
      -0.09365510940551758,
      0.006491162348538637,
      0.015516122803092003,
      -0.010187078267335892,
      0.003665328025817871,
      0.0011231587268412113,
      -0.030098294839262962,
      0.02330782078206539,
      0.06388702988624573,
      0.04430842027068138,
      0.03429625555872917,
      -0.03454120457172394,
      0.02860819175839424,
      0.03580477088689804,
      4.871803685091436e-05,
      0.08254525810480118,
      0.0038490158040076494,
      0.08487837016582489,
      0.07393237948417664,
      0.03312889486551285,
      -0.02083074115216732,
      0.03878774866461754,
      0.008647074922919273,
      0.042110227048397064,
      -0.025498077273368835,
      0.0043625179678201675,
      0.07381642609834671,
      0.025040725246071815,
      -0.027848972007632256,
      0.0010064871748909354,
      0.046152736991643906,
      -0.02792881801724434,
      -0.06951471418142319,
      -0.005598063115030527,
      0.056324902921915054,
      -0.025572659447789192,
      -0.04079613462090492,
      -0.04924946650862694,
      -0.00032148134778253734,
      0.01961999014019966,
      -0.059736017137765884,
      -0.057297077029943466,
      0.007695963606238365,
      -0.0939197838306427,
      -0.06638891994953156,
      -0.00996919721364975,
      -0.06900306791067123,
      0.11621273308992386,
      0.04800877720117569,
      0.07783716171979904,
      -0.011155504733324051,
      0.13130943477153778,
      0.012940695509314537,
      -0.05770159512758255,
      6.200876698645542e-33,
      -0.06782276183366776,
      -0.0013921288773417473,
      -0.0594220794737339,
      0.02219993993639946,
      0.06739302724599838,
      -0.003307331819087267,
      0.021612711250782013,
      -0.03256436809897423,
      -0.0034971178974956274,
      0.1322699636220932,
      0.036793727427721024,
      0.06730993092060089,
      -0.053769659250974655,
      -0.01897275634109974,
      0.0357646681368351,
      -0.09142197668552399,
      -0.03968241810798645,
      0.0061361831612885,
      0.023911820724606514,
      -0.10101231932640076,
      0.0593731664121151,
      -0.04960893467068672,
      0.010668528266251087,
      -0.03562184423208237,
      0.06847209483385086,
      0.03306180611252785,
      -0.002361006336286664,
      0.024136751890182495,
      0.0584711879491806,
      0.04112342372536659,
      0.02087092027068138,
      -0.01620844565331936,
      0.05892765522003174,
      0.04182782396674156,
      -0.06208811327815056,
      0.02406100556254387,
      -0.09212718158960342,
      -0.12702138721942902,
      -0.05733541026711464,
      -0.005674525164067745,
      0.011745141819119453,
      -0.007407440338283777,
      -0.0030632237903773785,
      0.008248042315244675,
      -0.00593594228848815,
      -0.08006327599287033,
      -0.06278695166110992,
      0.05180724710226059,
      0.05369211733341217,
      -0.004412120208144188,
      0.015964701771736145,
      -0.061377204954624176,
      0.011183892376720905,
      0.08214819431304932,
      -0.056788548827171326,
      -0.049486320465803146,
      -0.09704670310020447,
      -0.05619252845644951,
      -0.05025648698210716,
      0.0056845261715352535,
      -0.046406421810388565,
      -0.047640182077884674,
      -0.02708015963435173,
      0.03289630264043808,
      -0.055293187499046326,
      0.023094387724995613,
      0.08570567518472672,
      0.04963207244873047,
      0.009059078060090542,
      0.10582341253757477,
      -0.08887484669685364,
      0.058808885514736176,
      0.04461665824055672,
      -0.023146238178014755,
      -0.011208943091332912,
      -0.02022668533027172,
      0.05726729333400726,
      0.02996520698070526,
      -0.026461543515324593,
      -0.01208567712455988,
      0.006871828343719244,
      -0.0491410493850708,
      -0.0035093799233436584,
      0.13713429868221283,
      0.0334860198199749,
      -0.054405756294727325,
      -0.021070415154099464,
      0.037693511694669724,
      0.031144721433520317,
      0.010675448924303055,
      -0.028582356870174408,
      -0.055258963257074356,
      0.03583743795752525,
      0.08647610992193222,
      -0.06224031001329422,
      -5.4289442521399314e-33,
      -0.04050777107477188,
      -0.05651598796248436,
      -0.005975952371954918,
      0.028664162382483482,
      0.010705421678721905,
      0.0028646879363805056,
      0.024531543254852295,
      0.019592348486185074,
      -0.017920393496751785,
      -0.04456636682152748,
      -0.08925798535346985,
      0.03556298837065697,
      0.049213238060474396,
      0.01073576882481575,
      -0.018912645056843758,
      -0.006216264795511961,
      -0.05018924921751022,
      -0.043113645166158676,
      0.0052071306854486465,
      0.03014516271650791,
      -0.021301021799445152,
      0.008754783309996128,
      0.0426853708922863,
      0.029975930228829384,
      -0.011919299140572548,
      0.05092508718371391,
      -0.02975025214254856,
      0.042762741446495056,
      -0.0026941001415252686,
      0.063010074198246,
      0.0180218443274498,
      -0.011489962227642536,
      0.007311291992664337,
      -0.0115842679515481,
      -0.00575813464820385,
      0.017956651747226715,
      0.020136592909693718,
      0.0779164731502533,
      -0.06393665820360184,
      0.0017359830671921372,
      0.1382061392068863,
      -0.03747954219579697,
      -0.07805828005075455,
      0.0023850908037275076,
      -0.04597802832722664,
      0.003506570355966687,
      -0.08131763339042664,
      -0.004786198493093252,
      0.010035824030637741,
      -0.036347027868032455,
      -0.0680367574095726,
      -0.08030226826667786,
      0.024731997400522232,
      -0.04758143797516823,
      -0.006321409251540899,
      -0.0345601961016655,
      0.09437286108732224,
      -0.01678917557001114,
      -0.03746229037642479,
      -0.041575685143470764,
      0.08648380637168884,
      -0.05363118276000023,
      0.027075711637735367,
      0.08496631681919098,
      0.055946167558431625,
      -0.026810340583324432,
      -0.05500343069434166,
      0.08939404040575027,
      -0.09153887629508972,
      0.1277749091386795,
      0.09688397496938705,
      -0.030417079105973244,
      0.010191147215664387,
      0.019368374720215797,
      0.1162620335817337,
      -0.0067948536016047,
      -0.06230233982205391,
      -0.15320879220962524,
      0.03278912976384163,
      0.03921468183398247,
      -0.012649121694266796,
      0.05762959644198418,
      0.023394810035824776,
      -0.015290433540940285,
      -0.019376756623387337,
      -0.004510439932346344,
      0.032707467675209045,
      0.036940041929483414,
      0.048350609838962555,
      -0.016758188605308533,
      -0.0542263500392437,
      0.010913933627307415,
      0.05694323405623436,
      0.05338538810610771,
      0.027040861546993256,
      -5.4050978803843464e-08,
      -0.0033399872481822968,
      -0.02251683920621872,
      0.016870688647031784,
      0.05430348962545395,
      -0.049724776297807693,
      -0.00875724758952856,
      -0.005164702422916889,
      -0.0021209304686635733,
      -0.03921692818403244,
      -0.012708420865237713,
      -0.012753427028656006,
      -0.03512351214885712,
      -0.0336892269551754,
      -0.03883186727762222,
      0.009347035549581051,
      0.026956096291542053,
      -0.005164629314094782,
      0.032420456409454346,
      -0.07738903909921646,
      -0.11281909048557281,
      -0.03642505407333374,
      0.05235472694039345,
      0.1085934266448021,
      0.0042036147788167,
      5.048491948400624e-05,
      0.03468333184719086,
      0.11786538362503052,
      0.046462398022413254,
      -0.0071022831834852695,
      0.05436881631612778,
      -0.04757515713572502,
      -0.0232583899050951,
      0.04546085745096207,
      0.04319242760539055,
      -0.059100907295942307,
      0.10582111775875092,
      -0.05160687863826752,
      0.01154219638556242,
      0.04604620859026909,
      -0.016908377408981323,
      -0.05554540082812309,
      0.009357618167996407,
      -0.0363624282181263,
      -0.03704294562339783,
      -0.07160431891679764,
      -0.033410247415304184,
      -0.14664924144744873,
      0.03968401253223419,
      0.07836347073316574,
      -0.019925180822610855,
      0.012337918393313885,
      -0.05877683684229851,
      0.024199174717068672,
      0.041961029171943665,
      0.0544220395386219,
      0.004196374211460352,
      -0.04484689235687256,
      0.0429714173078537,
      0.11630817502737045,
      0.00022974943567533046,
      -0.018762877210974693,
      0.04665098711848259,
      0.055366601794958115,
      -0.06629195809364319
    ],
    [
      -0.0014154008822515607,
      -0.014776049181818962,
      -0.1344202309846878,
      -0.07195022702217102,
      0.03782318904995918,
      -0.10555776953697205,
      0.04673754796385765,
      0.10630916059017181,
      0.021903807297348976,
      -0.01852046325802803,
      -0.03647163510322571,
      -0.08979178965091705,
      0.025117382407188416,
      0.02889765240252018,
      0.005857742391526699,
      -0.11178214848041534,
      0.02825925312936306,
      -0.033171646296978,
      0.03693029284477234,
      0.0056401691399514675,
      -0.02048167958855629,
      -0.0513681098818779,
      0.003948285710066557,
      -0.06650330126285553,
      -0.06451332569122314,
      -0.03982466831803322,
      -0.0372939370572567,
      -0.07515901327133179,
      -0.05967064946889877,
      -0.03632182627916336,
      0.06718358397483826,
      0.0386476144194603,
      0.052855171263217926,
      0.02351759560406208,
      0.07946554571390152,
      0.1686648279428482,
      0.0717865452170372,
      0.017889635637402534,
      0.01702755317091942,
      -0.02594221755862236,
      0.045243874192237854,
      -0.056310925632715225,
      -0.02764938957989216,
      -0.036053791642189026,
      -0.01655910536646843,
      -0.029292771592736244,
      -0.014872540719807148,
      -0.009860771708190441,
      0.0014393513556569815,
      0.0882134661078453,
      -0.07251082360744476,
      -0.08061826229095459,
      0.041724707931280136,
      0.029538189992308617,
      -0.03396933525800705,
      0.08239306509494781,
      0.008015068247914314,
      0.017242711037397385,
      0.010936832055449486,
      -0.06738932430744171,
      -0.030766896903514862,
      -0.006790331564843655,
      -0.0419723242521286,
      0.02357276901602745,
      0.01857047528028488,
      0.005725011229515076,
      -0.06726503372192383,
      0.01996462605893612,
      0.0585138313472271,
      0.015120202675461769,
      0.06356216222047806,
      -0.04156332090497017,
      -0.06286964565515518,
      -0.11019279807806015,
      0.005514330230653286,
      0.06523479521274567,
      -0.014699045568704605,
      0.03653043881058693,
      -0.03306446224451065,
      -0.05994751676917076,
      -0.03307250514626503,
      0.017476875334978104,
      0.06154323369264603,
      0.03108549863100052,
      -0.06462214142084122,
      0.06717334687709808,
      0.06502079218626022,
      0.015492113307118416,
      0.10628320276737213,
      0.0239579938352108,
      0.06349581480026245,
      -0.017386101186275482,
      0.024479182437062263,
      -0.05257442221045494,
      0.030490461736917496,
      0.07035642862319946,
      -0.025392262265086174,
      -0.024379806593060493,
      -0.044944219291210175,
      0.056067582219839096,
      -0.02882361225783825,
      -0.05978916212916374,
      0.0375797301530838,
      0.012607251293957233,
      0.03226769343018532,
      -0.005821241065859795,
      -0.0026100240647792816,
      0.04544145613908768,
      -0.041883423924446106,
      0.0006372957141138613,
      -0.06702778488397598,
      0.034298092126846313,
      0.02655724808573723,
      -0.04614363983273506,
      0.04317043721675873,
      0.03120044618844986,
      -0.013142643496394157,
      -0.03423243761062622,
      0.042504191398620605,
      -0.02632462978363037,
      0.11638007313013077,
      0.04368259385228157,
      0.04743475839495659,
      0.01383956614881754,
      0.08577296137809753,
      0.013216458261013031,
      -0.0811157375574112,
      3.309379531445556e-33,
      -0.012909920886158943,
      -0.03627205267548561,
      0.009000150486826897,
      0.009874176234006882,
      0.07161585986614227,
      -0.0021942611783742905,
      0.043280601501464844,
      -0.05511780455708504,
      -0.02987152338027954,
      0.06707128137350082,
      -0.010050431825220585,
      0.09880436211824417,
      -0.054712019860744476,
      0.013939154334366322,
      -0.014333679340779781,
      -0.05764090269804001,
      0.022614331915974617,
      0.0037163197994232178,
      0.06811293214559555,
      -0.06569347530603409,
      0.08191920816898346,
      -0.004823408555239439,
      0.02623595856130123,
      -0.002834242768585682,
      0.11442910879850388,
      -0.029207490384578705,
      0.009634647518396378,
      0.017984526231884956,
      0.04359009116888046,
      0.03144901990890503,
      0.017668191343545914,
      0.009942015632987022,
      0.04048629105091095,
      0.0445067323744297,
      -0.07508829981088638,
      0.01846255175769329,
      -0.10234691947698593,
      -0.05309361591935158,
      -0.09200181066989899,
      0.0587119422852993,
      0.04566042870283127,
      -0.015705671161413193,
      0.012602714821696281,
      -0.06485478579998016,
      -0.005175583530217409,
      -0.08401011675596237,
      -0.009702770039439201,
      0.027508815750479698,
      0.06953434646129608,
      0.06565876305103302,
      0.01960626430809498,
      -0.07227477431297302,
      -0.01872759312391281,
      0.03955455496907234,
      0.0072538526728749275,
      -0.03833569958806038,
      -0.04739903286099434,
      -0.10615935921669006,
      -0.016375506296753883,
      -0.06865791231393814,
      -0.018368549644947052,
      0.023387469351291656,
      0.00962537620216608,
      0.08889113366603851,
      -0.012057363986968994,
      -0.013931946828961372,
      0.0364130437374115,
      0.0611424595117569,
      0.030171463266015053,
      0.1513614058494568,
      -0.063665010035038,
      0.07893002033233643,
      0.007616888731718063,
      0.010866628959774971,
      0.005681631155312061,
      -0.05064566433429718,
      0.008107545785605907,
      -0.005621018819510937,
      -0.03769812360405922,
      0.020111462101340294,
      0.02010851539671421,
      0.029837321490049362,
      0.0013011475093662739,
      0.09726449847221375,
      0.016732465475797653,
      -0.021080177277326584,
      0.01989360712468624,
      0.03696097433567047,
      0.021028822287917137,
      -0.02072177641093731,
      -0.006569473538547754,
      -0.055767208337783813,
      -0.0734512209892273,
      0.007838256657123566,
      -0.11517181992530823,
      -3.151779901804858e-33,
      0.0013842204352840781,
      -0.09489885717630386,
      0.051824379712343216,
      0.01883840374648571,
      -0.0613124780356884,
      -0.042240776121616364,
      0.004332678392529488,
      -0.04423737898468971,
      0.04782875254750252,
      -0.030948320403695107,
      -0.13113456964492798,
      0.049353718757629395,
      0.03844811022281647,
      -0.03620811179280281,
      -0.00833252165466547,
      0.0021848888136446476,
      -0.054995037615299225,
      -0.09152686595916748,
      0.033571381121873856,
      -0.003642588621005416,
      -0.08479203283786774,
      0.024598203599452972,
      0.07248679548501968,
      0.04983246326446533,
      -0.015599443577229977,
      -0.019930800423026085,
      0.020349137485027313,
      0.0576087087392807,
      -0.027390943840146065,
      -0.03254597634077072,
      -0.015391293913125992,
      0.012337160296738148,
      -0.018879735842347145,
      -0.0023364857770502567,
      -0.02549505978822708,
      0.016995588317513466,
      -0.033929985016584396,
      0.16722536087036133,
      -0.02586936019361019,
      -0.028748681768774986,
      0.08272355794906616,
      -0.06866320967674255,
      -0.07266946882009506,
      -0.049922678619623184,
      -0.05649317800998688,
      -0.00787901971489191,
      -0.03954673931002617,
      -0.02422386407852173,
      -0.016212470829486847,
      -0.029316935688257217,
      -0.04278641939163208,
      -0.05973184108734131,
      0.025549937039613724,
      -0.049631379544734955,
      -0.006439157761633396,
      0.0014259307645261288,
      0.040379833430051804,
      0.037790123373270035,
      -0.02156517095863819,
      0.008632396347820759,
      0.08879273384809494,
      -0.0739407166838646,
      0.018457474187016487,
      0.07268133759498596,
      0.009329430758953094,
      -0.033236827701330185,
      -0.10874588042497635,
      0.02754899300634861,
      -0.07706302404403687,
      0.10105486959218979,
      0.09988201409578323,
      -0.036564379930496216,
      -0.009675366804003716,
      0.05533510074019432,
      0.08554977923631668,
      -0.010878808796405792,
      -0.06731323152780533,
      -0.07097823172807693,
      0.08061621338129044,
      0.07126885652542114,
      -0.006691521033644676,
      0.08031444251537323,
      -0.03353054076433182,
      0.006700607948005199,
      -0.047070857137441635,
      0.009189106523990631,
      0.0009532938711345196,
      0.0746738463640213,
      0.09434180706739426,
      0.007062110118567944,
      0.00012161198537796736,
      0.003449379000812769,
      0.06398811936378479,
      0.02138439007103443,
      0.01618933118879795,
      -4.6389221353138055e-08,
      0.02858000434935093,
      0.0014141274150460958,
      -0.006486125290393829,
      0.06977222114801407,
      -0.08921869099140167,
      -0.02321571297943592,
      -0.007670543622225523,
      -0.0162271186709404,
      -0.02897433191537857,
      0.00075971067417413,
      -0.06497621536254883,
      -0.02366061322391033,
      -0.02049754559993744,
      -0.0024851905182003975,
      -0.0009208162664435804,
      0.02169155329465866,
      0.058009885251522064,
      0.015634912997484207,
      -0.025852207094430923,
      -0.09636653959751129,
      -0.06034388765692711,
      0.04498014599084854,
      0.07796121388673782,
      0.01766485720872879,
      -0.0023582354187965393,
      0.01429247297346592,
      -0.009007949382066727,
      -0.0013047695392742753,
      -0.08443842828273773,
      0.07833326607942581,
      0.008989573456346989,
      -0.034583307802677155,
      0.017201749607920647,
      -0.01980629190802574,
      -0.014976724050939083,
      0.041836101561784744,
      -0.07507385313510895,
      -0.046511854976415634,
      0.0011204759357497096,
      0.015678811818361282,
      -0.03538588434457779,
      -0.004879864864051342,
      0.033537834882736206,
      -0.0847461000084877,
      -0.05807269364595413,
      -0.0012782880803570151,
      -0.058302611112594604,
      0.007774845696985722,
      0.051400598138570786,
      -0.06308381259441376,
      0.05133121460676193,
      0.000347980298101902,
      0.029948504641652107,
      0.06806256622076035,
      0.09590014070272446,
      0.03922290727496147,
      0.021614879369735718,
      -0.06893286854028702,
      0.09015112370252609,
      0.01382394228130579,
      -0.05473805591464043,
      0.01971963234245777,
      0.05384368076920509,
      -0.030488012358546257
    ],
    [
      -0.062273479998111725,
      0.03553108870983124,
      -0.11341205984354019,
      -0.027463344857096672,
      0.04149884358048439,
      -0.0990215390920639,
      0.02472589537501335,
      0.1016368418931961,
      0.016000311821699142,
      -0.03527943044900894,
      0.01538356114178896,
      -0.026599574834108353,
      0.06109720468521118,
      0.04341564327478409,
      0.021102551370859146,
      -0.08984164148569107,
      -0.08028575032949448,
      -0.060492679476737976,
      0.03215569257736206,
      -0.005327822640538216,
      0.05388269200921059,
      -0.12161025404930115,
      0.0870077908039093,
      -0.11193666607141495,
      -0.03197116777300835,
      -0.04108918830752373,
      -0.03534545749425888,
      -0.025882603600621223,
      0.008557528257369995,
      -0.04051223397254944,
      0.03621267154812813,
      -0.030812527984380722,
      0.06454186141490936,
      0.04701611027121544,
      -0.007524567656219006,
      0.14846622943878174,
      0.03995201736688614,
      0.06042232736945152,
      -0.011682357639074326,
      -0.04258950799703598,
      -0.03242826089262962,
      -0.049392275512218475,
      0.007706198841333389,
      0.026380904018878937,
      -0.0025756703689694405,
      0.008190246298909187,
      -0.021306196227669716,
      -0.02335803583264351,
      -0.0019278774270787835,
      0.03461943566799164,
      -0.0721781849861145,
      -0.07483521103858948,
      -0.007474265992641449,
      0.025301529094576836,
      -0.055992502719163895,
      0.10340406745672226,
      -0.008587629534304142,
      -0.004675389267504215,
      -0.00529766408726573,
      -0.04194016754627228,
      0.002455468289554119,
      0.04758082330226898,
      -0.04832112789154053,
      0.0099574513733387,
      0.007886253297328949,
      0.07594749331474304,
      -0.037772756069898605,
      -0.02801877073943615,
      0.01961800456047058,
      -0.10250715911388397,
      -0.01345191989094019,
      -0.054345645010471344,
      0.002266565803438425,
      -0.0553252175450325,
      0.02926000952720642,
      -0.022351421415805817,
      -0.11172609776258469,
      0.02584179677069187,
      0.04508010298013687,
      -0.08241688460111618,
      0.07807710021734238,
      0.012681793421506882,
      0.060779374092817307,
      0.06186956912279129,
      0.04598262533545494,
      0.06996913999319077,
      0.027249855920672417,
      -0.057784564793109894,
      0.02251560054719448,
      0.0061116088181734085,
      0.06766746938228607,
      -0.029376860707998276,
      0.004837289452552795,
      0.008032210171222687,
      0.06164918467402458,
      0.08463384956121445,
      -0.039312589913606644,
      -0.030355900526046753,
      -0.10738075524568558,
      0.06120680645108223,
      -0.03802017122507095,
      -0.05142897367477417,
      0.029697757214307785,
      0.08772961795330048,
      0.05203598365187645,
      -0.03964877873659134,
      0.030589573085308075,
      0.03160005062818527,
      -0.02662569098174572,
      0.005008638370782137,
      -0.04368939250707626,
      0.030450789257884026,
      -0.01731010526418686,
      -0.048014912754297256,
      0.07045437395572662,
      -0.0001233940856764093,
      -0.06598510593175888,
      -0.014238961972296238,
      0.006272642873227596,
      -0.08020099997520447,
      0.12389006465673447,
      0.07864625006914139,
      0.015418553724884987,
      -0.025456661358475685,
      0.11351361125707626,
      -0.06291572749614716,
      -0.039353180676698685,
      6.474107870866706e-33,
      0.0031074334401637316,
      0.07632438093423843,
      -0.015818437561392784,
      0.04441005364060402,
      0.023540887981653214,
      -0.022569866850972176,
      0.009990401566028595,
      -0.03513828292489052,
      -0.022366777062416077,
      0.08271610736846924,
      0.0067118266597390175,
      0.08100384473800659,
      -0.08008386194705963,
      0.0032541195396333933,
      -0.008168893866240978,
      0.0145568260923028,
      -0.007241211365908384,
      0.028992272913455963,
      0.032957591116428375,
      -0.046783220022916794,
      0.04736877605319023,
      0.03538279980421066,
      0.040483325719833374,
      0.007132763974368572,
      0.053851742297410965,
      0.049858856946229935,
      0.0005752402939833701,
      0.07851862907409668,
      0.0008969214395619929,
      0.00910233985632658,
      0.009555011987686157,
      -0.009653021581470966,
      0.06612900644540787,
      -0.004598149098455906,
      -0.07395070791244507,
      -0.047042638063430786,
      -0.014606846496462822,
      -0.12353923171758652,
      -0.0751877948641777,
      0.01973501220345497,
      0.0354720838367939,
      -0.025281576439738274,
      0.09562474489212036,
      -0.03461066260933876,
      -0.032312460243701935,
      -0.03522592410445213,
      0.0070755560882389545,
      0.05272612348198891,
      0.05022237077355385,
      0.05135795846581459,
      -0.00495597068220377,
      -0.003917095251381397,
      -0.026100995019078255,
      0.003488080808892846,
      -0.05562390387058258,
      -0.015902366489171982,
      -0.04983794316649437,
      -0.06053118035197258,
      -0.015810001641511917,
      -0.06005451828241348,
      0.0636759102344513,
      0.02021615207195282,
      0.015038536861538887,
      0.1219947412610054,
      -0.1097099781036377,
      -0.046408288180828094,
      -0.01358688622713089,
      -0.002445955527946353,
      0.009279174730181694,
      0.10216591507196426,
      -0.06609296798706055,
      0.06774985045194626,
      -0.051078662276268005,
      -0.06446491926908493,
      -0.01624690182507038,
      -0.08208669722080231,
      0.00823970790952444,
      0.03773855045437813,
      -0.07500655949115753,
      -0.033398400992155075,
      0.029460210353136063,
      -0.03465626388788223,
      -0.027736572548747063,
      0.037258539348840714,
      0.03877425193786621,
      0.012518053874373436,
      0.044968798756599426,
      -0.022043034434318542,
      0.04297017306089401,
      0.01035655103623867,
      -0.013190347701311111,
      -0.04696434363722801,
      -0.04415905848145485,
      0.023227950558066368,
      -0.0466620959341526,
      -6.021728420844349e-33,
      0.06152930110692978,
      -0.07929712533950806,
      0.020557034760713577,
      -0.05241649970412254,
      0.0024323093239217997,
      0.007503095548599958,
      0.059330735355615616,
      0.024612508714199066,
      0.028170693665742874,
      0.003850925713777542,
      -0.05915985628962517,
      0.10507765412330627,
      0.028924502432346344,
      -0.07142312824726105,
      0.005887696985155344,
      -0.022687993943691254,
      -0.02375565841794014,
      -0.02893070876598358,
      0.0025123893283307552,
      -0.006926190573722124,
      -0.048582036048173904,
      0.07860174030065536,
      -0.009378468617796898,
      0.02508975937962532,
      -0.00538794556632638,
      0.02843560464680195,
      0.0720810741186142,
      0.06586390733718872,
      0.022423725575208664,
      -0.027024738490581512,
      0.007212962955236435,
      -0.03726880997419357,
      -0.02233092300593853,
      0.013720612972974777,
      -0.0032854254823178053,
      -0.0278873760253191,
      0.0007424387149512768,
      0.02030770666897297,
      -0.07149256765842438,
      -0.006655421108007431,
      0.10457544028759003,
      -0.025277238339185715,
      -0.07768422365188599,
      0.0056088208220899105,
      -0.0023897308856248856,
      0.00295847374945879,
      -0.0376100093126297,
      -0.002592567354440689,
      0.04994715750217438,
      -0.008950041607022285,
      -0.006260405760258436,
      -0.07602554559707642,
      -0.0023664776235818863,
      -0.09819566458463669,
      -0.00845238659530878,
      0.077084980905056,
      0.027146268635988235,
      0.017177417874336243,
      0.07307793945074081,
      -0.022297067567706108,
      0.02595525048673153,
      -0.08725282549858093,
      -0.04997603967785835,
      0.013638862408697605,
      0.048603396862745285,
      -0.005492420867085457,
      -0.10768620669841766,
      0.06300332397222519,
      -0.11369656026363373,
      0.11869331449270248,
      0.07902994006872177,
      -0.06305055320262909,
      0.02225673571228981,
      -0.02420215681195259,
      0.09773404896259308,
      0.009145581163465977,
      0.012937256135046482,
      -0.02723078988492489,
      0.04055385664105415,
      -0.023124700412154198,
      0.0058766514994204044,
      -0.006599494256079197,
      -0.02620919607579708,
      0.007860775105655193,
      -0.07056715339422226,
      0.004442479927092791,
      -0.003927303943783045,
      0.09250693768262863,
      0.036821987479925156,
      -0.008096189238131046,
      -0.06694886088371277,
      0.06304381787776947,
      0.08433454483747482,
      0.008870521560311317,
      0.0690731555223465,
      -5.302601735479584e-08,
      -0.04462100565433502,
      0.039857540279626846,
      0.02121162600815296,
      -0.06188071146607399,
      -0.02701602689921856,
      -0.038076892495155334,
      0.0007831701077520847,
      -0.018082542344927788,
      -0.016081245616078377,
      -0.0635964646935463,
      -0.06380830705165863,
      0.001152511453256011,
      -0.0008671926916576922,
      -0.01009892113506794,
      0.020189445465803146,
      0.030131937935948372,
      -0.07509629428386688,
      0.04695706069469452,
      -0.04590238258242607,
      -0.08142927289009094,
      -0.06059738248586655,
      -0.02949969656765461,
      0.03619999438524246,
      0.015849096700549126,
      -0.027308762073516846,
      0.05928632616996765,
      -0.04952008277177811,
      0.007110680919140577,
      -0.0889420136809349,
      0.12267351150512695,
      0.015706460922956467,
      0.004455317743122578,
      0.10273239761590958,
      -0.0162386242300272,
      -0.11185794323682785,
      0.07119742780923843,
      -0.020578639581799507,
      -0.06669440865516663,
      0.0131185632199049,
      -0.030117331072688103,
      0.02375841699540615,
      -0.03662955015897751,
      0.04249439388513565,
      -0.012303625233471394,
      -0.024125752970576286,
      0.013653705827891827,
      0.007445130962878466,
      -0.015174697153270245,
      0.0649285838007927,
      0.0037573296576738358,
      -0.015845319256186485,
      -0.08746003359556198,
      0.009045490063726902,
      0.04592291638255119,
      0.04819754883646965,
      -0.06506681442260742,
      0.07500390708446503,
      -0.08168068528175354,
      0.11006234586238861,
      0.08661524206399918,
      0.024925727397203445,
      0.006528700701892376,
      0.054228898137807846,
      -0.021253902465105057
    ],
    [
      0.022691916674375534,
      -0.07184012234210968,
      -0.030864786356687546,
      -0.044794417917728424,
      0.02324509806931019,
      -0.017704442143440247,
      0.00402878737077117,
      0.054821789264678955,
      -0.016764478757977486,
      0.017452815547585487,
      -0.054419729858636856,
      -0.02496281825006008,
      -0.028203634545207024,
      0.04688519239425659,
      0.002258147345855832,
      -0.07607201486825943,
      0.02446613274514675,
      0.025136511772871017,
      0.027254166081547737,
      0.03557655215263367,
      -0.08983869105577469,
      0.011408754624426365,
      0.013326343148946762,
      -0.026341166347265244,
      -0.019522132351994514,
      -0.03197157010436058,
      -0.07134795188903809,
      -0.07074996083974838,
      -0.05143745616078377,
      -0.06399340182542801,
      0.032486774027347565,
      0.060563378036022186,
      0.07292357087135315,
      -0.015920013189315796,
      0.06834574043750763,
      0.14526353776454926,
      0.002013299847021699,
      0.026065994054079056,
      0.028614619746804237,
      0.0016382960602641106,
      0.018124060705304146,
      -0.08927444368600845,
      -0.02730117365717888,
      -0.052224595099687576,
      0.015339521691203117,
      0.012911355122923851,
      0.027747396379709244,
      -0.06325830519199371,
      0.039576608687639236,
      0.10984767228364944,
      -0.07133320719003677,
      -0.056589074432849884,
      0.009137758053839207,
      0.00023433865862898529,
      0.02605530247092247,
      0.08362095057964325,
      0.07655011862516403,
      0.07483720034360886,
      0.039908379316329956,
      -0.016644703224301338,
      -0.03280773013830185,
      -0.01709827594459057,
      -0.07511373609304428,
      0.021802397444844246,
      0.01099840085953474,
      0.014906034804880619,
      -0.11302460730075836,
      -0.04863472282886505,
      0.009786378592252731,
      0.018817303702235222,
      0.09114091843366623,
      0.01843135803937912,
      0.012473163194954395,
      -0.13059255480766296,
      0.015416143462061882,
      0.0507325753569603,
      -0.002729196334257722,
      -0.0036442428827285767,
      0.03981423377990723,
      0.046237245202064514,
      0.018086997792124748,
      -0.03823992982506752,
      0.05724863335490227,
      0.0022760548163205385,
      -0.03453432396054268,
      0.04408024996519089,
      0.026435649022459984,
      -0.06424620002508163,
      0.04007338359951973,
      0.02127312868833542,
      0.03483421728014946,
      0.021070294082164764,
      0.09467898309230804,
      -0.0036587114445865154,
      -0.016793694347143173,
      0.049675699323415756,
      -0.053646329790353775,
      0.015926843509078026,
      -0.02752668596804142,
      0.0651640072464943,
      0.002937043085694313,
      -0.018247386440634727,
      -0.013140534050762653,
      0.058261316269636154,
      -0.005729783326387405,
      -0.09076979756355286,
      -0.006423186045140028,
      0.09366181492805481,
      -0.06733015179634094,
      -0.08297628909349442,
      -0.01112531591206789,
      -0.03188934177160263,
      0.028712091967463493,
      -0.03905127942562103,
      -0.012164081446826458,
      0.029892245307564735,
      0.006247831974178553,
      -0.04584355279803276,
      -0.06190650165081024,
      -0.07160484045743942,
      0.10705946385860443,
      0.03240393102169037,
      0.02361583337187767,
      -0.008695002645254135,
      0.03871436044573784,
      -0.021177617833018303,
      0.031305648386478424,
      3.94086868836072e-33,
      -0.016587378457188606,
      -0.006185750477015972,
      0.03957228362560272,
      0.021732047200202942,
      0.11362595856189728,
      -0.037661388516426086,
      0.0017417384078726172,
      -0.07698725163936615,
      0.028018977493047714,
      0.026477986946702003,
      0.061570290476083755,
      0.05472077429294586,
      -0.06346545368432999,
      -0.0011640723096206784,
      -0.014043565839529037,
      -0.11192670464515686,
      0.03959029167890549,
      0.02088920958340168,
      0.000934293435420841,
      -0.08803891390562057,
      0.14546836912631989,
      -0.007508936803787947,
      0.014275035820901394,
      -0.027403417974710464,
      0.04447253793478012,
      0.010538582690060139,
      0.003977509681135416,
      0.058474164456129074,
      0.013773001730442047,
      0.03344924747943878,
      0.0023070010356605053,
      0.013065091334283352,
      0.034045908600091934,
      0.06154818460345268,
      -0.1393551081418991,
      -0.05740990489721298,
      -0.06955350190401077,
      -0.05901486426591873,
      -0.12973619997501373,
      0.013073449023067951,
      0.04173576459288597,
      0.043389856815338135,
      -0.0032168058678507805,
      -0.017751291394233704,
      0.09468945860862732,
      -0.1143455058336258,
      -0.04508088901638985,
      0.08288680016994476,
      0.10319650918245316,
      0.07324836403131485,
      0.04499533399939537,
      -0.031038640066981316,
      -0.042286135256290436,
      0.05474976450204849,
      -0.03314526379108429,
      0.005223338957875967,
      -0.09147509932518005,
      -0.04093087464570999,
      -0.03484430909156799,
      -0.08735337853431702,
      0.022753339260816574,
      0.0006987002561800182,
      0.03549453988671303,
      0.04302819073200226,
      0.022427016869187355,
      0.010151837952435017,
      0.06064524129033089,
      0.05237333104014397,
      -0.01804449036717415,
      0.14240631461143494,
      -0.018115516752004623,
      0.05415629595518112,
      0.005525349639356136,
      -0.011701068840920925,
      -0.020150991156697273,
      -0.04546993970870972,
      -0.03037947230041027,
      -0.08192892372608185,
      -0.0445370189845562,
      0.017774827778339386,
      0.038631122559309006,
      0.009077237918972969,
      -0.05533965677022934,
      0.07007308304309845,
      0.05525881052017212,
      -0.02611650712788105,
      0.013548322953283787,
      0.10766800493001938,
      0.03893817961215973,
      0.06973277032375336,
      -0.02293429896235466,
      -0.024445176124572754,
      -0.04251046106219292,
      0.03943479061126709,
      -0.0885024145245552,
      -3.885526781665991e-33,
      2.0841087462031282e-05,
      -0.09206234663724899,
      -0.027863260358572006,
      -0.006483727600425482,
      -0.08023049682378769,
      -0.07606638967990875,
      0.014106293208897114,
      0.017855780199170113,
      0.0590355284512043,
      -0.008251235820353031,
      -0.022230572998523712,
      0.0304225105792284,
      0.044491637498140335,
      -0.024187680333852768,
      -0.09038309752941132,
      0.026752149686217308,
      -0.060207776725292206,
      -0.04728538170456886,
      0.0026619669515639544,
      0.04479401931166649,
      -0.016912514343857765,
      -0.0549931563436985,
      0.039214685559272766,
      0.051552385091781616,
      0.005469061434268951,
      -0.004807508550584316,
      0.06046687439084053,
      0.04985007271170616,
      0.01762107014656067,
      0.0007864824729040265,
      0.03349703922867775,
      -0.027783086523413658,
      0.01441494282335043,
      0.06687405705451965,
      0.014018436893820763,
      0.04278254136443138,
      -0.013877613469958305,
      0.06670408695936203,
      -0.08751660585403442,
      0.008230715990066528,
      0.048073071986436844,
      -0.024053625762462616,
      -0.03367561474442482,
      -0.008811735548079014,
      0.027500608935952187,
      -0.048312049359083176,
      -0.03502562269568443,
      -0.01683897338807583,
      0.022209439426660538,
      -0.043557677417993546,
      -0.049832429736852646,
      -0.1272565871477127,
      0.040048956871032715,
      -0.0707063302397728,
      0.006701241247355938,
      0.02029225043952465,
      0.03758032247424126,
      0.03494163975119591,
      -0.053876470774412155,
      -0.06694530695676804,
      0.05188009887933731,
      -0.039506297558546066,
      0.0335315503180027,
      0.0617816299200058,
      0.08596334606409073,
      -0.028228236362338066,
      -0.11213413625955582,
      0.04788549989461899,
      -0.055681146681308746,
      0.07284103333950043,
      0.08685008436441422,
      -0.005674577783793211,
      -0.0602264478802681,
      0.036338869482278824,
      0.05521765723824501,
      -0.05725294351577759,
      -0.07656083256006241,
      -0.014278088696300983,
      0.03834168240427971,
      0.05195586755871773,
      0.00828630942851305,
      0.08187122642993927,
      -0.025466084480285645,
      -0.006392109673470259,
      -0.06890945881605148,
      -0.004063908010721207,
      0.03454011678695679,
      0.09295269101858139,
      0.09589213877916336,
      0.010978703387081623,
      -0.021772708743810654,
      0.006878188345581293,
      0.1016259491443634,
      -0.0036194261629134417,
      -0.0018800455145537853,
      -3.762182743116682e-08,
      -0.018211308866739273,
      -0.03314890339970589,
      -0.019017506390810013,
      0.06321833282709122,
      0.028517695143818855,
      -0.05175747722387314,
      -0.011121987365186214,
      -0.004431765526533127,
      -0.08018623292446136,
      -0.02646336331963539,
      -0.08116830140352249,
      0.08825737237930298,
      0.0009002849110402167,
      -0.007756520062685013,
      0.0620947927236557,
      -0.03342512622475624,
      0.016885466873645782,
      0.01570279896259308,
      0.008655124343931675,
      -0.11053591221570969,
      -0.10190288722515106,
      0.024500064551830292,
      0.12346428632736206,
      -0.022287162020802498,
      -0.03293207660317421,
      0.03136204555630684,
      0.028670240193605423,
      -0.03235115483403206,
      -0.08083593845367432,
      0.051261186599731445,
      -0.0067943911999464035,
      -0.03846359997987747,
      0.03456642106175423,
      -0.014358604326844215,
      -0.02710331417620182,
      -0.009355577640235424,
      -0.0434303879737854,
      -0.04353899508714676,
      -0.014940890483558178,
      -0.028364593163132668,
      0.01669333688914776,
      -0.00710415979847312,
      0.008592361584305763,
      -0.05693181976675987,
      -0.07749658823013306,
      -0.04442919045686722,
      -0.014441094361245632,
      0.040568768978118896,
      0.10128695517778397,
      -0.04237905144691467,
      -0.028468823060393333,
      0.017410991713404655,
      -0.04712069034576416,
      0.0033493104856461287,
      0.06743516027927399,
      0.011899868957698345,
      -0.005762721411883831,
      -0.0547519251704216,
      0.030032167211174965,
      -0.00514445174485445,
      -0.005334201734513044,
      0.027209676802158356,
      0.028984973207116127,
      -0.06587321311235428
    ],
    [
      0.03448309749364853,
      -0.006529065780341625,
      -0.09068672358989716,
      -0.05557688698172569,
      0.031762704253196716,
      -0.011226345784962177,
      0.023170260712504387,
      0.0711466372013092,
      -0.007627738639712334,
      -0.01037128921598196,
      0.006771656218916178,
      -0.059080902487039566,
      0.007843265309929848,
      -0.01906987838447094,
      0.003809959627687931,
      -0.07296375185251236,
      -0.028340527787804604,
      -0.004550876561552286,
      -0.016264811158180237,
      0.07331329584121704,
      -0.0339387021958828,
      -0.04572821408510208,
      0.0044710286892950535,
      -0.04593779146671295,
      0.00259341299533844,
      -0.016673516482114792,
      0.0198806244879961,
      -0.017513463273644447,
      -0.024573877453804016,
      -0.006281448528170586,
      0.05742686986923218,
      0.00833360105752945,
      0.020879941061139107,
      0.032056231051683426,
      0.12529303133487701,
      0.16815070807933807,
      0.05328401178121567,
      0.04070119559764862,
      0.04417601600289345,
      -0.06727887690067291,
      0.06410190463066101,
      -0.017106061801314354,
      0.014533556997776031,
      0.02060682699084282,
      0.03338417783379555,
      0.05003906041383743,
      0.038298655301332474,
      -0.049936141818761826,
      0.004421720281243324,
      0.12515994906425476,
      -0.1010044738650322,
      0.028875919058918953,
      -0.0031144118402153254,
      -0.003057454014196992,
      -0.042202264070510864,
      0.11095953732728958,
      0.003556982148438692,
      -0.012458933517336845,
      -0.006026810500770807,
      0.02573424205183983,
      -0.0235014408826828,
      -0.006354988552629948,
      -0.025061095133423805,
      -0.03041839227080345,
      -0.05326475948095322,
      0.021082626655697823,
      -0.07397868484258652,
      -0.03682461008429527,
      0.0032154906075447798,
      0.017085105180740356,
      0.008432396687567234,
      -0.028162790462374687,
      -0.05805316939949989,
      -0.14813360571861267,
      -0.009449945762753487,
      0.03304172679781914,
      -0.09028445929288864,
      -0.036154188215732574,
      -0.04845454916357994,
      0.018652841448783875,
      0.00011297244782326743,
      -0.023962587118148804,
      0.05757588520646095,
      -0.002833972917869687,
      -0.08054572343826294,
      0.08918503671884537,
      0.06650891900062561,
      -0.050416890531778336,
      -0.024525944143533707,
      0.06648600846529007,
      0.03585276007652283,
      -0.06631261110305786,
      0.08099125325679779,
      -0.009827028959989548,
      0.04856386035680771,
      0.07857394963502884,
      -0.005655938293784857,
      0.05974660813808441,
      -0.010459886863827705,
      0.021424859762191772,
      -0.05320226401090622,
      -0.010023617185652256,
      -0.007952637039124966,
      -0.025572970509529114,
      0.01027403213083744,
      -0.004617465194314718,
      -0.0041755023412406445,
      0.009592421352863312,
      -0.08256295323371887,
      -0.021914798766374588,
      -0.05616620182991028,
      0.0545714870095253,
      -0.004720926284790039,
      -0.04273500293493271,
      0.04074113443493843,
      0.03460020571947098,
      -0.042686108499765396,
      -0.04808641970157623,
      -0.0035518233198672533,
      -0.04504678398370743,
      0.047037363052368164,
      -0.03246992453932762,
      0.06662063300609589,
      0.0672883465886116,
      0.015297286212444305,
      0.03570349141955376,
      -0.05060988664627075,
      2.4006601337935324e-33,
      -0.04396452382206917,
      0.018483862280845642,
      0.04713846370577812,
      -0.013218628242611885,
      0.06524313986301422,
      -0.033450156450271606,
      0.059867918491363525,
      -0.08732982724905014,
      -0.014723913744091988,
      0.07701409608125687,
      0.010604406706988811,
      0.0440126396715641,
      -0.07487504929304123,
      -0.015699809417128563,
      -0.027160799130797386,
      -0.03143354877829552,
      0.027749517932534218,
      0.01931893825531006,
      0.06324080377817154,
      -0.09207867830991745,
      0.06809986382722855,
      0.010756357572972775,
      0.0055448077619075775,
      0.004487995058298111,
      0.06941670924425125,
      0.023056495934724808,
      -0.011148805730044842,
      0.008357950486242771,
      0.006538052577525377,
      0.018593445420265198,
      0.014351298101246357,
      0.034480344504117966,
      0.05269526317715645,
      0.017516031861305237,
      -0.06835560500621796,
      -0.002425039652734995,
      -0.037864189594984055,
      -0.019306698814034462,
      -0.09558330476284027,
      0.043581772595644,
      0.017854327335953712,
      -0.00924795214086771,
      0.014933323487639427,
      0.006577556952834129,
      0.009963994845747948,
      -0.0839645117521286,
      0.022726604714989662,
      0.06779353320598602,
      0.14349505305290222,
      0.0708223208785057,
      -0.027970990166068077,
      -0.07795817404985428,
      -0.06010742485523224,
      0.039257388561964035,
      -0.0183588694781065,
      -0.07085134834051132,
      -0.05549546331167221,
      -0.052436020225286484,
      -0.017371751368045807,
      -0.07105157524347305,
      -0.08440722525119781,
      0.06800881028175354,
      0.02729628048837185,
      0.0512525737285614,
      0.03770105168223381,
      -0.022473685443401337,
      0.0011465651914477348,
      0.05433733016252518,
      -0.01904950477182865,
      0.03343075141310692,
      0.016619417816400528,
      0.05773153156042099,
      -0.017105253413319588,
      -0.04588678479194641,
      0.01234197337180376,
      -0.025483665987849236,
      -0.014023940078914165,
      0.006260895635932684,
      0.034547608345746994,
      -0.005703344009816647,
      -0.0004760760930366814,
      0.10163689404726028,
      -0.04447508975863457,
      0.0660228431224823,
      0.014403846114873886,
      -0.005083777010440826,
      -0.0162101648747921,
      0.01796274073421955,
      0.07076510787010193,
      0.04080335050821304,
      0.0026218986604362726,
      -0.04588375240564346,
      -0.06776789575815201,
      0.003422769019380212,
      -0.142949640750885,
      -3.6995973708284915e-33,
      0.015343892388045788,
      -0.10187038034200668,
      -0.02077333815395832,
      0.0064196232706308365,
      -0.059250690042972565,
      -0.01834854856133461,
      0.05287444218993187,
      0.047649819403886795,
      0.027027569711208344,
      -0.026949096471071243,
      -0.11923038214445114,
      0.058787647634744644,
      0.08824267983436584,
      -0.0557582788169384,
      -0.062163930386304855,
      -0.040133751928806305,
      -0.013516436330974102,
      0.04024335741996765,
      0.02966531179845333,
      -0.03595459461212158,
      0.018633687868714333,
      0.006946345791220665,
      0.05809638649225235,
      0.11425822973251343,
      0.03790640830993652,
      -0.004372794646769762,
      0.03670785576105118,
      0.09574829041957855,
      -0.028572730720043182,
      -0.01208852231502533,
      0.040177006274461746,
      0.03718547895550728,
      -0.02503824420273304,
      -0.007275559939444065,
      -0.04536980763077736,
      -0.008304167538881302,
      -0.1257496476173401,
      0.1699056476354599,
      -0.031522445380687714,
      0.03850393369793892,
      0.020810117945075035,
      -0.06254364550113678,
      -0.017904266715049744,
      -0.0481017529964447,
      -0.029040168970823288,
      0.004414686933159828,
      -0.022862406447529793,
      -0.04373212903738022,
      0.01481046061962843,
      -0.0061744521372020245,
      0.040320806205272675,
      -0.059552907943725586,
      0.024242853745818138,
      -0.056972432881593704,
      0.01076039019972086,
      0.01928476244211197,
      0.022633759304881096,
      0.01850777491927147,
      -0.0363863930106163,
      -0.05409041792154312,
      0.11403872072696686,
      -0.045238129794597626,
      0.05361364781856537,
      0.11217308789491653,
      0.020149018615484238,
      -0.051390741020441055,
      -0.07579497992992401,
      0.03302447497844696,
      -0.07244538515806198,
      0.0872633159160614,
      0.06945298612117767,
      -0.06747505813837051,
      -0.02758541889488697,
      0.0565553717315197,
      0.07043241709470749,
      -0.06960049271583557,
      -0.0741521492600441,
      0.014914783649146557,
      0.07872695475816727,
      0.027145931497216225,
      0.03121986798942089,
      0.07319740951061249,
      -0.017151862382888794,
      -0.054139647632837296,
      -0.030110575258731842,
      -0.020197201520204544,
      0.07508610188961029,
      0.053698811680078506,
      0.09522832185029984,
      0.01921936869621277,
      -0.0005260595353320241,
      -0.01838149130344391,
      0.02397778257727623,
      -0.08018248528242111,
      0.028874695301055908,
      -3.9454477018807665e-08,
      0.008527977392077446,
      0.03823159635066986,
      0.026536060497164726,
      0.03475024178624153,
      -0.09685933589935303,
      -0.05089550465345383,
      0.013818477280437946,
      0.0003791753842961043,
      -0.028728477656841278,
      0.0014103226130828261,
      -0.07975564897060394,
      -0.008414706215262413,
      -0.01582471840083599,
      -0.000349194131558761,
      -0.03960577771067619,
      -0.01567450910806656,
      0.06990226358175278,
      -0.005774214398115873,
      -0.0022252011112868786,
      -0.11452323198318481,
      -0.11428657919168472,
      -0.026239024475216866,
      0.12945011258125305,
      0.027897441759705544,
      -0.02483867108821869,
      0.04011962190270424,
      0.03589356690645218,
      -0.04053235799074173,
      0.040816742926836014,
      0.05777203291654587,
      -0.06350208073854446,
      -0.05152248591184616,
      -0.011423573829233646,
      -9.084725206776056e-06,
      -0.07963568717241287,
      0.016501611098647118,
      -0.05417373776435852,
      -0.04177692532539368,
      -0.06187932565808296,
      -0.011238322593271732,
      -0.10973328351974487,
      -0.048961251974105835,
      -0.02376580983400345,
      -0.05452819913625717,
      -0.1005030944943428,
      -0.018415255472064018,
      0.025291308760643005,
      0.04056848958134651,
      0.07806368917226791,
      -0.007623099721968174,
      0.053809069097042084,
      -0.01432135421782732,
      -0.038128845393657684,
      0.008384598419070244,
      0.0447368249297142,
      0.03351154178380966,
      -0.028000367805361748,
      0.031019167974591255,
      0.0764479786157608,
      -0.02031891420483589,
      -0.052751101553440094,
      0.06532459706068039,
      -0.020166946575045586,
      -0.016701290383934975
    ],
    [
      -0.019143465906381607,
      -0.022389639168977737,
      -0.027722487226128578,
      0.02183610014617443,
      0.012801280245184898,
      -0.021778693422675133,
      0.026133758947253227,
      0.03745859116315842,
      0.0426580011844635,
      0.0024740470107644796,
      -0.00868039857596159,
      -0.06800518184900284,
      0.11139270663261414,
      0.04335519298911095,
      0.10750903189182281,
      0.08723442256450653,
      0.0760338231921196,
      -0.06817688047885895,
      -0.03550596535205841,
      -0.025608157739043236,
      0.12453170865774155,
      0.06147440895438194,
      -0.029033305123448372,
      0.011355792172253132,
      -0.040985219180583954,
      -0.08251030743122101,
      -0.012464375235140324,
      0.03437323123216629,
      -0.04351918026804924,
      0.014729882590472698,
      0.06333749741315842,
      -0.05597466602921486,
      -0.05459834262728691,
      0.006913609337061644,
      -0.0019938976038247347,
      0.018891550600528717,
      0.02578556537628174,
      -0.015717899426817894,
      0.11453043669462204,
      0.06631677597761154,
      -0.02440761588513851,
      -0.07202441245317459,
      -0.09539412707090378,
      0.006009971257299185,
      -0.004018574021756649,
      0.03902185708284378,
      -0.04406002163887024,
      0.01665933057665825,
      -0.04746127128601074,
      0.008291389793157578,
      -0.01326803956180811,
      -0.04769062250852585,
      0.0380970798432827,
      0.0321493037045002,
      0.018617719411849976,
      -0.015871526673436165,
      -0.05955517292022705,
      0.058256641030311584,
      -0.030343780294060707,
      -0.03610319644212723,
      0.03407462313771248,
      -0.07968106120824814,
      0.06419825553894043,
      -0.026537591591477394,
      -0.05774177238345146,
      -0.030162431299686432,
      -0.11765329539775848,
      0.014561641961336136,
      0.03201914206147194,
      -0.05744381994009018,
      0.030120184645056725,
      -0.021720243617892265,
      -0.015681618824601173,
      -0.07374199479818344,
      0.013110204599797726,
      -0.010480375029146671,
      0.03934025019407272,
      -0.004521238151937723,
      -0.09746798127889633,
      -0.030765222385525703,
      -0.04672633856534958,
      0.014599270187318325,
      0.05915588140487671,
      0.041167695075273514,
      -0.032940007746219635,
      0.04110093414783478,
      0.029495473951101303,
      0.023425268009305,
      -0.03194878250360489,
      0.08081986755132675,
      0.05838751792907715,
      -0.08241024613380432,
      -0.038980960845947266,
      0.06917877495288849,
      0.06607216596603394,
      0.06204448267817497,
      -0.09855770319700241,
      -0.06964009255170822,
      -0.03982534632086754,
      0.025264395400881767,
      0.005406803451478481,
      -0.10405433923006058,
      -0.07670234888792038,
      0.04133951663970947,
      0.11566849797964096,
      -0.005902920849621296,
      -0.059987399727106094,
      0.030918944627046585,
      0.06945987790822983,
      0.02471115253865719,
      -0.07699353992938995,
      -0.03972647711634636,
      0.05439973622560501,
      -0.0077966670505702496,
      -0.005049726460129023,
      0.10476347804069519,
      0.05587218701839447,
      0.10183559358119965,
      0.0523424968123436,
      -0.028035255149006844,
      0.1243329793214798,
      -0.07937993109226227,
      0.019087841734290123,
      0.020485004410147667,
      0.09213800728321075,
      0.0833372175693512,
      0.05858352407813072,
      1.0818180121438094e-33,
      0.07203923165798187,
      0.05576265975832939,
      -0.00999615527689457,
      0.01383415050804615,
      -0.012194225564599037,
      0.02855055406689644,
      -0.019157884642481804,
      -0.01694304682314396,
      0.014520879834890366,
      -0.06580743938684464,
      -0.09632736444473267,
      0.0650126039981842,
      0.03320319578051567,
      0.0032965245191007853,
      -0.10182913392782211,
      -0.05222512409090996,
      0.033763960003852844,
      0.01236435491591692,
      -0.007796993013471365,
      -0.07484742999076843,
      0.011056887917220592,
      -0.0056273783557116985,
      0.02125498838722706,
      0.07728997617959976,
      0.01786433719098568,
      0.09582297503948212,
      0.04139872267842293,
      -0.049619052559137344,
      -0.031451717019081116,
      0.007512783631682396,
      -0.056260623037815094,
      0.0746733769774437,
      -0.012602782808244228,
      0.018146082758903503,
      0.010341455228626728,
      -0.0033693925943225622,
      -0.08920367807149887,
      -0.015744442120194435,
      -0.042700301855802536,
      -0.034221768379211426,
      -0.004687769338488579,
      0.02723119594156742,
      -0.03296050801873207,
      -0.04441116377711296,
      -0.019795093685388565,
      -0.022475173696875572,
      -0.038852278143167496,
      -0.01910269632935524,
      0.06301280856132507,
      -0.07897220551967621,
      0.03504563495516777,
      0.0006201353389769793,
      0.10459884256124496,
      0.025799116119742393,
      0.0739661380648613,
      -0.05217688903212547,
      -0.02488485723733902,
      -0.08003927767276764,
      -0.04641265422105789,
      -0.04401097446680069,
      -0.00012673818855546415,
      -0.09267401695251465,
      0.08312752842903137,
      -0.03112790733575821,
      0.07237643748521805,
      -0.005449943244457245,
      0.026452388614416122,
      0.06315664947032928,
      0.02813882566988468,
      0.03848062828183174,
      -0.03300487995147705,
      0.12674932181835175,
      -0.017062785103917122,
      0.026552511379122734,
      -0.12977546453475952,
      -0.05692172050476074,
      -0.015194321051239967,
      -0.04925678297877312,
      0.026944788172841072,
      -0.03152965381741524,
      -0.0207685437053442,
      -0.0010890718549489975,
      0.021492594853043556,
      0.03483865037560463,
      0.0641167014837265,
      -0.019169816747307777,
      -0.054483283311128616,
      -0.035374876111745834,
      -0.02741144225001335,
      0.09256300330162048,
      -0.09860486537218094,
      0.04700818285346031,
      -0.06031254678964615,
      0.10296383500099182,
      -0.12481291592121124,
      -2.3609043638357456e-33,
      -0.0365021787583828,
      -0.03171573951840401,
      -0.10408179461956024,
      0.02724851854145527,
      -0.09185700863599777,
      -0.03534331172704697,
      -0.003542706836014986,
      0.05330880358815193,
      0.04235711321234703,
      0.11652819812297821,
      -0.06753239035606384,
      0.006657462567090988,
      0.007908043451607227,
      -0.00964041706174612,
      -0.024439865723252296,
      -0.007767107803374529,
      -0.03051183559000492,
      -0.005289557855576277,
      -0.05823158472776413,
      -0.06956701725721359,
      -0.08460193872451782,
      0.008529603481292725,
      -0.09265555441379547,
      -0.01490414422005415,
      0.0472041592001915,
      0.03451412543654442,
      -0.02748606912791729,
      -0.004902584478259087,
      0.012056308798491955,
      -0.09317933022975922,
      0.05067950487136841,
      0.02164681814610958,
      0.014011671766638756,
      0.05670958384871483,
      0.08622858673334122,
      -0.008222462609410286,
      0.02264801412820816,
      0.07050272822380066,
      0.004612313117831945,
      -0.009267047978937626,
      0.08596618473529816,
      0.009853551164269447,
      -0.026903031393885612,
      -0.01925329677760601,
      0.011576266959309578,
      0.019132860004901886,
      -0.00036884573637507856,
      0.012157177552580833,
      -0.09876655787229538,
      0.05558333173394203,
      0.0406506322324276,
      -0.03454438969492912,
      0.029042784124612808,
      0.06269761919975281,
      -0.06605679541826248,
      -0.02182093635201454,
      0.014541168697178364,
      0.0061790491454303265,
      -0.024128040298819542,
      -0.023000923916697502,
      0.014250511303544044,
      -0.07631541043519974,
      0.0033158159349113703,
      0.07371878623962402,
      -0.030184514820575714,
      -0.023215005174279213,
      -0.02026299387216568,
      0.010986404493451118,
      0.033486682921648026,
      -0.040552012622356415,
      0.0979691594839096,
      -0.03105839341878891,
      -0.06586795300245285,
      -0.04919855669140816,
      0.07378054410219193,
      -0.04886148124933243,
      -0.058509573340415955,
      -0.06627164781093597,
      -0.00934449303895235,
      -0.03896160051226616,
      -0.09757988899946213,
      0.030738404020667076,
      0.03879515454173088,
      0.01851845346391201,
      -0.00955236330628395,
      0.008752459660172462,
      0.06548517197370529,
      0.05802425369620323,
      0.038100507110357285,
      0.002322362968698144,
      -0.011190787889063358,
      0.06268703192472458,
      0.004343939945101738,
      -0.009720328263938427,
      -0.023066885769367218,
      -5.0091095715742995e-08,
      -0.0035710374359041452,
      0.008125700987875462,
      -0.036098867654800415,
      -0.002779655857011676,
      -0.04778362438082695,
      0.060148000717163086,
      0.03309979289770126,
      -0.006232379470020533,
      6.22937805019319e-05,
      -0.001035085180774331,
      0.029636193066835403,
      -0.040404774248600006,
      -0.015688758343458176,
      -0.03673512861132622,
      0.029914045706391335,
      0.007194849196821451,
      -0.010142257437109947,
      -0.020892931148409843,
      0.02175397425889969,
      -0.0615362823009491,
      -7.440543868142413e-06,
      -0.000622715859208256,
      -0.03018791414797306,
      -0.0422174446284771,
      0.04453466460108757,
      -0.08515298366546631,
      0.0025762689765542746,
      0.0670040026307106,
      -0.0674697682261467,
      0.013660221360623837,
      -0.050596684217453,
      -0.07162550091743469,
      0.04491237923502922,
      -0.027149880304932594,
      -0.05416247993707657,
      0.14179441332817078,
      -0.020681584253907204,
      -0.08096907287836075,
      0.033035729080438614,
      0.03965127840638161,
      0.023101624101400375,
      -0.049040112644433975,
      -0.006336646154522896,
      -0.04142288491129875,
      -0.0013686512829735875,
      -0.05738456919789314,
      0.047353345900774,
      -0.05565300211310387,
      0.06429256498813629,
      -0.00014831995940767229,
      -0.028175069019198418,
      0.005776010919362307,
      0.03370172530412674,
      0.06426738202571869,
      -0.01061927154660225,
      0.00031534687150269747,
      0.0009127093944698572,
      -0.07943764328956604,
      0.0405038446187973,
      0.017234915867447853,
      0.0362546406686306,
      0.023586055263876915,
      0.025550303980708122,
      -0.02391333319246769
    ],
    [
      -0.06832793354988098,
      -0.03683027625083923,
      -0.061495356261730194,
      0.008507217280566692,
      0.02422749251127243,
      -0.06764405965805054,
      -0.0400562509894371,
      0.03600161522626877,
      -0.05741279572248459,
      0.013047581538558006,
      -0.035430748015642166,
      0.001384502975270152,
      0.013949897140264511,
      0.013188722543418407,
      -0.0174989253282547,
      -0.024101978167891502,
      0.07792072743177414,
      -0.049764979630708694,
      0.0639692023396492,
      0.028212107717990875,
      -0.10826627165079117,
      0.00826397817581892,
      0.0077231391333043575,
      -0.0471215546131134,
      -0.05713498219847679,
      -0.03066054917871952,
      -0.07559230923652649,
      -0.05360569804906845,
      -0.04871933534741402,
      -0.0023792970459908247,
      0.10039781033992767,
      0.04043328016996384,
      -0.03934728726744652,
      -0.01634080335497856,
      0.039614688605070114,
      0.05223174765706062,
      0.04808415099978447,
      0.002748454688116908,
      -0.029441583901643753,
      0.02136760950088501,
      0.06983160972595215,
      -0.0804186686873436,
      0.006579612381756306,
      0.006446430925279856,
      0.031972095370292664,
      -0.10216911882162094,
      -0.04685330390930176,
      -0.03353895619511604,
      0.06208522990345955,
      0.08185125887393951,
      -0.02723565138876438,
      -0.02781102806329727,
      -0.026377158239483833,
      0.047254715114831924,
      0.03101230040192604,
      0.0964900553226471,
      0.028532816097140312,
      0.019012082368135452,
      -0.014075525104999542,
      -0.0057797785848379135,
      0.04278019443154335,
      -0.07055390626192093,
      -0.028098134323954582,
      -0.005036544520407915,
      -0.05520372837781906,
      0.006207301281392574,
      -0.05177987366914749,
      0.044597428292036057,
      0.10399027168750763,
      -0.0025915170554071665,
      0.014379028230905533,
      0.07225792855024338,
      -0.03197409585118294,
      -0.10281521826982498,
      0.0105735519900918,
      0.06508124619722366,
      0.019819779321551323,
      0.0008840885129757226,
      0.0034691235050559044,
      0.0012343255802989006,
      0.0037529394030570984,
      0.046886783093214035,
      0.02852553129196167,
      -0.018402831628918648,
      -0.03546727076172829,
      0.033309902995824814,
      0.026568181812763214,
      -0.0154575165361166,
      -0.017758606001734734,
      -0.02164420485496521,
      0.10275613516569138,
      0.054574910551309586,
      -0.055931199342012405,
      0.02480531856417656,
      0.007659517228603363,
      0.015096791088581085,
      -0.011804242618381977,
      -0.02591065876185894,
      0.021812139078974724,
      -0.004451445769518614,
      0.005383722018450499,
      -0.060762498527765274,
      -0.056500956416130066,
      0.036082249134778976,
      -0.008955040946602821,
      -0.11281511187553406,
      -0.007688285317271948,
      0.0446646474301815,
      -0.08265524357557297,
      -0.03854304552078247,
      -0.010215613059699535,
      0.008192368783056736,
      -0.019624797627329826,
      -0.06728411465883255,
      -0.0678197592496872,
      0.031619515269994736,
      -0.08795714378356934,
      -0.07074420899152756,
      -0.0459522008895874,
      -0.021535780280828476,
      0.03843752667307854,
      0.011365707032382488,
      0.07943163067102432,
      -0.05392739176750183,
      0.12266600877046585,
      -0.0050156679935753345,
      -0.03153162822127342,
      5.0008879842879954e-33,
      0.011778582818806171,
      -0.04598519578576088,
      -0.03635946661233902,
      0.011079972609877586,
      0.12774011492729187,
      -0.07115396112203598,
      0.05511803552508354,
      -0.03495926782488823,
      -0.020462537184357643,
      0.0485781654715538,
      -0.010244580917060375,
      0.05961031839251518,
      -0.0724681094288826,
      -0.11865727603435516,
      0.014827737584710121,
      -0.0831204503774643,
      -0.01170637458562851,
      0.006512380205094814,
      0.026944898068904877,
      -0.1069604903459549,
      0.0840722918510437,
      -0.03526081517338753,
      0.0194198377430439,
      -0.0638466402888298,
      0.11177443712949753,
      0.030739951878786087,
      -0.014587859623134136,
      0.013476693071424961,
      0.018583891913294792,
      0.06333554536104202,
      0.03471340239048004,
      -0.046731848269701004,
      0.03116789646446705,
      0.056795161217451096,
      -0.03594880923628807,
      -0.0601760596036911,
      -0.09461323916912079,
      -0.038315124809741974,
      -0.13300931453704834,
      0.03002798743546009,
      -0.00014351209392771125,
      0.008468486368656158,
      -0.03891879692673683,
      -0.03582454472780228,
      -0.009167552925646305,
      -0.13508617877960205,
      0.000992474495433271,
      0.05503726005554199,
      0.06277291476726532,
      0.01780114509165287,
      0.06692682206630707,
      -0.05607395991683006,
      0.0003741232503671199,
      0.04614062234759331,
      0.010720277205109596,
      -0.023777658119797707,
      -0.07801704108715057,
      -0.042456649243831635,
      -0.016997313126921654,
      0.0025726016610860825,
      -0.06314735859632492,
      -0.031162505969405174,
      -0.03151846304535866,
      -0.04217502102255821,
      0.044184066355228424,
      0.05136565491557121,
      0.07616624236106873,
      -0.012713669799268246,
      0.017400311306118965,
      0.10035711526870728,
      0.051931560039520264,
      0.02563331462442875,
      0.029919670894742012,
      -0.0006442629382945597,
      0.03504108637571335,
      -0.006026917137205601,
      -0.019890926778316498,
      0.023145446553826332,
      -0.05236377194523811,
      0.01705283299088478,
      0.03229014575481415,
      -0.042004767805337906,
      -0.080325186252594,
      0.10763781517744064,
      0.04180407524108887,
      -0.06330235302448273,
      0.04739343747496605,
      0.04068080708384514,
      0.01198306679725647,
      0.005778190679848194,
      -0.0013582861283794045,
      0.026378532871603966,
      0.05694558098912239,
      -0.06960242986679077,
      -0.04878975450992584,
      -3.1778218771213716e-33,
      -0.011894823051989079,
      -0.039302632212638855,
      0.016870152205228806,
      0.02933860383927822,
      0.011270248331129551,
      -0.0600249208509922,
      0.07870958745479584,
      0.044541310518980026,
      0.05085103586316109,
      0.00931607373058796,
      -0.07382293045520782,
      0.024681800976395607,
      0.024397430941462517,
      -0.047765135765075684,
      -0.08692219853401184,
      0.03615613654255867,
      -0.0646863728761673,
      -0.08854990452528,
      0.03858179971575737,
      0.046154920011758804,
      -0.053126439452171326,
      -0.041619397699832916,
      0.040867093950510025,
      0.02166430465877056,
      -0.025742949917912483,
      0.012648358009755611,
      0.0309956856071949,
      0.028623878955841064,
      -0.019795741885900497,
      -0.02670622244477272,
      0.03846849501132965,
      0.006915078032761812,
      -0.0300837941467762,
      0.017143484205007553,
      0.016927732154726982,
      0.03969940170645714,
      0.06222306191921234,
      0.12238029390573502,
      -0.060170579701662064,
      -0.0031037016306072474,
      0.11904759705066681,
      0.02411770634353161,
      -0.08252938836812973,
      -0.03153155744075775,
      0.01919149048626423,
      -0.00400257483124733,
      -0.058974988758563995,
      0.01789340004324913,
      -0.04878804832696915,
      -0.02113855443894863,
      -0.0265624038875103,
      -0.07986073940992355,
      0.055157408118247986,
      0.06333568692207336,
      -0.024967951700091362,
      -0.015681566670536995,
      0.10685055702924728,
      -0.011495335027575493,
      -0.07255436480045319,
      0.009582024067640305,
      0.1235208734869957,
      -0.14956216514110565,
      -0.03210463374853134,
      0.12000423669815063,
      0.0821765661239624,
      -0.00013494127779267728,
      -0.02615278773009777,
      0.09338556975126266,
      -0.10236141085624695,
      0.06528721004724503,
      0.045469045639038086,
      -0.016806576400995255,
      -0.007062314078211784,
      0.037545185536146164,
      0.06398525834083557,
      -0.038698695600032806,
      -0.07223626226186752,
      -0.02974035032093525,
      0.06489303708076477,
      0.12443531304597855,
      -0.04368273541331291,
      0.03876049816608429,
      -0.004170926287770271,
      -0.01408669725060463,
      0.01809411495923996,
      -0.0020114833023399115,
      0.08442658931016922,
      0.04287676513195038,
      0.09567709267139435,
      -0.008765840902924538,
      -0.08766444772481918,
      0.02999572828412056,
      -0.044058624655008316,
      0.0513492152094841,
      0.03578053042292595,
      -5.178788242687915e-08,
      -0.010311871767044067,
      0.007779786363244057,
      -0.020454898476600647,
      0.06884998083114624,
      0.010240149684250355,
      -0.01073035504668951,
      0.015271734446287155,
      -0.01656557247042656,
      -0.02582978643476963,
      0.05269945040345192,
      -0.027774551883339882,
      0.019134780392050743,
      0.00036054456722922623,
      0.001970055280253291,
      0.0030417677480727434,
      -0.008310503326356411,
      0.04533299058675766,
      0.024836942553520203,
      -0.01816646195948124,
      -0.0887899398803711,
      -0.04883978143334389,
      0.09236399829387665,
      0.11784349381923676,
      0.01188254076987505,
      0.013084402307868004,
      0.10083245486021042,
      0.08779212087392807,
      -0.02507421188056469,
      0.0014450695598497987,
      0.005863177590072155,
      -0.027261223644018173,
      -0.08177478611469269,
      0.027702871710062027,
      0.032483600080013275,
      -0.08431202918291092,
      0.03361377492547035,
      -0.011259905993938446,
      0.041296109557151794,
      0.03878369927406311,
      0.008118053898215294,
      -0.03092309460043907,
      0.023892845958471298,
      -0.012126271612942219,
      -0.04363899677991867,
      -0.010889202356338501,
      -0.03741344437003136,
      -0.06550765782594681,
      0.06835499405860901,
      0.024662381038069725,
      -0.004326731897890568,
      0.0342286080121994,
      -0.041486985981464386,
      -0.010760360397398472,
      -0.03358481079339981,
      0.06871344894170761,
      0.03647971525788307,
      -0.016779586672782898,
      -0.00491679273545742,
      0.03076561912894249,
      0.009237263351678848,
      -0.036472491919994354,
      0.07970623672008514,
      0.02600076049566269,
      -0.005317901726812124
    ],
    [
      -0.1891535222530365,
      0.00300509762018919,
      -0.0593424066901207,
      -0.1055605560541153,
      -0.016308002173900604,
      -0.06685294955968857,
      0.03530578687787056,
      0.006523826625198126,
      0.0339953638613224,
      0.026541706174612045,
      0.0006534599233418703,
      -0.0012527074432000518,
      0.04595496878027916,
      0.04558349773287773,
      0.06572314351797104,
      -0.04029369726777077,
      0.014576368033885956,
      -0.048728056252002716,
      -0.00738866999745369,
      -0.055504199117422104,
      0.04422120377421379,
      -0.06353667378425598,
      -0.004575658589601517,
      -0.03481842577457428,
      -0.040785107761621475,
      -0.043444257229566574,
      0.009369540959596634,
      0.047259192913770676,
      -0.017765391618013382,
      0.018703456968069077,
      0.10097286105155945,
      0.01763288304209709,
      0.00020198491984046996,
      -0.0063377018086612225,
      -0.043646495789289474,
      0.05125582590699196,
      0.041485875844955444,
      0.01757456734776497,
      0.006107091438025236,
      -0.04049067199230194,
      -0.0138936135917902,
      -0.03102913498878479,
      -0.04504429176449776,
      0.0014912793412804604,
      0.009326992556452751,
      0.013552258722484112,
      -0.011258766055107117,
      0.009633141569793224,
      -0.07220882177352905,
      -0.008495017886161804,
      0.04309278354048729,
      -0.016442008316516876,
      0.04326460137963295,
      0.029924796894192696,
      -0.0731506198644638,
      -0.0029704708140343428,
      -0.024487830698490143,
      0.05188274011015892,
      0.00955516379326582,
      0.07540123164653778,
      0.016008460894227028,
      -0.015390568412840366,
      -0.09122740477323532,
      -0.00681851664558053,
      -0.03475074842572212,
      0.08256734907627106,
      -0.06994928419589996,
      0.018379103392362595,
      0.041371311992406845,
      0.013844627887010574,
      0.042139165103435516,
      -0.07226462662220001,
      0.003964947070926428,
      -0.0511864498257637,
      -0.007919874973595142,
      -0.028225567191839218,
      -0.03806104138493538,
      0.007320962380617857,
      -0.05647115781903267,
      -0.0420207716524601,
      -0.06695019453763962,
      -0.005228542257100344,
      0.03575614094734192,
      0.09680864214897156,
      -0.01087302714586258,
      0.013670388609170914,
      -0.01270721759647131,
      0.027369176968932152,
      0.08891201764345169,
      -0.04010973125696182,
      0.025838587433099747,
      0.006113322451710701,
      0.0017858953215181828,
      -0.08229761570692062,
      0.09613168984651566,
      0.0626867488026619,
      0.04773348197340965,
      -0.008372698910534382,
      -0.08304961770772934,
      0.06257405877113342,
      0.018217384815216064,
      -0.002278822474181652,
      -0.049740634858608246,
      -0.01881668157875538,
      0.11766967177391052,
      0.019636256620287895,
      -0.05756434425711632,
      0.03997177630662918,
      0.040279287844896317,
      0.06847698986530304,
      -0.04220202565193176,
      -0.004066435154527426,
      0.053960006684064865,
      -0.0198106300085783,
      -0.067166268825531,
      0.01985735259950161,
      0.032068897038698196,
      -0.017048362642526627,
      0.033160582184791565,
      -0.02570594660937786,
      0.09779620915651321,
      0.019337976351380348,
      -0.013159953989088535,
      -0.04525277391076088,
      0.039633359760046005,
      -0.025567300617694855,
      0.07903418689966202,
      3.393600395604111e-33,
      -0.05583077669143677,
      0.05012834072113037,
      0.01795879937708378,
      -0.05343011021614075,
      -0.02503078058362007,
      -0.014423353597521782,
      0.055385518819093704,
      -0.004285301547497511,
      0.016713008284568787,
      0.06204495579004288,
      0.05817389860749245,
      0.04148350656032562,
      0.019996756687760353,
      -0.04657989367842674,
      -0.05097375437617302,
      0.07874362170696259,
      -0.026058681309223175,
      -0.017023423686623573,
      0.15615977346897125,
      0.055893249809741974,
      0.041381314396858215,
      -0.08111069351434708,
      0.028880026191473007,
      0.03922139108181,
      0.0010537516791373491,
      -0.0023924808483570814,
      0.017812633886933327,
      0.025431569665670395,
      0.06247739493846893,
      0.003681051777675748,
      0.07170651853084564,
      0.0077598365023732185,
      0.012270194478332996,
      0.0028190198354423046,
      -0.06529174000024796,
      -0.0011434518964961171,
      -0.07850659638643265,
      -0.05751614645123482,
      -0.08603020757436752,
      -0.09847526252269745,
      0.05580144748091698,
      -0.0045982603915035725,
      -0.11156916618347168,
      0.07000592350959778,
      -0.003069875296205282,
      -0.045573893934488297,
      -0.0903296172618866,
      -0.02966434136033058,
      0.0969124287366867,
      0.029244937002658844,
      -0.03903362900018692,
      0.0007334285764954984,
      -0.03542240709066391,
      0.05088717117905617,
      0.010637907311320305,
      -0.024006200954318047,
      -0.01208689995110035,
      -0.011199790053069592,
      -0.04710802063345909,
      -0.07312336564064026,
      0.0464121475815773,
      -0.11165989190340042,
      -0.054132282733917236,
      0.0019488424295559525,
      -0.025470856577157974,
      0.014163539744913578,
      -0.07157031446695328,
      -0.012748421169817448,
      -0.04363808408379555,
      0.04179941117763519,
      -0.06432369351387024,
      0.030986903235316277,
      0.025516627356410027,
      0.05618736147880554,
      -0.07782471179962158,
      -0.03399309888482094,
      0.06993329524993896,
      0.0995262861251831,
      0.025813227519392967,
      -0.04148712381720543,
      0.05660802870988846,
      0.029176682233810425,
      -0.006165080238133669,
      0.12102033942937851,
      0.011508876457810402,
      -0.01297641359269619,
      -0.047293130308389664,
      -0.03586774691939354,
      -0.06022822484374046,
      0.005363002885133028,
      -0.01613485999405384,
      -0.05563472583889961,
      -0.008237848989665508,
      0.07564964145421982,
      -0.08060531318187714,
      -4.0363030339421505e-33,
      -0.0012158462777733803,
      -0.028285417705774307,
      0.009969640523195267,
      0.07302170246839523,
      -0.005662068724632263,
      0.008283349685370922,
      0.025092924013733864,
      0.09587333351373672,
      -0.0015218444168567657,
      0.04701201617717743,
      0.022971026599407196,
      -0.00023405953834298998,
      0.04789823666214943,
      0.017975466325879097,
      -0.01750517077744007,
      0.017792124301195145,
      -0.06795147806406021,
      0.05553162842988968,
      0.006617732346057892,
      0.1053285002708435,
      -0.007989220321178436,
      0.04071754217147827,
      0.05392356216907501,
      -0.010039775632321835,
      -0.046004123985767365,
      0.0033153891563415527,
      -0.02959372103214264,
      0.004986284766346216,
      -0.06275443732738495,
      -0.00875620637089014,
      0.062352728098630905,
      -0.018091831356287003,
      -0.0627107322216034,
      -0.04272029921412468,
      -0.022042814642190933,
      -0.07593923807144165,
      0.011035433039069176,
      0.12567947804927826,
      -0.014140384271740913,
      0.03313058614730835,
      0.07593989372253418,
      -0.05592382326722145,
      -0.04729041829705238,
      0.042429983615875244,
      -0.0235193632543087,
      -0.018909983336925507,
      -0.0681602954864502,
      0.027422359213232994,
      -0.07225363701581955,
      -0.046751730144023895,
      -0.0026162853464484215,
      0.00027941574808210135,
      -0.055711355060338974,
      0.008509030565619469,
      -0.01553543284535408,
      0.051207803189754486,
      0.05919463187456131,
      -0.015362278558313847,
      0.028870323672890663,
      -0.025930160656571388,
      0.0068865274079144,
      -0.13543041050434113,
      0.040602561086416245,
      0.1195361390709877,
      0.05234488844871521,
      -0.014268489554524422,
      -0.0200043935328722,
      0.1264360398054123,
      0.03570641949772835,
      0.11474649608135223,
      0.019196443259716034,
      -0.00845519918948412,
      0.06840640306472778,
      0.03800068795681,
      0.1921176016330719,
      -0.05458306521177292,
      -0.03384607657790184,
      -0.05573798716068268,
      0.04339125379920006,
      0.02990908734500408,
      -0.05540015175938606,
      0.06179199740290642,
      0.008236601017415524,
      -0.03665391355752945,
      0.015027020126581192,
      -0.02172514796257019,
      0.0012115202844142914,
      0.05438198521733284,
      0.0509621798992157,
      0.021702131256461143,
      -0.02489817887544632,
      0.012863758020102978,
      -0.0008507511811330914,
      -0.05251297727227211,
      0.08769984543323517,
      -5.098397792835385e-08,
      0.03970417380332947,
      -0.05064690113067627,
      -0.014130721800029278,
      -0.005768940784037113,
      -0.0769057646393776,
      0.05495923012495041,
      -0.073603056371212,
      -0.027598803862929344,
      -0.035116046667099,
      0.011250282637774944,
      0.023758064955472946,
      0.05493724346160889,
      -0.08118139952421188,
      -0.03794483840465546,
      -0.09593058377504349,
      0.022395901381969452,
      0.01224157027900219,
      0.03297026827931404,
      -0.029621819034218788,
      -0.05519567057490349,
      -0.015308531932532787,
      -0.008772267960011959,
      0.09989801794290543,
      0.01587921380996704,
      0.02463556081056595,
      -0.01571696251630783,
      -0.018700476735830307,
      0.07864723354578018,
      -0.08066732436418533,
      0.016521364450454712,
      -0.04904313012957573,
      -0.0458117239177227,
      0.048008352518081665,
      -0.04797922074794769,
      -0.07655014842748642,
      0.03703264519572258,
      -0.07891199737787247,
      -0.047867581248283386,
      0.003864898346364498,
      -0.029713621363043785,
      -0.006045912392437458,
      0.008774778805673122,
      -0.12212659418582916,
      -0.004918585065752268,
      0.0524650514125824,
      0.04020988568663597,
      0.01615227200090885,
      0.0202956423163414,
      0.0395011268556118,
      -0.02632085233926773,
      -0.007489087991416454,
      -0.08222277462482452,
      0.05616031587123871,
      -0.021595332771539688,
      -0.006806093268096447,
      -0.04590124264359474,
      -0.08145701140165329,
      -0.049607399851083755,
      0.1060863807797432,
      0.02927711233496666,
      0.03037855215370655,
      0.0435035340487957,
      0.010946588590741158,
      -0.0361001119017601
    ],
    [
      -0.0463939793407917,
      -0.010085751302540302,
      -0.12801729142665863,
      0.058762308210134506,
      -0.0039275409653782845,
      -0.055522672832012177,
      0.09972222149372101,
      0.10663089156150818,
      -0.014535644091665745,
      0.012797197327017784,
      0.05526110157370567,
      -0.05169098451733589,
      0.011504489928483963,
      -0.0045056529343128204,
      0.0342436209321022,
      -0.02433985471725464,
      -0.016634691506624222,
      -0.05929245427250862,
      -0.002049892209470272,
      0.033833496272563934,
      0.06396622210741043,
      -0.03480833023786545,
      0.009755505248904228,
      -0.06233419477939606,
      -0.007289375644177198,
      -0.04068957641720772,
      -0.06379209458827972,
      -0.07018598914146423,
      -0.025394348427653313,
      -0.04390107840299606,
      0.06866038590669632,
      0.06189071387052536,
      -0.0046442607417702675,
      -0.0017440066440030932,
      0.015401255339384079,
      0.12855283915996552,
      0.05793561413884163,
      0.0061314841732382774,
      -0.03147522732615471,
      -0.021174438297748566,
      -0.00479330075904727,
      0.04912954196333885,
      0.012740189209580421,
      -0.044072698801755905,
      0.03111856058239937,
      0.034931909292936325,
      0.025320708751678467,
      -0.05654851347208023,
      -0.08111786842346191,
      0.04589633271098137,
      -0.06611122190952301,
      0.021682223305106163,
      0.0026043110992759466,
      0.031196588650345802,
      0.07122698426246643,
      0.09890741109848022,
      -0.018961941823363304,
      0.008195408619940281,
      -0.010503689758479595,
      0.006395821459591389,
      -0.03178691118955612,
      -0.02340678870677948,
      -0.06207101047039032,
      0.000626340217422694,
      -0.019383996725082397,
      0.05160956084728241,
      0.01999613642692566,
      -0.004711270797997713,
      0.006623859517276287,
      -0.08819227665662766,
      -0.025151269510388374,
      -0.06944916397333145,
      -0.03807296231389046,
      -0.05417950823903084,
      0.05657542124390602,
      -0.002281803172081709,
      -0.05117277801036835,
      0.0204844418913126,
      0.018577249720692635,
      -0.1478133648633957,
      0.010587449185550213,
      0.02878550998866558,
      0.07147795706987381,
      0.089028500020504,
      0.036134958267211914,
      0.04008852690458298,
      0.035783153027296066,
      -0.028481105342507362,
      0.08475235849618912,
      0.090809166431427,
      0.028136378154158592,
      -0.06310298293828964,
      -0.024120427668094635,
      -0.00703376904129982,
      -0.040411174297332764,
      0.04786036163568497,
      0.012386510148644447,
      0.023508163169026375,
      -0.06598597764968872,
      0.03869250416755676,
      -0.044437747448682785,
      0.014552842825651169,
      0.04802267625927925,
      0.12804445624351501,
      -0.06316634267568588,
      -0.056758858263492584,
      0.0026156860403716564,
      0.020352182909846306,
      -0.06100030988454819,
      0.01989542320370674,
      -0.004992611240595579,
      0.07533209025859833,
      -0.06076377257704735,
      -0.09338031709194183,
      0.08656144142150879,
      -0.008604023605585098,
      0.018081991001963615,
      -0.0756509006023407,
      0.09444066882133484,
      0.05988803878426552,
      0.09116847068071365,
      0.0632532462477684,
      -0.0042837318032979965,
      0.05904902145266533,
      0.03980637341737747,
      0.045562516897916794,
      -0.0014077730011194944,
      3.8252202480489616e-33,
      0.009353473782539368,
      -0.012679945677518845,
      0.004360788967460394,
      0.061072852462530136,
      0.0027180055622011423,
      -0.010303680785000324,
      0.03634832426905632,
      0.0341971293091774,
      0.013626021333038807,
      0.0601060725748539,
      0.0412771999835968,
      0.13498952984809875,
      -0.06868164986371994,
      0.02842922881245613,
      0.006191622000187635,
      -0.02236446924507618,
      0.01830952987074852,
      0.04092039167881012,
      0.05987725034356117,
      -0.053664229810237885,
      0.03643186017870903,
      0.026636606082320213,
      -0.04389017075300217,
      -0.02635166049003601,
      0.11750870198011398,
      0.03921114280819893,
      0.06404118239879608,
      0.07123296707868576,
      -0.024909866973757744,
      0.018225500360131264,
      0.03610755130648613,
      -0.009175576269626617,
      0.030444862321019173,
      -0.012291972525417805,
      -0.033218152821063995,
      0.0011135359527543187,
      -0.1673801690340042,
      -0.026109393686056137,
      -0.09662865847349167,
      -0.04443525895476341,
      0.01042257808148861,
      -0.01890718936920166,
      -0.027268115431070328,
      0.006927052047103643,
      -0.06658726185560226,
      -0.10586578398942947,
      -0.015990285202860832,
      0.0647466704249382,
      0.10089559853076935,
      -0.011936201713979244,
      -0.023046988993883133,
      0.0037595874164253473,
      0.04172605648636818,
      0.0413924939930439,
      0.03613105043768883,
      0.022127218544483185,
      -0.07659733295440674,
      -0.07406999170780182,
      -0.06000937521457672,
      -0.013608166016638279,
      0.05716203898191452,
      -0.01108689047396183,
      -0.018737714737653732,
      0.0737752616405487,
      -0.0190424844622612,
      0.028053196147084236,
      -0.030285242944955826,
      -0.03462018445134163,
      0.0594194196164608,
      0.025625240057706833,
      -0.08760949224233627,
      0.018030477687716484,
      0.03058486431837082,
      0.004886655602604151,
      0.039473891258239746,
      -0.018988657742738724,
      0.0037946642842143774,
      0.020583564415574074,
      -0.12474432587623596,
      -0.02480919100344181,
      0.013442832045257092,
      0.024173157289624214,
      0.0001622701238375157,
      0.09901535511016846,
      -0.0010687714675441384,
      -0.01875934936106205,
      0.05033399909734726,
      -0.029418710619211197,
      0.011429938487708569,
      -0.008239734917879105,
      -0.02877187356352806,
      -0.08262579143047333,
      -0.01030050404369831,
      0.06460058689117432,
      -0.10178565979003906,
      -5.0945172113569445e-33,
      0.10488595068454742,
      -0.07079141587018967,
      0.03008446656167507,
      -0.05824506655335426,
      -0.026564819738268852,
      -0.06077747792005539,
      0.003236237680539489,
      0.04921442270278931,
      0.02348855324089527,
      -0.04210556298494339,
      0.030367419123649597,
      0.027268921956419945,
      -0.0010230473708361387,
      -0.06291935592889786,
      -0.002922727493569255,
      0.04067346453666687,
      -0.06534983962774277,
      -0.16159652173519135,
      0.010190351866185665,
      -0.018716052174568176,
      -0.09332923591136932,
      0.018711430951952934,
      0.11061486601829529,
      0.006196099799126387,
      -0.08969816565513611,
      -0.0045759486965835094,
      0.06473450362682343,
      0.005925245117396116,
      -0.04835895076394081,
      -0.05570334196090698,
      -0.052916914224624634,
      -0.021541118621826172,
      -0.09026788175106049,
      0.011600653640925884,
      -0.09332231432199478,
      -0.0324496328830719,
      -0.01351090706884861,
      0.035022009164094925,
      -0.06791573762893677,
      0.06995202600955963,
      0.09935197234153748,
      0.047935646027326584,
      -0.01968560554087162,
      0.01844264194369316,
      0.011325497180223465,
      0.04195881262421608,
      -0.04964129626750946,
      -0.03108060546219349,
      0.02530553936958313,
      -0.10799102485179901,
      -0.021165814250707626,
      -0.03961402550339699,
      -0.05347314104437828,
      -0.04893088713288307,
      -0.019087690860033035,
      0.00234381016343832,
      0.08438295125961304,
      -0.03685920313000679,
      -0.029513869434595108,
      -0.02297956869006157,
      0.041555315256118774,
      -0.05391884967684746,
      -0.014556867070496082,
      0.06310869008302689,
      -0.03601876646280289,
      0.0053704893216490746,
      -0.09369989484548569,
      -0.05178331583738327,
      -0.0031282638665288687,
      0.04567476361989975,
      0.05527648702263832,
      -0.08959958702325821,
      -0.002720605581998825,
      -0.03396553173661232,
      0.061852194368839264,
      -0.004260461311787367,
      0.004586780909448862,
      -0.13462232053279877,
      0.028903912752866745,
      0.02014414221048355,
      0.01706300675868988,
      0.004971013404428959,
      -0.04893450438976288,
      0.026905495673418045,
      -0.07345982640981674,
      -0.02327973023056984,
      -0.03004453517496586,
      0.05465097725391388,
      0.02358330227434635,
      -0.022638708353042603,
      -0.08483361452817917,
      -0.0009452849626541138,
      -0.025929465889930725,
      0.028081391006708145,
      -0.03985191509127617,
      -5.6886246824205955e-08,
      -0.05286175757646561,
      0.0379660427570343,
      0.011946170590817928,
      -0.04140590876340866,
      -0.04996029660105705,
      -0.017270943149924278,
      -0.022647378966212273,
      0.019389230757951736,
      0.014887435361742973,
      0.015872180461883545,
      0.03071296401321888,
      -0.021457750350236893,
      0.015779796987771988,
      -0.021204795688390732,
      -0.01155147235840559,
      -0.09609245508909225,
      0.050424154847860336,
      0.032183270901441574,
      -0.050684697926044464,
      -0.045130204409360886,
      -0.014668685384094715,
      0.02433573454618454,
      0.04532131552696228,
      -0.0033713269513100386,
      0.055607870221138,
      -0.015755536034703255,
      -0.02987932600080967,
      0.02028835564851761,
      -0.05110497027635574,
      0.11243664473295212,
      -0.004340586718171835,
      0.0320386067032814,
      0.13394029438495636,
      -0.023389190435409546,
      -0.018736612051725388,
      0.05957454815506935,
      0.009249313734471798,
      -0.05589323863387108,
      0.03851800784468651,
      -0.013472631573677063,
      0.006085101515054703,
      -0.016978764906525612,
      0.010624841786921024,
      0.03987399861216545,
      0.008819951675832272,
      0.003789662616327405,
      0.0581253357231617,
      0.05463499575853348,
      0.1002560704946518,
      -0.057593781501054764,
      -0.00016659450193401426,
      -0.014416270889341831,
      -0.011888721026480198,
      0.06365684419870377,
      0.013059872202575207,
      -0.03003372997045517,
      0.012160876765847206,
      -0.08642822504043579,
      0.061584070324897766,
      0.027027497068047523,
      -0.014103441499173641,
      -0.01764172874391079,
      -0.03447902575135231,
      0.026765288785099983
    ],
    [
      -0.07098526507616043,
      -0.004664561245590448,
      -0.09024281799793243,
      -0.03220660984516144,
      0.01511690579354763,
      -0.10169249773025513,
      0.06095608323812485,
      0.13465967774391174,
      -0.04400445520877838,
      0.04990626499056816,
      -0.04813787713646889,
      -0.06400039047002792,
      0.022559141740202904,
      0.058163803070783615,
      0.024759966880083084,
      -0.047695647925138474,
      0.0045340764336287975,
      -0.06077618896961212,
      0.05207298323512077,
      0.004862966947257519,
      -0.013180413283407688,
      -0.03539710119366646,
      0.0314151793718338,
      -0.05756393447518349,
      0.012878242880105972,
      -0.034696731716394424,
      -0.055938657373189926,
      -0.07997128367424011,
      -0.050335902720689774,
      0.007227625232189894,
      0.08802933245897293,
      0.04205561801791191,
      0.07762571424245834,
      0.031157558783888817,
      0.04193895310163498,
      0.15520775318145752,
      0.03247450292110443,
      -0.020063970237970352,
      0.01037853118032217,
      -0.03980801999568939,
      0.033482957631349564,
      -0.03172210603952408,
      -0.03946200758218765,
      -0.03029281087219715,
      -0.005105116404592991,
      0.005215635988861322,
      -0.002681012963876128,
      -0.01931934244930744,
      -0.012213755398988724,
      0.11241577565670013,
      -0.11123165488243103,
      -0.07072960585355759,
      0.04720594361424446,
      -0.0121140843257308,
      -0.024224556982517242,
      0.056985050439834595,
      0.04165623337030411,
      -0.000506774231325835,
      0.022458765655755997,
      -0.08299671858549118,
      -0.0420193187892437,
      -0.08339161425828934,
      -0.06265868991613388,
      0.01844453066587448,
      -0.0018232471775263548,
      -0.018474571406841278,
      -0.07165534794330597,
      0.0030188646633177996,
      0.06634371727705002,
      0.05396386608481407,
      0.08370202779769897,
      -0.0006389369373209774,
      -0.06885670870542526,
      -0.08773797750473022,
      -0.007836093194782734,
      0.024862270802259445,
      -0.028057213872671127,
      0.023734889924526215,
      -0.040989816188812256,
      0.024276822805404663,
      -0.04697751998901367,
      0.020689694210886955,
      0.07639501243829727,
      0.026883399114012718,
      -0.07608392089605331,
      0.07793895900249481,
      0.07305808365345001,
      -0.020350217819213867,
      0.027859723195433617,
      0.0012111080577597022,
      0.05954217538237572,
      -0.012783978134393692,
      0.03118886426091194,
      -0.03572194650769234,
      -0.01794261485338211,
      0.07707357406616211,
      -0.028648773208260536,
      0.02459355816245079,
      -0.025115974247455597,
      0.04776943475008011,
      -0.016926217824220657,
      -0.060570865869522095,
      -0.0005757161416113377,
      0.012218141928315163,
      0.037092044949531555,
      -0.027320057153701782,
      -0.024679776281118393,
      0.05534149706363678,
      -0.038470178842544556,
      -0.00821743719279766,
      -0.048979561775922775,
      0.011118978261947632,
      0.019522402435541153,
      -0.057906825095415115,
      0.01348048634827137,
      0.005124349612742662,
      0.03289816528558731,
      -0.042072124779224396,
      -0.011122193187475204,
      0.041776880621910095,
      0.09872101247310638,
      0.06524229794740677,
      0.04262896999716759,
      0.01894395798444748,
      0.114743173122406,
      0.005495501682162285,
      -0.03546755388379097,
      2.2100878876122692e-33,
      0.016502659767866135,
      -0.0760532096028328,
      -0.006741771008819342,
      0.009899182245135307,
      0.08661311864852905,
      0.02382543310523033,
      0.020419957116246223,
      -0.06704016774892807,
      -0.0018340513342991471,
      0.06981897354125977,
      -0.009673544205725193,
      0.06733822077512741,
      -0.0247048307210207,
      -0.008320281282067299,
      -0.036450568586587906,
      -0.07033175230026245,
      0.007441652473062277,
      -0.03924545273184776,
      0.03848409652709961,
      -0.05300268903374672,
      0.09964251518249512,
      -0.026641296222805977,
      -0.00041055961628444493,
      0.04926556348800659,
      0.06303299963474274,
      -0.015513892285525799,
      0.043776098638772964,
      0.03225773572921753,
      0.055519115179777145,
      0.04386109113693237,
      0.0409487821161747,
      -0.007865896448493004,
      0.009609216824173927,
      0.05971228703856468,
      -0.062439803034067154,
      -0.013988195918500423,
      -0.14139747619628906,
      -0.03221578523516655,
      -0.10673445463180542,
      0.04069977253675461,
      0.05344083905220032,
      0.0031799268908798695,
      -0.03055296093225479,
      -0.03218883275985718,
      -0.016240695491433144,
      -0.12421604245901108,
      0.005398786161094904,
      0.05129675567150116,
      0.08673635125160217,
      0.0670674592256546,
      0.004776309709995985,
      -0.03871380165219307,
      0.02422364242374897,
      0.048952482640743256,
      0.020039955154061317,
      -0.03901594504714012,
      -0.05058317258954048,
      -0.08624856919050217,
      -0.04850497096776962,
      -0.07022200524806976,
      -0.005361311137676239,
      0.004235010128468275,
      0.010404947213828564,
      0.052131544798612595,
      -0.008751532062888145,
      -0.05481495335698128,
      0.03523813560605049,
      0.023282906040549278,
      0.024470895528793335,
      0.1564040333032608,
      -0.016401365399360657,
      0.05866698548197746,
      -0.00976983830332756,
      0.023458726704120636,
      -0.04214026406407356,
      -0.0543711893260479,
      0.02312600426375866,
      0.0021935885306447744,
      -0.038229793310165405,
      -0.005568450316786766,
      -0.012128284201025963,
      -0.0039627430960536,
      -0.02274172753095627,
      0.06746597588062286,
      -0.007984192110598087,
      -0.024053353816270828,
      0.005243470426648855,
      0.0067751421593129635,
      0.018488744273781776,
      -0.016410119831562042,
      0.02777726948261261,
      -0.07070404291152954,
      -0.05467570200562477,
      -0.013514433056116104,
      -0.1174524575471878,
      -2.7702157212248894e-33,
      0.011393401771783829,
      -0.029675452038645744,
      0.0164941418915987,
      0.01279310043901205,
      -0.029535682871937752,
      -0.03542270138859749,
      0.04736170545220375,
      0.019719503819942474,
      0.03907941281795502,
      -0.030049297958612442,
      -0.11597805470228195,
      0.07900561392307281,
      0.04828222095966339,
      0.024553464725613594,
      0.03555082902312279,
      0.04242207854986191,
      -0.07380467653274536,
      -0.11744122207164764,
      0.03656873106956482,
      0.004039096180349588,
      -0.07962989807128906,
      0.046041686087846756,
      0.030833644792437553,
      0.012651723809540272,
      -0.008426284417510033,
      -0.05622246861457825,
      0.013700904324650764,
      0.034669049084186554,
      -0.0037003345787525177,
      -0.03288114070892334,
      3.4915403375634924e-05,
      0.008072062395513058,
      -0.014747051522135735,
      -0.000575938553083688,
      -0.03330130875110626,
      -0.0212965440005064,
      -0.011698923073709011,
      0.18065376579761505,
      -0.029000122100114822,
      0.006621884647756815,
      0.11733125895261765,
      -0.037739794701337814,
      -0.051046211272478104,
      -0.05257560312747955,
      -0.015548815950751305,
      0.010350916534662247,
      -0.10461035370826721,
      -0.016269546002149582,
      -0.05141984671354294,
      -0.03563337028026581,
      -0.08908902853727341,
      -0.01913081482052803,
      0.07347895950078964,
      -0.07064103335142136,
      0.008743487298488617,
      -0.0635407492518425,
      0.05934571102261543,
      0.006993123330175877,
      -0.018042538315057755,
      0.0005034150090068579,
      0.04724244028329849,
      -0.10351218283176422,
      0.04890358820557594,
      0.07212797552347183,
      0.021732699126005173,
      0.004048159345984459,
      -0.11318521201610565,
      0.0173017717897892,
      -0.07327377796173096,
      0.10106697678565979,
      0.0996810719370842,
      -0.011171270161867142,
      -0.04258011654019356,
      0.008299954235553741,
      0.0902937799692154,
      -0.007121243979781866,
      -0.11186053603887558,
      -0.05345451086759567,
      0.0848914384841919,
      0.05802623927593231,
      0.0012593857245519757,
      0.11437675356864929,
      -0.0173337459564209,
      0.037504468113183975,
      -0.08117590099573135,
      -0.029244782403111458,
      0.02713138610124588,
      0.09594153612852097,
      0.036785148084163666,
      0.04607637971639633,
      -0.02294052019715309,
      0.0032756011933088303,
      0.006795079912990332,
      -0.01287001371383667,
      0.026399604976177216,
      -4.6678916731934805e-08,
      0.01743726246058941,
      -0.0013328016502782702,
      -0.0035727100912481546,
      0.08060657232999802,
      0.0194784514605999,
      0.008001888170838356,
      -0.06668994575738907,
      0.007817557081580162,
      -0.035504184663295746,
      0.03859422355890274,
      -0.05927659198641777,
      0.002551931655034423,
      0.0015177555615082383,
      -0.018041053786873817,
      0.06510338187217712,
      0.004113565199077129,
      0.04586545377969742,
      0.01498204655945301,
      -0.04442412406206131,
      -0.08573233336210251,
      -0.059980154037475586,
      0.05055806785821915,
      0.06799355894327164,
      0.05702820047736168,
      -0.021055025979876518,
      0.06663264334201813,
      0.005818307399749756,
      -0.002403781283646822,
      -0.11589004099369049,
      0.012938150204718113,
      -0.030424123629927635,
      0.011506996117532253,
      0.04277497157454491,
      -0.029947729781270027,
      -0.029069731011986732,
      0.02136158011853695,
      -0.0546392947435379,
      -0.05294780060648918,
      0.001943080103956163,
      -0.001416950486600399,
      -0.050141673535108566,
      0.042822957038879395,
      0.04806172102689743,
      -0.03691338002681732,
      -0.06045372039079666,
      0.0073377154767513275,
      0.0036452359054237604,
      -0.004033862613141537,
      0.021435720846056938,
      -0.04494450241327286,
      0.05025675147771835,
      -0.020885344594717026,
      -0.03423528000712395,
      0.07144434750080109,
      0.046514593064785004,
      0.03132392466068268,
      0.01403695810586214,
      -0.10908829420804977,
      0.04170023649930954,
      0.009168528951704502,
      -0.014173015020787716,
      0.05671888217329979,
      0.010659566149115562,
      -0.038235340267419815
    ],
    [
      -0.08618064224720001,
      -0.031207723543047905,
      -0.07908313721418381,
      0.004240143112838268,
      0.042744509875774384,
      -0.061875127255916595,
      0.036109838634729385,
      0.08941005170345306,
      -0.048153866082429886,
      0.07778218388557434,
      -0.02456994540989399,
      -0.04190674424171448,
      0.023634662851691246,
      0.06960529834032059,
      0.03869184851646423,
      -0.0027682294603437185,
      0.01727885939180851,
      -0.0691586583852768,
      0.020550541579723358,
      0.012521267868578434,
      0.008818589150905609,
      -0.02802916057407856,
      0.060929074883461,
      -0.04384097084403038,
      0.01796894706785679,
      -0.061619967222213745,
      -0.04477796331048012,
      -0.06647707521915436,
      -0.046407654881477356,
      -0.006691192276775837,
      0.08229042589664459,
      0.03959894925355911,
      0.05063704028725624,
      0.03712627291679382,
      0.028949709609150887,
      0.16318169236183167,
      0.018334321677684784,
      -0.004063759930431843,
      0.023416636511683464,
      0.013698282651603222,
      0.055657144635915756,
      -0.018766889348626137,
      -0.06200817599892616,
      -0.05272448807954788,
      -0.008019150234758854,
      -0.016307098791003227,
      0.014400853775441647,
      -0.012566188350319862,
      -0.02432439848780632,
      0.08579981327056885,
      -0.13518720865249634,
      -0.07063651829957962,
      0.024781670421361923,
      -0.0266936756670475,
      -0.003972262609750032,
      0.06563550978899002,
      0.04835188388824463,
      -0.017815938219428062,
      0.025331661105155945,
      -0.08488479256629944,
      -0.02150089107453823,
      -0.09912657737731934,
      -0.04203519597649574,
      0.016410034149885178,
      -0.014562333934009075,
      -0.007626563776284456,
      -0.05386820808053017,
      0.0024101929739117622,
      0.044628895819187164,
      0.054756686091423035,
      0.0499800406396389,
      -0.005911695305258036,
      -0.0404803529381752,
      -0.05076219514012337,
      -0.012337797321379185,
      0.02845793031156063,
      -0.03419283404946327,
      0.011487888172268867,
      -0.010619326494634151,
      0.04293527454137802,
      -0.09511283785104752,
      -0.00122538220603019,
      0.09114042669534683,
      0.05651335045695305,
      -0.0723523497581482,
      0.08843473345041275,
      0.06631755828857422,
      -0.01630609668791294,
      0.015647169202566147,
      0.0012505566701292992,
      0.02106340415775776,
      -0.027260052040219307,
      0.04654257744550705,
      0.014807014726102352,
      -0.011475329287350178,
      0.10244261473417282,
      -0.019601238891482353,
      0.028413014486432076,
      -0.02614535391330719,
      0.021915875375270844,
      -0.03330850228667259,
      -0.07780816406011581,
      -0.010564240626990795,
      0.04794370383024216,
      -0.013242844492197037,
      -0.05194056034088135,
      -0.019545096904039383,
      0.04589855670928955,
      -0.04785674437880516,
      -0.014756842516362667,
      -0.02352782152593136,
      0.009259344078600407,
      0.03282086178660393,
      -0.03169123828411102,
      0.014751080423593521,
      0.02901868335902691,
      0.0696839764714241,
      -0.0069834450259804726,
      0.004344906657934189,
      0.06343640387058258,
      0.10821028053760529,
      0.06745991110801697,
      0.0452936589717865,
      0.03820044919848442,
      0.13852515816688538,
      0.00290064443834126,
      -0.00751683721318841,
      2.437378169209405e-33,
      0.04261177405714989,
      -0.03607654571533203,
      -0.022252578288316727,
      0.010198398493230343,
      0.091542087495327,
      0.02017936110496521,
      0.009521772153675556,
      -0.07405100762844086,
      -0.003526221727952361,
      0.07874064892530441,
      -0.004116165451705456,
      0.08197596669197083,
      -0.03718094900250435,
      -0.016306711360812187,
      -0.050625890493392944,
      -0.08116898685693741,
      0.03728320822119713,
      -0.016050806269049644,
      0.02270331420004368,
      -0.05679360777139664,
      0.1101718470454216,
      -0.006413400173187256,
      0.00436202110722661,
      0.0399274006485939,
      0.011497996747493744,
      0.024749616160988808,
      0.05564109608530998,
      0.030639875680208206,
      0.040789712220430374,
      0.043460551649332047,
      0.07127253711223602,
      -0.0021154608111828566,
      -0.014281834475696087,
      0.0891060158610344,
      -0.07587406039237976,
      -0.04435654357075691,
      -0.179787740111351,
      -0.04468465968966484,
      -0.10303226858377457,
      0.04660565033555031,
      0.03329568728804588,
      0.014261526055634022,
      -0.03229249268770218,
      -0.0369950495660305,
      0.012960833497345448,
      -0.11925341188907623,
      -0.005038005765527487,
      0.05880507454276085,
      0.09000919759273529,
      0.03270437940955162,
      0.027048837393522263,
      -0.00428452342748642,
      0.09277617186307907,
      0.03833876922726631,
      0.049884945154190063,
      -0.005522589664906263,
      -0.03279125690460205,
      -0.1048278883099556,
      -0.03203748166561127,
      -0.05391993001103401,
      0.008920525200664997,
      -0.004041765350848436,
      0.026842238381505013,
      0.06545732170343399,
      0.03877094388008118,
      -0.04905150830745697,
      0.03118821047246456,
      0.009633376263082027,
      0.014960046857595444,
      0.14703808724880219,
      0.006876654457300901,
      0.052161093801259995,
      -0.01580760069191456,
      0.034760329872369766,
      -0.029141396284103394,
      -0.04267578944563866,
      0.020547673106193542,
      -0.044688690453767776,
      -0.04213506728410721,
      -0.04827899858355522,
      -0.029977858066558838,
      -0.010855399072170258,
      -0.02936125360429287,
      0.02271057665348053,
      0.0236275102943182,
      -0.06529326736927032,
      -0.03627444803714752,
      -0.01673116348683834,
      0.026554448530077934,
      -0.0024721985682845116,
      -0.02345135807991028,
      -0.07576711475849152,
      -0.06700389087200165,
      -0.030394820496439934,
      -0.10753896087408066,
      -2.5706399230002968e-33,
      0.02408006228506565,
      -0.00012011508806608617,
      -0.007169852964580059,
      0.027471009641885757,
      -0.06327108293771744,
      -0.042936451733112335,
      0.04684077948331833,
      -0.00836387649178505,
      0.06089194491505623,
      -0.010274252854287624,
      -0.07249357551336288,
      0.05846681818366051,
      0.030664190649986267,
      0.0004991200403310359,
      0.03520552068948746,
      0.03619042783975601,
      -0.037322934716939926,
      -0.13708671927452087,
      0.057885173708200455,
      -0.03422422334551811,
      -0.07657351344823837,
      0.024657413363456726,
      0.0006126551888883114,
      0.002593959914520383,
      0.029454702511429787,
      -0.04398017004132271,
      0.02838999032974243,
      0.05393198877573013,
      -0.0028897803276777267,
      -0.03783689811825752,
      -0.007096888031810522,
      0.01804467663168907,
      -0.008712809532880783,
      0.025621535256505013,
      -0.03499375656247139,
      0.022347692400217056,
      -0.01673003099858761,
      0.14435982704162598,
      -0.012882144190371037,
      -0.008105959743261337,
      0.10408691316843033,
      -0.079032763838768,
      -0.0449383407831192,
      -0.042096808552742004,
      -0.01581905223429203,
      -0.0049418858252465725,
      -0.10592027753591537,
      -0.0011992466170340776,
      -0.00588152464479208,
      -0.04999934881925583,
      -0.0850624069571495,
      0.015497745014727116,
      0.0641523078083992,
      -0.07541394978761673,
      0.01708236150443554,
      -0.03855685144662857,
      0.046169035136699677,
      0.02526470459997654,
      -0.026314519345760345,
      -0.010977276600897312,
      0.057170432060956955,
      -0.12091656774282455,
      0.04427972063422203,
      0.05065387859940529,
      0.015241708606481552,
      0.002897052327170968,
      -0.13099853694438934,
      -0.013502173125743866,
      -0.03490253910422325,
      0.07393352687358856,
      0.11436630040407181,
      0.012140833772718906,
      -0.05367833003401756,
      0.02795090712606907,
      0.06487905234098434,
      0.0005070864572189748,
      -0.0837077796459198,
      -0.0359496995806694,
      0.06261710077524185,
      0.05801863968372345,
      -0.0024136914871633053,
      0.08685195446014404,
      -0.028468407690525055,
      0.02339247427880764,
      -0.07762560248374939,
      -0.011672446504235268,
      0.023073188960552216,
      0.10511365532875061,
      0.04571095108985901,
      0.017499877139925957,
      -0.006155004259198904,
      0.006733715534210205,
      0.03113451600074768,
      -0.02925395593047142,
      0.007577233947813511,
      -4.387660013094319e-08,
      0.0226332675665617,
      -0.015852373093366623,
      7.445350638590753e-05,
      0.026474101468920708,
      0.015939971432089806,
      0.008902657777071,
      -0.06615567952394485,
      -0.026452980935573578,
      -0.041098859161138535,
      0.018051205202937126,
      -0.03050805814564228,
      0.020637964829802513,
      0.02890816703438759,
      0.015495233237743378,
      0.08029057830572128,
      -0.014462284743785858,
      0.035354215651750565,
      0.0036311817821115255,
      -0.038006629794836044,
      -0.09270433336496353,
      -0.06738368421792984,
      0.0426524318754673,
      0.02611418627202511,
      0.06699925661087036,
      -0.03641465678811073,
      0.03404084965586662,
      -0.02665850892663002,
      -0.017207542434334755,
      -0.11998382210731506,
      0.05361201986670494,
      -0.027599114924669266,
      -0.006389408838003874,
      0.053737886250019073,
      -0.02595002017915249,
      -0.06560494750738144,
      0.02618717961013317,
      -0.029707789421081543,
      -0.06176573038101196,
      0.037770677357912064,
      0.00649586645886302,
      -0.04974871501326561,
      0.043714236468076706,
      0.038256239145994186,
      -0.040034063160419464,
      -0.04866114631295204,
      -0.013098498806357384,
      -0.0019891445990651846,
      -0.01945977285504341,
      0.015977585688233376,
      -0.024028433486819267,
      0.0331660695374012,
      -0.0032162026036530733,
      -0.07496555149555206,
      0.07140813767910004,
      0.01842900738120079,
      0.03630906343460083,
      0.010594568215310574,
      -0.1547890603542328,
      0.0008786246180534363,
      0.04633095860481262,
      -0.0384172685444355,
      0.014134122990071774,
      0.017494315281510353,
      -0.08231845498085022
    ],
    [
      0.02415207214653492,
      0.006779979448765516,
      -0.03393397480249405,
      0.00799774844199419,
      -0.00581118231639266,
      0.04839491844177246,
      0.09578539431095123,
      0.05916793644428253,
      -0.015932103618979454,
      0.06395029276609421,
      0.0036861407570540905,
      -0.017249785363674164,
      0.035833485424518585,
      -0.06302744150161743,
      0.01050017960369587,
      0.02309570088982582,
      -0.05174354091286659,
      -0.05985300987958908,
      -0.0014999511186033487,
      0.015263287350535393,
      0.029649224132299423,
      0.026982691138982773,
      -0.007733076810836792,
      -0.0864144116640091,
      -0.010556410066783428,
      0.09864024817943573,
      -0.0427328497171402,
      0.003552809124812484,
      -0.08481552451848984,
      -0.018209436908364296,
      -0.0233769491314888,
      0.06855951249599457,
      -0.08748743683099747,
      0.01383137982338667,
      0.09338841587305069,
      -0.043285466730594635,
      -0.06611219048500061,
      -0.006922729313373566,
      0.033627092838287354,
      0.08932767808437347,
      -0.028409063816070557,
      -0.02856786921620369,
      0.006052627228200436,
      -0.12165433913469315,
      -0.045827142894268036,
      -0.09802905470132828,
      -0.07367879897356033,
      -0.04673679545521736,
      0.050177887082099915,
      0.02441859245300293,
      -0.04825684800744057,
      0.07533611357212067,
      -0.013248841278254986,
      -0.03257427364587784,
      0.04995125159621239,
      0.058699995279312134,
      -0.02921522594988346,
      -0.025116868317127228,
      -0.008620143868029118,
      -0.03128928691148758,
      0.0004464302328415215,
      -0.015266395173966885,
      0.014762988314032555,
      -0.02828342281281948,
      -0.023291287943720818,
      0.019412072375416756,
      -0.0255991593003273,
      0.12843410670757294,
      0.003966378979384899,
      -0.026883477345108986,
      -0.03518616780638695,
      0.0905587300658226,
      -0.0049856677651405334,
      -0.004013590980321169,
      0.05121106654405594,
      -0.036587443202733994,
      -0.027093596756458282,
      0.03046019747853279,
      0.03831961750984192,
      -0.1619294136762619,
      -0.016529129818081856,
      -0.024632079526782036,
      -0.011736748740077019,
      0.02815430611371994,
      0.04351413995027542,
      0.038615163415670395,
      0.035056598484516144,
      -0.0038361228071153164,
      0.025144096463918686,
      0.01341434009373188,
      -0.01063947007060051,
      0.010959729552268982,
      0.009038564749062061,
      0.06837382167577744,
      -0.07123713940382004,
      0.06143170967698097,
      0.009067168459296227,
      0.03677353262901306,
      -0.03498997539281845,
      0.07764387875795364,
      0.018611950799822807,
      -0.06097857281565666,
      -0.020519020035862923,
      0.09722565859556198,
      -0.002807439537718892,
      -0.09578645974397659,
      0.020118078216910362,
      -0.08174360543489456,
      0.041890934109687805,
      -0.02463538385927677,
      -0.016577236354351044,
      0.06566682457923889,
      -0.11921226978302002,
      -0.10036399215459824,
      -0.10281513631343842,
      -0.014762339182198048,
      -0.023501016199588776,
      -0.044219717383384705,
      0.037985995411872864,
      -0.009843969717621803,
      0.07103361189365387,
      -0.01796947419643402,
      -0.11456611007452011,
      0.0454673208296299,
      -0.058358073234558105,
      -0.003745519556105137,
      0.047783393412828445,
      9.615568034297298e-33,
      0.02859572134912014,
      -0.05363889038562775,
      -0.00033669735421426594,
      0.008929972536861897,
      0.1206027939915657,
      -0.027219265699386597,
      0.0270614605396986,
      0.04634634405374527,
      -0.02122248336672783,
      0.06364688277244568,
      -0.09710530191659927,
      0.014303245581686497,
      -0.04731808230280876,
      -0.0357096903026104,
      -0.08603394776582718,
      -0.06076880916953087,
      -0.040264736860990524,
      -0.0016528934938833117,
      0.004149914253503084,
      -0.06876219063997269,
      -0.014944189228117466,
      -0.015879904851317406,
      0.0663410872220993,
      -0.007088334299623966,
      0.020306238904595375,
      0.004709786269813776,
      -0.05085569620132446,
      0.07375060021877289,
      0.015257581137120724,
      0.01769597828388214,
      0.100300133228302,
      0.003904495621100068,
      0.10788193345069885,
      0.04440315440297127,
      -0.011668727733194828,
      0.023249326273798943,
      -0.03603854402899742,
      0.0019307088805362582,
      0.022787773981690407,
      0.01751907542347908,
      -0.019891589879989624,
      -0.04408233240246773,
      -0.021468665450811386,
      0.04479563236236572,
      0.008408447727560997,
      -0.08508516848087311,
      0.05180788040161133,
      0.0253113005310297,
      0.05201389268040657,
      -0.04953606426715851,
      -0.022359520196914673,
      0.05216865986585617,
      -0.005423115100711584,
      -0.006849451456218958,
      0.008311097510159016,
      -0.020936790853738785,
      -0.10624232888221741,
      0.03462781757116318,
      0.02148325741291046,
      0.025177491828799248,
      -0.10736490786075592,
      -0.024514522403478622,
      0.03879522532224655,
      -0.02380424365401268,
      -0.018847722560167313,
      0.11814219504594803,
      -0.034259408712387085,
      -0.00495276041328907,
      0.028739582747220993,
      -0.08562121540307999,
      0.016797509044408798,
      -0.04714905843138695,
      0.07785005867481232,
      -0.0020246009808033705,
      0.09702099859714508,
      -0.007272838149219751,
      0.04513619467616081,
      -0.0015124663477763534,
      -0.07065676897764206,
      -0.049140267074108124,
      -0.027734708040952682,
      -0.05309625342488289,
      -0.0647566169500351,
      0.04463678598403931,
      -0.026472052559256554,
      0.011145433411002159,
      0.06726980954408646,
      -0.07040940225124359,
      0.0521635003387928,
      0.08017870038747787,
      -0.05395837500691414,
      0.04360771179199219,
      -0.030800532549619675,
      -0.06763820350170135,
      0.04328714311122894,
      -9.442505143813517e-33,
      0.014055958017706871,
      0.0780709758400917,
      -0.0032262683380395174,
      -0.02832435630261898,
      0.008155932649970055,
      0.01647079549729824,
      0.0853806585073471,
      0.0369318425655365,
      0.03142908588051796,
      0.06253878027200699,
      0.020071277394890785,
      -0.011360857635736465,
      -0.04485694691538811,
      -0.09679156541824341,
      -0.04702726751565933,
      0.0369955375790596,
      -0.029524939134716988,
      0.09062986075878143,
      0.03379978984594345,
      -0.019602913409471512,
      -0.008917605504393578,
      0.05608592554926872,
      -0.03378695994615555,
      0.03840811178088188,
      -0.023314712569117546,
      -0.02576484903693199,
      0.045995038002729416,
      -0.053974784910678864,
      0.03509688377380371,
      0.021822651848196983,
      0.03891934081912041,
      0.04446890577673912,
      -0.10820168256759644,
      0.08176872134208679,
      0.025187935680150986,
      -0.005941920913755894,
      0.06137983500957489,
      0.04647386446595192,
      -0.0776495635509491,
      0.07024746388196945,
      -0.0015581375919282436,
      -0.008134055882692337,
      0.0060418155044317245,
      0.0033704128582030535,
      0.001733585842885077,
      -0.01629520393908024,
      0.11281827092170715,
      -0.0020467424765229225,
      -0.03027576394379139,
      0.014933353289961815,
      0.03211936727166176,
      -0.11811474710702896,
      -0.04835722595453262,
      -0.0009888781933113933,
      -0.051532451063394547,
      0.02658109739422798,
      -0.00885684322565794,
      -0.026341259479522705,
      -0.013926949352025986,
      -0.02247428707778454,
      0.0194987989962101,
      -0.031031634658575058,
      0.02876574732363224,
      0.023851560428738594,
      0.11016389727592468,
      -0.013278105296194553,
      -0.0033183747436851263,
      0.03171004354953766,
      0.06390306353569031,
      0.0390639454126358,
      -0.02191869355738163,
      0.029258674010634422,
      -0.0012587056262418628,
      -0.035980843007564545,
      0.09479323029518127,
      0.02103506773710251,
      -0.07630575448274612,
      0.0036494664382189512,
      -0.048375312238931656,
      0.04603308066725731,
      0.08043845742940903,
      0.043426644057035446,
      0.025278199464082718,
      -0.17167580127716064,
      -0.03637358918786049,
      -0.0038779196329414845,
      0.0678342878818512,
      0.10893210023641586,
      -0.07026888430118561,
      0.033990539610385895,
      -0.042879458516836166,
      -0.024767236784100533,
      0.05977907031774521,
      0.046615324914455414,
      -0.025051381438970566,
      -5.902800026547084e-08,
      -0.06360043585300446,
      0.03567590191960335,
      -0.054432567209005356,
      -0.03895343095064163,
      0.011903895065188408,
      -0.008358667604625225,
      0.07531025260686874,
      -0.027332400903105736,
      -0.03902903199195862,
      -0.09169334918260574,
      0.03699488937854767,
      0.08283049613237381,
      0.016292091459035873,
      -0.06823274493217468,
      -0.01435059867799282,
      -0.027786020189523697,
      -0.061861101537942886,
      0.0005832167807966471,
      -0.04736640676856041,
      -0.009154773317277431,
      0.046593647450208664,
      0.06140735372900963,
      0.03635562211275101,
      0.005520025733858347,
      0.049010299146175385,
      0.02446025051176548,
      -9.436423715669662e-05,
      -0.00915667973458767,
      0.003590762848034501,
      0.07058858871459961,
      -0.0037811414804309607,
      -0.048332735896110535,
      0.03998620808124542,
      -0.08222255110740662,
      0.02650492824614048,
      -0.004362158477306366,
      0.06050359830260277,
      -0.03720533847808838,
      0.04607785865664482,
      -0.001459138235077262,
      -0.07896488904953003,
      0.008545961230993271,
      -0.07859968394041061,
      0.04916232451796532,
      -0.025154661387205124,
      -0.043228257447481155,
      -0.10067891329526901,
      0.11737792193889618,
      0.08461567759513855,
      -0.05727127566933632,
      0.032951731234788895,
      -0.009178574196994305,
      0.0008603259338997304,
      -0.07540377974510193,
      -0.056846730411052704,
      -0.029114091768860817,
      0.018608814105391502,
      0.059745945036411285,
      -0.019190562888979912,
      -0.03782619908452034,
      -0.07276520133018494,
      0.007723275106400251,
      -0.009668675251305103,
      0.0019946754910051823
    ],
    [
      -0.0747758075594902,
      -0.03676772862672806,
      -0.05897604301571846,
      -0.03618379682302475,
      0.030080284923315048,
      0.018459847196936607,
      0.03288585692644119,
      0.07163634151220322,
      -0.006102042738348246,
      0.014220344834029675,
      0.10490896552801132,
      -0.019950980320572853,
      0.024428220465779305,
      0.00018427259055897593,
      0.04029838740825653,
      0.03146830573678017,
      -0.03276335075497627,
      -0.0648011565208435,
      0.012951879762113094,
      -0.01923472434282303,
      0.08639613538980484,
      -0.03537122532725334,
      0.048921164125204086,
      -0.09247604012489319,
      0.007454265840351582,
      0.004346791189163923,
      -0.05780896916985512,
      0.04249874874949455,
      0.0086520966142416,
      -0.07311006635427475,
      0.05459819734096527,
      -0.0162054356187582,
      0.025826800614595413,
      -0.03433435037732124,
      0.06065414845943451,
      0.12082893401384354,
      -0.02564309723675251,
      -0.022844510152935982,
      -0.017966676503419876,
      -9.701165254227817e-05,
      0.019620956853032112,
      -0.0057563139125704765,
      0.037175893783569336,
      -0.11370076984167099,
      -0.06995362788438797,
      -0.07843011617660522,
      -0.03674561530351639,
      0.003135422244668007,
      0.11091406643390656,
      0.005675338674336672,
      -0.08797606080770493,
      -0.05274105444550514,
      -0.010207246989011765,
      -0.09131471067667007,
      0.06357907503843307,
      0.06128307059407234,
      0.06993674486875534,
      0.0714614987373352,
      0.0771094411611557,
      -0.04715295508503914,
      0.021422570571303368,
      0.025474412366747856,
      -0.018011799082159996,
      0.008513519540429115,
      0.07221104949712753,
      -0.037712760269641876,
      -0.036701977252960205,
      0.03654806315898895,
      -0.04163088649511337,
      -0.04075304791331291,
      -0.1165759265422821,
      0.05955292657017708,
      -0.021892527118325233,
      0.0267743319272995,
      -0.019348736852407455,
      -0.07572958618402481,
      -0.010539933107793331,
      0.13325077295303345,
      -0.07789450883865356,
      -0.14746080338954926,
      0.10737555474042892,
      -0.07598616927862167,
      0.0417504608631134,
      -0.023869408294558525,
      0.05409061908721924,
      0.0026569892652332783,
      -0.013268244452774525,
      -0.022114736959338188,
      0.012296263128519058,
      -0.013847921043634415,
      -0.01294666063040495,
      0.06858126819133759,
      -0.07347535341978073,
      0.031125621870160103,
      0.12661530077457428,
      0.039364200085401535,
      -0.09919559210538864,
      0.0003115803701803088,
      -0.09746580570936203,
      0.13411717116832733,
      -0.014127695001661777,
      -0.10575999319553375,
      0.01711314730346203,
      0.05976831167936325,
      0.06638506054878235,
      -0.01920548640191555,
      0.003977148327976465,
      0.028692562133073807,
      0.025367774069309235,
      0.02905893325805664,
      -0.05806621536612511,
      0.05083182826638222,
      -0.05405328422784805,
      -0.1042805165052414,
      -0.03538716211915016,
      0.017968330532312393,
      0.056802570819854736,
      -0.02208365686237812,
      0.00741656543686986,
      7.77421664679423e-05,
      0.095319464802742,
      -0.027503063902258873,
      -0.039136290550231934,
      -0.005568875931203365,
      -0.0010052671423181891,
      -0.06112552434206009,
      0.03759622201323509,
      1.414095918645707e-33,
      0.03571084886789322,
      -0.04045289382338524,
      -0.03701646998524666,
      0.07350769639015198,
      0.019915025681257248,
      -0.0034719856921583414,
      0.04367522895336151,
      0.0077110533602535725,
      -0.0701548308134079,
      -0.0024712260346859694,
      -0.04467238485813141,
      -0.05397025868296623,
      -0.03436274826526642,
      0.06638376414775848,
      -0.08330000191926956,
      -0.08321993798017502,
      0.0374070443212986,
      -0.02793979085981846,
      0.055195726454257965,
      0.009649038314819336,
      0.029913417994976044,
      -0.04582184553146362,
      0.012688901275396347,
      0.06322204321622849,
      -0.09575089067220688,
      -0.002118893200531602,
      0.02153465896844864,
      -0.01812250353395939,
      0.06931836158037186,
      -0.016741950064897537,
      0.05648007243871689,
      -0.01518696267157793,
      -0.0322905071079731,
      0.009455875493586063,
      -0.005537287797778845,
      -0.017085852101445198,
      -0.02666037529706955,
      -0.022930582985281944,
      -0.044779229909181595,
      -0.0053383950144052505,
      -0.03299325332045555,
      -0.03386196866631508,
      -0.046918343752622604,
      -0.004792323336005211,
      0.0031650972086936235,
      -0.07249464839696884,
      -0.032993774861097336,
      0.06571105122566223,
      0.0844985768198967,
      -0.0052762567065656185,
      0.004019268788397312,
      0.03542155399918556,
      -0.06186538562178612,
      -0.061359766870737076,
      -0.012419883161783218,
      -0.018126105889678,
      -0.022927243262529373,
      0.004095143638551235,
      0.026960421353578568,
      -0.031944725662469864,
      -0.035156041383743286,
      0.06655903160572052,
      -0.004617614205926657,
      0.06340686976909637,
      0.02385840378701687,
      0.04174511507153511,
      0.015288146212697029,
      -0.03344970941543579,
      0.00852380320429802,
      -0.06094491481781006,
      -0.036384936422109604,
      -0.04889214038848877,
      0.057785287499427795,
      0.023063382133841515,
      0.042343273758888245,
      0.037947434931993484,
      -0.02609562687575817,
      -0.05463915318250656,
      -0.015218227170407772,
      -0.026175744831562042,
      -0.01978807896375656,
      0.020581068471074104,
      -0.011482439003884792,
      -0.07818938046693802,
      -0.0013973177410662174,
      -0.014041801914572716,
      0.051827117800712585,
      -0.06070329248905182,
      0.06944547593593597,
      0.02993873506784439,
      -0.013383313082158566,
      0.059228476136922836,
      -0.09440074115991592,
      -0.04531304910778999,
      0.06142779812216759,
      -3.228891229192846e-33,
      0.07020439207553864,
      0.10826139152050018,
      0.042744364589452744,
      -0.036337461322546005,
      0.016590435057878494,
      0.04979109391570091,
      0.07835085690021515,
      -0.011550206691026688,
      -0.021207215264439583,
      0.0695541501045227,
      -0.008566256612539291,
      -0.018416522070765495,
      -0.06995052844285965,
      -0.10295315831899643,
      -0.011601854115724564,
      -0.027393346652388573,
      -0.029213642701506615,
      0.0253851767629385,
      0.02820035256445408,
      -0.041877515614032745,
      -0.004339709412306547,
      0.12660686671733856,
      0.02202146127820015,
      0.05971304699778557,
      -0.08701661974191666,
      0.026176216080784798,
      0.03890477493405342,
      0.08739867061376572,
      0.0022985246032476425,
      0.0552377849817276,
      -0.009664480574429035,
      -0.0008619978907518089,
      -0.09799093008041382,
      0.14205940067768097,
      0.0785057544708252,
      0.01863076537847519,
      0.017856890335679054,
      0.07133609056472778,
      -0.01567380130290985,
      0.025610890239477158,
      0.1173691526055336,
      -0.05334334820508957,
      -0.051538098603487015,
      -0.029554763808846474,
      -0.007073648273944855,
      -0.06565984338521957,
      -0.021720299497246742,
      -0.062044307589530945,
      -0.09111171215772629,
      -0.031791746616363525,
      0.005559475161135197,
      -0.009753146208822727,
      -0.06848132610321045,
      -0.025237826630473137,
      0.05243370309472084,
      0.06735124439001083,
      0.02362191304564476,
      0.05102593079209328,
      0.09139200299978256,
      -0.02025594934821129,
      0.06164555624127388,
      -0.0814066007733345,
      -0.01676364801824093,
      -0.0465184710919857,
      0.0657123550772667,
      -0.05100893974304199,
      0.032101161777973175,
      0.0718575194478035,
      0.0024736018385738134,
      0.032012879848480225,
      -0.09898190945386887,
      0.019819039851427078,
      0.0895015224814415,
      -0.025289414450526237,
      0.048552144318819046,
      0.02889438532292843,
      0.07089034467935562,
      0.024114400148391724,
      0.002159650204703212,
      -0.022023389115929604,
      0.04082084819674492,
      -0.008897087536752224,
      -0.028687933459877968,
      -0.08456701040267944,
      -0.030072113499045372,
      0.03682073578238487,
      0.08901381492614746,
      0.08005228638648987,
      0.004697715863585472,
      -0.06429275125265121,
      -0.056976161897182465,
      0.05397714301943779,
      0.0956047847867012,
      -0.007677490822970867,
      0.03618878498673439,
      -6.232311733356255e-08,
      -0.03552008420228958,
      -0.022064263001084328,
      0.01846829243004322,
      -0.022632606327533722,
      -0.08730196207761765,
      -0.0076467664912343025,
      0.01971816085278988,
      -0.08012881875038147,
      0.009983480907976627,
      -0.08078909665346146,
      -0.029192324727773666,
      0.05108863487839699,
      0.030553078278899193,
      -0.023502275347709656,
      -0.09762364625930786,
      -0.004131596069782972,
      -0.031879257410764694,
      0.062167294323444366,
      0.009917544201016426,
      -0.02541026845574379,
      -0.05553039535880089,
      0.013769528828561306,
      0.00470710126683116,
      -0.025049448013305664,
      -0.029473191127181053,
      -0.014181971549987793,
      0.04153209924697876,
      0.010474443435668945,
      -0.039846014231443405,
      0.03644702211022377,
      0.016305558383464813,
      0.0127286771312356,
      0.003299059346318245,
      -0.07750477641820908,
      -0.06072438880801201,
      -0.007711965590715408,
      -0.010812674649059772,
      -0.031805869191884995,
      0.03830002620816231,
      -0.03747532144188881,
      -0.03975981846451759,
      0.03618374466896057,
      0.0005745954695157707,
      -0.02088106796145439,
      0.024973353371024132,
      -0.038572706282138824,
      -0.01771148480474949,
      0.005130008794367313,
      0.005141131114214659,
      0.009766447357833385,
      -0.04788916930556297,
      0.0016623081173747778,
      -0.04201472923159599,
      0.024685116484761238,
      0.027904421091079712,
      -0.03588828817009926,
      0.009950360283255577,
      0.0056341844610869884,
      -0.040210843086242676,
      0.07740257680416107,
      -0.03798183426260948,
      -0.012044069357216358,
      0.051102738827466965,
      -0.07478214800357819
    ],
    [
      -0.08383619040250778,
      -0.06825833022594452,
      -0.016424834728240967,
      -0.023858947679400444,
      0.027060413733124733,
      0.014305711723864079,
      0.020615091547369957,
      0.05298788845539093,
      0.0051544285379350185,
      -0.030628859996795654,
      -0.03189288079738617,
      0.04746967926621437,
      -0.04780394211411476,
      -0.011175563558936119,
      0.03334248438477516,
      0.008522610180079937,
      -0.052302438765764236,
      0.02556098997592926,
      -0.010238075628876686,
      -0.00952339731156826,
      0.013698402792215347,
      0.0029407343827188015,
      0.035626716911792755,
      -0.040554478764534,
      0.020603792741894722,
      0.017630748450756073,
      -0.04737525433301926,
      -0.023868078365921974,
      0.020338019356131554,
      -0.012687082402408123,
      0.04191978648304939,
      -0.02985217422246933,
      -0.0554046668112278,
      -0.054889991879463196,
      0.028692660853266716,
      -0.01861782930791378,
      -0.023936450481414795,
      -0.040186114609241486,
      -0.003412356600165367,
      0.05208304524421692,
      0.03605465218424797,
      -0.017154233530163765,
      -0.027266429737210274,
      -0.15460717678070068,
      -0.04803432524204254,
      -0.047333698719739914,
      -0.07366550713777542,
      0.021289469674229622,
      -0.020636212080717087,
      0.06708335876464844,
      -0.026266133412718773,
      0.045562125742435455,
      -0.04867926612496376,
      -0.04291912913322449,
      0.01763315685093403,
      -0.044541820883750916,
      0.023493202403187752,
      -0.06531635671854019,
      0.013965893536806107,
      0.07530773431062698,
      -0.021333180367946625,
      0.007664611097425222,
      0.04256026819348335,
      -0.0484931655228138,
      0.013742531649768353,
      -0.018880365416407585,
      -0.08933442831039429,
      0.10963135957717896,
      0.0005799911450594664,
      0.031027503311634064,
      0.044233065098524094,
      -0.0013120344374328852,
      0.06141001731157303,
      0.06829024106264114,
      0.010626494884490967,
      -0.11244216561317444,
      -0.06554016470909119,
      0.10111010074615479,
      -0.07033208012580872,
      -0.09348811954259872,
      -0.009590130299329758,
      -0.11563313752412796,
      0.03035104274749756,
      0.026640739291906357,
      0.03284744173288345,
      0.06561028212308884,
      0.04696885868906975,
      0.07170571386814117,
      -0.0023763233330100775,
      0.01877332292497158,
      0.033433523029088974,
      -0.009656925685703754,
      -0.0008930860203690827,
      0.09955102205276489,
      0.03137946501374245,
      0.029437262564897537,
      -0.025999171659350395,
      0.06925664097070694,
      -0.09018300473690033,
      0.08246384561061859,
      -0.01730155386030674,
      0.009948867373168468,
      -0.031087655574083328,
      0.11273648589849472,
      0.004185638856142759,
      -0.03788372501730919,
      0.05783911421895027,
      0.02088489569723606,
      0.006516660563647747,
      -0.022343464195728302,
      0.05124044045805931,
      -0.0059150406159460545,
      -0.03083059750497341,
      -0.09048774838447571,
      -0.05517609417438507,
      -0.15524305403232574,
      0.09103424102067947,
      -0.043340835720300674,
      0.15661302208900452,
      0.05344398319721222,
      0.18504849076271057,
      0.00815520714968443,
      -0.018949223682284355,
      0.04793401435017586,
      -0.017248785123229027,
      -0.0006329864845611155,
      -0.04247354716062546,
      3.772810097733581e-33,
      0.02132035791873932,
      -0.0013777565909549594,
      0.05825887247920036,
      3.9252618080354296e-06,
      0.032688554376363754,
      -0.046867139637470245,
      0.01150566153228283,
      0.058277349919080734,
      -0.017035724595189095,
      0.060803525149822235,
      -0.0389876551926136,
      -0.00702650984749198,
      -0.008360813371837139,
      -0.01913457177579403,
      -0.07896403223276138,
      -0.07161375135183334,
      0.04427163675427437,
      -0.04555599018931389,
      0.024454748257994652,
      -0.01750018075108528,
      0.029856234788894653,
      -0.011999538168311119,
      0.015453916974365711,
      0.03866049274802208,
      -0.016216635704040527,
      0.10048148781061172,
      0.018119875341653824,
      0.045488614588975906,
      0.037980202585458755,
      0.01661199890077114,
      0.08661583811044693,
      -0.02426520362496376,
      0.018872546032071114,
      0.037782084196805954,
      0.003406104864552617,
      0.05162052810192108,
      -0.10732153803110123,
      -0.04342333972454071,
      0.015767261385917664,
      -0.03877357766032219,
      0.012205973267555237,
      -0.07661614567041397,
      -0.07509613782167435,
      0.01515883393585682,
      -0.07365929335355759,
      -0.07860516011714935,
      0.11490946263074875,
      0.049268487840890884,
      -0.02051469497382641,
      -0.08110511302947998,
      0.0018959720619022846,
      0.058631859719753265,
      -0.02366599626839161,
      0.0049250442534685135,
      0.025956450030207634,
      -0.09808517247438431,
      -0.08857052028179169,
      0.00047061103396117687,
      0.003620158415287733,
      -0.04081498086452484,
      0.026562223210930824,
      0.014482970349490643,
      0.06177053973078728,
      -0.06318803131580353,
      -0.05139930918812752,
      0.020049957558512688,
      0.04829629510641098,
      0.021509282290935516,
      -0.04472043737769127,
      -0.09935470670461655,
      0.03255622461438179,
      -0.018509715795516968,
      0.05021202936768532,
      0.023448897525668144,
      0.04722494259476662,
      -0.00986515637487173,
      0.014555087313055992,
      -0.03504951298236847,
      -0.07945852726697922,
      -0.03907744213938713,
      0.014806156978011131,
      -0.06379196047782898,
      -0.05796467512845993,
      0.012944375164806843,
      0.019606007263064384,
      0.04430990293622017,
      0.0700460821390152,
      -0.03553062304854393,
      0.05827995389699936,
      0.025395531207323074,
      0.02555791288614273,
      -0.04157406836748123,
      -0.022081978619098663,
      -0.09608062356710434,
      -0.034196678549051285,
      -3.979911631197328e-33,
      -0.0032127380836755037,
      0.04510394111275673,
      -0.015669502317905426,
      -0.005282803904265165,
      -0.02769181877374649,
      0.008654249832034111,
      0.014811435714364052,
      0.09598008543252945,
      0.034336164593696594,
      0.1059427559375763,
      -0.05642074719071388,
      0.06920217722654343,
      -0.009972904808819294,
      -0.06250057369470596,
      -0.0041761817410588264,
      0.07753077149391174,
      -0.03253133222460747,
      0.06438088417053223,
      0.06578842550516129,
      -0.13138629496097565,
      -0.013207976706326008,
      0.06611786037683487,
      -0.0022486108355224133,
      0.04751071333885193,
      -0.09740918129682541,
      0.011785933747887611,
      0.05479472503066063,
      -0.020154904574155807,
      0.03121221251785755,
      -0.020261825993657112,
      0.016544099897146225,
      0.02654099278151989,
      -0.08229445666074753,
      0.057726386934518814,
      0.04373827576637268,
      0.02175377681851387,
      0.02447003498673439,
      0.059398312121629715,
      -0.06211842969059944,
      -0.01719673164188862,
      -0.03515487536787987,
      -0.03781382739543915,
      0.010073252953588963,
      -0.03841591998934746,
      0.005765017122030258,
      -0.012995864264667034,
      0.03986312821507454,
      0.05146430805325508,
      -0.08317767083644867,
      -0.04072214290499687,
      0.051116619259119034,
      -0.041852615773677826,
      -0.06694163382053375,
      0.0012797138188034296,
      -0.046771638095378876,
      0.05013575777411461,
      0.03127218410372734,
      0.07386478781700134,
      -0.030435504391789436,
      0.03192470595240593,
      -0.018312634900212288,
      -0.12082923948764801,
      0.012434310279786587,
      -0.022092675790190697,
      0.07095316797494888,
      -0.003244291990995407,
      -0.010815607383847237,
      -0.023564282804727554,
      -0.0019923478830605745,
      0.02318272925913334,
      -0.029717909172177315,
      0.06666974723339081,
      0.046188320964574814,
      0.0005111971986480057,
      0.023511376231908798,
      0.04393981397151947,
      0.066613107919693,
      -0.0277519803494215,
      -0.04837224632501602,
      -0.01659814640879631,
      0.05585764721035957,
      -0.012522713281214237,
      0.004174035508185625,
      -0.09069866687059402,
      -0.04182440787553787,
      -0.02985236421227455,
      0.06432506442070007,
      0.0875350683927536,
      -0.09793579578399658,
      -0.08985987305641174,
      -0.008534850552678108,
      0.0062746163457632065,
      0.07022853940725327,
      -0.01051368098706007,
      -0.013802256435155869,
      -4.216074600549291e-08,
      -0.07297781109809875,
      -0.04490014910697937,
      -0.005720204208046198,
      0.0014295049477368593,
      -0.05611201748251915,
      0.020666886121034622,
      -0.012139267288148403,
      -0.0037577510811388493,
      -0.022014230489730835,
      -0.05466295778751373,
      0.010327888652682304,
      0.04780888929963112,
      0.05151477828621864,
      0.02007480524480343,
      -0.05232420191168785,
      0.011591458693146706,
      -0.004957247991114855,
      0.03452586755156517,
      -0.008891184814274311,
      0.034770943224430084,
      -0.0012362984707579017,
      0.1160953938961029,
      0.07491184026002884,
      0.011591889895498753,
      0.0018432679353281856,
      -0.01421905867755413,
      -0.008565573021769524,
      0.04002240300178528,
      -0.00652329670265317,
      -0.0520767942070961,
      0.0027302303351461887,
      0.0012370486510917544,
      0.05538278445601463,
      -0.08763840049505234,
      -0.06024802103638649,
      -0.01717892661690712,
      -0.004047538619488478,
      -0.0233478806912899,
      0.03419865667819977,
      -0.025443177670240402,
      0.047033149749040604,
      -0.046608880162239075,
      -0.0712200179696083,
      0.05763791501522064,
      -0.0008687933441251516,
      -0.06376149505376816,
      -0.167581707239151,
      0.04719790816307068,
      -0.050988297909498215,
      0.007824096828699112,
      0.0521111786365509,
      0.04275276139378548,
      0.048695433884859085,
      -0.04858572408556938,
      -0.0305467639118433,
      -0.04440177604556084,
      -0.00981901865452528,
      0.07099667191505432,
      0.0044068931601941586,
      0.09179805964231491,
      0.04776480793952942,
      0.06733500957489014,
      0.018158020451664925,
      -0.01264108158648014
    ],
    [
      -0.0681878924369812,
      -0.03206091374158859,
      -0.04964767396450043,
      0.0022527119144797325,
      0.0720256045460701,
      -0.054360970854759216,
      0.01985856704413891,
      0.06088954210281372,
      0.044302280992269516,
      0.022468147799372673,
      -0.04068906977772713,
      0.05646231770515442,
      0.03229142725467682,
      0.03301505744457245,
      0.00686971889808774,
      0.024329572916030884,
      -0.02380114234983921,
      -0.01696247234940529,
      -0.04562418907880783,
      0.05729426443576813,
      0.006687736138701439,
      -0.06671738624572754,
      -0.05735621601343155,
      -0.019232099875807762,
      -0.07183477282524109,
      0.06670861691236496,
      -0.07779201120138168,
      -0.040998317301273346,
      -0.03769709914922714,
      -0.06642473489046097,
      0.032105784863233566,
      0.10654399544000626,
      -0.13061007857322693,
      0.011886052787303925,
      -0.028722062706947327,
      0.03548067435622215,
      0.039793819189071655,
      -0.05438578128814697,
      -0.011648843996226788,
      0.016513967886567116,
      -0.030191993340849876,
      -0.08771134912967682,
      -0.03571299836039543,
      -0.04929978400468826,
      -0.061095889657735825,
      -0.02773210033774376,
      -0.012113680131733418,
      -0.019802184775471687,
      -0.09958083927631378,
      0.02337169460952282,
      -0.09040932357311249,
      0.05413973331451416,
      -0.04048227518796921,
      0.0679076537489891,
      0.04998623579740524,
      0.0630791112780571,
      0.0015701930969953537,
      -0.055171553045511246,
      0.017426399514079094,
      -0.033208806067705154,
      -0.04576779529452324,
      -0.004256866872310638,
      -0.055205538868904114,
      0.023793606087565422,
      -0.03585359454154968,
      -0.020460762083530426,
      0.02894035167992115,
      0.023829849436879158,
      0.08230563253164291,
      -0.0218273364007473,
      -0.049437977373600006,
      0.029027629643678665,
      0.026090670377016068,
      0.02173641510307789,
      0.04571767523884773,
      0.026431333273649216,
      -0.003982445690780878,
      0.02103150077164173,
      0.017584167420864105,
      -0.1827518194913864,
      0.10447349399328232,
      0.09457375109195709,
      0.04738384112715721,
      0.007856816053390503,
      0.11715663969516754,
      0.008009001612663269,
      0.005412566475570202,
      0.00043157668551430106,
      0.05278044566512108,
      0.04161639139056206,
      0.026555443182587624,
      0.0102144256234169,
      0.036995455622673035,
      0.04003844037652016,
      -0.01888267509639263,
      0.04253583401441574,
      0.06611152738332748,
      -0.014410554431378841,
      -0.015197494998574257,
      0.12271711230278015,
      -0.043951887637376785,
      -0.024237141013145447,
      0.024453558027744293,
      0.05332590267062187,
      -0.01576426811516285,
      -0.06997402757406235,
      -0.06287117302417755,
      0.006183253601193428,
      0.024874746799468994,
      -0.04465984180569649,
      -0.018095072358846664,
      0.012347414158284664,
      -0.08373180776834488,
      -0.10800351202487946,
      -0.08800658583641052,
      -0.027594003826379776,
      -0.05890661105513573,
      -0.0361582450568676,
      0.014181687496602535,
      -0.015674130991101265,
      0.03756880760192871,
      -0.027782568708062172,
      0.03087490051984787,
      0.02417798712849617,
      0.046706847846508026,
      -0.023770997300744057,
      -0.05240609124302864,
      5.535980359621993e-33,
      0.004401879850775003,
      0.05550064519047737,
      -0.046651795506477356,
      0.02245919220149517,
      0.02796897478401661,
      -0.025970270857214928,
      0.027060797438025475,
      -0.012889789417386055,
      -0.079073965549469,
      0.003059931332245469,
      -0.034820664674043655,
      0.08153451979160309,
      0.012155629694461823,
      -0.006881562527269125,
      0.018894530832767487,
      -0.041291218250989914,
      -0.05841154605150223,
      0.05238151177763939,
      0.004313606768846512,
      -0.07055570930242538,
      0.05539745092391968,
      0.009533406235277653,
      0.047011204063892365,
      -0.039178188890218735,
      0.037217605859041214,
      0.07038994133472443,
      -0.03773213550448418,
      0.029834549874067307,
      0.05101585015654564,
      0.0653655156493187,
      0.09296565502882004,
      -0.030881667509675026,
      0.10489119589328766,
      0.04002523422241211,
      0.022731313481926918,
      0.02730102278292179,
      -0.03712120279669762,
      -0.16769400238990784,
      -0.005516876466572285,
      -0.04504236951470375,
      -0.03504219651222229,
      0.017830850556492805,
      -0.052543461322784424,
      0.06689640134572983,
      0.002539246343076229,
      -0.066548652946949,
      0.01044045202434063,
      0.0682426244020462,
      -0.00329241412691772,
      0.021309562027454376,
      0.03937726467847824,
      0.009917688556015491,
      0.018158946186304092,
      -0.013667847961187363,
      0.05312693864107132,
      -0.07635539770126343,
      -0.09094364941120148,
      -0.023133935406804085,
      0.04953838139772415,
      0.09247786551713943,
      -0.024197574704885483,
      -0.007546759210526943,
      -0.08028087019920349,
      -0.029929574579000473,
      -0.045498039573431015,
      0.07019978016614914,
      -0.03718055412173271,
      -0.03188994154334068,
      0.07133889943361282,
      -0.069251649081707,
      0.011574425734579563,
      0.05417025089263916,
      0.00498594343662262,
      0.06282617896795273,
      0.007172855082899332,
      -0.03909499943256378,
      0.08494995534420013,
      -3.689878212753683e-05,
      -0.0400594063103199,
      -0.0031911537516862154,
      -0.07312507927417755,
      -0.055467888712882996,
      -0.06859569996595383,
      0.03868979960680008,
      -0.08712022751569748,
      -0.030643761157989502,
      0.05699126422405243,
      -0.034098561853170395,
      -0.04967206344008446,
      -0.009378010407090187,
      0.025761665776371956,
      -0.00906518753618002,
      0.06820525228977203,
      -0.04021798446774483,
      0.025862514972686768,
      -5.1845384054528384e-33,
      -0.026218300685286522,
      -0.0568356066942215,
      -0.08091539889574051,
      0.07854518294334412,
      -0.03278212249279022,
      -0.0037862020544707775,
      0.01674029789865017,
      -0.0541808120906353,
      0.019565586000680923,
      -0.02178017981350422,
      -0.05401713773608208,
      0.03647305816411972,
      7.104399992385879e-05,
      -0.11969690024852753,
      0.003915487788617611,
      -0.0693233460187912,
      -0.018437376245856285,
      -0.04199031740427017,
      -0.03717372566461563,
      0.03230076655745506,
      0.020645150914788246,
      0.07701486349105835,
      -0.049239106476306915,
      0.11471017450094223,
      0.008296478539705276,
      0.05833394080400467,
      0.007031027693301439,
      -0.10270150750875473,
      0.02018202841281891,
      0.057345058768987656,
      0.005023179575800896,
      -0.08192338794469833,
      -0.07376255840063095,
      -0.052558958530426025,
      0.03414863348007202,
      0.011860799044370651,
      -0.027910888195037842,
      0.059845324605703354,
      -0.06036248803138733,
      -0.02164456620812416,
      0.03131374716758728,
      0.026503881439566612,
      -0.031008953228592873,
      0.008952048607170582,
      -0.0750374123454094,
      0.006749378517270088,
      -0.016745150089263916,
      0.0755179151892662,
      0.07013584673404694,
      0.009013975970447063,
      0.02101893723011017,
      -0.1025504618883133,
      0.011463489383459091,
      -0.06151873618364334,
      -0.053970083594322205,
      0.008511733263731003,
      0.02260834164917469,
      0.005787226837128401,
      -0.05578627437353134,
      0.030779724940657616,
      0.06694857776165009,
      -0.023002808913588524,
      0.028991304337978363,
      0.03839397430419922,
      0.1186322420835495,
      0.01827290654182434,
      -0.06678533554077148,
      -0.02115015871822834,
      0.008819399401545525,
      0.10595851391553879,
      0.056325268000364304,
      -0.0020473040640354156,
      -0.05322704464197159,
      -0.011541553772985935,
      0.16564947366714478,
      -0.011128577403724194,
      -0.012644797563552856,
      -0.01516789197921753,
      -0.05017213523387909,
      0.04141855984926224,
      -0.02195938304066658,
      0.061755888164043427,
      0.032471753656864166,
      -0.10476631671190262,
      0.02509355917572975,
      -0.03853633254766464,
      0.04004836827516556,
      0.018356533721089363,
      -0.012066101655364037,
      -0.01910400576889515,
      -0.009060733951628208,
      0.015704423189163208,
      0.05811823531985283,
      0.08407514542341232,
      0.031072549521923065,
      -5.665479108074578e-08,
      -0.04112447798252106,
      0.03965909406542778,
      -0.03357196971774101,
      0.013518443331122398,
      -0.003133985446766019,
      0.007225470617413521,
      0.06750144809484482,
      -0.06582549214363098,
      0.0020241988822817802,
      0.013206502422690392,
      0.06149030104279518,
      0.05418067425489426,
      0.016675075516104698,
      -0.08619650453329086,
      0.06325633823871613,
      0.024515695869922638,
      -0.010924778878688812,
      -0.0008355950121767819,
      -0.1419098675251007,
      -0.06527414917945862,
      -0.024134164676070213,
      0.029087156057357788,
      -0.034249477088451385,
      -0.008940286003053188,
      0.0500318706035614,
      0.036994870752096176,
      0.0591360367834568,
      0.05150175094604492,
      0.012662201188504696,
      0.011724364943802357,
      -0.039145588874816895,
      -0.05037219077348709,
      0.04038539156317711,
      0.035111479461193085,
      -0.051534052938222885,
      0.10695061832666397,
      -0.02831457369029522,
      0.006926616188138723,
      -0.03195349872112274,
      -0.0022674573119729757,
      -0.011991623789072037,
      0.012902294285595417,
      -0.04409918934106827,
      0.030515804886817932,
      -0.030969873070716858,
      0.04276244714856148,
      -0.08894382417201996,
      0.0624452568590641,
      -0.00909546297043562,
      0.029129650443792343,
      -0.01392718218266964,
      -0.05221317335963249,
      -0.02908729575574398,
      0.03974725306034088,
      -0.03250211104750633,
      0.025740016251802444,
      0.032318782061338425,
      -0.0009746995638124645,
      0.1237027570605278,
      -0.04161406680941582,
      -0.04915127903223038,
      0.036256324499845505,
      0.049173615872859955,
      0.05348159372806549
    ],
    [
      -0.10710600763559341,
      0.0154438316822052,
      -0.08035574853420258,
      0.0035066769924014807,
      0.01333857886493206,
      0.03478390723466873,
      -0.04616967961192131,
      0.04849300533533096,
      0.024478428065776825,
      0.013317149132490158,
      -0.01146651804447174,
      -0.006854319013655186,
      0.024433152750134468,
      0.036866411566734314,
      -0.005270976573228836,
      0.031498540192842484,
      0.0573282465338707,
      -0.1097167506814003,
      0.027101412415504456,
      -0.06015733256936073,
      0.04253481328487396,
      -0.0004125780542381108,
      -0.0275664534419775,
      -0.009733879938721657,
      -0.03953821212053299,
      0.053897034376859665,
      -0.04520652815699577,
      -0.014742599800229073,
      0.010695497505366802,
      -0.004568698816001415,
      0.046442799270153046,
      0.012050362303853035,
      -0.08417893201112747,
      -0.004913453012704849,
      -0.07915504276752472,
      0.016514772549271584,
      0.045717962086200714,
      -0.01739032007753849,
      -0.017671197652816772,
      -0.05952611565589905,
      -0.05392468720674515,
      -0.08608824759721756,
      -0.05469144880771637,
      -0.02250673994421959,
      0.037240512669086456,
      -0.028736721724271774,
      0.009340289980173111,
      -0.006027669180184603,
      -0.09805390238761902,
      -0.035909440368413925,
      0.02243979088962078,
      0.0601809062063694,
      0.012455375865101814,
      0.06603983789682388,
      0.19585393369197845,
      0.06174874305725098,
      -0.03605831041932106,
      -0.0014525760198011994,
      -0.029828371480107307,
      0.007649862673133612,
      -0.037212058901786804,
      0.013204890303313732,
      -0.075491763651371,
      0.03525806590914726,
      -0.003240899182856083,
      -0.006416706833988428,
      0.03197778761386871,
      -0.006020211614668369,
      0.08774998784065247,
      -0.05054051801562309,
      -0.08124207705259323,
      0.027728306129574776,
      -0.03936310112476349,
      0.0013326575281098485,
      0.040168777108192444,
      0.03858043625950813,
      -0.03293672576546669,
      0.020833656191825867,
      -0.0014478066004812717,
      -0.17011156678199768,
      0.04897651821374893,
      0.038375373929739,
      0.0052885632030665874,
      0.05859517306089401,
      0.05150871351361275,
      -0.059249937534332275,
      0.0036903361324220896,
      -0.007657458074390888,
      0.06781835108995438,
      0.0567859448492527,
      0.015213285572826862,
      0.036521539092063904,
      -0.03646770864725113,
      0.0004621895495802164,
      -0.047674745321273804,
      0.030338164418935776,
      -0.0008548960904590786,
      -0.0011738465400412679,
      -0.013481380417943,
      0.10249947011470795,
      -0.024029741063714027,
      -0.04099009186029434,
      -0.06152208521962166,
      0.02764565870165825,
      0.034861572086811066,
      -0.03889821097254753,
      -0.03663920611143112,
      -0.02608620747923851,
      -0.021300844848155975,
      0.05094825476408005,
      -0.028115490451455116,
      0.021462395787239075,
      -0.07145566493272781,
      -0.09021715819835663,
      -0.02313333936035633,
      0.07958152145147324,
      0.0027342343237251043,
      0.020352520048618317,
      0.08171730488538742,
      0.018051138147711754,
      0.031947169452905655,
      0.008667713962495327,
      0.00449637183919549,
      -0.0006851071957498789,
      0.029128631576895714,
      0.042892199009656906,
      0.06656471639871597,
      1.0577115801114205e-32,
      -0.001633237930946052,
      -0.016231194138526917,
      -0.07706941664218903,
      0.0005963141447864473,
      -0.013211510144174099,
      0.026112806051969528,
      0.05162467062473297,
      0.0067701181396842,
      -0.06967271864414215,
      -0.02587442845106125,
      0.019341835752129555,
      0.1176324114203453,
      -0.036433760076761246,
      0.02674822509288788,
      0.037984978407621384,
      -0.0631476640701294,
      0.002602592809125781,
      0.06249720975756645,
      0.08067374676465988,
      -0.07935242354869843,
      0.05043446272611618,
      -0.04486764967441559,
      0.024146955460309982,
      -0.012361867353320122,
      0.12174942344427109,
      0.09675431251525879,
      0.0009768432937562466,
      -0.026548301801085472,
      -0.04341133311390877,
      0.039689645171165466,
      0.03364415466785431,
      -0.010574953630566597,
      0.017791233956813812,
      0.01883004605770111,
      0.006008322350680828,
      -0.011101058684289455,
      0.019003836438059807,
      -0.059962574392557144,
      -0.01701992191374302,
      -0.11553826183080673,
      -0.015159946866333485,
      0.032934240996837616,
      -0.08799894899129868,
      0.010988321155309677,
      -0.03308303281664848,
      -0.07661421597003937,
      -0.05162077397108078,
      0.0463273860514164,
      0.05409665405750275,
      0.004744973033666611,
      0.041602663695812225,
      0.01671585999429226,
      0.03952061012387276,
      -0.09057111293077469,
      0.005519794300198555,
      -0.026023374870419502,
      -0.0030980310402810574,
      -0.03487319499254227,
      -0.04830559343099594,
      0.037826549261808395,
      -0.02674252912402153,
      -0.004389964509755373,
      -0.04414577782154083,
      -0.024136314168572426,
      0.027460288256406784,
      0.0870940312743187,
      -0.04577174410223961,
      -0.018392425030469894,
      0.03401469811797142,
      0.04988870024681091,
      -0.05147942900657654,
      0.03194638341665268,
      0.026422055438160896,
      0.017875654622912407,
      0.06487489491701126,
      0.0013177570654079318,
      0.05777805671095848,
      -0.01217092014849186,
      0.013179498724639416,
      -0.054218292236328125,
      -0.07394164055585861,
      -0.053568363189697266,
      -0.0003783934807870537,
      0.08799582719802856,
      0.01985250785946846,
      -0.09054683893918991,
      -0.013914194889366627,
      -0.036510467529296875,
      0.017238160595297813,
      0.01972850225865841,
      -0.05996198207139969,
      -0.0057701170444488525,
      0.055286455899477005,
      0.034353435039520264,
      -0.017744768410921097,
      -1.2522751438925038e-32,
      0.032910723239183426,
      -0.004493435379117727,
      -0.03842725604772568,
      0.011438761837780476,
      0.005131321027874947,
      -0.049085866659879684,
      -0.010761437937617302,
      0.017166614532470703,
      -0.021445851773023605,
      0.039616990834474564,
      0.026224922388792038,
      -0.046512555330991745,
      0.03722662851214409,
      -0.052884623408317566,
      0.02694757841527462,
      -0.061732370406389236,
      -0.07122021913528442,
      -0.08106063306331635,
      -0.0043085780926048756,
      0.01547185704112053,
      0.016794167459011078,
      0.08449538052082062,
      -0.04738163203001022,
      0.037554070353507996,
      0.025131991133093834,
      -0.030244480818510056,
      0.05992412567138672,
      -0.04892940819263458,
      -0.07905536890029907,
      -0.02770313248038292,
      -0.011236188001930714,
      -0.08298635482788086,
      -0.042061466723680496,
      -0.07219171524047852,
      0.03507985919713974,
      0.06998801976442337,
      0.020111458376049995,
      -0.0032424067612737417,
      -0.041212160140275955,
      0.0963098332285881,
      0.06328396499156952,
      0.023018386214971542,
      -0.0611061193048954,
      0.040854427963495255,
      -0.05131247639656067,
      0.0007457695319317281,
      -0.10856480151414871,
      0.07337994873523712,
      -0.024665772914886475,
      -0.09825069457292557,
      0.013411197811365128,
      -0.04106426239013672,
      0.017352839931845665,
      -0.024962548166513443,
      -0.041953109204769135,
      0.03831050917506218,
      0.017224473878741264,
      -0.017127690836787224,
      0.0149699617177248,
      0.027997219935059547,
      0.07711106538772583,
      -0.07032134383916855,
      -0.05719548091292381,
      0.053379692137241364,
      0.09299775958061218,
      -0.0650440901517868,
      -0.06140938773751259,
      -0.0674891248345375,
      -0.010480370372533798,
      0.0552581287920475,
      0.15588046610355377,
      0.006727977190166712,
      -0.030216829851269722,
      -0.04458007216453552,
      0.08842948079109192,
      -0.01948500983417034,
      -0.006610001437366009,
      -0.07271302491426468,
      -0.0021689317654818296,
      0.05036626383662224,
      -0.020420214161276817,
      0.09042895585298538,
      0.08351552486419678,
      -0.08133649826049805,
      -0.018122026696801186,
      0.010058480314910412,
      -0.010845188982784748,
      0.105983205139637,
      -0.0032179001718759537,
      -0.02896265685558319,
      -0.05303501710295677,
      0.0224311500787735,
      -0.08961978554725647,
      0.09710656106472015,
      -0.06310827285051346,
      -7.026464743375982e-08,
      -0.06146795302629471,
      -0.030823875218629837,
      -0.013419434428215027,
      0.017279045656323433,
      0.02382863126695156,
      0.06891297549009323,
      -0.04219810664653778,
      -0.05598854646086693,
      0.025654131546616554,
      -0.056300658732652664,
      0.05540132150053978,
      0.06580236554145813,
      -0.030916890129446983,
      -0.09635098278522491,
      0.03572166711091995,
      -0.03955031558871269,
      0.030181529000401497,
      -0.029850956052541733,
      -0.10116143524646759,
      -0.037206459790468216,
      0.010149626061320305,
      0.02990090101957321,
      -0.07057815045118332,
      -0.14254142343997955,
      0.03990442678332329,
      -0.0628010481595993,
      0.06365886330604553,
      0.10939313471317291,
      0.03364744409918785,
      0.05503850057721138,
      0.0242511797696352,
      -0.007677867077291012,
      0.01897367276251316,
      -0.0024535933043807745,
      -0.034250933676958084,
      0.10013797134160995,
      -0.011561648920178413,
      -0.004344229586422443,
      0.02723102830350399,
      -0.05322261154651642,
      -0.004991669207811356,
      0.007270361762493849,
      -0.10581066459417343,
      0.024938900023698807,
      -0.03565942868590355,
      0.0840640738606453,
      -0.012077008374035358,
      0.047040823847055435,
      0.03170233964920044,
      -0.02535863220691681,
      -0.09311448037624359,
      -0.08294413238763809,
      -0.03664325922727585,
      -0.005889844615012407,
      0.004005984868854284,
      0.03047402761876583,
      -0.020714107900857925,
      -0.07172206789255142,
      0.07706357538700104,
      -0.0860811173915863,
      0.004552138037979603,
      0.023625146597623825,
      0.06930232048034668,
      0.063881516456604
    ],
    [
      -0.08774662017822266,
      -0.012579848058521748,
      -0.032050348818302155,
      0.02155761606991291,
      0.01652681641280651,
      -0.06195934861898422,
      0.09509307891130447,
      0.0478106252849102,
      0.0010767829371616244,
      0.0377671979367733,
      0.02435711957514286,
      -0.01961909793317318,
      0.018876757472753525,
      0.029172487556934357,
      -0.05166715756058693,
      0.03676317259669304,
      0.033917784690856934,
      -0.05682642012834549,
      -0.06874239444732666,
      0.033090297132730484,
      0.025069771334528923,
      0.04251154139637947,
      0.048082541674375534,
      0.003921147435903549,
      0.05220673233270645,
      -0.04557767137885094,
      -0.009699026122689247,
      -0.03286312147974968,
      0.04005279764533043,
      -0.07558311522006989,
      0.11993807554244995,
      0.029356230050325394,
      -0.0444679856300354,
      -0.06414540112018585,
      -0.03842739760875702,
      -0.009932758286595345,
      -0.08272961527109146,
      -0.03852370008826256,
      0.038241028785705566,
      -0.029758883640170097,
      -0.07257736474275589,
      -0.029030494391918182,
      -0.06294567137956619,
      0.021076766774058342,
      -0.019817480817437172,
      0.062161318957805634,
      0.03441435843706131,
      0.026150410994887352,
      -0.02580486424267292,
      0.021091973409056664,
      0.08927123993635178,
      -0.02890968695282936,
      -0.00021860974084120244,
      0.09347508102655411,
      0.05940856784582138,
      -0.051210884004831314,
      0.004090753383934498,
      -0.04474826529622078,
      -0.010579466819763184,
      -0.018672456964850426,
      -0.04650731757283211,
      -0.021704964339733124,
      0.01819823496043682,
      -0.03097182884812355,
      -0.01744707114994526,
      0.0004973422619514167,
      -0.022024337202310562,
      0.06134209409356117,
      -0.018805889412760735,
      0.07392553240060806,
      0.005693220533430576,
      -0.007785813882946968,
      -0.037483856081962585,
      -0.04157334938645363,
      0.07793503254652023,
      0.06033024191856384,
      0.0488106794655323,
      0.03591999411582947,
      0.009893940761685371,
      -0.1321842223405838,
      0.013376048766076565,
      -0.021198894828557968,
      -0.009298884309828281,
      -0.049754656851291656,
      0.09518720954656601,
      -0.008885825984179974,
      0.004940546117722988,
      -0.024213917553424835,
      0.12510520219802856,
      0.072659932076931,
      0.045779038220644,
      0.08981597423553467,
      0.040219761431217194,
      -0.044829223304986954,
      -0.052915267646312714,
      -0.020921550691127777,
      0.004639051854610443,
      0.016638904809951782,
      -0.033806174993515015,
      0.07681042701005936,
      -0.03308837115764618,
      -0.012041469104588032,
      -0.03217773884534836,
      0.07125996798276901,
      0.02153966948390007,
      -0.11388268321752548,
      0.09111464023590088,
      0.04416622221469879,
      -0.026326410472393036,
      -0.02612553909420967,
      0.03520085662603378,
      0.023307645693421364,
      -0.048905979841947556,
      0.023096445947885513,
      -0.08324607461690903,
      0.05678955093026161,
      0.028132591396570206,
      0.026635145768523216,
      0.006264151073992252,
      -0.05669168010354042,
      0.023559482768177986,
      0.01881488785147667,
      0.009495177306234837,
      0.029542813077569008,
      -0.02403401769697666,
      0.00015058783174026757,
      0.01568712666630745,
      4.71827636714727e-33,
      0.0248043704777956,
      0.04893534258008003,
      -0.09830695390701294,
      -0.062470801174640656,
      -0.038717180490493774,
      -0.05109507963061333,
      0.016325069591403008,
      0.025116724893450737,
      -0.0628577172756195,
      0.036128781735897064,
      0.10203078389167786,
      0.035097286105155945,
      0.005225611850619316,
      -0.007140223868191242,
      0.053285203874111176,
      -0.06620826572179794,
      -0.029278608039021492,
      0.035519253462553024,
      0.06525109708309174,
      0.049258943647146225,
      0.06782933324575424,
      -0.03818132355809212,
      -0.007307763211429119,
      0.0011169527424499393,
      0.0740308091044426,
      0.046902235597372055,
      -0.036003053188323975,
      -0.019794097170233727,
      0.009236590936779976,
      0.03170172497630119,
      0.01994968205690384,
      0.02599230594933033,
      0.007603347767144442,
      0.008247694000601768,
      0.0355319082736969,
      -0.04069814831018448,
      -0.09416598081588745,
      -0.029627755284309387,
      -0.04188720881938934,
      -0.031118296086788177,
      -0.04400629177689552,
      -0.024380741640925407,
      -0.10928858816623688,
      -0.009901274926960468,
      -0.04778830707073212,
      -0.0840470939874649,
      -0.0028650991152971983,
      0.03857119753956795,
      0.01320105604827404,
      0.04860999062657356,
      -0.013551679439842701,
      0.008131698705255985,
      -0.02012469992041588,
      -0.048834215849637985,
      0.044748228043317795,
      -0.16792148351669312,
      -0.07250179350376129,
      0.013082290068268776,
      0.005982603877782822,
      -0.03518105670809746,
      0.025764746591448784,
      -0.024300087243318558,
      -0.005978244356811047,
      0.03828353434801102,
      -0.016092484816908836,
      0.04534924402832985,
      -0.02403215877711773,
      -0.07019373029470444,
      -0.0008023962145671248,
      -0.01484930794686079,
      -0.04701587185263634,
      0.03283744677901268,
      -0.002820159774273634,
      0.052189502865076065,
      -0.029938558116555214,
      -0.05113929882645607,
      0.03844683617353439,
      0.04571289196610451,
      -0.02374126948416233,
      -0.0909438207745552,
      -0.013181304559111595,
      -0.013368528336286545,
      0.01447480358183384,
      -0.015097404830157757,
      0.0361376516520977,
      -0.05440438166260719,
      0.0065972222946584225,
      0.0024033815134316683,
      -0.06339067965745926,
      -0.0686270073056221,
      0.0696268379688263,
      -0.02619883045554161,
      0.045933425426483154,
      0.009535185061395168,
      0.020170191302895546,
      -4.469227317774429e-33,
      0.048793941736221313,
      0.02453652396798134,
      0.03287080302834511,
      -0.03559694439172745,
      -0.051352329552173615,
      -0.02939540334045887,
      0.00520665105432272,
      0.0363335981965065,
      0.06347942352294922,
      0.013535773381590843,
      -0.04717552289366722,
      0.022889195010066032,
      -0.0009607161046005785,
      0.023971980437636375,
      -0.0015930574154481292,
      -0.11084366589784622,
      -0.06209580972790718,
      -0.07171400636434555,
      0.009667932987213135,
      0.01286967471241951,
      0.028750181198120117,
      0.09548693895339966,
      0.06829461455345154,
      0.08104780316352844,
      -0.07019701600074768,
      0.08540862798690796,
      -0.05772395431995392,
      0.10960361361503601,
      -0.009466533549129963,
      -0.05445964261889458,
      -0.06885264813899994,
      -0.06557238101959229,
      0.011642208322882652,
      -0.05990465357899666,
      0.025649726390838623,
      -0.05978330969810486,
      0.05367225036025047,
      0.1380820870399475,
      -0.023660853505134583,
      0.08458607643842697,
      0.0671401247382164,
      0.018799861893057823,
      -0.007574917748570442,
      0.05427471920847893,
      -0.033522192388772964,
      -0.06991943717002869,
      -0.030450452119112015,
      -0.029487244784832,
      0.0466432087123394,
      -0.07496947050094604,
      0.1289098858833313,
      0.014827746897935867,
      0.02302701584994793,
      0.05742446333169937,
      -0.01851215772330761,
      0.043420564383268356,
      0.16675694286823273,
      -0.031870849430561066,
      0.11123117804527283,
      -0.03352923318743706,
      0.003455178113654256,
      -0.03405388444662094,
      0.07965339720249176,
      0.023862062022089958,
      0.007101770490407944,
      -0.027344433590769768,
      0.008713480085134506,
      -0.003980882465839386,
      0.08291034400463104,
      0.09161990880966187,
      0.10945117473602295,
      -0.01918398216366768,
      0.011973396874964237,
      -0.08139054477214813,
      0.09540855139493942,
      0.06345061957836151,
      0.04499557986855507,
      -0.09890539199113846,
      0.037205927073955536,
      0.043053485453128815,
      -0.0549558624625206,
      0.02333817072212696,
      0.10236825048923492,
      0.019152820110321045,
      -0.034908149391412735,
      -0.03023146651685238,
      -0.024549083784222603,
      0.0067407069727778435,
      -0.03567340970039368,
      -0.023359743878245354,
      -0.03241036832332611,
      -0.03179675340652466,
      0.08365242183208466,
      0.0351654551923275,
      -0.050068505108356476,
      -6.03511054464434e-08,
      0.0070622386410832405,
      -0.10624316334724426,
      -0.04167890548706055,
      0.04214661940932274,
      0.036398995667696,
      -0.05281801149249077,
      -0.011929396539926529,
      -0.07622659206390381,
      -0.06532496958971024,
      -0.04240996018052101,
      0.021298019215464592,
      0.14422565698623657,
      0.01650327630341053,
      -0.09470316767692566,
      -0.00010076238686451688,
      -0.07895591109991074,
      0.012264394201338291,
      -0.035451795905828476,
      -0.11934113502502441,
      -0.01742105931043625,
      -0.04745524004101753,
      0.022895686328411102,
      -0.01633460633456707,
      -0.0769391730427742,
      -0.010473581030964851,
      -0.0018328656442463398,
      0.09586110711097717,
      0.03398457169532776,
      0.04960767552256584,
      -0.07666593044996262,
      0.011695711873471737,
      0.01997392065823078,
      0.06554058939218521,
      0.015219110064208508,
      -0.0811750739812851,
      -0.0025000767782330513,
      0.00019443499331828207,
      -0.03900744020938873,
      0.018865643069148064,
      0.08006414026021957,
      -0.002350561786442995,
      -0.0011928181629627943,
      -0.04831899702548981,
      0.03626326471567154,
      -0.024392573162913322,
      0.008914411999285221,
      -0.05127726122736931,
      -0.06083616614341736,
      -0.005614933092147112,
      -0.06275875121355057,
      0.006575323175638914,
      -0.028388509526848793,
      -0.039525676518678665,
      0.03072797693312168,
      -0.03290248662233353,
      -0.03525209799408913,
      -0.01148182526230812,
      -0.007148331962525845,
      0.004954554606229067,
      -0.053290288895368576,
      0.0669432207942009,
      -0.01752992905676365,
      0.016810031607747078,
      -0.02134840004146099
    ],
    [
      -0.1232147365808487,
      0.047604531049728394,
      0.023980798199772835,
      0.024294031783938408,
      0.030689217150211334,
      -0.04783489927649498,
      0.12039540708065033,
      0.04473239183425903,
      -0.02951284870505333,
      0.028507716953754425,
      0.0033535638358443975,
      -0.062163274735212326,
      -0.0004805194912478328,
      0.027008535340428352,
      -0.037029411643743515,
      0.06103947386145592,
      0.04853864014148712,
      -0.017551058903336525,
      -0.08868671208620071,
      0.008165259845554829,
      0.04227570816874504,
      -0.005477692931890488,
      0.03790370747447014,
      0.0003788454632740468,
      0.046269506216049194,
      -0.048164185136556625,
      -0.04167451336979866,
      -0.05828160420060158,
      0.061294592916965485,
      -0.06750355660915375,
      0.019214509055018425,
      0.031911641359329224,
      -0.09620964527130127,
      -0.06316796690225601,
      -0.024936562404036522,
      -0.020785927772521973,
      -0.019381433725357056,
      -0.039041802287101746,
      0.04110834747552872,
      -0.052894845604896545,
      0.009147140197455883,
      0.033284690231084824,
      -0.047603968530893326,
      0.025511767715215683,
      0.01433783583343029,
      0.07015638053417206,
      0.03743274509906769,
      0.015523211099207401,
      -0.0388784259557724,
      0.009939541108906269,
      0.09638594835996628,
      0.040943603962659836,
      -0.006617024075239897,
      0.037873685359954834,
      0.0376158244907856,
      -0.04254321753978729,
      0.041292350739240646,
      0.01865422911942005,
      0.005610911175608635,
      0.07690536230802536,
      -0.03420146554708481,
      -0.00037420704029500484,
      0.031603094190359116,
      -0.008752688765525818,
      -0.017579460516572,
      -0.005237473174929619,
      -0.011841231025755405,
      0.1178884506225586,
      -0.057269107550382614,
      0.099825419485569,
      -0.023923862725496292,
      -0.0007983176037669182,
      -0.06544026732444763,
      -0.02036391943693161,
      0.05803851783275604,
      0.042065124958753586,
      0.006942151114344597,
      0.0493830181658268,
      -0.06119760125875473,
      -0.11333344131708145,
      -0.039142780005931854,
      0.008150128647685051,
      0.0515841469168663,
      -0.05574000999331474,
      0.05138365924358368,
      -0.004234120715409517,
      0.005167639814317226,
      -0.05634983628988266,
      0.15255729854106903,
      0.08032679557800293,
      0.05405409261584282,
      0.023405473679304123,
      0.031077653169631958,
      -0.035888124257326126,
      -0.00990913063287735,
      -0.039827995002269745,
      0.006739368662238121,
      0.045244067907333374,
      -0.059654515236616135,
      0.09468718618154526,
      -0.01811557076871395,
      -0.024087034165859222,
      -0.00027487464831210673,
      0.06617195159196854,
      0.05499245226383209,
      -0.05522843822836876,
      0.06439851224422455,
      0.021396826952695847,
      -0.001493225572630763,
      0.017473813146352768,
      0.03361935541033745,
      0.010675540193915367,
      -0.08362838625907898,
      0.017044827342033386,
      -0.0803556963801384,
      0.06168346852064133,
      -0.010995104908943176,
      0.015986332669854164,
      0.04719441756606102,
      -0.026748185977339745,
      0.05729956552386284,
      0.020149940624833107,
      -0.014305911026895046,
      0.0323503352701664,
      -0.06940910965204239,
      -0.011213032528758049,
      0.00254755187779665,
      3.638310401454479e-33,
      -0.03298221528530121,
      0.023012854158878326,
      -0.07810381799936295,
      -0.04532449319958687,
      -0.019596751779317856,
      -0.07919017970561981,
      -0.007831549271941185,
      0.0336747020483017,
      -0.07672223448753357,
      0.05954338610172272,
      0.05718304589390755,
      0.04762480407953262,
      -0.030992688611149788,
      0.019802335649728775,
      0.06345494836568832,
      -0.10676920413970947,
      -0.015304814092814922,
      0.02031916193664074,
      0.06164564937353134,
      0.02540220320224762,
      0.050099510699510574,
      -0.06186002865433693,
      -0.032651931047439575,
      -0.09754258394241333,
      -0.03194425255060196,
      -0.015302346087992191,
      -0.043897535651922226,
      -0.03274792432785034,
      0.004866511095315218,
      0.04712638258934021,
      0.0032503479160368443,
      -0.004542574752122164,
      0.026114799082279205,
      0.04452921077609062,
      0.025954894721508026,
      -0.07114899158477783,
      -0.05148737132549286,
      -0.054715223610401154,
      -0.03631434217095375,
      -0.02752927504479885,
      -0.05403706803917885,
      -0.009080800227820873,
      -0.04546406492590904,
      0.022844739258289337,
      -0.039928462356328964,
      -0.08086612820625305,
      0.019459392875432968,
      0.08563785254955292,
      0.03246789425611496,
      -0.013710602186620235,
      -0.00913933664560318,
      0.0358569510281086,
      -0.05516473576426506,
      -0.06964614242315292,
      -0.00939131248742342,
      -0.1433890163898468,
      -0.04581980034708977,
      -0.022693021222949028,
      -0.01190223079174757,
      -0.016928808763623238,
      0.012852740474045277,
      -0.03373338654637337,
      -0.018834367394447327,
      0.06783991307020187,
      -0.060347214341163635,
      0.06873200088739395,
      -0.022570224478840828,
      -0.02980799600481987,
      -0.024444444105029106,
      -0.07699839025735855,
      -0.09696586430072784,
      0.03222687169909477,
      -0.003973141312599182,
      0.07379060238599777,
      -0.0370727963745594,
      -0.05164848640561104,
      0.07109738886356354,
      0.07049570977687836,
      0.016851522028446198,
      -0.08234746009111404,
      0.07175032794475555,
      -0.018062124028801918,
      -0.03371318802237511,
      -0.027475379407405853,
      -0.032238755375146866,
      -0.04201703518629074,
      0.004033597186207771,
      0.0202464759349823,
      5.9080441133119166e-05,
      -0.0440792441368103,
      0.09144563227891922,
      -0.0428290031850338,
      0.09991474449634552,
      -0.010684849694371223,
      -0.008719093166291714,
      -5.247986080380456e-33,
      0.042280033230781555,
      0.035012226551771164,
      0.05499010160565376,
      -0.05625804141163826,
      -0.02145886793732643,
      0.018075760453939438,
      0.05846515670418739,
      0.04874137416481972,
      0.06106436625123024,
      -0.011322351172566414,
      -0.09166828542947769,
      0.05079684406518936,
      0.00010867670789593831,
      0.03416727855801582,
      -0.049463219940662384,
      -0.05365195870399475,
      -0.0891038104891777,
      -0.049562323838472366,
      0.009148203767836094,
      -0.012946642935276031,
      -0.028232794255018234,
      0.07472961395978928,
      0.023293329402804375,
      0.035103291273117065,
      -0.05786591023206711,
      0.07563307881355286,
      -0.0747375339269638,
      0.09882406890392303,
      0.0005732864956371486,
      -0.02780969627201557,
      -0.031929098069667816,
      -0.06108543276786804,
      -0.028157899156212807,
      -0.06342877447605133,
      0.022011693567037582,
      -0.08479054272174835,
      0.05884825810790062,
      0.11871947348117828,
      -0.04561062529683113,
      0.05835815891623497,
      0.060500986874103546,
      -0.012222361750900745,
      -0.0020658867433667183,
      0.07449084520339966,
      -0.0015265995170921087,
      0.014856714755296707,
      -0.0755528062582016,
      -0.03904806077480316,
      0.01948128640651703,
      -0.04509013891220093,
      0.07037533819675446,
      0.04056568816304207,
      0.010281627997756004,
      0.059236347675323486,
      -0.03475379943847656,
      0.02521459013223648,
      0.1481509804725647,
      -0.040315352380275726,
      0.06443376839160919,
      -0.027601467445492744,
      0.03619804233312607,
      -0.024572258815169334,
      0.0939357653260231,
      -0.013937730342149734,
      0.043674927204847336,
      -0.05649302154779434,
      -0.019807709380984306,
      -0.021116312593221664,
      0.06157493218779564,
      0.05189326032996178,
      0.11186374723911285,
      -0.06502898037433624,
      -0.02704036794602871,
      -0.11086618155241013,
      0.08534840494394302,
      0.033134136348962784,
      0.07268522679805756,
      -0.1498904973268509,
      -0.004138780292123556,
      0.06313958764076233,
      -0.05981646850705147,
      0.025461925193667412,
      0.06704739481210709,
      -0.016390254721045494,
      -0.03516471013426781,
      -0.06334238499403,
      0.005681526847183704,
      0.025251902639865875,
      0.0024570284876972437,
      0.026119414716959,
      -0.018645431846380234,
      -0.01845736615359783,
      0.014196110889315605,
      0.08621101081371307,
      -0.06399595737457275,
      -6.409852204569688e-08,
      0.05119911953806877,
      -0.09484720975160599,
      -0.02790685184299946,
      0.045276939868927,
      0.0027307034470140934,
      -0.043545063585042953,
      -0.05093460902571678,
      -0.043487194925546646,
      -0.05990579351782799,
      -0.05971672758460045,
      -0.034505072981119156,
      0.07285857200622559,
      0.0018077088752761483,
      -0.10285171866416931,
      -0.024240579456090927,
      -0.07043831050395966,
      0.014090077020227909,
      -0.034699633717536926,
      -0.11088811606168747,
      -0.01577049493789673,
      -0.05256052315235138,
      0.0031004890333861113,
      0.02719247341156006,
      -0.08180230110883713,
      -0.029712550342082977,
      -0.019115125760436058,
      0.04046601429581642,
      0.0802314355969429,
      0.06065165624022484,
      -0.01400134339928627,
      -0.00046593850129283965,
      0.0366642065346241,
      0.00018941974849440157,
      0.011753540486097336,
      -0.07015392184257507,
      0.02732483111321926,
      0.009745268151164055,
      -0.04078752174973488,
      0.04135044291615486,
      0.08268164843320847,
      0.01649642549455166,
      0.01682964712381363,
      -0.03925381600856781,
      0.05853881686925888,
      0.037568408995866776,
      0.012908085249364376,
      -0.03163506090641022,
      -0.06995519995689392,
      0.026361633092164993,
      0.003951543942093849,
      0.01244561281055212,
      -0.03646484389901161,
      -0.055586185306310654,
      0.08345966041088104,
      0.002546066651120782,
      -0.04925727844238281,
      -0.04927968233823776,
      0.025567399337887764,
      -0.0022329611238092184,
      0.03064759448170662,
      0.04254689812660217,
      -0.0453411266207695,
      0.044239819049835205,
      -0.011276851408183575
    ],
    [
      -0.14644378423690796,
      -0.058330051600933075,
      -0.02767837978899479,
      -0.013710340484976768,
      -0.060086097568273544,
      -0.013325372710824013,
      0.08530626446008682,
      0.05317576974630356,
      -0.03497227281332016,
      -0.013553242199122906,
      -0.015492209233343601,
      -0.04505578428506851,
      -0.008427292108535767,
      -0.003915449138730764,
      0.018039759248495102,
      0.04426637291908264,
      0.016465434804558754,
      -0.057893767952919006,
      0.01969187520444393,
      0.0013475131709128618,
      0.0393667109310627,
      0.07722529023885727,
      -0.0165413785725832,
      -0.05560823157429695,
      -0.00809862744063139,
      -0.010159474797546864,
      -0.010294720530509949,
      0.020391730591654778,
      -0.01070141140371561,
      -0.01777978055179119,
      0.1160319447517395,
      0.04314907267689705,
      -0.0756511464715004,
      0.018252233043313026,
      0.06337045878171921,
      0.009722251445055008,
      -0.05935677886009216,
      -0.02551329880952835,
      0.03804484009742737,
      -0.011550456285476685,
      -0.032286785542964935,
      0.002838997170329094,
      0.021141016855835915,
      -0.05674755200743675,
      0.09882999956607819,
      -0.024073496460914612,
      -0.040369950234889984,
      -0.018526911735534668,
      0.020968034863471985,
      -0.04787500575184822,
      0.018828803673386574,
      0.054575614631175995,
      -0.040253475308418274,
      0.030768727883696556,
      0.16969560086727142,
      0.025174695998430252,
      -0.0690998062491417,
      -0.028449367731809616,
      0.03658057749271393,
      0.08404211699962616,
      -0.007269309833645821,
      0.0022732149809598923,
      -0.02221800573170185,
      0.0037706159055233,
      -0.12450052052736282,
      0.004658874589949846,
      0.01968902349472046,
      0.02228589355945587,
      0.05940189212560654,
      -0.10083810240030289,
      -0.15437693893909454,
      0.06453102827072144,
      -0.007403185591101646,
      0.03828129172325134,
      0.07665657997131348,
      0.03423621132969856,
      -0.018407246097922325,
      -0.005126591771841049,
      -0.027263415977358818,
      -0.17535747587680817,
      0.03581482544541359,
      0.005472864955663681,
      -0.0017232928657904267,
      0.03240590915083885,
      0.02255001664161682,
      0.017202358692884445,
      -0.02839973196387291,
      0.028309518471360207,
      0.05096568539738655,
      0.0837884470820427,
      0.02322329767048359,
      0.007600112818181515,
      -0.0845036432147026,
      -0.0238645002245903,
      0.02481023408472538,
      0.09324879199266434,
      -0.0030735309701412916,
      0.05223559960722923,
      -0.07715868949890137,
      0.09160347282886505,
      -0.03134777769446373,
      -0.052982475608587265,
      -0.04675035923719406,
      0.12472208589315414,
      0.006132126320153475,
      -0.03871743008494377,
      -0.0005111077334731817,
      -0.010101579129695892,
      -0.03125568851828575,
      0.007342413533478975,
      -0.03537259250879288,
      -0.013643217273056507,
      -0.0217963345348835,
      -0.0634402483701706,
      -0.050956182181835175,
      0.011778394691646099,
      0.05481388419866562,
      -0.015387699007987976,
      0.01111323107033968,
      -0.01154436357319355,
      0.025414852425456047,
      0.020296014845371246,
      -0.0016152546741068363,
      0.03780093044042587,
      -0.010994356125593185,
      0.022815341129899025,
      0.05571908503770828,
      1.1537103099180397e-32,
      0.05677357316017151,
      0.0664559155702591,
      -0.03220321983098984,
      0.015129955485463142,
      -0.00614788057282567,
      -0.02767457626760006,
      0.0038176493253558874,
      0.018279025331139565,
      -0.07448531687259674,
      0.0888327956199646,
      0.040887802839279175,
      0.05921919271349907,
      0.014709501527249813,
      -0.012155778706073761,
      -0.04101613536477089,
      0.05387576296925545,
      0.03802957385778427,
      0.038965847343206406,
      -0.06703337281942368,
      -0.05820651352405548,
      -0.03525697812438011,
      -0.03453696891665459,
      0.006843321491032839,
      -0.03412333503365517,
      -0.0061247278936207294,
      0.047543350607156754,
      -0.006530931685119867,
      0.07528223097324371,
      0.031796615570783615,
      0.028064820915460587,
      0.07222600281238556,
      -0.050270240753889084,
      0.024283137172460556,
      0.013664919883012772,
      0.10919958353042603,
      -0.041443515568971634,
      -0.06274248659610748,
      -0.05836150422692299,
      -0.10353052616119385,
      -0.013897223398089409,
      -0.03960705175995827,
      -0.029959406703710556,
      -0.14569498598575592,
      0.023559579625725746,
      0.008371108211576939,
      -0.110582135617733,
      -0.05817678943276405,
      0.060729071497917175,
      0.14880792796611786,
      -0.023329949006438255,
      0.03067123144865036,
      0.026027346029877663,
      -0.021842369809746742,
      -0.026624899357557297,
      0.017204416915774345,
      -0.0006187222898006439,
      -0.09559187293052673,
      0.030865587294101715,
      0.01169285736978054,
      0.07179828733205795,
      -0.07340101152658463,
      -0.07551915943622589,
      -0.055579960346221924,
      0.027824170887470245,
      0.025358503684401512,
      -0.027524041011929512,
      0.008844586089253426,
      0.039429306983947754,
      -0.027633199468255043,
      0.018865393474698067,
      0.02240300551056862,
      -0.04643288254737854,
      0.013959693722426891,
      0.06249694526195526,
      0.022525768727064133,
      -0.0053085340186953545,
      0.00862086284905672,
      0.06430481374263763,
      -0.12380902469158173,
      -0.01643517054617405,
      0.007520955987274647,
      -0.023597728461027145,
      0.0097725884988904,
      0.06742190569639206,
      -0.053765442222356796,
      -0.01678493432700634,
      0.01825355552136898,
      -0.037830084562301636,
      0.03030441328883171,
      0.019249148666858673,
      -0.012364835478365421,
      -0.012052807956933975,
      -0.042729754000902176,
      -0.0429997518658638,
      -0.03686041384935379,
      -1.3357846135636208e-32,
      0.0406351238489151,
      0.05291937664151192,
      -0.09080379456281662,
      -0.0993981882929802,
      -0.06035972386598587,
      -0.04384877532720566,
      0.1028081625699997,
      0.015604309737682343,
      -0.010795854963362217,
      0.0049812644720077515,
      0.07361066341400146,
      0.04529837146401405,
      0.07235776633024216,
      -0.07574889063835144,
      -0.0025485309306532145,
      0.041620880365371704,
      -0.11649820953607559,
      -0.11374609172344208,
      -0.046272944658994675,
      0.1003752052783966,
      -0.020717792212963104,
      0.03078535571694374,
      -0.0009101152536459267,
      -0.011977440677583218,
      -0.07118014991283417,
      0.02834601327776909,
      -0.012505919672548771,
      0.09440876543521881,
      -0.08404998481273651,
      -0.004879289772361517,
      0.037089694291353226,
      0.040693193674087524,
      -0.1281508058309555,
      0.04310884699225426,
      -0.034039486199617386,
      -0.025534192100167274,
      0.022139552980661392,
      0.051284123212099075,
      -0.04539582505822182,
      0.02544466219842434,
      0.05062628909945488,
      0.04657117277383804,
      -0.04076409712433815,
      -0.01172157283872366,
      -0.006329146213829517,
      -0.0011419751681387424,
      0.038003936409950256,
      -0.013055801391601562,
      0.03685165196657181,
      -0.044988520443439484,
      0.02910812385380268,
      0.004272154998034239,
      0.010790376923978329,
      0.023245681077241898,
      -0.004420665092766285,
      0.03619908168911934,
      0.03257956728339195,
      -0.050214558839797974,
      0.030381860211491585,
      -0.002464416204020381,
      0.10151388496160507,
      -0.10771412402391434,
      0.020430009812116623,
      0.09233701974153519,
      0.04365719109773636,
      -0.017481142655014992,
      -0.05182186886668205,
      -0.03527403622865677,
      0.002369166584685445,
      -0.06789407879114151,
      0.08159992098808289,
      -0.12910321354866028,
      -0.037420254200696945,
      -0.06006986275315285,
      0.05204789340496063,
      0.05727751925587654,
      0.0015358661767095327,
      -0.03429430350661278,
      -0.055636052042245865,
      0.13159774243831635,
      0.043995410203933716,
      0.03098156489431858,
      0.004128366708755493,
      -0.07722669839859009,
      -0.01794060319662094,
      -0.051857225596904755,
      -0.031795550137758255,
      0.10362882912158966,
      -0.03232210874557495,
      -0.03616761788725853,
      -0.07645057141780853,
      0.038256555795669556,
      -0.021052706986665726,
      -0.012884064577519894,
      0.01389138214290142,
      -6.752653547437149e-08,
      -0.039342522621154785,
      0.017830872908234596,
      -0.02209819108247757,
      -0.016868039965629578,
      0.008929356932640076,
      0.046187665313482285,
      3.396300598978996e-05,
      -0.04460827261209488,
      -0.07521554082632065,
      -0.006456414703279734,
      -0.01119615975767374,
      0.019826970994472504,
      -0.027508605271577835,
      0.02299904264509678,
      0.017924385145306587,
      -0.08326491713523865,
      -0.006310007069259882,
      -0.005403486080467701,
      -0.07594189047813416,
      0.0042065964080393314,
      -0.030124610289931297,
      0.012786014005541801,
      0.010623949579894543,
      -0.08248040825128555,
      0.0025126736145466566,
      -0.002018903847783804,
      0.020111633464694023,
      0.03978181630373001,
      0.016118789091706276,
      0.045616984367370605,
      0.04652934893965721,
      0.013232221826910973,
      0.003272982081398368,
      -0.034751273691654205,
      -0.054874710738658905,
      0.09296827763319016,
      0.0489908866584301,
      0.021725492551922798,
      0.038595691323280334,
      0.011438245885074139,
      -0.013899912126362324,
      0.017989275977015495,
      -0.02394605055451393,
      0.03779955208301544,
      0.000715716858394444,
      -0.0064866552129387856,
      0.05816907808184624,
      0.03039376810193062,
      0.0809667706489563,
      -0.025766553357243538,
      -0.010240163654088974,
      -0.07238569110631943,
      -0.046323053538799286,
      -0.00506395660340786,
      -0.011161206290125847,
      -0.045776188373565674,
      -0.0856815055012703,
      0.02301756478846073,
      0.03659184277057648,
      0.023451903834939003,
      -0.07465946674346924,
      -0.035295795649290085,
      -0.0012059243163093925,
      -0.002767703030258417
    ],
    [
      -0.11851728707551956,
      -0.033611949533224106,
      -0.08019024133682251,
      0.035907212644815445,
      0.05747881904244423,
      0.010993946343660355,
      0.06425554305315018,
      0.00641140341758728,
      0.07697976380586624,
      -0.014801139011979103,
      -0.024466048926115036,
      0.0026893222238868475,
      0.01014840230345726,
      -0.020543616265058517,
      -0.04585028812289238,
      -0.04445398971438408,
      0.03641694784164429,
      -0.07597639411687851,
      0.027398187667131424,
      0.026135893538594246,
      0.042458273470401764,
      0.028815455734729767,
      0.03903394937515259,
      -0.050629038363695145,
      -0.006132241804152727,
      -0.11067599803209305,
      0.04639860987663269,
      0.043652649968862534,
      0.0587395578622818,
      -0.005799614824354649,
      0.08781757205724716,
      0.09628131240606308,
      -0.09312380850315094,
      -0.05677272379398346,
      -0.03403499722480774,
      -0.06286469846963882,
      -0.014011217281222343,
      -0.03290480747818947,
      0.02010979875922203,
      0.031512632966041565,
      -0.053375594317913055,
      -0.03386877104640007,
      -0.0014399258652701974,
      0.021554315462708473,
      0.03173651173710823,
      -0.02984699420630932,
      -0.0372660793364048,
      -0.039152003824710846,
      -0.06338787078857422,
      0.04729773476719856,
      0.03556905314326286,
      0.12531697750091553,
      -0.006857146974653006,
      0.02222573570907116,
      0.07122550159692764,
      -0.0002733605506364256,
      -0.06695714592933655,
      -0.03750176355242729,
      -0.058173827826976776,
      0.0995151698589325,
      0.06332886964082718,
      0.015038769692182541,
      -0.050767190754413605,
      -0.02801595814526081,
      -0.05547899380326271,
      0.009261993691325188,
      0.0637873187661171,
      0.05309997498989105,
      0.06757985800504684,
      -0.04047678783535957,
      -0.08352283388376236,
      0.027197951450943947,
      0.012319535948336124,
      0.02906114049255848,
      0.0666254311800003,
      0.017452707514166832,
      -0.07127078622579575,
      -0.08706288039684296,
      0.0422489270567894,
      -0.10372704267501831,
      -0.009516090154647827,
      -0.000458912254543975,
      0.010735752061009407,
      0.016418172046542168,
      0.04311550036072731,
      0.0338759571313858,
      0.15146586298942566,
      0.0882222056388855,
      0.076881542801857,
      0.040456343442201614,
      -0.000894291209988296,
      0.09990517050027847,
      -0.05786330625414848,
      0.08071836084127426,
      0.006785159930586815,
      0.02767963707447052,
      0.03856220096349716,
      0.0019225890282541513,
      -0.013137847185134888,
      0.02520565316081047,
      -0.020584719255566597,
      -0.03788859769701958,
      0.004521643742918968,
      0.03558439388871193,
      -0.0018515099072828889,
      -0.061485838145017624,
      0.05405402183532715,
      -0.025811845436692238,
      -0.01429026946425438,
      0.0055548567324876785,
      0.03637627512216568,
      0.01788162998855114,
      -0.016609884798526764,
      -0.010951602831482887,
      -0.011591187678277493,
      -0.00032641220605000854,
      -0.051060762256383896,
      -0.01903657242655754,
      0.03430132195353508,
      -0.008077862672507763,
      0.03373204916715622,
      0.08414708077907562,
      -0.02871137298643589,
      0.04684966430068016,
      -0.05133770778775215,
      0.05939813330769539,
      0.09272999316453934,
      6.846851252040699e-33,
      0.03578063100576401,
      -0.06224149093031883,
      0.01268914807587862,
      0.02824881300330162,
      0.045776594430208206,
      0.02575225569307804,
      0.03890855237841606,
      0.033132895827293396,
      0.0071149528957903385,
      0.10672599822282791,
      -0.021397357806563377,
      0.021845618262887,
      0.0007090229191817343,
      -0.004995378665626049,
      0.04693244397640228,
      -0.020125998184084892,
      -0.03726235404610634,
      0.014727439731359482,
      0.052288297563791275,
      -0.03174532204866409,
      0.08877279609441757,
      -0.02152538299560547,
      0.019700590521097183,
      -0.0847926139831543,
      0.09618619084358215,
      0.14882875978946686,
      0.03299148008227348,
      0.03028877265751362,
      -0.007678572088479996,
      0.05754059925675392,
      0.0020319311879575253,
      0.034905415028333664,
      0.03835653141140938,
      -0.013302097097039223,
      0.011796913109719753,
      -0.028537942096590996,
      -0.07264295965433121,
      -0.01078756246715784,
      -0.07874572277069092,
      -0.03058892861008644,
      0.004494099412113428,
      0.0007466627284884453,
      -0.0455772764980793,
      0.043571434915065765,
      0.008324629627168179,
      -0.09384648501873016,
      0.021859074011445045,
      0.11379725486040115,
      0.005945061799138784,
      -0.0441424585878849,
      -0.01140811387449503,
      0.052399642765522,
      -0.010403349995613098,
      -0.06616200506687164,
      0.04706408828496933,
      -0.052633848041296005,
      0.02365555241703987,
      0.05504937842488289,
      -0.06245926022529602,
      0.04352660849690437,
      -0.0854547768831253,
      0.010438475757837296,
      -0.041742365807294846,
      -0.022954318672418594,
      -0.02343336120247841,
      0.07746072858572006,
      -0.01703229360282421,
      -0.04688737913966179,
      0.0410018116235733,
      -0.0029918423388153315,
      -0.00169523770455271,
      -0.001764941611327231,
      -0.03866510093212128,
      -0.009813797660171986,
      -0.034753818064928055,
      -0.015781976282596588,
      0.07934631407260895,
      0.06410921365022659,
      0.010530944913625717,
      -0.006293208338320255,
      -0.0003523495979607105,
      -0.0038177163805812597,
      0.00021048243797849864,
      0.057560767978429794,
      -0.035772230476140976,
      -0.01945035345852375,
      -0.05269823968410492,
      -0.043833982199430466,
      -0.025682244449853897,
      0.01073214691132307,
      0.042567819356918335,
      -0.06518006324768066,
      0.0926285982131958,
      -0.034459006041288376,
      -0.07769297063350677,
      -8.985772691273271e-33,
      -0.09016447514295578,
      0.04132886603474617,
      -0.03494807705283165,
      0.014434199780225754,
      -0.006259935908019543,
      -0.054340776056051254,
      -0.0034574177116155624,
      0.013014504685997963,
      0.01371011883020401,
      -0.02953287400305271,
      -0.03861858695745468,
      0.05866170674562454,
      0.09146581590175629,
      0.0016258838586509228,
      0.007353884167969227,
      -0.07891829311847687,
      -0.06645289808511734,
      -0.054101791232824326,
      -0.01804385520517826,
      0.01887216977775097,
      0.06562346965074539,
      0.09956762939691544,
      0.02384404093027115,
      -0.006801591254770756,
      0.03597434237599373,
      0.026189075782895088,
      0.01615583896636963,
      -0.012484744191169739,
      -0.030858367681503296,
      -0.016845081001520157,
      -0.010474282316863537,
      -0.020859558135271072,
      0.013042674399912357,
      -0.040576256811618805,
      -0.010309885255992413,
      -0.06896466016769409,
      0.10838569700717926,
      0.01828710362315178,
      -0.03688038885593414,
      0.08170875161886215,
      -0.04362760856747627,
      -0.0032786529045552015,
      0.026902878656983376,
      -0.013571118004620075,
      -0.031474918127059937,
      0.03618687391281128,
      -0.03541216999292374,
      0.037723176181316376,
      0.0038045209366828203,
      -0.05451497063040733,
      -0.01623002626001835,
      0.0026281375903636217,
      -0.07250610738992691,
      0.0353875532746315,
      -0.034524183720350266,
      0.01488160528242588,
      -0.08598021417856216,
      0.04470134526491165,
      0.07080438733100891,
      0.12177751213312149,
      0.0699266791343689,
      -0.0772300586104393,
      -0.024987734854221344,
      0.021451182663440704,
      0.031983036547899246,
      -0.010413381271064281,
      -0.1018693596124649,
      -0.08995504677295685,
      0.03604093939065933,
      0.025544537231326103,
      0.16080819070339203,
      -0.04859323799610138,
      -0.030849693343043327,
      -0.02173825539648533,
      -0.013222550973296165,
      -0.06109219044446945,
      0.025725463405251503,
      -0.07598471641540527,
      -0.02843659184873104,
      0.05250195413827896,
      0.03007899969816208,
      0.018170282244682312,
      0.027274087071418762,
      -0.06368810683488846,
      -0.05872798338532448,
      -0.05910109728574753,
      0.018561717122793198,
      -0.005650041624903679,
      0.03254271298646927,
      -0.046596456319093704,
      -0.09534995257854462,
      -0.00775099778547883,
      -0.12749210000038147,
      0.04560974985361099,
      -0.039733607321977615,
      -6.366478544350684e-08,
      0.047653913497924805,
      -0.0027797440998256207,
      0.03540631756186485,
      -0.028808148577809334,
      0.008169889450073242,
      0.029933739453554153,
      -0.08822470158338547,
      -0.07744435966014862,
      0.03258322924375534,
      -0.08771911263465881,
      0.059053972363471985,
      0.009329047054052353,
      -0.02439534291625023,
      -0.05550440400838852,
      0.056005362421274185,
      -0.07330915331840515,
      -0.0012779722455888987,
      -0.056269120424985886,
      -0.08468783646821976,
      -0.048134975135326385,
      -0.06097827106714249,
      0.009233725257217884,
      0.0028395855333656073,
      -0.07169534265995026,
      -0.022430967539548874,
      -0.031046604737639427,
      0.02137654833495617,
      0.035854317247867584,
      0.0390031673014164,
      -0.0012521713506430387,
      0.002355527598410845,
      -0.016012128442525864,
      0.012611329555511475,
      0.003318467643111944,
      -0.12221784144639969,
      0.15768064558506012,
      -0.06512728333473206,
      0.016401255503296852,
      0.08460045605897903,
      -0.04528932645916939,
      0.058162931352853775,
      -0.012342222966253757,
      -0.04972456768155098,
      0.06418676674365997,
      -0.08497240394353867,
      -0.031356554478406906,
      -0.02123182825744152,
      -0.07178010046482086,
      0.05310266092419624,
      -0.0107363136485219,
      -0.07038960605859756,
      -0.10118993371725082,
      -0.035641930997371674,
      -0.05433511361479759,
      -0.007575532887130976,
      0.015127935446798801,
      -0.06929241120815277,
      -0.020072685554623604,
      0.05912617966532707,
      0.021949436515569687,
      -0.0007764403126202524,
      0.0415179505944252,
      -0.015203512273728848,
      -0.0065911696292459965
    ],
    [
      -0.1913524866104126,
      0.03233793005347252,
      -0.03186170011758804,
      0.00043639479554258287,
      0.02720019966363907,
      0.08968918770551682,
      0.045437876135110855,
      0.024757416918873787,
      0.0277259424328804,
      0.0456719808280468,
      0.0355520136654377,
      -0.053040023893117905,
      0.04798158258199692,
      0.1018497571349144,
      0.013175024650990963,
      0.05463153496384621,
      0.08015212416648865,
      -0.09483915567398071,
      0.03270934894680977,
      -0.04251288250088692,
      0.058789946138858795,
      0.014059791341423988,
      -0.023280896246433258,
      0.018443886190652847,
      -0.012595192529261112,
      -0.019093316048383713,
      -0.026774248108267784,
      0.0009313717018812895,
      0.005960616748780012,
      -0.019156305119395256,
      0.042515240609645844,
      -0.012005550786852837,
      -0.014645570889115334,
      -0.06201644986867905,
      -0.1010710597038269,
      0.04161050170660019,
      -0.09456842392683029,
      -0.046691663563251495,
      -0.05171217769384384,
      -0.06596287339925766,
      -0.04472759738564491,
      -0.034986671060323715,
      -0.049474239349365234,
      -0.06987963616847992,
      0.07985936105251312,
      -0.000705138489138335,
      0.04710361361503601,
      0.019229214638471603,
      -0.06974624842405319,
      -0.04651375487446785,
      0.09154732525348663,
      0.04808729887008667,
      0.041502825915813446,
      0.09433478862047195,
      0.05929085984826088,
      0.03893783316016197,
      0.0409286767244339,
      -0.010432546027004719,
      -0.04875170812010765,
      -0.02162037044763565,
      0.023212585598230362,
      0.0023835008032619953,
      -0.029708784073591232,
      0.020591305568814278,
      -0.06858731806278229,
      -0.02573327161371708,
      0.014786173589527607,
      0.06787704676389694,
      -0.0024171548429876566,
      -0.08573753386735916,
      -0.005350071936845779,
      -0.00040341264684684575,
      -0.037138085812330246,
      -0.045455846935510635,
      0.1095028892159462,
      0.020328430458903313,
      -0.05846031382679939,
      -0.005306944251060486,
      -0.02308572269976139,
      -0.0990564301609993,
      -0.024223636835813522,
      0.024786176159977913,
      0.011192848905920982,
      -0.012739895842969418,
      0.05170758441090584,
      -0.03946296125650406,
      -0.023105643689632416,
      -0.01784791797399521,
      0.10133373737335205,
      0.06013646349310875,
      0.0354449525475502,
      0.04083973914384842,
      -0.01692301779985428,
      -0.005305889528244734,
      -0.07366176694631577,
      -0.011387123726308346,
      -0.03743749484419823,
      0.005976331420242786,
      -0.060221828520298004,
      0.08049598336219788,
      0.019913090392947197,
      -0.01861848123371601,
      -0.04457066208124161,
      -0.012284010648727417,
      0.05388014763593674,
      -0.033658839762210846,
      0.02926381677389145,
      -0.049770843237638474,
      0.01434276346117258,
      -0.05197068676352501,
      -0.0011305842781439424,
      -0.02024819888174534,
      -0.015657486394047737,
      -0.004633006639778614,
      -0.04951871931552887,
      0.1199948638677597,
      -0.06662935018539429,
      0.027493752539157867,
      0.08327464014291763,
      -0.09307722747325897,
      0.047275081276893616,
      0.034034088253974915,
      0.020938141271471977,
      -0.008281474001705647,
      -0.019140861928462982,
      0.06548771262168884,
      0.05675884336233139,
      7.263241473144693e-33,
      0.02735094353556633,
      -0.0024493755772709846,
      -0.03537369146943092,
      0.008939056657254696,
      0.023153042420744896,
      0.005020161159336567,
      0.07048586010932922,
      0.03729257732629776,
      -0.04089045152068138,
      -0.009639323689043522,
      -0.010183983482420444,
      0.17366614937782288,
      0.0461268313229084,
      0.09026961028575897,
      0.0028439639136195183,
      -0.03928189352154732,
      0.0015135102439671755,
      0.032331906259059906,
      0.12046836316585541,
      -0.004100094549357891,
      0.08549236506223679,
      -0.0077062202617526054,
      0.010482014156877995,
      0.022485332563519478,
      0.060803283005952835,
      0.06356357038021088,
      -0.006077208556234837,
      -0.002057039411738515,
      -0.08202257007360458,
      0.00963699072599411,
      0.06624381989240646,
      0.013601825572550297,
      0.07525556534528732,
      -0.00841375719755888,
      -0.009765323251485825,
      0.053994856774806976,
      -0.023031149059534073,
      -0.04422454908490181,
      -0.023481890559196472,
      -0.11863531917333603,
      -0.023304900154471397,
      -0.005708358716219664,
      -0.0592724084854126,
      0.06758006662130356,
      -0.02336420677602291,
      -0.1101987361907959,
      0.025178231298923492,
      0.025129536166787148,
      0.02675117924809456,
      0.06306590139865875,
      0.051034241914749146,
      -0.030163871124386787,
      0.05288415029644966,
      -0.07835177332162857,
      -0.0014322063652798533,
      -0.010672606527805328,
      -0.06937398761510849,
      0.018681267276406288,
      -0.0007162499823607504,
      -0.005555576644837856,
      0.008227682672441006,
      -0.04262010008096695,
      -0.04824114218354225,
      0.006273504346609116,
      -0.039958152920007706,
      0.11485087126493454,
      -0.05057470500469208,
      -0.0746556743979454,
      -0.006564987823367119,
      0.03268372267484665,
      -0.03604103624820709,
      0.07923899590969086,
      0.019343145191669464,
      -0.01648750528693199,
      0.035417862236499786,
      -0.05231942981481552,
      -0.00893745943903923,
      -0.0005037704831920564,
      0.0021629640832543373,
      -0.027202485129237175,
      -0.09278877824544907,
      -0.035915251821279526,
      -0.0103676188737154,
      0.07804214954376221,
      0.02816416323184967,
      -0.01372484304010868,
      -0.07746939361095428,
      -0.061817716807127,
      0.04248295724391937,
      0.03308725729584694,
      -0.02184009738266468,
      0.0007035021553747356,
      0.07233224809169769,
      0.08975603431463242,
      0.046763502061367035,
      -8.252954819291272e-33,
      0.05299454182386398,
      0.0468689501285553,
      -0.025927817448973656,
      -0.06444287300109863,
      -0.004608131479471922,
      -0.026900488883256912,
      -0.03073015809059143,
      0.02305123396217823,
      -0.0393240749835968,
      -0.014425303786993027,
      -0.052499305456876755,
      0.004834331572055817,
      0.08888661861419678,
      0.057468537241220474,
      -0.01255584042519331,
      -0.07490074634552002,
      -0.1001022681593895,
      -0.010545092634856701,
      -0.045236844569444656,
      -0.032721493393182755,
      0.044344786554574966,
      0.11264482140541077,
      -0.03097761608660221,
      0.00478378077968955,
      0.012211509980261326,
      0.017994556576013565,
      0.0158997755497694,
      -0.017749644815921783,
      -0.008128006011247635,
      0.018270932137966156,
      0.013944754377007484,
      -0.11282327771186829,
      -0.09798446297645569,
      -0.05858244746923447,
      0.037850480526685715,
      0.025017263367772102,
      0.019359776750206947,
      0.014840658754110336,
      -0.08035707473754883,
      0.10462183505296707,
      0.022798754274845123,
      -0.030856076627969742,
      0.008753050118684769,
      0.0635761097073555,
      0.006563255563378334,
      0.007303753402084112,
      -0.05096758157014847,
      -0.06878919899463654,
      -0.03647097945213318,
      -0.05155171453952789,
      -0.023518122732639313,
      -0.033516932278871536,
      -0.010178963653743267,
      0.041802290827035904,
      -0.04272884503006935,
      0.0012313340557739139,
      -0.015883665531873703,
      -0.01665474660694599,
      0.03649268299341202,
      -0.053036969155073166,
      0.06173822283744812,
      -0.0477198027074337,
      -0.017399530857801437,
      0.1145985946059227,
      0.01864001154899597,
      -0.06258702278137207,
      0.002901304280385375,
      -0.020144589245319366,
      0.033535707741975784,
      0.06428609788417816,
      0.1417103111743927,
      0.013881579041481018,
      -0.013715902343392372,
      -0.0999663695693016,
      0.07151137292385101,
      0.048744749277830124,
      -0.03486044332385063,
      -0.0709671825170517,
      -0.05205656960606575,
      0.0017488939920440316,
      -0.01983647607266903,
      -0.02321026846766472,
      0.13319233059883118,
      -0.07010545581579208,
      -0.03389744460582733,
      -0.03327546268701553,
      -0.01524708978831768,
      0.0443255752325058,
      -0.001172193675301969,
      0.04896239936351776,
      -0.04015706852078438,
      -0.0045512826181948185,
      -0.02831641398370266,
      0.05342956632375717,
      -0.013379286974668503,
      -6.824723897125295e-08,
      -0.009127960540354252,
      0.03550827503204346,
      -0.007418070919811726,
      -0.08072249591350555,
      -0.054321229457855225,
      0.022538963705301285,
      -0.020142676308751106,
      -0.07703462988138199,
      -0.04272807016968727,
      -0.06950987875461578,
      0.03900572657585144,
      0.052138056606054306,
      -0.006807430647313595,
      -0.1526765674352646,
      0.0415622815489769,
      -0.0023155154194682837,
      0.028870904818177223,
      -0.005373325664550066,
      -0.06946160644292831,
      -0.0314236544072628,
      0.031105585396289825,
      -0.03552569821476936,
      -0.022152014076709747,
      -0.09723099321126938,
      -0.03299291059374809,
      -0.07592989504337311,
      0.054209113121032715,
      0.05429769679903984,
      0.04518403857946396,
      0.012687095440924168,
      0.002780162962153554,
      -0.015388967469334602,
      0.07863384485244751,
      0.016654005274176598,
      0.07808265089988708,
      0.07855665683746338,
      -0.011595604009926319,
      0.00447594840079546,
      0.04658280685544014,
      -0.010130535811185837,
      -0.04737077280879021,
      0.04117782041430473,
      -0.05477757006883621,
      -0.00030318042263388634,
      0.01957527920603752,
      0.050772178918123245,
      -0.01813846081495285,
      -0.027928823605179787,
      0.0321945883333683,
      0.0008743156213313341,
      -0.04723455384373665,
      -0.09384539723396301,
      -0.0673687756061554,
      0.07563858479261398,
      0.016906220465898514,
      -0.02354821376502514,
      0.002728416584432125,
      -0.05074708163738251,
      0.06114295497536659,
      -0.043303269892930984,
      0.038412466645240784,
      0.001476670615375042,
      0.009413880296051502,
      0.015074824914336205
    ],
    [
      -0.17109614610671997,
      0.061425089836120605,
      -0.042547065764665604,
      0.02765609323978424,
      -0.02315359376370907,
      0.02645118162035942,
      0.10545724630355835,
      0.04660670459270477,
      0.03481411188840866,
      0.08841138333082199,
      0.049482837319374084,
      -0.11115066707134247,
      0.06849227100610733,
      0.04792804270982742,
      0.01672610081732273,
      0.04776926711201668,
      0.01318561751395464,
      -0.03814830258488655,
      -0.010745649226009846,
      -0.026981666684150696,
      0.059939172118902206,
      -0.02248256653547287,
      0.025174802169203758,
      0.04058602824807167,
      0.026541773229837418,
      -0.10150869190692902,
      0.0032487374264746904,
      0.03113473393023014,
      -0.0227521900087595,
      -0.017817361280322075,
      0.05079461634159088,
      -0.05035031959414482,
      0.011667538434267044,
      -0.09942556172609329,
      0.01242052111774683,
      0.05434475839138031,
      -0.10222086310386658,
      0.005026200786232948,
      -0.09146623313426971,
      -0.024942802265286446,
      -0.036682985723018646,
      -0.008984777145087719,
      -0.054817553609609604,
      -0.12199240177869797,
      0.030578866600990295,
      0.02462926134467125,
      0.027992436662316322,
      0.07463426142930984,
      -0.045029040426015854,
      0.0574880912899971,
      0.07199207693338394,
      0.006290136370807886,
      0.046611618250608444,
      0.028007930144667625,
      -0.014407563954591751,
      0.01961473934352398,
      0.06782395392656326,
      -0.035591594874858856,
      -0.021275578066706657,
      -0.0038034161552786827,
      -0.032911721616983414,
      -0.024242427200078964,
      -0.017824498936533928,
      0.014958628453314304,
      -0.04432443901896477,
      0.0018269428983330727,
      0.04500800371170044,
      0.05953042209148407,
      -0.07649059593677521,
      -0.017100565135478973,
      0.05762685090303421,
      -0.0063060917891561985,
      -0.041136447340250015,
      -0.05824737250804901,
      0.05945252254605293,
      0.0532526969909668,
      -0.05855580046772957,
      0.009162443690001965,
      0.00037189884460531175,
      -0.11320681869983673,
      -0.00696506118401885,
      0.0005416782223619521,
      0.044845156371593475,
      -0.024911660701036453,
      0.03633461520075798,
      -0.030816808342933655,
      0.016702527180314064,
      -0.018391720950603485,
      0.10281122475862503,
      0.08465692400932312,
      0.09356263279914856,
      0.0002300011256011203,
      -0.05600222945213318,
      -0.015959857031702995,
      0.023490484803915024,
      -0.0018113328842446208,
      -0.014698384329676628,
      0.013808447867631912,
      -0.0465005598962307,
      0.03871094807982445,
      0.015420042909681797,
      -0.05316274240612984,
      -0.07018642127513885,
      0.011539043858647346,
      0.03477037698030472,
      -0.03999797999858856,
      0.06009180471301079,
      -0.042107004672288895,
      -0.0006885876646265388,
      -0.07869397848844528,
      0.027386203408241272,
      -0.05309653654694557,
      0.007172601297497749,
      -0.03965648263692856,
      -0.018696030601859093,
      0.12730906903743744,
      -0.01208888366818428,
      0.0043330988846719265,
      0.06851312518119812,
      -0.12471077591180801,
      0.04205279052257538,
      0.07898280024528503,
      -0.036008283495903015,
      -0.014138401485979557,
      -0.0006717648357152939,
      0.02745993435382843,
      0.01763852871954441,
      9.781195923012127e-33,
      0.044031016528606415,
      0.01582428812980652,
      -0.0074017662554979324,
      -0.022840632125735283,
      0.009280361235141754,
      0.011917950585484505,
      0.04823364317417145,
      0.06288392841815948,
      -0.10686924308538437,
      0.022519314661622047,
      0.013542094267904758,
      0.051275141537189484,
      0.02861318364739418,
      -0.01632804237306118,
      -0.023954827338457108,
      -0.06493827700614929,
      -0.00230403826572001,
      0.01295599713921547,
      0.09613257646560669,
      -0.010375108569860458,
      0.07765137404203415,
      -0.06698742508888245,
      0.03965722769498825,
      -0.008681105449795723,
      0.0265927966684103,
      0.09348028153181076,
      -0.007787715643644333,
      -0.0011951761553063989,
      -0.08782259374856949,
      0.005904626101255417,
      0.08171922713518143,
      0.007662598043680191,
      -0.008158242329955101,
      0.058095451444387436,
      0.01045050285756588,
      0.05510581657290459,
      -0.047165513038635254,
      -0.014134390279650688,
      -0.025032129138708115,
      -0.06391245871782303,
      -0.014907164499163628,
      -0.02136687934398651,
      -0.046842630952596664,
      -0.0018278147326782346,
      -0.09171190857887268,
      -0.09828415513038635,
      0.03395955264568329,
      0.02839917689561844,
      0.09661410748958588,
      0.11667689681053162,
      0.0354359932243824,
      0.011001146398484707,
      0.035752300173044205,
      -0.05850210040807724,
      0.024584300816059113,
      -0.012990872375667095,
      -0.09779612720012665,
      0.00039906255551613867,
      0.04092416912317276,
      -0.020403236150741577,
      0.0074355886317789555,
      -0.059881798923015594,
      -0.09900567680597305,
      0.023082185536623,
      -0.0850721001625061,
      0.08506213128566742,
      -0.02848411351442337,
      -0.04800993949174881,
      0.04408639669418335,
      -0.07262389361858368,
      -0.01153121143579483,
      0.028667563572525978,
      0.04180566594004631,
      0.024717561900615692,
      -0.01627255603671074,
      0.001072059036232531,
      -0.028544578701257706,
      -0.006485976744443178,
      -0.07595161348581314,
      -0.013628741726279259,
      -0.022157732397317886,
      -0.021877145394682884,
      -0.007363712880760431,
      0.0462673120200634,
      0.05821124464273453,
      0.020728182047605515,
      -0.012510286644101143,
      -0.003438057843595743,
      0.015516867861151695,
      0.00440216064453125,
      0.04685317724943161,
      0.0013161426177248359,
      0.0443490631878376,
      0.059651803225278854,
      0.000982785364612937,
      -1.1136127282435529e-32,
      0.0341605618596077,
      0.05709909647703171,
      -0.024072308093309402,
      -0.056168489158153534,
      0.03973415866494179,
      -0.018583809956908226,
      -0.001742764376103878,
      -0.016912464052438736,
      0.006917811464518309,
      -0.007646114565432072,
      -0.0828780084848404,
      0.004349755123257637,
      0.03389151394367218,
      0.0002852940815500915,
      -0.015803055837750435,
      -0.055336374789476395,
      -0.13143496215343475,
      -1.966199852176942e-05,
      0.020164402201771736,
      -0.023621656000614166,
      0.03563612326979637,
      0.0773414596915245,
      0.021993016824126244,
      0.008456300012767315,
      -0.013956393115222454,
      0.016657916828989983,
      -0.027471261098980904,
      0.062383975833654404,
      0.023597566410899162,
      0.003952867817133665,
      -0.032397229224443436,
      -0.0315464586019516,
      -0.0935521051287651,
      -0.05622889846563339,
      0.008393261581659317,
      -0.0628877580165863,
      0.04285576939582825,
      0.08544556796550751,
      -0.08761019259691238,
      0.12968891859054565,
      0.05652814731001854,
      -0.02312539517879486,
      -0.018637096509337425,
      0.032460521906614304,
      0.05794878304004669,
      -0.016981681808829308,
      -0.014467122964560986,
      -0.10367818176746368,
      0.03460239991545677,
      -0.021108176559209824,
      -0.04298354685306549,
      -0.07135779410600662,
      0.016132190823554993,
      0.0990355983376503,
      -0.05844735726714134,
      -0.03092925250530243,
      0.040420688688755035,
      -0.0040418668650090694,
      0.07356203347444534,
      -0.05558156594634056,
      0.0393090657889843,
      -0.039640024304389954,
      0.037472259253263474,
      0.12285987287759781,
      0.053711675107479095,
      -0.08283194154500961,
      0.037005919963121414,
      -0.036684636026620865,
      0.014817957766354084,
      0.04189765453338623,
      0.015682758763432503,
      -0.0650533139705658,
      -0.008179066702723503,
      -0.11992606520652771,
      0.06843460351228714,
      0.08135876059532166,
      -0.023459337651729584,
      -0.07963460683822632,
      -0.05038677528500557,
      0.029474617913365364,
      0.03906536474823952,
      -0.019448507577180862,
      0.0670788511633873,
      -0.0478656180202961,
      -0.07011915743350983,
      -0.07401589304208755,
      0.03364567086100578,
      0.05980749428272247,
      -0.03931136429309845,
      0.08273851871490479,
      -0.09704582393169403,
      -0.01033730711787939,
      0.126078799366951,
      0.05093272030353546,
      -0.02992783673107624,
      -6.35748662602964e-08,
      0.018503017723560333,
      0.025618523359298706,
      -0.032149869948625565,
      -0.033383559435606,
      -0.047957893460989,
      -0.09551066160202026,
      -0.013103058561682701,
      0.009622745215892792,
      -0.08932822197675705,
      -0.07380452007055283,
      0.054020464420318604,
      0.07655531167984009,
      0.0393928587436676,
      -0.06398483365774155,
      -0.015739331021904945,
      -0.07629498839378357,
      -0.002539972309023142,
      0.013528022915124893,
      -0.03788053244352341,
      -0.08152095973491669,
      -0.0425599180161953,
      -0.02151785045862198,
      -0.02017177641391754,
      -0.0614958181977272,
      -0.027508307248353958,
      -0.03794099763035774,
      0.06990543752908707,
      0.011613734066486359,
      0.003224285552278161,
      0.0029447036795318127,
      -0.06695817410945892,
      0.014319157227873802,
      0.0823141559958458,
      -0.03778090327978134,
      -0.021965831518173218,
      0.058406319469213486,
      -0.08201272785663605,
      0.023424090817570686,
      0.014359621331095695,
      -0.012177991680800915,
      -0.08598501235246658,
      0.0426735058426857,
      -0.04646237939596176,
      -0.03552773967385292,
      0.03009711019694805,
      0.017110945656895638,
      -0.07416079938411713,
      -0.041386332362890244,
      0.008116329088807106,
      -0.03593768551945686,
      -0.031185084953904152,
      0.008762028999626637,
      0.00016592678730376065,
      0.023486660793423653,
      0.07567278295755386,
      0.03196281939744949,
      0.04120944067835808,
      -0.01223302073776722,
      0.02598465420305729,
      -0.0030664026271551847,
      0.04459892213344574,
      -0.015165500342845917,
      0.006049811374396086,
      -0.06834006309509277
    ],
    [
      -0.18495549261569977,
      -0.0021393729839473963,
      -0.015180554240942001,
      0.03853285312652588,
      0.0643208771944046,
      -0.03997492045164108,
      0.14038023352622986,
      0.057923879474401474,
      0.04137122631072998,
      0.04893234744668007,
      0.0002204722841270268,
      0.02145298570394516,
      -0.004188755061477423,
      0.07983969897031784,
      0.007313420996069908,
      0.01686619222164154,
      -0.015532225370407104,
      -0.04761043190956116,
      -0.021843988448381424,
      -0.046787653118371964,
      0.06476878374814987,
      -0.03732626512646675,
      -0.02619929611682892,
      0.06108831986784935,
      -0.0239764042198658,
      -0.05619772896170616,
      -0.0550970621407032,
      -0.010181195102632046,
      -0.0035336604341864586,
      -0.04003040865063667,
      0.0883692279458046,
      0.03752990439534187,
      -0.055511537939310074,
      -0.03693471476435661,
      -0.05637864023447037,
      0.025420857593417168,
      -0.08567142486572266,
      -0.04124268516898155,
      -0.012929396703839302,
      -0.029607554897665977,
      0.027269354090094566,
      -0.06773996353149414,
      0.006584509741514921,
      -0.04351246356964111,
      0.020168012008070946,
      0.057526521384716034,
      0.05198701471090317,
      0.03452850878238678,
      -0.03878331556916237,
      0.06694348901510239,
      0.05116785317659378,
      0.01436682604253292,
      0.044381991028785706,
      0.056246351450681686,
      0.014161338098347187,
      -0.024010013788938522,
      0.053717851638793945,
      -0.06309495866298676,
      0.00019166962010785937,
      0.021681247279047966,
      0.012473929673433304,
      -0.027468038722872734,
      -0.022318372502923012,
      0.0026537782978266478,
      -0.045480892062187195,
      -0.052426815032958984,
      0.0046610417775809765,
      0.08998364210128784,
      0.062313586473464966,
      -0.03906228765845299,
      0.10260719805955887,
      -0.015542560257017612,
      -0.07108001410961151,
      -0.00427603954449296,
      0.07451265305280685,
      0.06559775769710541,
      -0.02230333723127842,
      0.056080710142850876,
      0.022035570815205574,
      -0.06293712556362152,
      0.010264060460031033,
      0.022807545959949493,
      0.06607698649168015,
      -0.038978394120931625,
      0.030942218378186226,
      -0.011364857666194439,
      0.030504263937473297,
      0.042957138270139694,
      0.11798562109470367,
      0.08937396109104156,
      0.035467296838760376,
      0.02154688537120819,
      0.05016566812992096,
      0.015598592348396778,
      -0.04777197167277336,
      0.026896340772509575,
      -0.03861534968018532,
      -0.0010427194647490978,
      -0.06589006632566452,
      0.06495392322540283,
      -0.055402614176273346,
      -0.058139652013778687,
      -0.026715612038969994,
      0.01809561625123024,
      0.034595850855112076,
      -0.07802741229534149,
      -0.003926218952983618,
      -0.019699543714523315,
      0.015042688697576523,
      -0.05223908647894859,
      -0.008500965312123299,
      -0.0037729782052338123,
      0.0063859401270747185,
      -0.020338747650384903,
      -0.018593162298202515,
      0.09690050035715103,
      -0.06325525045394897,
      0.03892159089446068,
      0.07108301669359207,
      -0.054848283529281616,
      0.09866246581077576,
      0.0885738655924797,
      0.057195793837308884,
      0.03582790121436119,
      0.012505896389484406,
      0.07271851599216461,
      -0.03514401242136955,
      3.164406547842612e-33,
      0.02670559287071228,
      0.0973229855298996,
      -0.048120781779289246,
      -0.010919175110757351,
      -0.031895458698272705,
      -0.05951638147234917,
      0.05133865401148796,
      -0.005557158961892128,
      -0.06153106689453125,
      0.04338865727186203,
      -0.003203019266948104,
      0.08689035475254059,
      0.03079253062605858,
      -0.002275765174999833,
      0.011296113021671772,
      -0.11394564807415009,
      -0.004947359208017588,
      0.006770132575184107,
      0.01594935543835163,
      -0.07947643846273422,
      0.05386853218078613,
      -0.044631049036979675,
      0.010800921358168125,
      0.0031495990697294474,
      0.039290010929107666,
      -0.0342470183968544,
      -0.05077877268195152,
      0.011303580366075039,
      -0.0014898049412295222,
      0.05866187810897827,
      0.0785798579454422,
      -0.005109991878271103,
      0.06956911832094193,
      0.05153132602572441,
      0.05283794179558754,
      0.04267749562859535,
      -0.04610227048397064,
      -0.09590308368206024,
      -0.057791225612163544,
      -0.04953521117568016,
      -0.06058996915817261,
      -0.01795412413775921,
      -0.06358251720666885,
      0.0622834637761116,
      -0.06146937236189842,
      -0.08992121368646622,
      -0.026226041838526726,
      -0.013385890983045101,
      0.03128676116466522,
      0.06497082114219666,
      0.0744812935590744,
      -0.008877798914909363,
      0.053641170263290405,
      -0.01935800164937973,
      0.059818901121616364,
      0.0016856752336025238,
      -0.09271806478500366,
      -0.0530819408595562,
      0.012790965847671032,
      -0.0029931010212749243,
      0.07548132538795471,
      -0.05322820320725441,
      -0.1146996021270752,
      0.012300853617489338,
      -0.06357260793447495,
      0.05252127721905708,
      0.05046158656477928,
      -0.039422012865543365,
      0.008568559773266315,
      0.0042516388930380344,
      0.013328389264643192,
      0.05918912589550018,
      -0.04524471238255501,
      -0.025960858911275864,
      -0.01592959277331829,
      -0.05431634560227394,
      0.0660281553864479,
      0.057687193155288696,
      -0.08928258717060089,
      0.015588505193591118,
      -0.013564207591116428,
      -0.07813229411840439,
      -0.013633590191602707,
      0.06513144820928574,
      -0.03585733845829964,
      0.05600694566965103,
      0.02454485557973385,
      -0.012428617104887962,
      -0.009621597826480865,
      -0.019983692094683647,
      0.02726645953953266,
      -0.004782333038747311,
      0.08035357296466827,
      0.07734209299087524,
      -0.014566044323146343,
      -2.341505768311301e-33,
      -0.039426855742931366,
      -0.03505478426814079,
      -0.0022322852164506912,
      0.0014330840203911066,
      0.021397007629275322,
      -0.0427481010556221,
      -0.006020061671733856,
      0.009084580466151237,
      -0.0018870159983634949,
      -0.04329375550150871,
      -0.14253734052181244,
      0.004377637058496475,
      -0.023761332035064697,
      0.004845403600484133,
      0.009643805213272572,
      -0.060439858585596085,
      -0.006653234362602234,
      -0.009627170860767365,
      -0.03913632407784462,
      -0.004940290469676256,
      0.021924978122115135,
      0.08585071563720703,
      0.00948077067732811,
      0.018118029460310936,
      -0.05722532793879509,
      0.02487548254430294,
      -0.028670696541666985,
      0.003339169779792428,
      0.048623669892549515,
      0.02769072726368904,
      -0.039636481553316116,
      -0.05884236842393875,
      -0.09139648079872131,
      -0.0933789536356926,
      -0.016331031918525696,
      -0.07085942476987839,
      0.01910867542028427,
      0.1168442890048027,
      -0.031339846551418304,
      0.028000785037875175,
      0.07853823155164719,
      -0.026329347863793373,
      0.02616005390882492,
      0.03261391818523407,
      0.010796000249683857,
      0.015942009165883064,
      0.00378232030197978,
      -0.06338630616664886,
      0.038470275700092316,
      0.0016457437304779887,
      -0.015658309683203697,
      -0.0038727521896362305,
      0.06319142132997513,
      0.08450499176979065,
      -0.03306533396244049,
      -0.06779889762401581,
      0.11614881455898285,
      -0.05151130259037018,
      0.017010586336255074,
      -0.02848806418478489,
      0.06398797780275345,
      -0.028637384995818138,
      0.012494833208620548,
      0.06545911729335785,
      0.08096680790185928,
      -0.024690818041563034,
      0.013700761832296848,
      -0.06372305750846863,
      0.019000301137566566,
      0.051943160593509674,
      0.09775058925151825,
      -0.05092243850231171,
      -0.08499295264482498,
      -0.08245548605918884,
      0.06616879999637604,
      0.07254417985677719,
      -0.08809133619070053,
      -0.019189560785889626,
      -0.06869340687990189,
      0.04449402913451195,
      -0.006914700847119093,
      0.03290649503469467,
      0.055257972329854965,
      -0.041780393570661545,
      0.0276957880705595,
      -0.09993309527635574,
      0.03337131440639496,
      -0.012556835077702999,
      0.05900612846016884,
      0.05375952646136284,
      -0.0093572698533535,
      -0.019951947033405304,
      0.040360745042562485,
      0.042360737919807434,
      -0.018108751624822617,
      -5.782434087109323e-08,
      0.02828739397227764,
      0.04591275751590729,
      -0.031926851719617844,
      0.013201494701206684,
      0.010329768061637878,
      0.027265334501862526,
      0.010309215635061264,
      -0.06797397881746292,
      -0.04556947946548462,
      -0.04433102905750275,
      0.0419270284473896,
      0.05896454304456711,
      0.0308632031083107,
      -0.07058396190404892,
      0.050762150436639786,
      -0.08194241672754288,
      -0.010954027064144611,
      0.020822957158088684,
      -0.07946734875440598,
      -0.051409825682640076,
      -0.0554325208067894,
      0.009661445394158363,
      -0.017748139798641205,
      -0.08598408102989197,
      -0.1232215166091919,
      0.008805586025118828,
      0.10734323412179947,
      0.05273947864770889,
      0.04146287962794304,
      -0.016595464199781418,
      -0.05350658670067787,
      0.012344309128820896,
      0.0614292286336422,
      0.012447517365217209,
      -0.08952818065881729,
      0.037497129291296005,
      -0.041568633168935776,
      -0.035877760499715805,
      -0.01761816255748272,
      0.07328619807958603,
      -0.07326752692461014,
      0.09792172163724899,
      0.03878617659211159,
      0.01635580323636532,
      -0.010577671229839325,
      0.017416303977370262,
      -0.06770998984575272,
      -0.07513181865215302,
      0.03177555277943611,
      0.01312869880348444,
      0.03909001871943474,
      -0.059147100895643234,
      -0.0658888965845108,
      0.11619009077548981,
      -0.0018826796440407634,
      -0.013683058321475983,
      0.03755195066332817,
      -0.03461931645870209,
      0.003955851774662733,
      -0.0695049837231636,
      -0.021315278485417366,
      -0.025968335568904877,
      -0.002751060528680682,
      0.022661782801151276
    ],
    [
      0.06711863726377487,
      -0.010928286239504814,
      -0.012588988058269024,
      0.0357012003660202,
      -0.01278449222445488,
      0.05453135818243027,
      0.07216374576091766,
      0.05288328975439072,
      -0.008253387175500393,
      0.09537684172391891,
      0.006306902039796114,
      -0.027172505855560303,
      0.029081309214234352,
      -0.07043848186731339,
      0.013813912868499756,
      0.04065323993563652,
      -0.05457478389143944,
      -0.06589668244123459,
      -0.026677003130316734,
      -0.0021009601186960936,
      0.037261925637722015,
      0.02376195229589939,
      0.009037372656166553,
      -0.08167858421802521,
      -0.020204443484544754,
      0.07918954640626907,
      -0.053012073040008545,
      -0.020444538444280624,
      -0.09366410225629807,
      -0.006471799220889807,
      -0.027266547083854675,
      0.044691503047943115,
      -0.0859479010105133,
      0.03119540587067604,
      0.06533438712358475,
      -0.05721786618232727,
      -0.054310087114572525,
      -0.02815461903810501,
      0.02369067259132862,
      0.07025153934955597,
      -0.028899936005473137,
      -0.03831254318356514,
      0.026093801483511925,
      -0.13045649230480194,
      -0.06451614201068878,
      -0.07789231836795807,
      -0.0688619315624237,
      -0.06543439626693726,
      0.03130633756518364,
      0.007136584725230932,
      -0.06320814788341522,
      0.06304433196783066,
      0.00406626658514142,
      -0.016640204936265945,
      0.05547066777944565,
      0.06784892082214355,
      -0.03182744234800339,
      -0.02987716533243656,
      0.004996255040168762,
      -0.05768498405814171,
      -0.008603086695075035,
      0.00028828775975853205,
      0.008992561139166355,
      -0.05142085626721382,
      -0.028913358226418495,
      0.012101502157747746,
      -0.023717885836958885,
      0.10193092375993729,
      0.012077408842742443,
      -0.027273472398519516,
      -0.007711480837315321,
      0.06769897788763046,
      0.007661828305572271,
      -0.03167574107646942,
      0.032029226422309875,
      -0.04635456204414368,
      -0.02256152220070362,
      0.05947736278176308,
      0.03269800543785095,
      -0.1461770236492157,
      0.01044941134750843,
      -0.0010245356243103743,
      0.002832156140357256,
      -0.00795300118625164,
      0.07546060532331467,
      0.06239992380142212,
      0.043078433722257614,
      -0.008755449205636978,
      0.034092895686626434,
      0.026764797046780586,
      -0.016544649377465248,
      0.023804714903235435,
      0.014327287673950195,
      0.06492757052183151,
      -0.08235114812850952,
      0.03405386209487915,
      0.01931486837565899,
      0.03702398017048836,
      -0.03584112599492073,
      0.09014350920915604,
      0.0030464448500424623,
      -0.04398989677429199,
      -0.0471455454826355,
      0.10966464877128601,
      0.014188416302204132,
      -0.09439970552921295,
      0.01808161661028862,
      -0.04578414186835289,
      0.013624575920403004,
      -0.03351232409477234,
      -0.009809975512325764,
      0.07012349367141724,
      -0.10333403199911118,
      -0.0746796503663063,
      -0.06926629692316055,
      -0.04956313222646713,
      0.002946931403130293,
      -0.05466824769973755,
      0.05335170775651932,
      0.024518970400094986,
      0.07122666388750076,
      -0.0367732010781765,
      -0.11336908489465714,
      0.04889523237943649,
      -0.04760396480560303,
      0.010210680775344372,
      0.025525584816932678,
      1.0173177738605266e-32,
      0.04421054199337959,
      -0.042856063693761826,
      -0.008014245890080929,
      0.024729151278734207,
      0.07050255686044693,
      0.00532504403963685,
      0.02544797956943512,
      0.06409993767738342,
      -0.004739824682474136,
      0.06667575240135193,
      -0.09058676660060883,
      0.008616920560598373,
      -0.028126131743192673,
      -0.03403349965810776,
      -0.06944679468870163,
      -0.06875517964363098,
      -0.04797558858990669,
      -0.015950743108987808,
      0.0012185022933408618,
      -0.08377976715564728,
      -0.0372442826628685,
      0.003454723162576556,
      0.04589194804430008,
      -0.0376950204372406,
      0.003361337585374713,
      -0.012385730631649494,
      -0.04187845066189766,
      0.04728255048394203,
      -0.007192785851657391,
      0.02072925679385662,
      0.10006701946258545,
      -0.0187742430716753,
      0.10963761061429977,
      0.04824451729655266,
      -0.03479664400219917,
      0.033534638583660126,
      -0.057584624737501144,
      -0.014680041931569576,
      0.0223619993776083,
      0.02005872130393982,
      -0.01792999915778637,
      -0.02776956558227539,
      -0.03395991772413254,
      0.03737593814730644,
      -0.02019089087843895,
      -0.05387342721223831,
      0.06268705427646637,
      0.014437892474234104,
      0.05863501504063606,
      -0.053893014788627625,
      -0.019389143213629723,
      0.07827866822481155,
      -0.007812092546373606,
      -0.011546341702342033,
      -0.0003174005832988769,
      0.007674176245927811,
      -0.09314265847206116,
      0.012157659977674484,
      0.009973496198654175,
      0.010449957102537155,
      -0.1199849545955658,
      -0.008709612302482128,
      0.02230745181441307,
      -0.03702075034379959,
      -0.03178669884800911,
      0.1155603677034378,
      -0.020204316824674606,
      -0.009959726594388485,
      0.020170612260699272,
      -0.10766946524381638,
      0.010718576610088348,
      -0.07873763889074326,
      0.08622777462005615,
      0.003032420063391328,
      0.10689182579517365,
      -0.01995600201189518,
      0.055868860334157944,
      -0.04069790616631508,
      -0.08624842762947083,
      -0.03478128835558891,
      -0.025483036413788795,
      -0.0640973225235939,
      -0.08248475939035416,
      0.03649510443210602,
      0.028352849185466766,
      0.0074848150834441185,
      0.0728708803653717,
      -0.06436483561992645,
      0.04596785083413124,
      0.08988958597183228,
      -0.030000343918800354,
      0.0485447533428669,
      -0.03308263048529625,
      -0.06071091815829277,
      0.04156091809272766,
      -9.343516029846803e-33,
      -0.004123510792851448,
      0.05179031193256378,
      -0.03818347305059433,
      -0.038585759699344635,
      0.028264710679650307,
      0.01640922762453556,
      0.06220114976167679,
      0.0046135056763887405,
      0.008371599018573761,
      0.0677114874124527,
      0.010265721008181572,
      -0.01923220232129097,
      -0.015365595929324627,
      -0.08446390181779861,
      -0.06194256991147995,
      0.0168189387768507,
      -0.03804708644747734,
      0.07017377018928528,
      0.04994412884116173,
      -0.02216649055480957,
      -0.004667200613766909,
      0.0872531309723854,
      0.006133635062724352,
      0.044312674552202225,
      -0.047513797879219055,
      -0.023628463968634605,
      0.06450743228197098,
      -0.03292398154735565,
      0.03277750313282013,
      0.010636109858751297,
      0.05887163057923317,
      0.012891487218439579,
      -0.09832736104726791,
      0.09423433244228363,
      0.025854023173451424,
      -0.006451791618019342,
      0.03450547158718109,
      0.021465567871928215,
      -0.08405619859695435,
      0.06851815432310104,
      -0.03941132873296738,
      -0.00424641789868474,
      0.0342923142015934,
      0.012202811427414417,
      -0.00862535834312439,
      0.002538396045565605,
      0.08059512078762054,
      0.020958269014954567,
      -0.02038721740245819,
      0.021598108112812042,
      0.019476786255836487,
      -0.11651134490966797,
      -0.05648234859108925,
      -0.007912570610642433,
      -0.04229244217276573,
      0.015133384615182877,
      0.011844608932733536,
      -0.04319186881184578,
      -0.006441277451813221,
      0.004619718063622713,
      0.009220870211720467,
      -0.0175162423402071,
      0.06540930271148682,
      0.027884315699338913,
      0.1292491853237152,
      0.012918579392135143,
      0.03754551336169243,
      0.04335577040910721,
      0.08125205338001251,
      0.05979059264063835,
      -0.01903398148715496,
      0.043144695460796356,
      0.018416373059153557,
      -0.005615298170596361,
      0.0969410166144371,
      0.04072856530547142,
      -0.06866202503442764,
      0.02753521129488945,
      -0.03481648862361908,
      -0.004596247337758541,
      0.07768094539642334,
      0.03330109268426895,
      0.02552943490445614,
      -0.19391301274299622,
      -0.05030718445777893,
      -0.019046669825911522,
      0.10007061809301376,
      0.09994510561227798,
      -0.09423144161701202,
      0.01683187298476696,
      -0.019219722598791122,
      -0.023787518963217735,
      0.05598635599017143,
      0.03085576929152012,
      -0.010810906998813152,
      -5.842581174420047e-08,
      -0.06832346320152283,
      0.023379862308502197,
      -0.045720260590314865,
      -0.0245236624032259,
      -0.0008313065045513213,
      -0.015663674101233482,
      0.08725734800100327,
      -0.032538048923015594,
      -0.02397332154214382,
      -0.08349942415952682,
      0.0688670426607132,
      0.07849694043397903,
      0.03766890987753868,
      -0.05931829288601875,
      -0.013933205045759678,
      -0.05237053707242012,
      -0.06462398916482925,
      -0.02726723439991474,
      -0.05445161089301109,
      0.007656438276171684,
      0.061271678656339645,
      0.06222435459494591,
      0.03668211027979851,
      0.0037136480677872896,
      0.07871764153242111,
      0.021272724494338036,
      -0.009124485775828362,
      0.006871039047837257,
      -0.03161797672510147,
      0.09034139662981033,
      -0.0005745366215705872,
      -0.034211672842502594,
      0.0383472740650177,
      -0.03638765215873718,
      0.012686504051089287,
      -0.010664348490536213,
      0.059460241347551346,
      -0.05082884803414345,
      0.03398784250020981,
      0.027071477845311165,
      -0.04571792110800743,
      -0.0023942512925714254,
      -0.07562742382287979,
      0.05637819692492485,
      -0.016364797949790955,
      -0.023784374818205833,
      -0.09378954768180847,
      0.10895572602748871,
      0.08449282497167587,
      -0.04686212167143822,
      0.0369316041469574,
      0.004109941888600588,
      0.00044415032607503235,
      -0.06319980323314667,
      -0.06221708282828331,
      -0.04092036560177803,
      0.03552453592419624,
      0.06312592327594757,
      -0.009106598794460297,
      -0.033848900347948074,
      -0.06215618550777435,
      0.0065706283785402775,
      -0.03060578554868698,
      0.010919427499175072
    ],
    [
      -0.06966860592365265,
      -0.004275410436093807,
      -0.020541690289974213,
      0.015966949984431267,
      0.040950383991003036,
      0.0009595330921001732,
      0.03635368496179581,
      0.017482049763202667,
      0.03403075411915779,
      0.015831956639885902,
      -0.06672069430351257,
      0.0388222299516201,
      0.01672300137579441,
      0.03414199501276016,
      0.045762669295072556,
      0.047759439796209335,
      0.04506834223866463,
      -0.058052245527505875,
      -0.011119097471237183,
      -0.054299090057611465,
      0.08320647478103638,
      -0.05517412722110748,
      -0.05120876803994179,
      0.02355165220797062,
      -0.07971996068954468,
      0.010009054094552994,
      -2.804517680488061e-05,
      -0.010827593505382538,
      -0.019564257934689522,
      0.024229470640420914,
      0.015424416400492191,
      0.00714660482481122,
      -0.02685893326997757,
      -0.033857353031635284,
      -0.033751972019672394,
      0.013162431307137012,
      0.021247543394565582,
      -0.08301108330488205,
      -0.05811617895960808,
      0.03565853834152222,
      0.014049057848751545,
      -0.13591516017913818,
      -0.010390689596533775,
      0.007769179530441761,
      0.047293081879615784,
      0.02616756781935692,
      -0.04370075836777687,
      0.04529447853565216,
      -0.14213861525058746,
      -0.04197278618812561,
      0.03724517300724983,
      0.03820006176829338,
      0.008129286579787731,
      0.1288663148880005,
      0.14887411892414093,
      -0.003574320347979665,
      -0.05957086756825447,
      -0.021019013598561287,
      0.03388269618153572,
      0.0013864841312170029,
      -0.03227122873067856,
      -0.031114067882299423,
      -0.11154606938362122,
      0.007703323848545551,
      -0.015604019165039062,
      -0.025881895795464516,
      0.0016232202760875225,
      -0.016653558239340782,
      0.08332937210798264,
      -0.012638089247047901,
      -0.02852141670882702,
      -0.0048356736078858376,
      0.00783271249383688,
      0.012415963225066662,
      0.05300971493124962,
      0.058080777525901794,
      0.00570964440703392,
      0.03332257270812988,
      -0.02650083228945732,
      -0.15348131954669952,
      0.04910878464579582,
      0.056461434811353683,
      0.032959140837192535,
      -0.05527473986148834,
      0.08998093008995056,
      -0.08768665045499802,
      -0.03019227460026741,
      0.05607129633426666,
      0.005128286313265562,
      0.05718650296330452,
      0.00020320738258305937,
      -0.014371654018759727,
      -0.06032480672001839,
      0.01055978238582611,
      0.009735268540680408,
      0.085580974817276,
      0.036634888499975204,
      -0.03487381711602211,
      0.04591863229870796,
      0.03812407702207565,
      -0.06165618076920509,
      -0.05805670842528343,
      -0.07290026545524597,
      0.012963904067873955,
      -0.035458747297525406,
      -0.023356681689620018,
      -0.09910663962364197,
      0.014068502001464367,
      0.025555364787578583,
      0.03591781482100487,
      -0.06460899859666824,
      -0.012438449077308178,
      -0.022943420335650444,
      -0.07295211404561996,
      -0.04438244551420212,
      0.023744475096464157,
      -0.04149266704916954,
      0.05994241684675217,
      0.026702100411057472,
      0.028340335935354233,
      0.05784100294113159,
      -0.04725653678178787,
      0.10559019446372986,
      0.024775393307209015,
      0.07870573550462723,
      0.06267818063497543,
      -0.022058162838220596,
      -1.69451496331566e-33,
      0.032767895609140396,
      0.06756367534399033,
      -0.0960690826177597,
      -0.00025588576681911945,
      -0.013888965360820293,
      0.011964282020926476,
      0.07199982553720474,
      -0.04171142727136612,
      -0.06971455365419388,
      0.06564860045909882,
      -0.004125150851905346,
      0.07537588477134705,
      0.04604780301451683,
      0.05103810131549835,
      0.03571578487753868,
      -0.031484831124544144,
      0.049914002418518066,
      0.004837817512452602,
      0.0006632663425989449,
      -0.06734102219343185,
      0.06478794664144516,
      0.06210785731673241,
      0.01958383247256279,
      -0.01713356375694275,
      0.08009026199579239,
      0.058498747646808624,
      -0.0037203915417194366,
      -0.008244608528912067,
      -0.06288933753967285,
      0.03780841827392578,
      0.0559425950050354,
      -0.016934728249907494,
      0.07612115889787674,
      0.022855794057250023,
      0.016700299456715584,
      0.036917705088853836,
      0.033363427966833115,
      -0.13045038282871246,
      -0.07204221934080124,
      -0.12243463099002838,
      -0.013407931663095951,
      -0.009017706848680973,
      -0.11842982470989227,
      0.038480352610349655,
      -0.036215294152498245,
      -0.05196833983063698,
      -0.003331948071718216,
      -0.030363287776708603,
      0.028721731156110764,
      -0.016986338421702385,
      0.04573339596390724,
      0.0030210537370294333,
      0.06766124069690704,
      -0.061581894755363464,
      0.09002822637557983,
      -0.06559387594461441,
      -0.0105008939281106,
      -0.024250619113445282,
      -0.007039907854050398,
      0.028494946658611298,
      0.034725457429885864,
      -0.03653126209974289,
      -0.07459616661071777,
      -0.06977654993534088,
      -0.0021077394485473633,
      0.07734456658363342,
      -0.042125772684812546,
      -0.01912183128297329,
      0.06796106696128845,
      0.05136435478925705,
      0.008558194153010845,
      0.04615234583616257,
      -0.05560210719704628,
      0.0697261393070221,
      -0.05029100552201271,
      -0.011412281543016434,
      0.13751700520515442,
      0.04712311550974846,
      -0.015504520386457443,
      0.03203657642006874,
      -0.15191558003425598,
      -0.0493704229593277,
      0.0038771990220993757,
      0.07677081227302551,
      -0.02922729030251503,
      -0.056211285293102264,
      -0.051909614354372025,
      0.01455786544829607,
      -0.01862739957869053,
      -0.08081687986850739,
      -0.01061921939253807,
      -0.02263328991830349,
      0.08439300209283829,
      0.04072851315140724,
      -0.012704039923846722,
      -6.356585343584851e-34,
      -0.05439382046461105,
      0.044493887573480606,
      -0.07912351191043854,
      0.06040354073047638,
      -0.0580458901822567,
      -0.039932746440172195,
      -0.00025523672229610384,
      -0.061808645725250244,
      -0.029642146080732346,
      0.00010913145524682477,
      0.004400479141622782,
      -0.04301440715789795,
      0.032970741391181946,
      -0.06944714486598969,
      0.03513520583510399,
      -0.07977266609668732,
      -0.07479093968868256,
      -0.003078892594203353,
      0.029512567445635796,
      0.00044144835555925965,
      0.01429487019777298,
      0.06706367433071136,
      -0.026455320417881012,
      0.03403506055474281,
      0.01640615239739418,
      -0.024955250322818756,
      0.04350816085934639,
      -0.07824596762657166,
      0.007626983802765608,
      0.023444347083568573,
      0.020991027355194092,
      -0.07665504515171051,
      -0.03049224056303501,
      -0.02249300293624401,
      0.014875920489430428,
      0.015599955804646015,
      0.051584452390670776,
      0.02570064552128315,
      -0.017663169652223587,
      -0.004520400892943144,
      0.07083374261856079,
      -0.0016021025367081165,
      0.0114787258207798,
      0.05182437226176262,
      -0.013538920320570469,
      -0.0011901449179276824,
      -0.022836700081825256,
      0.07512947916984558,
      0.013086686842143536,
      -0.041407786309719086,
      0.023156821727752686,
      -0.030944662168622017,
      0.006978863850235939,
      0.0028165013063699007,
      -0.06428144872188568,
      -0.007310475688427687,
      0.04684247449040413,
      0.0041129617020487785,
      0.04954548552632332,
      -0.034182868897914886,
      0.061105553060770035,
      -0.07577619701623917,
      0.007528884802013636,
      0.0800754725933075,
      0.10589480400085449,
      -0.01311826054006815,
      0.00587319303303957,
      -0.05989574268460274,
      0.017619818449020386,
      0.03234187886118889,
      0.0945889949798584,
      0.009011938236653805,
      -0.04506715387105942,
      0.037556882947683334,
      0.09079156070947647,
      -0.04870541766285896,
      -0.06324005126953125,
      -0.004251105710864067,
      -0.01563914492726326,
      0.04286864027380943,
      -0.05146840587258339,
      0.11983122676610947,
      0.018660547211766243,
      -0.036267951130867004,
      0.009766056202352047,
      0.00943746417760849,
      0.041785988956689835,
      0.030552789568901062,
      -0.02305568754673004,
      -0.018575474619865417,
      -0.01983732357621193,
      0.04067050293087959,
      0.045464541763067245,
      0.026245731860399246,
      -0.04783971980214119,
      -5.2001592365513716e-08,
      0.0082852179184556,
      -0.006858251988887787,
      -0.039539407938718796,
      -0.03323487937450409,
      0.005049319937825203,
      0.05913865938782692,
      -0.02030377835035324,
      -0.061929550021886826,
      0.03709930181503296,
      0.0013278998667374253,
      0.02315584197640419,
      0.044107791036367416,
      -0.017947211861610413,
      -0.10114796459674835,
      0.060687270015478134,
      -0.052988965064287186,
      0.021136587485671043,
      0.05035033077001572,
      -0.07923983037471771,
      -0.016504328697919846,
      0.028551748022437096,
      0.028924610465765,
      -0.07530897855758667,
      -0.06143023446202278,
      -0.010035214014351368,
      -0.026819083839654922,
      0.10646562278270721,
      0.1053532138466835,
      0.024751881137490273,
      -0.008258053101599216,
      -0.0764535591006279,
      -0.06076962500810623,
      0.05544818937778473,
      0.03434424102306366,
      -0.0529014989733696,
      0.11010236293077469,
      -0.018801657482981682,
      -0.017671074718236923,
      0.02436557225883007,
      0.017788883298635483,
      -0.0004626770969480276,
      -0.058065250515937805,
      -0.028404604643583298,
      0.011413292959332466,
      -0.04166669771075249,
      0.04492419213056564,
      -0.12041499465703964,
      -0.0011246540816500783,
      -0.03151124715805054,
      0.025985222309827805,
      0.01766682043671608,
      -0.07341916114091873,
      -0.015486717224121094,
      -0.040154170244932175,
      -0.021789560094475746,
      0.03874528780579567,
      -0.0018879949348047376,
      -0.08608046919107437,
      0.14884880185127258,
      -0.07888142764568329,
      0.009588392451405525,
      0.027254141867160797,
      0.0058707017451524734,
      -0.0023708727676421404
    ],
    [
      -0.06540115922689438,
      -0.0060380594804883,
      -0.04050028696656227,
      0.053729213774204254,
      0.024075616151094437,
      0.0026099674869328737,
      0.07635045796632767,
      0.004887634422630072,
      0.01849711500108242,
      0.03133750706911087,
      -0.020068787038326263,
      -0.0255258921533823,
      0.041473302990198135,
      5.3836101869819686e-05,
      0.013037223368883133,
      0.04831629991531372,
      0.015056701377034187,
      -0.016262786462903023,
      -0.010739306919276714,
      0.016019316390156746,
      0.03236958384513855,
      -0.08601310104131699,
      -0.00944429449737072,
      0.0019731803331524134,
      0.003369702026247978,
      -0.07437852770090103,
      0.010915882885456085,
      0.022755565121769905,
      0.004408600740134716,
      -0.06162717193365097,
      0.0607961006462574,
      0.008983581326901913,
      0.02685737796127796,
      0.01325467973947525,
      -0.09547262638807297,
      0.02935389056801796,
      -0.019236959517002106,
      -0.045844145119190216,
      -0.08469698578119278,
      -0.045833736658096313,
      0.04664183035492897,
      -0.09501537680625916,
      -0.016616135835647583,
      0.026202654466032982,
      -0.02556660957634449,
      0.03548187389969826,
      -0.022910237312316895,
      0.07626558095216751,
      -0.11535342037677765,
      0.006827609147876501,
      0.039564862847328186,
      -0.021998051553964615,
      -0.02625938132405281,
      0.1089729517698288,
      0.04971057549118996,
      -0.00032641878351569176,
      0.029811784625053406,
      -0.03623634949326515,
      0.0485401377081871,
      -0.05532405897974968,
      0.017117172479629517,
      -0.01656309701502323,
      -0.07240480929613113,
      -0.007892800495028496,
      0.00464413408190012,
      0.02374529093503952,
      0.010992341674864292,
      -0.025265706703066826,
      0.04306624457240105,
      -0.07551045715808868,
      0.02575385384261608,
      0.006207169499248266,
      -0.05024871602654457,
      -0.06112970411777496,
      -0.0017429263098165393,
      0.017618127167224884,
      -0.04626219719648361,
      0.039366863667964935,
      0.06348317116498947,
      -0.05703270807862282,
      0.01871519163250923,
      0.09203549474477768,
      -0.009078374132514,
      -0.0038068268913775682,
      0.12105774134397507,
      -0.04704469442367554,
      -0.05923739820718765,
      -0.0315629206597805,
      0.018506595864892006,
      0.07639037817716599,
      -0.0029626518953591585,
      0.027293993160128593,
      -0.0055855633690953255,
      0.032325975596904755,
      -0.019993530586361885,
      0.04460849240422249,
      0.05129094049334526,
      -0.01457351353019476,
      -0.0028460142202675343,
      0.04534190148115158,
      -0.05839155986905098,
      -0.03618531674146652,
      -0.07159198075532913,
      -0.02843433991074562,
      -0.022046424448490143,
      -0.054977331310510635,
      -0.04095000401139259,
      -0.02730412594974041,
      0.001305085839703679,
      0.02184521034359932,
      -0.04734208434820175,
      0.020525656640529633,
      -0.0025310234632343054,
      -0.03171192854642868,
      -0.03721131756901741,
      0.0014852741733193398,
      -0.008986600674688816,
      0.08370082080364227,
      0.0542154498398304,
      0.006435277406126261,
      0.016837818548083305,
      0.03132990002632141,
      0.06064240261912346,
      -0.08197029680013657,
      0.07140691578388214,
      -0.014392436482012272,
      -0.05214403197169304,
      3.733439853188665e-33,
      0.0008012615726329386,
      0.016697155311703682,
      -0.06498639285564423,
      0.09629152715206146,
      -0.0037442240864038467,
      0.012101242318749428,
      0.048141684383153915,
      -0.06222236156463623,
      -0.12764741480350494,
      0.009553377516567707,
      0.02603340707719326,
      0.08396292477846146,
      0.08485753834247589,
      0.09512689709663391,
      0.09629607945680618,
      -0.11757906526327133,
      -0.0127131761983037,
      -0.025215139612555504,
      0.07986457645893097,
      0.019114291295409203,
      0.03364222124218941,
      0.02347128838300705,
      0.023127391934394836,
      0.04493486508727074,
      0.07786343991756439,
      0.03216879814863205,
      -0.021519305184483528,
      -0.015180711634457111,
      -0.06291629374027252,
      0.0395902581512928,
      0.040132615715265274,
      -0.07429656386375427,
      0.03831835836172104,
      0.028640037402510643,
      0.00780380517244339,
      0.09050264209508896,
      0.016653433442115784,
      -0.11186253279447556,
      -0.04106500744819641,
      -0.12146325409412384,
      -0.025467678904533386,
      -0.029960399493575096,
      -0.04059786722064018,
      0.0540965273976326,
      -0.04801802337169647,
      0.03884943947196007,
      0.03277864307165146,
      0.002261797431856394,
      0.057438913732767105,
      0.09642170369625092,
      0.012442143633961678,
      -0.014147046953439713,
      -0.0038021313957870007,
      -0.025033632293343544,
      -0.02913064695894718,
      -0.03760906681418419,
      -0.038406044244766235,
      -0.023971520364284515,
      -0.04088745266199112,
      0.016203097999095917,
      -0.03013521619141102,
      0.025367414578795433,
      -0.08551245182752609,
      -0.0020342946518212557,
      -0.055472202599048615,
      0.016977041959762573,
      -0.07349453866481781,
      -0.10263937711715698,
      0.05746794119477272,
      -0.0035504268016666174,
      0.04086386784911156,
      0.04459485411643982,
      -0.0028363680467009544,
      0.006864417344331741,
      -0.09969670325517654,
      0.01709575392305851,
      0.030401770025491714,
      0.0010308341588824987,
      -0.02899189479649067,
      0.00941528845578432,
      -0.07256273925304413,
      0.013125103898346424,
      0.025047773495316505,
      0.03099949285387993,
      -0.025868702679872513,
      -0.09367562085390091,
      -0.035542432218790054,
      -0.0008603045716881752,
      -0.037108223885297775,
      -0.028870806097984314,
      0.05091176927089691,
      -0.0024116188287734985,
      0.0749078243970871,
      -0.009515967220067978,
      -0.03986898437142372,
      -4.0701491897221705e-33,
      -0.09550351649522781,
      -0.03442546725273132,
      -0.012685051187872887,
      0.0760575458407402,
      0.004852411337196827,
      -0.012614569626748562,
      -0.026161599904298782,
      -0.14778614044189453,
      0.007627454120665789,
      -0.0555773600935936,
      -0.09319356083869934,
      -0.009933015331625938,
      0.030283240601420403,
      -0.017156658694148064,
      0.08318761736154556,
      -0.09109345078468323,
      -0.046076785773038864,
      0.03987986221909523,
      0.04661191999912262,
      -0.02546071447432041,
      0.0546727254986763,
      0.0928071141242981,
      -0.03159964829683304,
      0.0799129530787468,
      0.013357771560549736,
      -0.0016761634033173323,
      0.02220139466226101,
      0.01613844931125641,
      0.034141361713409424,
      -0.01839238591492176,
      0.0041028219275176525,
      -0.09445066750049591,
      0.0004087198176421225,
      -0.05944228544831276,
      -0.01816466450691223,
      -0.0019633457995951176,
      0.02201974391937256,
      0.052997492253780365,
      -0.019198568537831306,
      0.019062599167227745,
      0.06910701841115952,
      -0.08621251583099365,
      0.008450164459645748,
      0.009287123568356037,
      -0.042857423424720764,
      0.07371269911527634,
      -0.056871842592954636,
      0.04344108700752258,
      -0.0391681082546711,
      0.015950607135891914,
      0.028204625472426414,
      -0.01732928492128849,
      -0.024286534637212753,
      0.08001182973384857,
      -0.039259593933820724,
      0.0020622338633984327,
      0.057038307189941406,
      -0.010735035873949528,
      0.14036794006824493,
      0.017901038751006126,
      0.09621620178222656,
      -0.02712072618305683,
      0.025529755279421806,
      0.11397640407085419,
      -0.010769074782729149,
      -0.05163935199379921,
      0.02385939285159111,
      -0.06499513238668442,
      0.02604890987277031,
      0.09333417564630508,
      0.021882016211748123,
      0.0022393662948161364,
      -0.020043937489390373,
      -0.03415510430932045,
      0.03561387211084366,
      0.0039565227925777435,
      -0.059779878705739975,
      0.03944363445043564,
      0.018991265445947647,
      -0.05721690133213997,
      -0.10196734964847565,
      0.04566723108291626,
      0.025449654087424278,
      -0.07191221415996552,
      0.07144942134618759,
      -0.05559254810214043,
      0.0781349167227745,
      -0.0046972231939435005,
      -0.009089414030313492,
      0.029149817302823067,
      -0.05578892305493355,
      0.0013051597634330392,
      0.03914973884820938,
      -0.02261766791343689,
      -0.053633540868759155,
      -5.61349402516953e-08,
      -0.003348683239892125,
      -0.002649878617376089,
      -0.033700939267873764,
      -0.011546194553375244,
      0.0007469732663594186,
      0.03051958978176117,
      0.0612785667181015,
      -0.035081397742033005,
      0.02298465371131897,
      0.050226714462041855,
      0.11921580880880356,
      0.004641530103981495,
      -0.002901684259995818,
      -0.10550417006015778,
      0.10890374332666397,
      0.025889884680509567,
      -0.016506493091583252,
      0.027806224301457405,
      -0.12203755229711533,
      -0.04137475788593292,
      -0.009838995523750782,
      0.010797368362545967,
      -0.09833715111017227,
      0.003310373518615961,
      0.02304646372795105,
      0.010796921327710152,
      0.08900944888591766,
      0.13183848559856415,
      0.039926718920469284,
      -0.00996493175625801,
      -0.06947733461856842,
      -0.007898961193859577,
      0.02055264264345169,
      0.030895033851265907,
      -0.07337557524442673,
      0.11632467806339264,
      -0.05899534374475479,
      -0.05579455941915512,
      0.04280000552535057,
      0.11815068870782852,
      -0.06330649554729462,
      -0.01171428058296442,
      0.021914003416895866,
      0.01363084651529789,
      -0.06429906189441681,
      0.05276765674352646,
      -0.1315404325723648,
      0.03269791603088379,
      0.022953161969780922,
      -0.011954519897699356,
      -0.021250441670417786,
      -0.02036047913134098,
      -0.05769116431474686,
      0.042164482176303864,
      -0.025523481890559196,
      0.046307746320962906,
      0.028052527457475662,
      -0.008182919584214687,
      0.12468799203634262,
      -0.0547298789024353,
      0.0434626080095768,
      0.016125310212373734,
      -0.03905949741601944,
      -0.016968224197626114
    ],
    [
      -0.12608322501182556,
      -0.002031040145084262,
      -0.014567181468009949,
      0.04290249943733215,
      0.04588262736797333,
      0.0019923667423427105,
      0.10335949808359146,
      0.028845511376857758,
      0.0638919472694397,
      0.03592633083462715,
      -0.04601379856467247,
      -0.054053306579589844,
      0.04899710416793823,
      0.07450849562883377,
      0.05554138869047165,
      -0.003089954610913992,
      0.032941654324531555,
      -0.05749469995498657,
      -0.03485242277383804,
      -0.06974797695875168,
      0.07565063238143921,
      -0.09022500365972519,
      -0.04753130301833153,
      0.0077276998199522495,
      0.004237494897097349,
      -0.00844497513025999,
      -0.038060903549194336,
      -0.007157598622143269,
      0.004180974327027798,
      -0.02443142607808113,
      0.0791822224855423,
      0.028938179835677147,
      -0.0006313456688076258,
      -0.03616555035114288,
      -0.07443300634622574,
      0.02954244799911976,
      -0.09440890699625015,
      -0.08628597110509872,
      -0.044102512300014496,
      0.06787128746509552,
      -0.016102949157357216,
      -0.04543017968535423,
      0.010635358281433582,
      0.006632039789110422,
      0.09121773391962051,
      0.00850276742130518,
      -0.005396781489253044,
      0.07536391168832779,
      -0.10031957179307938,
      0.016113867983222008,
      0.09377150982618332,
      -0.005087018013000488,
      0.02972802147269249,
      0.13524207472801208,
      0.03385944291949272,
      0.035483796149492264,
      0.007886036299169064,
      -0.05167181417346001,
      -0.034616295248270035,
      -0.009028499945998192,
      -0.02738426811993122,
      -0.05678294226527214,
      -0.06983665376901627,
      0.00767758721485734,
      -0.011782745830714703,
      -0.01905757188796997,
      0.01641223393380642,
      0.05180428922176361,
      0.049186453223228455,
      -0.07786004990339279,
      0.0773753821849823,
      -0.013136261142790318,
      0.004533820319920778,
      -0.05076875165104866,
      0.05114050209522247,
      0.08652652055025101,
      0.0007614071946591139,
      0.059028901159763336,
      0.030046138912439346,
      -0.10952474921941757,
      0.008785223588347435,
      0.04302651062607765,
      0.05200468748807907,
      -0.040699731558561325,
      0.07460324466228485,
      -0.0792199969291687,
      0.03796754032373428,
      0.02976696379482746,
      0.02645314671099186,
      0.08093413710594177,
      0.018938373774290085,
      0.016755778342485428,
      -0.03725195303559303,
      0.022958118468523026,
      -0.08473183959722519,
      0.0857631117105484,
      -0.0355319045484066,
      0.0037054361309856176,
      -0.0437626987695694,
      0.05779951810836792,
      -0.04583272337913513,
      0.024457337334752083,
      -0.049828384071588516,
      0.03770645707845688,
      0.014127492904663086,
      -0.0857829675078392,
      -0.0667572170495987,
      0.0058289035223424435,
      0.022958500310778618,
      -0.005984220188111067,
      -0.06490808725357056,
      0.002925528446212411,
      -0.0051539079286158085,
      -0.01858731359243393,
      -0.03201579302549362,
      0.06019449979066849,
      -0.03929997235536575,
      0.0624966062605381,
      -0.020695872604846954,
      -0.04657146707177162,
      0.03054448775947094,
      -0.00012440199498087168,
      0.07133246958255768,
      -0.015609913505613804,
      -0.007674216292798519,
      0.03226014971733093,
      -0.07927433401346207,
      5.3131815684709525e-33,
      0.04981466755270958,
      0.040044594556093216,
      -0.03238789737224579,
      -0.025383228436112404,
      -0.016466407105326653,
      -0.02870219014585018,
      0.04861223325133324,
      0.05682951956987381,
      -0.06424016505479813,
      0.02878301590681076,
      0.0036621077451854944,
      0.16179119050502777,
      0.04867333173751831,
      0.10589475184679031,
      0.03317182883620262,
      -0.08414953947067261,
      -0.015581863932311535,
      0.004421306308358908,
      0.00591681431978941,
      -0.060902006924152374,
      0.061909958720207214,
      -0.011578190140426159,
      0.00549986632540822,
      -0.016839731484651566,
      0.04879068583250046,
      0.018386540934443474,
      -0.03600354865193367,
      0.03212125226855278,
      -0.07051710039377213,
      0.03160662576556206,
      0.04465090483427048,
      -0.0138785969465971,
      0.09712428599596024,
      -0.031073816120624542,
      0.0041437637992203236,
      0.001305998070165515,
      0.0019464681390672922,
      -0.09923941642045975,
      -0.03404630348086357,
      -0.07911329716444016,
      -0.028326770290732384,
      -0.022862508893013,
      -0.06385789066553116,
      0.02292277105152607,
      -0.10783777385950089,
      -0.06514904648065567,
      0.010833722539246082,
      -0.052689313888549805,
      0.015224956907331944,
      0.038986776024103165,
      0.057808682322502136,
      -0.02642928622663021,
      0.04581230506300926,
      -0.04298658296465874,
      0.07891660183668137,
      -0.018829524517059326,
      -0.05755174905061722,
      -0.00944609846919775,
      0.003997128922492266,
      0.026126671582460403,
      0.047579023987054825,
      -0.08697159588336945,
      -0.048825088888406754,
      0.02606665901839733,
      -0.09437965601682663,
      0.15289148688316345,
      -0.01947493478655815,
      -0.07122789323329926,
      0.033720169216394424,
      0.05921730771660805,
      -0.007151206023991108,
      0.09604259580373764,
      -0.061695873737335205,
      0.013681362383067608,
      -0.01913665421307087,
      -0.0012986973160877824,
      0.07857748866081238,
      0.05984283238649368,
      -0.005005117040127516,
      0.027767948806285858,
      -0.08892981708049774,
      -0.07718434929847717,
      0.03887582942843437,
      0.10932324826717377,
      -0.01075330562889576,
      0.005741878878325224,
      -0.027216175571084023,
      -0.053569357842206955,
      0.02266809344291687,
      -0.04736806079745293,
      -0.008200297132134438,
      0.007167068775743246,
      0.08857011795043945,
      0.054279834032058716,
      0.05870646983385086,
      -4.6580359550874744e-33,
      -0.0471220389008522,
      0.06525880098342896,
      -0.09480784088373184,
      -0.032149530947208405,
      -0.00019597467326093465,
      -0.013996461406350136,
      -0.008902487345039845,
      -0.023600494489073753,
      0.022513004019856453,
      0.056482091546058655,
      -0.11645451188087463,
      0.018243782222270966,
      -0.014817447401583195,
      -0.009590010158717632,
      -0.045433204621076584,
      -0.09844860434532166,
      -0.028769182041287422,
      -0.0002519706613384187,
      -0.0060853236354887486,
      -0.020177749916911125,
      0.012729711830615997,
      0.09103544801473618,
      -0.05960233509540558,
      -0.016343044117093086,
      0.06170503422617912,
      0.01031093206256628,
      0.02188333310186863,
      -0.06166441738605499,
      -0.015342066995799541,
      0.0405554473400116,
      0.01981262117624283,
      -0.08658528327941895,
      -0.09614235907793045,
      -0.05838187411427498,
      0.02558896131813526,
      -0.019703352823853493,
      0.032399121671915054,
      0.05719013512134552,
      -0.0276743583381176,
      0.016918029636144638,
      0.03284912928938866,
      -0.048117123544216156,
      0.010246623307466507,
      0.047244369983673096,
      0.009732511825859547,
      -0.02500060386955738,
      0.0015050346264615655,
      -0.051673028618097305,
      0.07679489254951477,
      -0.03741304203867912,
      -0.004278348758816719,
      -0.04280519858002663,
      0.009802782908082008,
      0.10208120942115784,
      -0.09604982286691666,
      -0.03349525108933449,
      -0.0009181206696666777,
      -0.04132203757762909,
      0.07459334284067154,
      -0.040415823459625244,
      0.03188931941986084,
      -0.03572966158390045,
      -0.018260987475514412,
      0.07676278054714203,
      0.062143243849277496,
      -0.05159516632556915,
      0.03010869212448597,
      -0.03397100046277046,
      0.010105966590344906,
      0.052604563534259796,
      0.11158232390880585,
      0.007459654007107019,
      0.02567426674067974,
      -0.018579818308353424,
      0.05746476352214813,
      0.031207844614982605,
      -0.055823955684900284,
      -0.013287123292684555,
      -0.04253939911723137,
      0.01939978264272213,
      -0.013401055708527565,
      0.07399382442235947,
      0.042345356196165085,
      -0.0557122677564621,
      -0.0177958682179451,
      -0.03236483037471771,
      0.035045892000198364,
      -0.018702920526266098,
      -0.016044314950704575,
      0.020120516419410706,
      -0.044713739305734634,
      0.013470360077917576,
      0.061811476945877075,
      0.0070157176814973354,
      -0.021102963015437126,
      -6.205436164918865e-08,
      0.003956899978220463,
      0.006413871422410011,
      -0.03152048587799072,
      0.006522071547806263,
      0.04305137321352959,
      0.03952886909246445,
      -0.012545735575258732,
      -0.029183266684412956,
      -0.018535172566771507,
      -0.01150552835315466,
      0.0689324140548706,
      0.07099491357803345,
      -0.053361959755420685,
      -0.0977049395442009,
      -0.007137184031307697,
      -0.027177169919013977,
      0.017323289066553116,
      0.03571460768580437,
      -0.06792839616537094,
      -0.045882970094680786,
      0.03685949370265007,
      0.020891735330224037,
      -0.024381259456276894,
      -0.07822854071855545,
      -0.011817426420748234,
      -0.04386035352945328,
      0.08913995325565338,
      0.09807988256216049,
      0.02788536064326763,
      -0.009692195802927017,
      -0.029589930549263954,
      -0.027181902900338173,
      0.09203952550888062,
      0.05232597514986992,
      0.028543539345264435,
      0.10162005573511124,
      0.013625874184072018,
      0.02332809381186962,
      0.014194613322615623,
      0.04895596578717232,
      -0.017810411751270294,
      0.028618449345231056,
      0.017473381012678146,
      0.025855595245957375,
      -0.01768219843506813,
      0.048435572534799576,
      -0.14947117865085602,
      -0.013984602876007557,
      0.013381482101976871,
      -0.02881266362965107,
      0.06338880956172943,
      -0.08278396725654602,
      -0.07609644532203674,
      0.04298364371061325,
      -0.03434138745069504,
      -0.009618221782147884,
      -0.012748455628752708,
      -0.06748585402965546,
      0.09666880965232849,
      -0.06187155470252037,
      0.05127375200390816,
      -0.04842473194003105,
      0.004321220330893993,
      -0.010072244331240654
    ],
    [
      -0.12092981487512589,
      -0.013668343424797058,
      -0.02749675139784813,
      0.007579233031719923,
      0.024317754432559013,
      0.015799427404999733,
      0.030341673642396927,
      0.03661121055483818,
      0.004945683758705854,
      0.04428361356258392,
      -0.010201769880950451,
      0.0031390590593218803,
      0.0215116236358881,
      -0.0025535745080560446,
      0.0562250018119812,
      0.007456504739820957,
      0.04077997803688049,
      -0.07151327282190323,
      0.0028035517316311598,
      -0.05291439965367317,
      0.024814005941152573,
      -0.07383599132299423,
      -0.042125146836042404,
      0.02662363462150097,
      -0.04908071830868721,
      -0.02876444160938263,
      0.0005569977220147848,
      0.01889619417488575,
      -0.03695842623710632,
      -0.033800214529037476,
      0.0778568834066391,
      -0.009724809788167477,
      -0.03315092250704765,
      -0.012358775362372398,
      -0.05710192024707794,
      0.007040906231850386,
      0.0475008450448513,
      -0.06381545960903168,
      -0.04980146139860153,
      -0.023808330297470093,
      0.03267271816730499,
      -0.11283965408802032,
      -0.05447011440992355,
      -0.023761192336678505,
      0.0744280070066452,
      -0.020589426159858704,
      -0.004573069978505373,
      0.02476460672914982,
      -0.08946218341588974,
      -0.0169672928750515,
      0.02128412015736103,
      -0.025621285662055016,
      0.02427835203707218,
      0.09648676961660385,
      0.0865313783288002,
      -0.010327368974685669,
      -0.01969376765191555,
      -0.018744569271802902,
      0.008565201424062252,
      -0.022317714989185333,
      -0.01434148196130991,
      -0.020146295428276062,
      -0.13319529592990875,
      0.023979680612683296,
      -0.003083407413214445,
      0.013629899360239506,
      -0.012973995879292488,
      -0.016181787475943565,
      0.06542736291885376,
      -0.03509717062115669,
      -0.07022634148597717,
      0.012628988362848759,
      0.025222821161150932,
      -0.024095075204968452,
      0.058293770998716354,
      0.03111756220459938,
      -0.038318533450365067,
      0.015001301653683186,
      0.027447419241070747,
      -0.1533541977405548,
      -0.01318107359111309,
      0.048242684453725815,
      0.04320778325200081,
      0.004491239320486784,
      0.07881134748458862,
      -0.04989353567361832,
      -0.03115481697022915,
      0.02626900002360344,
      0.05122490972280502,
      0.013301029801368713,
      0.05990159511566162,
      0.04514310136437416,
      -0.026446077972650528,
      -0.015781374648213387,
      -0.02593613974750042,
      0.07395140826702118,
      0.029554374516010284,
      0.010982714593410492,
      0.013329265639185905,
      0.07397254556417465,
      -0.03678567335009575,
      -0.043825630098581314,
      -0.070010706782341,
      0.004089566878974438,
      0.018579615280032158,
      -0.040296781808137894,
      -0.08019546419382095,
      0.026050593703985214,
      -0.0032218911219388247,
      -0.0061971694231033325,
      -0.058291371911764145,
      -0.010693601332604885,
      -0.02358839474618435,
      -0.06642304360866547,
      -0.03710963577032089,
      0.049998510628938675,
      -0.043130096048116684,
      0.02527059242129326,
      0.04334910586476326,
      0.05042445659637451,
      0.024923203513026237,
      0.007181510329246521,
      0.038500718772411346,
      0.004180268384516239,
      0.07955928891897202,
      0.052062176167964935,
      0.027264371514320374,
      3.196241873598757e-33,
      -0.002616541227325797,
      0.057843729853630066,
      -0.08951463550329208,
      0.02473393641412258,
      0.007389432284981012,
      -0.00987630058079958,
      0.06662251800298691,
      -0.01611308380961418,
      -0.05537233129143715,
      0.05310309678316116,
      0.019779399037361145,
      0.09171750396490097,
      0.02957235462963581,
      0.0898047462105751,
      0.04409751296043396,
      -0.1031050905585289,
      0.02510436624288559,
      0.010916672646999359,
      0.020375726744532585,
      -0.0394580140709877,
      0.06588059663772583,
      0.004024074412882328,
      0.026928454637527466,
      -0.013931230641901493,
      0.06910642236471176,
      0.10806544125080109,
      -0.008088220842182636,
      0.04679408669471741,
      -0.022977514192461967,
      0.043516822159290314,
      0.0703946053981781,
      -0.02973056770861149,
      0.034361161291599274,
      0.04090022295713425,
      0.01622903160750866,
      0.052968915551900864,
      -0.0205951239913702,
      -0.11896097660064697,
      -0.06455422937870026,
      -0.10331273078918457,
      -0.0372856929898262,
      -0.0037811994552612305,
      -0.13199248909950256,
      0.06361616402864456,
      -0.06946682929992676,
      -0.046003904193639755,
      0.00850441213697195,
      -0.003651507431641221,
      0.1431737244129181,
      -0.007687229663133621,
      0.047272585332393646,
      0.018407220020890236,
      0.049609966576099396,
      -0.04487522318959236,
      0.07020463049411774,
      0.022644830867648125,
      -0.0325288400053978,
      -0.06176852807402611,
      -0.03757390379905701,
      0.03709831088781357,
      0.042201485484838486,
      -0.06137114763259888,
      -0.07842777669429779,
      -0.0631973147392273,
      -0.043101925402879715,
      0.058440037071704865,
      -0.033355146646499634,
      -0.054631005972623825,
      0.07329492270946503,
      -0.000637461373116821,
      0.007491464726626873,
      0.01036831270903349,
      0.005620323121547699,
      0.07420450448989868,
      0.003676636377349496,
      -0.0034336543176323175,
      0.10463578999042511,
      0.03685751184821129,
      -0.04244229197502136,
      -0.03239434212446213,
      -0.12529978156089783,
      -0.07097187638282776,
      -0.04891270771622658,
      0.06383886188268661,
      0.02438775636255741,
      -0.05559859052300453,
      -0.027392884716391563,
      -0.03865702077746391,
      -0.03888443484902382,
      -0.06914974004030228,
      -0.04675751179456711,
      -0.01578839123249054,
      0.06882170587778091,
      0.053999751806259155,
      -0.06521894782781601,
      -3.561790127319764e-33,
      -0.06439042091369629,
      0.009672414511442184,
      -0.07037658989429474,
      0.06895872205495834,
      -0.06112871691584587,
      0.01573156751692295,
      -0.009474921971559525,
      -0.045451000332832336,
      0.003280369797721505,
      0.02833181992173195,
      -0.016031140461564064,
      -0.01649324968457222,
      0.08615857362747192,
      -0.05260138958692551,
      -0.00515034981071949,
      -0.06100030615925789,
      -0.05990941449999809,
      0.00754751218482852,
      0.04803432524204254,
      0.00246420712210238,
      -0.018592899665236473,
      0.10375361889600754,
      0.006142049562186003,
      0.038024671375751495,
      -0.010941059328615665,
      -0.0005202277097851038,
      0.0178757905960083,
      -0.011951865628361702,
      -0.0018817719537764788,
      0.012170002795755863,
      0.0494181364774704,
      -0.08593630790710449,
      -0.032340940088033676,
      -0.07254209369421005,
      -0.0038789843674749136,
      -0.0019075224408879876,
      0.05069631710648537,
      0.055150389671325684,
      -0.015408125706017017,
      0.0375080481171608,
      0.09649161994457245,
      -0.07970791310071945,
      -0.007116103079169989,
      0.04240839555859566,
      -0.015426644124090672,
      0.04253432899713516,
      -0.06782905757427216,
      0.05967709794640541,
      -0.0021702414378523827,
      -0.008665606379508972,
      0.022373320534825325,
      -0.018945414572954178,
      -0.012476401403546333,
      0.048301901668310165,
      -0.08713777363300323,
      0.02445494756102562,
      0.08801189064979553,
      -0.047301169484853745,
      0.029289621859788895,
      -0.011745507828891277,
      0.06333442777395248,
      -0.05284721031785011,
      0.035604752600193024,
      0.07884308695793152,
      0.1265471875667572,
      -0.061398766934871674,
      -0.052232902497053146,
      -0.05184181407094002,
      0.05032826215028763,
      0.03192976489663124,
      0.07869010418653488,
      -0.004928600043058395,
      -0.05347277596592903,
      0.016647575423121452,
      0.0753009021282196,
      -0.037601642310619354,
      -0.07151709496974945,
      -0.0675894021987915,
      -0.030577439814805984,
      0.009954486973583698,
      -0.08876384049654007,
      0.062291860580444336,
      0.018868861719965935,
      -0.04289073124527931,
      -0.019358960911631584,
      -0.014810088090598583,
      0.08754673600196838,
      -0.01210515946149826,
      0.004374961834400892,
      -0.007110994309186935,
      -0.02607821114361286,
      0.04307859018445015,
      0.009896058589220047,
      0.051719579845666885,
      -0.05843928083777428,
      -6.170807864691596e-08,
      0.013686098158359528,
      -0.004482187330722809,
      -0.005040156655013561,
      -0.011660626158118248,
      -0.015671825036406517,
      0.047352373600006104,
      0.01812189817428589,
      -0.018089044839143753,
      -0.014173638075590134,
      0.00027334189508110285,
      0.08944061398506165,
      0.028419306501746178,
      -0.030980372801423073,
      -0.11791812628507614,
      0.04913190007209778,
      -0.03603754937648773,
      0.04882384091615677,
      0.04394417256116867,
      -0.12052389979362488,
      -0.07560475915670395,
      0.034495674073696136,
      0.04758252948522568,
      -0.038646597415208817,
      -0.08354198932647705,
      0.04591340571641922,
      0.018477097153663635,
      0.08000384271144867,
      0.15068571269512177,
      0.01856854185461998,
      -0.007538963109254837,
      -0.0409575030207634,
      -0.05195127800107002,
      0.08341643214225769,
      0.011140940710902214,
      -0.057170480489730835,
      0.12526974081993103,
      -0.04219900816679001,
      -0.027022121474146843,
      0.04343414679169655,
      0.11076337844133377,
      -0.023202911019325256,
      0.015175503678619862,
      -0.024641407653689384,
      0.0240032821893692,
      -0.03876558691263199,
      0.046073444187641144,
      -0.11472994834184647,
      0.040700048208236694,
      0.040881067514419556,
      0.0065340641885995865,
      0.0031144730746746063,
      -0.0714435875415802,
      -0.03676684573292732,
      0.02549046277999878,
      0.008212252520024776,
      -0.025729386135935783,
      0.011547982692718506,
      -0.06670530885457993,
      0.14427240192890167,
      0.01665337197482586,
      0.00327448477037251,
      0.020405733957886696,
      -0.003743530251085758,
      -0.019577637314796448
    ],
    [
      -0.11023694276809692,
      0.018342390656471252,
      -0.05527379363775253,
      0.12150559574365616,
      -0.023157112300395966,
      0.05141616240143776,
      0.04652842879295349,
      0.020192330703139305,
      0.07838843762874603,
      0.046716608107089996,
      -0.01228061132133007,
      -0.11865118891000748,
      0.05837291479110718,
      -0.04320424050092697,
      -0.019923338666558266,
      0.04842764884233475,
      -0.0018105561612173915,
      -0.09662961214780807,
      -0.04982686787843704,
      -0.072197325527668,
      0.035498861223459244,
      -0.024621425196528435,
      -0.06420294940471649,
      -0.008522562682628632,
      0.031068501994013786,
      -0.058833081275224686,
      0.038891490548849106,
      0.0089738043025136,
      0.045571260154247284,
      0.01226029172539711,
      0.04325408861041069,
      -0.011432494036853313,
      9.812849020818248e-05,
      -0.05108610540628433,
      0.008786649443209171,
      0.003999364096671343,
      -0.04345843568444252,
      -0.08746317774057388,
      -0.07418163865804672,
      -0.024713024497032166,
      0.04671892151236534,
      -0.017889510840177536,
      0.0005742533830925822,
      -0.029475480318069458,
      0.08448156714439392,
      0.03058888018131256,
      0.021318582817912102,
      0.06583549827337265,
      -0.07696621865034103,
      -0.01518458966165781,
      0.057302504777908325,
      0.008465995080769062,
      -0.037189193069934845,
      0.061704859137535095,
      0.01750021241605282,
      0.03344765305519104,
      0.009529666975140572,
      -0.0669504925608635,
      0.012887601740658283,
      -0.003181195817887783,
      0.009130368940532207,
      -0.029248937964439392,
      -0.0295555479824543,
      -0.045847754925489426,
      -0.007829251699149609,
      -0.007683759555220604,
      0.022578833624720573,
      -0.042925819754600525,
      0.013128509745001793,
      -0.0349549874663353,
      0.03562534227967262,
      -0.02918531559407711,
      0.04073549807071686,
      -0.08756784349679947,
      0.05092892423272133,
      0.0030149095691740513,
      -0.07917095720767975,
      -0.040528297424316406,
      0.05020091310143471,
      -0.1325397491455078,
      0.01892782188951969,
      0.01861531287431717,
      0.06515007466077805,
      -0.01709331013262272,
      0.11378586292266846,
      -0.07839778065681458,
      0.06085757911205292,
      0.00631950655952096,
      0.08904049545526505,
      0.05794045701622963,
      -0.00029183196602389216,
      0.06687095016241074,
      -0.048760753124952316,
      -0.007352430839091539,
      -0.05292728543281555,
      0.04672341048717499,
      0.022850362583994865,
      0.08655431866645813,
      -0.06028534471988678,
      0.09287139773368835,
      -0.08478380739688873,
      0.01159427035599947,
      -0.15397486090660095,
      0.027544815093278885,
      0.044119104743003845,
      -0.024068836122751236,
      -0.0014094485668465495,
      -0.021705424413084984,
      0.0019510657293722034,
      -0.008905045688152313,
      -0.018898624926805496,
      0.06431654840707779,
      0.04073209688067436,
      0.046027835458517075,
      -0.025969883427023888,
      0.0028835637494921684,
      -0.0540822334587574,
      0.027593817561864853,
      0.04385913908481598,
      0.02824525535106659,
      0.045178674161434174,
      0.0358794629573822,
      -0.009669839404523373,
      0.016003141179680824,
      -0.0019358390709385276,
      0.04344058036804199,
      0.058656878769397736,
      7.193846164143899e-33,
      0.01069547887891531,
      -0.023844948038458824,
      0.055617280304431915,
      0.004356245510280132,
      0.0014727198285982013,
      -0.024982240051031113,
      0.048750512301921844,
      0.026429347693920135,
      -0.08719607442617416,
      0.018991971388459206,
      -0.0013429964892566204,
      0.044633880257606506,
      0.006303871516138315,
      0.06719866394996643,
      0.07338740676641464,
      -0.07199721783399582,
      -0.0771375522017479,
      0.002172134816646576,
      0.03755708038806915,
      0.0027975544799119234,
      0.04947052150964737,
      -0.027089983224868774,
      0.00816814973950386,
      0.020363824442029,
      0.047980692237615585,
      0.06288278102874756,
      -0.00033921320573426783,
      0.017302146181464195,
      -0.06703199446201324,
      0.0429496206343174,
      0.01275938656181097,
      -0.03135646879673004,
      -0.023697171360254288,
      -0.08056537806987762,
      -0.04123178496956825,
      0.024687673896551132,
      0.007557053584605455,
      -0.019690899178385735,
      -0.0482250340282917,
      -0.05615800619125366,
      -0.0006063348846510053,
      0.02280276082456112,
      -0.00793087761849165,
      -0.0068395850248634815,
      -0.1309301257133484,
      -0.029594004154205322,
      0.050449103116989136,
      0.002181628718972206,
      0.06736953556537628,
      0.004949824418872595,
      0.021075153723359108,
      -0.016519539058208466,
      0.06129330024123192,
      -0.013937769457697868,
      -0.03651301562786102,
      -0.009034545160830021,
      0.004251911770552397,
      0.005498891230672598,
      -0.053886283189058304,
      -0.03718924894928932,
      0.06972014158964157,
      -0.052236177027225494,
      -0.010281252674758434,
      -0.06440889090299606,
      -0.020382110029459,
      0.1049453392624855,
      -0.04796464368700981,
      -0.06032095104455948,
      0.009307220578193665,
      -0.07370463013648987,
      0.05916459485888481,
      0.018871469423174858,
      0.03032754175364971,
      -0.05020475387573242,
      -0.06370275467634201,
      0.030653445050120354,
      0.05178764835000038,
      -0.0020727526862174273,
      -0.06968346238136292,
      -0.0665135383605957,
      -0.016039403155446053,
      -0.03759755194187164,
      0.011967853643000126,
      -0.021951137110590935,
      0.013523492030799389,
      -0.08597851544618607,
      -0.013675479218363762,
      -0.014324628747999668,
      -0.06313712894916534,
      0.038743458688259125,
      -0.000866259797476232,
      0.006035540718585253,
      0.06469391286373138,
      0.06396056711673737,
      -0.08893977850675583,
      -7.185461950686659e-33,
      -0.056668028235435486,
      -0.0639650896191597,
      -0.01361857634037733,
      -0.006153751630336046,
      0.05512386932969093,
      -0.0038955151103436947,
      -0.04052874818444252,
      -0.08442274481058121,
      -0.012892955914139748,
      -0.02686179429292679,
      0.014737097546458244,
      0.01151792798191309,
      0.05670691654086113,
      -0.02845129929482937,
      0.10846297442913055,
      -0.03634756803512573,
      -0.057145021855831146,
      0.03793184831738472,
      0.028931638225913048,
      0.01150350458920002,
      0.007703648880124092,
      0.1153092011809349,
      -0.018605196848511696,
      0.02907690778374672,
      -0.005587013438344002,
      0.038040608167648315,
      0.03848438709974289,
      0.010337448678910732,
      0.03673197329044342,
      -0.020774494856595993,
      -0.018988722935318947,
      -0.06880360096693039,
      -0.1284332424402237,
      -0.01573307067155838,
      0.004025158938020468,
      0.046601299196481705,
      -0.0047765132039785385,
      -0.052642133086919785,
      -0.04069310054183006,
      0.11687915772199631,
      0.04127269610762596,
      -0.021549291908740997,
      -0.02496051788330078,
      0.11159592121839523,
      0.014911669306457043,
      0.03201402723789215,
      -0.05014953389763832,
      -0.023120064288377762,
      0.07961582392454147,
      -0.04405960813164711,
      0.07501441985368729,
      0.029257774353027344,
      -0.049699217081069946,
      0.15595132112503052,
      -0.055029794573783875,
      -0.014254866167902946,
      -0.0558481328189373,
      -0.07469497621059418,
      0.08641199767589569,
      -0.03321627154946327,
      -0.007404393516480923,
      -0.029840653762221336,
      0.001688853488303721,
      0.038113344460725784,
      0.03645273298025131,
      -0.01696799136698246,
      -0.07570385932922363,
      -0.012264975346624851,
      0.09375496208667755,
      0.0967414602637291,
      0.14046651124954224,
      0.02404925972223282,
      -0.04909754917025566,
      -0.07624100148677826,
      -0.018766870722174644,
      0.055778127163648605,
      -0.013429179787635803,
      -0.008061286062002182,
      -0.01452655903995037,
      -0.04548361524939537,
      -0.10206489264965057,
      0.04519389942288399,
      0.04324980452656746,
      -0.071216881275177,
      -0.023179473355412483,
      -0.0758880078792572,
      0.10736998170614243,
      -0.013732925057411194,
      -0.01062100287526846,
      0.04160219803452492,
      -0.003012363100424409,
      -0.055331356823444366,
      0.03350625932216644,
      0.012177154421806335,
      -0.05286530777812004,
      -6.017345555164866e-08,
      -0.006764563266187906,
      -0.015984181314706802,
      0.012323114089667797,
      -0.006282366346567869,
      0.017976941540837288,
      -0.04540019482374191,
      0.0009199122432619333,
      -0.04148397222161293,
      -0.029862884432077408,
      0.004586688242852688,
      0.1668861359357834,
      0.00022770014766138047,
      0.08291584253311157,
      -0.07116376608610153,
      0.00882657803595066,
      0.011449065990746021,
      -0.0046842447482049465,
      0.07246095687150955,
      -0.06718188524246216,
      -0.07368142902851105,
      -0.009729057550430298,
      0.018005460500717163,
      -0.07360649853944778,
      -0.09655659645795822,
      0.023221177980303764,
      -0.010413100942969322,
      0.06380904465913773,
      0.06307730823755264,
      0.055522672832012177,
      0.0053745112381875515,
      -0.08923612534999847,
      -0.03678715601563454,
      0.020563390105962753,
      0.03231421858072281,
      0.020668955519795418,
      0.05415736511349678,
      -0.017798352986574173,
      0.016167597845196724,
      0.055485643446445465,
      0.05483648553490639,
      0.0015370079781860113,
      0.028373226523399353,
      -0.06961196660995483,
      0.04669433832168579,
      -0.04836326465010643,
      0.025228770449757576,
      -0.04366827383637428,
      0.04053892940282822,
      0.036033499985933304,
      0.06561661511659622,
      -0.03246355429291725,
      -0.04682660475373268,
      -0.09245238453149796,
      0.0509348064661026,
      -0.04281849041581154,
      -0.044629715383052826,
      -0.03355947881937027,
      -0.0008712926646694541,
      0.07166676223278046,
      0.020814046263694763,
      -0.005418615415692329,
      -0.015903843566775322,
      -0.1176927387714386,
      -0.030062025412917137
    ],
    [
      -0.06218606233596802,
      0.018450086936354637,
      -0.045450568199157715,
      0.06818761676549911,
      0.07912139594554901,
      -0.04413319006562233,
      0.06387794762849808,
      0.09537176042795181,
      0.031089022755622864,
      0.04010305181145668,
      0.0042784083634614944,
      -0.03776798024773598,
      -0.012962023727595806,
      0.018861625343561172,
      0.0014711308758705854,
      -0.011307915672659874,
      -0.014665929600596428,
      0.041716568171978,
      -0.1123812273144722,
      -0.0577862448990345,
      0.059721581637859344,
      -0.03412654623389244,
      -0.005552142858505249,
      0.008585408329963684,
      0.06444042176008224,
      0.016477525234222412,
      -0.09628467261791229,
      0.017557531595230103,
      0.044352296739816666,
      -0.025792734697461128,
      0.002070545917376876,
      0.017354274168610573,
      -0.019061705097556114,
      -0.01619427651166916,
      -0.0058061652816832066,
      -0.00041998032247647643,
      -0.06529907882213593,
      -0.05670997127890587,
      -0.06721571832895279,
      -0.013444229029119015,
      -0.05218464881181717,
      -0.005929792299866676,
      -0.023372182622551918,
      0.02840299904346466,
      0.07855360954999924,
      -0.00908572506159544,
      -0.019753986969590187,
      0.04872877150774002,
      -0.08150791376829147,
      -0.00447051739320159,
      0.07316882908344269,
      0.08945836871862411,
      -0.020310645923018456,
      0.07738349586725235,
      0.034571461379528046,
      -0.05354996398091316,
      0.03806505352258682,
      -0.01995101384818554,
      0.0005839072400704026,
      0.0359397754073143,
      -0.045749031007289886,
      0.036570604890584946,
      -0.04329511895775795,
      0.0015950478846207261,
      0.013469470664858818,
      0.02261970564723015,
      0.05549981817603111,
      -0.08433783054351807,
      0.0336252823472023,
      0.02269648015499115,
      -0.035570722073316574,
      -0.021705543622374535,
      0.042265795171260834,
      -0.03759435564279556,
      0.12042716890573502,
      -0.033287037163972855,
      -0.09030322730541229,
      0.011295907199382782,
      -0.015514210797846317,
      -0.14706940948963165,
      0.003971906378865242,
      -0.09423018246889114,
      -0.05036292225122452,
      -0.022821029648184776,
      0.06682842969894409,
      0.01226699911057949,
      0.041569046676158905,
      0.0001862561039160937,
      0.15104229748249054,
      0.10407962650060654,
      0.06908775120973587,
      0.10399384796619415,
      -0.061349548399448395,
      0.005150958430022001,
      -0.0403694212436676,
      -0.017842940986156464,
      -0.03060254268348217,
      0.00642767921090126,
      -0.03517237305641174,
      0.03875768557190895,
      -0.02310945838689804,
      0.005963772069662809,
      -0.012625905685126781,
      0.034865476191043854,
      0.022034863010048866,
      -0.11832992732524872,
      0.04093005508184433,
      0.06958451122045517,
      -0.055922091007232666,
      -0.03851446136832237,
      0.04148848354816437,
      0.03718556836247444,
      0.03998593986034393,
      -0.012062430381774902,
      0.078402578830719,
      0.013373981229960918,
      0.02118057943880558,
      -0.016467105597257614,
      0.037107691168785095,
      0.02975337579846382,
      0.05240240320563316,
      0.02228502370417118,
      -0.0023265997879207134,
      -0.00831998884677887,
      -0.09764406830072403,
      0.024903245270252228,
      -0.06614843010902405,
      1.458096710945e-32,
      0.024881968274712563,
      0.060099970549345016,
      -0.03673078492283821,
      -0.05814139544963837,
      -0.06298493593931198,
      0.013536938466131687,
      -0.0061329384334385395,
      0.04765744134783745,
      -0.026163209229707718,
      0.07621726393699646,
      -0.00805177167057991,
      0.11296588182449341,
      0.04686238244175911,
      0.12786708772182465,
      0.03146880492568016,
      -0.08957374095916748,
      0.021611420437693596,
      0.0003183427033945918,
      -0.010715854354202747,
      -0.03375716507434845,
      0.05087413638830185,
      0.019277775660157204,
      0.012784166261553764,
      0.004238191992044449,
      -0.022336609661579132,
      0.08696077018976212,
      0.025297729298472404,
      0.007014151196926832,
      -0.14677977561950684,
      0.0062178499065339565,
      -0.00036458406248129904,
      -0.03792780265212059,
      -0.01970965601503849,
      -0.07002770155668259,
      0.05735919252038002,
      0.04291551187634468,
      0.04533422738313675,
      -0.0387413315474987,
      -0.010881053283810616,
      -0.09777931869029999,
      -0.04896728694438934,
      0.054984208196401596,
      -0.013997874222695827,
      -0.04375746101140976,
      -0.03408244252204895,
      -0.0790514424443245,
      0.012915931642055511,
      0.055408209562301636,
      0.04279318079352379,
      -0.04542073607444763,
      0.038358163088560104,
      0.05427917465567589,
      0.060469433665275574,
      -0.01795506849884987,
      0.008974363096058369,
      0.023820463567972183,
      -0.0022441144101321697,
      0.010611011646687984,
      0.03208701312541962,
      0.10736246407032013,
      0.00046357366954907775,
      -0.03189452737569809,
      -0.03315281867980957,
      -0.042877521365880966,
      -0.10525096952915192,
      0.11581425368785858,
      -0.06985015422105789,
      -0.08839423954486847,
      0.004526343662291765,
      -0.02354072593152523,
      -0.0204678513109684,
      0.03437172248959541,
      0.05925588309764862,
      0.023378266021609306,
      0.028605438768863678,
      -0.04846181720495224,
      -0.01599987968802452,
      0.017392320558428764,
      -0.09952672570943832,
      -0.033835187554359436,
      -0.07480774074792862,
      0.026189258322119713,
      0.0031956713646650314,
      -0.02395741455256939,
      0.014763065613806248,
      -0.0697273313999176,
      -0.0332530178129673,
      -0.07578146457672119,
      -0.11324935406446457,
      -0.007443058304488659,
      -0.025149740278720856,
      -0.0774344801902771,
      0.09190909564495087,
      0.00582154281437397,
      -0.03784690797328949,
      -1.5007646579543534e-32,
      -0.06136544048786163,
      0.042416881769895554,
      -0.031528275460004807,
      0.004825345240533352,
      0.010716966353356838,
      -0.03459468111395836,
      -0.024761835113167763,
      0.01019219122827053,
      -0.005371302366256714,
      -0.03649381548166275,
      0.019834676757454872,
      -0.024146923795342445,
      -0.04819590970873833,
      0.03925085812807083,
      0.004351479932665825,
      -0.015123886987566948,
      -0.0874740406870842,
      -0.014209878630936146,
      0.029337720945477486,
      -0.02579863741993904,
      -0.015294605866074562,
      0.11948192119598389,
      -0.01565992273390293,
      0.1301889419555664,
      -0.0742102637887001,
      0.019847555086016655,
      -0.02223866805434227,
      -0.020700639113783836,
      -0.021893588826060295,
      -0.005122909788042307,
      0.007794949226081371,
      0.004489983897656202,
      -0.11716964095830917,
      0.009385671466588974,
      0.022351127117872238,
      -0.05472462996840477,
      0.040977489203214645,
      0.02893183007836342,
      -0.055586811155080795,
      -0.010500947013497353,
      0.08682173490524292,
      0.02941940166056156,
      0.031502701342105865,
      -0.00623002415522933,
      0.014273197390139103,
      0.010891209356486797,
      0.019672801718115807,
      -0.07002244144678116,
      0.036781273782253265,
      -0.0010979290818795562,
      0.08546383678913116,
      -0.044913992285728455,
      -0.07734657824039459,
      0.08070105314254761,
      -0.046589165925979614,
      -0.002443896373733878,
      -0.02170378714799881,
      -0.05438826233148575,
      0.037545137107372284,
      -0.009105258621275425,
      0.022440079599618912,
      -0.06645578145980835,
      0.04422295093536377,
      0.017652126029133797,
      0.05739934369921684,
      -0.003116582753136754,
      0.008767538703978062,
      -0.0399717353284359,
      0.06888538599014282,
      0.04162127897143364,
      0.029208924621343613,
      0.0008547327015548944,
      0.0005966268945485353,
      -0.01920861005783081,
      -0.057269562035799026,
      0.03861319646239281,
      -0.0049092937260866165,
      -0.03568538650870323,
      -0.023825427517294884,
      0.05423868075013161,
      -0.024637969210743904,
      -0.012231607921421528,
      -0.006236693821847439,
      -0.040192484855651855,
      -0.07664628326892853,
      -0.025884870439767838,
      -0.036567702889442444,
      0.04033569246530533,
      -0.04123592749238014,
      -0.015456220135092735,
      -0.036222800612449646,
      -0.004666736349463463,
      -0.010869068093597889,
      0.039433881640434265,
      -0.04735588654875755,
      -7.030472204405669e-08,
      -0.045460522174835205,
      -0.05777878314256668,
      -0.020824724808335304,
      -0.01674933172762394,
      -0.050601527094841,
      0.006749155465513468,
      0.09191536158323288,
      -0.032036833465099335,
      -0.0986466184258461,
      -0.11661575734615326,
      0.13577724993228912,
      -0.00955862458795309,
      0.009737703949213028,
      -0.03451576456427574,
      -0.004156867973506451,
      -0.03238746151328087,
      -0.016123639419674873,
      0.06796209514141083,
      -0.08102273941040039,
      -0.1148872971534729,
      0.008106620982289314,
      -0.03313814103603363,
      -0.04537337273359299,
      -0.03819124400615692,
      0.020069625228643417,
      -0.046591371297836304,
      0.04564380645751953,
      0.08518389612436295,
      0.06560374051332474,
      0.005555295385420322,
      0.024334527552127838,
      -0.03044740855693817,
      0.058570727705955505,
      -0.018311645835638046,
      0.031095175072550774,
      0.056938815861940384,
      0.010348519310355186,
      0.010474663227796555,
      0.04965565726161003,
      0.14680221676826477,
      -0.03345683217048645,
      0.02088984102010727,
      0.007801019120961428,
      0.035002827644348145,
      0.025614093989133835,
      -0.046232663094997406,
      -0.11871155351400375,
      0.02541462518274784,
      0.02474096044898033,
      -0.0009457661071792245,
      0.04005729779601097,
      -0.04414476454257965,
      -0.0875905379652977,
      0.01805817522108555,
      0.03954781964421272,
      -0.07812653481960297,
      0.0021601514890789986,
      0.015378179028630257,
      0.0755956619977951,
      -0.0032374802976846695,
      0.08240027725696564,
      -0.08171218633651733,
      0.008772584609687328,
      0.003747716313228011
    ],
    [
      -0.0954781025648117,
      -0.0008446102146990597,
      -0.0754864364862442,
      0.04455086216330528,
      0.051683083176612854,
      -0.02956550382077694,
      0.08370847254991531,
      -0.03375953808426857,
      0.05438631400465965,
      -0.004636245779693127,
      -0.018445881083607674,
      0.02558152936398983,
      0.029406700283288956,
      -0.029995832592248917,
      -0.030099133029580116,
      -0.06073274835944176,
      0.10529329627752304,
      -0.04045478254556656,
      -0.03494551032781601,
      -0.03742046654224396,
      0.048549454659223557,
      -0.029728412628173828,
      0.029030371457338333,
      -0.022200144827365875,
      -0.007966279052197933,
      -0.1371845155954361,
      -0.04138287901878357,
      -0.005685845855623484,
      0.07000433653593063,
      -0.0319841206073761,
      0.0762336403131485,
      0.09320905804634094,
      -0.12794944643974304,
      -0.03362424299120903,
      -0.03801941126585007,
      0.012409818358719349,
      -0.04432455450296402,
      -0.09531473368406296,
      0.04230392724275589,
      0.03754660487174988,
      -0.079167440533638,
      -0.02836662344634533,
      -0.05552166327834129,
      0.04739268124103546,
      0.021463992074131966,
      -0.010027489624917507,
      -0.04055037349462509,
      -0.0028348115738481283,
      -0.08255878835916519,
      0.030386637896299362,
      0.058213863521814346,
      0.10289184749126434,
      -0.040556978434324265,
      0.040086835622787476,
      0.0761289894580841,
      -0.008483005687594414,
      -0.035384222865104675,
      -0.04082050174474716,
      -0.03962903097271919,
      0.0644381120800972,
      0.012055282481014729,
      -0.017342235893011093,
      -0.08989985287189484,
      -1.2111010619264562e-05,
      -0.026158994063735008,
      -0.025366540998220444,
      0.05688175559043884,
      0.033063314855098724,
      0.026211583986878395,
      0.007645473815500736,
      -0.03271939605474472,
      0.028490282595157623,
      0.02825356461107731,
      0.05940200760960579,
      0.08858895301818848,
      0.029260626062750816,
      -0.061731528490781784,
      -0.07503495365381241,
      -0.016366509720683098,
      -0.13514788448810577,
      0.010331599041819572,
      0.022986916825175285,
      0.025160813704133034,
      -0.0006719926022924483,
      0.06657923012971878,
      -0.03351558372378349,
      0.10140565037727356,
      0.06424985080957413,
      0.14031249284744263,
      0.03531714528799057,
      0.025522444397211075,
      0.09484744071960449,
      -0.04172175005078316,
      0.05961528420448303,
      0.01329315360635519,
      0.03961452096700668,
      0.01216146256774664,
      -0.010542450472712517,
      -0.008517824113368988,
      0.05556042864918709,
      -0.030497878789901733,
      -0.009486786089837551,
      -0.022672412917017937,
      -0.026953481137752533,
      0.015241831541061401,
      -0.0815817341208458,
      0.012120054103434086,
      -0.010877382010221481,
      0.019449474290013313,
      0.06642699241638184,
      0.016289180144667625,
      0.049254026263952255,
      0.008244507946074009,
      0.005603575613349676,
      -0.008875020779669285,
      0.022745486348867416,
      -0.015845105051994324,
      0.028464898467063904,
      -0.03872837498784065,
      -0.017325934022665024,
      0.04068094864487648,
      0.09132961183786392,
      0.07396289706230164,
      0.036222271621227264,
      -0.031040022149682045,
      0.0036428452003747225,
      0.08218066394329071,
      8.032418120081595e-33,
      0.024070531129837036,
      -0.04294745251536369,
      -0.0059790532104671,
      0.0198376327753067,
      0.029702257364988327,
      0.043961524963378906,
      0.08001133054494858,
      0.031467508524656296,
      -0.034022603183984756,
      0.07907422631978989,
      -0.018716376274824142,
      0.04010346904397011,
      0.03404080867767334,
      0.010094883851706982,
      0.0433669351041317,
      0.015364868566393852,
      -0.019650528207421303,
      0.010529578663408756,
      -0.023259617388248444,
      -0.018773473799228668,
      0.10199710726737976,
      -0.04166479408740997,
      -0.019761132076382637,
      -0.04505728930234909,
      0.058232929557561874,
      0.021794544532895088,
      -0.06580666452646255,
      0.04220682010054588,
      -0.03526323288679123,
      0.05321186035871506,
      0.006687157787382603,
      -0.013692126609385014,
      0.049515459686517715,
      0.03377314656972885,
      0.013959928415715694,
      -0.005365163087844849,
      -0.010419493541121483,
      -0.008760086260735989,
      -0.07475555688142776,
      -0.06920931488275528,
      -0.01421129796653986,
      0.01068081334233284,
      -0.07579292356967926,
      0.04934060201048851,
      0.011639210395514965,
      -0.12256531417369843,
      -0.0516136959195137,
      0.03277646005153656,
      0.01778082735836506,
      -0.04015444964170456,
      0.02785370498895645,
      0.08988267183303833,
      0.058484286069869995,
      -0.06340164691209793,
      0.03564886748790741,
      -0.0724027156829834,
      0.011439725756645203,
      0.015117631293833256,
      -0.04665077477693558,
      0.06578195840120316,
      -0.02924315258860588,
      -0.02182254195213318,
      -0.09480316936969757,
      -0.004091405775398016,
      -0.07205164432525635,
      0.07188978791236877,
      -0.04460589960217476,
      -0.07400540262460709,
      0.04125681519508362,
      -0.027838759124279022,
      -0.04071862995624542,
      -0.006881530396640301,
      -0.0658295750617981,
      0.030898526310920715,
      -0.05841672793030739,
      -0.015646381303668022,
      0.0726034939289093,
      0.0722241923213005,
      0.042052410542964935,
      -0.09747393429279327,
      0.006614867132157087,
      0.029548270627856255,
      -0.012639656662940979,
      0.09244522452354431,
      -0.04298986494541168,
      -0.004068674053996801,
      -0.06167328730225563,
      -0.05817003548145294,
      -0.03010178916156292,
      0.035061065107584,
      0.05156102403998375,
      -0.06586360931396484,
      0.05554491654038429,
      -0.027771830558776855,
      -0.011971927247941494,
      -1.007896113170289e-32,
      -0.08705803006887436,
      0.05377733334898949,
      -0.05633580684661865,
      0.014122620224952698,
      -0.02245916984975338,
      -0.040709663182497025,
      -0.010245700366795063,
      -0.0424175038933754,
      0.007806065957993269,
      -0.04542115703225136,
      -0.045815423130989075,
      0.020342957228422165,
      0.06150054931640625,
      -0.009712216444313526,
      0.02421746402978897,
      -0.03662959486246109,
      -0.06303326785564423,
      -0.058664169162511826,
      -0.016617238521575928,
      0.055583469569683075,
      0.04229486733675003,
      0.07748573273420334,
      0.06892256438732147,
      0.0013895247830078006,
      0.036337677389383316,
      0.060131944715976715,
      -0.007535160053521395,
      -0.01725306734442711,
      0.020008932799100876,
      -0.05375336483120918,
      -0.0025723709259182215,
      -0.05211730673909187,
      -0.07307527959346771,
      -0.05126643180847168,
      0.001260100514627993,
      -0.08450079709291458,
      0.049768153578042984,
      0.08290068805217743,
      -0.0015595153672620654,
      0.14357474446296692,
      0.013755825348198414,
      -0.008616188541054726,
      -0.002832838101312518,
      0.04413248226046562,
      0.002926537534222007,
      -0.0312302615493536,
      -0.02263592556118965,
      0.02241380698978901,
      0.09036538004875183,
      -0.06066935881972313,
      0.008721375837922096,
      -0.03030388057231903,
      -0.012812593951821327,
      0.07467756420373917,
      -0.039730411022901535,
      0.015245949849486351,
      -0.05094363912940025,
      0.0018526881467550993,
      0.056309010833501816,
      0.1091308742761612,
      0.05454716086387634,
      -0.03888268023729324,
      -0.006322413217276335,
      0.005952321924269199,
      0.003720968496054411,
      -0.013626501895487309,
      -0.06400780379772186,
      -0.006166303530335426,
      0.1077679842710495,
      0.053663380444049835,
      0.1328505277633667,
      -0.03592539578676224,
      -0.053064607083797455,
      -0.0754573866724968,
      0.03827356919646263,
      0.013397352769970894,
      0.015448064543306828,
      -0.03087032586336136,
      -0.050706326961517334,
      0.11281491816043854,
      -0.013555075973272324,
      0.06489944458007812,
      -0.002506503602489829,
      -0.03779512271285057,
      -0.05371682718396187,
      -0.07483479380607605,
      0.03705159202218056,
      -0.07217074185609818,
      0.017730671912431717,
      -0.00946766696870327,
      -0.02818254381418228,
      0.0065124682150781155,
      -0.049808792769908905,
      0.007229698356240988,
      -0.04087952524423599,
      -6.092903248600123e-08,
      0.005197778344154358,
      -0.0530414879322052,
      0.02311699651181698,
      -0.002807674463838339,
      0.020374974235892296,
      0.04759417101740837,
      -0.07542760670185089,
      -0.10671709477901459,
      0.00015652971342206,
      -0.10455203801393509,
      0.08177490532398224,
      -0.0031638627406209707,
      -0.002359449863433838,
      -0.04576941207051277,
      0.019906502217054367,
      -0.08030055463314056,
      -0.016754183918237686,
      -0.032643046230077744,
      -0.12888163328170776,
      -0.03102700784802437,
      -0.07551009207963943,
      -0.02112019620835781,
      -0.010585743933916092,
      -0.06092248484492302,
      -0.0416579507291317,
      -0.028967611491680145,
      0.06874282658100128,
      0.04801713675260544,
      -0.007122370880097151,
      -0.0020128327887505293,
      -0.011047206819057465,
      -0.004631000105291605,
      0.008361444808542728,
      0.0015775618376210332,
      -0.0896623283624649,
      0.11420200765132904,
      -0.04306461662054062,
      -0.015513259917497635,
      0.07654962688684464,
      0.001743912696838379,
      0.03034580498933792,
      -0.008813991211354733,
      -0.0006855877581983805,
      0.11676807701587677,
      -0.035112813115119934,
      -0.0348656103014946,
      0.028467094525694847,
      -0.04934865981340408,
      0.056005995720624924,
      -0.05091208964586258,
      -0.06983481347560883,
      -0.10802102088928223,
      -0.05956530198454857,
      -0.030819974839687347,
      0.015615500509738922,
      0.01979001984000206,
      -0.07414468377828598,
      -0.03223883733153343,
      0.06514691561460495,
      -0.0005763638764619827,
      -0.020192310214042664,
      0.031169885769486427,
      -0.00657271035015583,
      -0.01780669391155243
    ],
    [
      -0.07702522724866867,
      -0.03928859159350395,
      0.0036706342361867428,
      0.05685429647564888,
      0.06766147911548615,
      -0.04438546299934387,
      0.09042821824550629,
      -0.04921569302678108,
      0.006923072040081024,
      0.03873172402381897,
      0.006860408000648022,
      -0.04992109164595604,
      0.04611842334270477,
      -0.02770429663360119,
      0.03893860802054405,
      0.08684830367565155,
      -0.051000770181417465,
      -0.06287164241075516,
      0.015957791358232498,
      -0.028489626944065094,
      -0.008786650374531746,
      0.029614778235554695,
      0.014746256172657013,
      -0.04146718606352806,
      -0.02764975093305111,
      -0.12127005308866501,
      0.0449860580265522,
      0.02637561783194542,
      -0.029032524675130844,
      -0.0686323419213295,
      0.15276342630386353,
      -0.00725263636559248,
      -0.10187290608882904,
      -0.03725797310471535,
      -0.01637713424861431,
      0.02084295079112053,
      0.022196678444743156,
      -0.07301688194274902,
      -0.06363561004400253,
      -0.03110034577548504,
      0.04665382578969002,
      -0.048066530376672745,
      -0.0061939070001244545,
      -0.03962662070989609,
      0.1005566194653511,
      0.06767415255308151,
      -0.0025605722330510616,
      0.03822372481226921,
      -0.04615670070052147,
      0.005810044705867767,
      0.026974106207489967,
      0.00602461164817214,
      -0.01407922338694334,
      0.02183656394481659,
      0.06424631923437119,
      0.052376169711351395,
      -0.004959621001034975,
      -0.023884978145360947,
      0.03770792856812477,
      0.04614029824733734,
      0.052956197410821915,
      -0.003333105007186532,
      -0.012149816378951073,
      -0.05199752002954483,
      -0.06440961360931396,
      0.04308246448636055,
      -0.025509057566523552,
      -0.02063007466495037,
      0.012175705283880234,
      -0.027853356674313545,
      -0.027240945026278496,
      0.03322358429431915,
      -0.044241003692150116,
      -0.052095308899879456,
      0.06130161136388779,
      -0.007737549487501383,
      -0.07229360938072205,
      0.018001718446612358,
      0.010535246692597866,
      -0.14149852097034454,
      -0.01557292602956295,
      0.049882348626852036,
      0.04178561270236969,
      0.014417174272239208,
      0.03091294877231121,
      0.019589563831686974,
      -0.03622819110751152,
      -0.02877291664481163,
      -0.012194904498755932,
      0.09112264215946198,
      0.05352881923317909,
      -0.009860939346253872,
      -0.06992852687835693,
      0.014604313299059868,
      -0.006454198155552149,
      0.05691041424870491,
      0.0738285705447197,
      0.012270134873688221,
      0.00755765475332737,
      0.07065079361200333,
      -0.09048471599817276,
      -0.020382175222039223,
      -0.05799935758113861,
      0.06694022566080093,
      0.00906954426318407,
      -0.052921850234270096,
      -0.034799084067344666,
      -0.01621415466070175,
      -0.02767655998468399,
      0.03453470394015312,
      0.018305703997612,
      0.018761951476335526,
      -0.034160736948251724,
      -0.0011461431859061122,
      0.01563711278140545,
      -0.007203212473541498,
      0.025054607540369034,
      0.030637159943580627,
      0.05317145958542824,
      -0.012718208134174347,
      0.019798383116722107,
      0.010238496586680412,
      -0.032414596527814865,
      -0.0019967309199273586,
      -0.008215384557843208,
      0.005827725399285555,
      0.02262370102107525,
      1.1370866892139016e-32,
      0.06852186471223831,
      0.08994372189044952,
      -0.07601345330476761,
      0.10101088881492615,
      -0.03737680986523628,
      0.02488117665052414,
      0.022505009546875954,
      -0.028577150776982307,
      -0.10230275988578796,
      0.07354466617107391,
      0.036062370985746384,
      0.04019869863986969,
      0.08235421776771545,
      0.03558526933193207,
      -0.002345314482226968,
      -0.051107946783304214,
      0.027107082307338715,
      0.07319795340299606,
      0.004282164853066206,
      -0.021233074367046356,
      0.0023922156542539597,
      0.03655212000012398,
      0.0058052511885762215,
      0.01003308966755867,
      0.04933604970574379,
      0.09331352263689041,
      -0.0067377821542322636,
      0.07206304371356964,
      -0.027869442477822304,
      0.023139916360378265,
      0.042528316378593445,
      -0.031512100249528885,
      0.027359334751963615,
      0.0660841166973114,
      0.05393880605697632,
      0.03847175091505051,
      -0.035949669778347015,
      -0.1139114499092102,
      -0.1612880825996399,
      -0.08205758035182953,
      0.024906253442168236,
      0.0559210367500782,
      -0.08006184548139572,
      0.04491294175386429,
      -0.10408063232898712,
      -0.06625434756278992,
      0.026970408856868744,
      -0.0002843374968506396,
      0.19345392286777496,
      -0.010639811865985394,
      -0.02803128957748413,
      0.005202606786042452,
      0.012233351357281208,
      -0.04589618369936943,
      0.048678040504455566,
      -0.022742539644241333,
      -0.08043421059846878,
      -0.029008159413933754,
      -0.048417918384075165,
      -0.028860004618763924,
      0.007826296612620354,
      -0.0023491689935326576,
      -0.11439330130815506,
      -0.02292691357433796,
      -0.0028606371488422155,
      0.030316002666950226,
      -0.037672318518161774,
      -0.10190143436193466,
      0.09132427722215652,
      -0.060299381613731384,
      0.018114330247044563,
      0.022175122052431107,
      0.009548376314342022,
      0.06437741965055466,
      -0.061360493302345276,
      -0.055036015808582306,
      -0.023059716448187828,
      0.03417074307799339,
      -0.08675611019134521,
      -0.007299621589481831,
      -0.0508727990090847,
      -0.038898617029190063,
      -0.08818724751472473,
      0.04193701222538948,
      0.04131476953625679,
      -0.07523311674594879,
      -0.012586883269250393,
      0.025479963049292564,
      -0.0018389092292636633,
      0.017706144601106644,
      0.015122516080737114,
      0.01845419593155384,
      0.006018131040036678,
      0.00454193539917469,
      -0.07715208828449249,
      -1.2461052679186253e-32,
      -0.04495645686984062,
      -0.020181804895401,
      -0.08546925336122513,
      -0.020151294767856598,
      -0.046034958213567734,
      -0.03937320038676262,
      0.04575621709227562,
      -0.04860922321677208,
      -0.002950347261503339,
      -0.04024681821465492,
      -0.0437234491109848,
      -0.05086006969213486,
      0.11997965723276138,
      -0.011160939000546932,
      0.034395456314086914,
      -0.03039589710533619,
      -0.10636445879936218,
      -0.07559605687856674,
      0.022154556587338448,
      0.022706713527441025,
      -0.03734341263771057,
      0.06803610175848007,
      0.07056102901697159,
      0.05696820840239525,
      -0.05537787824869156,
      0.005156379658728838,
      -0.01528630405664444,
      0.05206005647778511,
      -0.03072364814579487,
      -0.057102546095848083,
      0.012162724509835243,
      -0.04000060260295868,
      -0.10262484103441238,
      0.03449369594454765,
      0.013189849443733692,
      -0.0740622878074646,
      -0.03701139613986015,
      0.07494642585515976,
      0.006234513595700264,
      0.05377870425581932,
      0.04552753269672394,
      0.04154418408870697,
      -0.005916557274758816,
      0.07555364817380905,
      0.013514917343854904,
      0.03807513043284416,
      -0.007120796013623476,
      0.052351973950862885,
      0.023025739938020706,
      -0.02306940220296383,
      -0.03289087861776352,
      0.03862571343779564,
      0.009720413945615292,
      0.022241342812776566,
      -0.02616242691874504,
      -0.012501448392868042,
      0.11243942379951477,
      -0.036982789635658264,
      0.12519146502017975,
      0.02739729732275009,
      0.06277694553136826,
      -0.05717502906918526,
      0.057014577090740204,
      0.0967864841222763,
      0.06059801205992699,
      -0.0037352987565100193,
      -0.01969674415886402,
      -0.05235688388347626,
      0.11118090152740479,
      0.001158720813691616,
      0.06359098851680756,
      -0.09191326797008514,
      -0.015495245344936848,
      -0.04021884873509407,
      0.0547957569360733,
      -0.055379319936037064,
      -0.04381414130330086,
      0.0070619042962789536,
      -0.00889873318374157,
      0.031860046088695526,
      -0.015958907082676888,
      0.03515332192182541,
      -0.01230212114751339,
      -0.08261919766664505,
      0.0024727792479097843,
      -0.061030313372612,
      0.049206748604774475,
      0.05010611191391945,
      -0.03639471158385277,
      0.006757006514817476,
      -0.004609813913702965,
      0.00030686933314427733,
      -0.04325497895479202,
      -0.03931434452533722,
      -0.0948215126991272,
      -6.491755755178019e-08,
      -0.04001375660300255,
      0.037988923490047455,
      0.005819129757583141,
      -0.06525672972202301,
      -0.016718007624149323,
      -0.00268664862960577,
      0.05977886915206909,
      -0.03997025266289711,
      0.010770538821816444,
      -0.03748910129070282,
      0.015461926348507404,
      0.028478065505623817,
      -0.0004023799847345799,
      -0.0943155512213707,
      0.07601433992385864,
      -0.08670522272586823,
      0.015302147716283798,
      0.036745406687259674,
      -0.10529731959104538,
      -0.005709496326744556,
      -0.03346959501504898,
      -0.004980557598173618,
      -0.08803175389766693,
      -0.024649379774928093,
      0.02784191444516182,
      0.0007685195887461305,
      0.05598725751042366,
      0.05968557670712471,
      0.0016527619445696473,
      0.05965953692793846,
      -0.06775449216365814,
      -0.010860364884138107,
      0.017468620091676712,
      -0.0002572961966507137,
      -0.045246023684740067,
      0.11745113134384155,
      0.02490043081343174,
      -0.027013568207621574,
      0.06217976659536362,
      0.010965798981487751,
      -0.020701657980680466,
      0.019618593156337738,
      -0.048446349799633026,
      0.018046807497739792,
      0.0025082172360271215,
      0.061266254633665085,
      0.018681025132536888,
      -0.013549499213695526,
      0.07028964906930923,
      -0.050333961844444275,
      -0.05481399595737457,
      -0.09567786008119583,
      -0.008849648758769035,
      0.04393066093325615,
      -0.05083366483449936,
      -0.005514688789844513,
      -0.0565684549510479,
      -0.01714440993964672,
      0.10108070820569992,
      -0.011437091045081615,
      -0.014578460715711117,
      0.009479080326855183,
      -0.020989254117012024,
      -0.047925688326358795
    ],
    [
      -0.07039251178503036,
      -0.010559678077697754,
      -0.09562721848487854,
      0.07109971344470978,
      0.032393380999565125,
      0.009351558052003384,
      0.09644132107496262,
      0.061837613582611084,
      0.06911822408437729,
      0.0572931244969368,
      -0.003243200248107314,
      -0.10478919744491577,
      0.004400474485009909,
      0.0875353142619133,
      -0.05462923273444176,
      0.06796424835920334,
      0.0592426173388958,
      -0.06220202147960663,
      -0.07075610011816025,
      -0.023604687303304672,
      0.012035632506012917,
      -0.013562094420194626,
      0.018171997740864754,
      -0.04674799367785454,
      0.08234494924545288,
      -0.08504536002874374,
      -0.028619207441806793,
      -0.041582897305488586,
      0.008570089936256409,
      -0.07335863262414932,
      0.031175808981060982,
      -0.004598397295922041,
      -0.07596056908369064,
      -0.048741985112428665,
      -0.008794404566287994,
      0.010741653852164745,
      -0.05208876356482506,
      -0.055499687790870667,
      0.02457272820174694,
      0.015668313950300217,
      0.023251058533787727,
      0.031678084284067154,
      -0.024056166410446167,
      -0.0055509330704808235,
      -0.015618326142430305,
      0.03699767217040062,
      0.011147168464958668,
      0.09133616834878922,
      -0.042334821075201035,
      0.06901762634515762,
      0.010375185869634151,
      0.03706315904855728,
      0.021203242242336273,
      0.03560766950249672,
      0.05814480036497116,
      -0.02002863585948944,
      0.05680759251117706,
      -0.04868250712752342,
      0.037848811596632004,
      -0.00642282422631979,
      -0.07173008471727371,
      -0.015240720473229885,
      -0.013216864317655563,
      -0.013127953745424747,
      -0.08857588469982147,
      -0.023780018091201782,
      0.046465400606393814,
      0.001515443786047399,
      -0.016952941194176674,
      -0.10055002570152283,
      0.007962274365127087,
      0.03833214193582535,
      -0.01494427677243948,
      -0.11564990133047104,
      0.0877184048295021,
      0.025209546089172363,
      -0.014785492792725563,
      0.08274799585342407,
      0.08402732759714127,
      -0.1535375565290451,
      0.04550224542617798,
      -0.0021042844746261835,
      0.040879905223846436,
      -0.0357825793325901,
      0.12870924174785614,
      -0.05303860083222389,
      0.010130436159670353,
      -0.06615431606769562,
      0.11299504339694977,
      0.13231009244918823,
      0.07550820708274841,
      0.0482456274330616,
      -0.09588909894227982,
      -0.007058155722916126,
      -0.050816766917705536,
      0.037976108491420746,
      -0.008785913698375225,
      0.03081025928258896,
      -0.03247251734137535,
      0.03309594839811325,
      -0.08991298824548721,
      -0.041373178362846375,
      -0.039091818034648895,
      0.01646541804075241,
      0.018679140135645866,
      -0.08685235679149628,
      0.04250231757760048,
      0.0655539408326149,
      -0.0016560760559514165,
      0.016883887350559235,
      0.024744359776377678,
      0.037714146077632904,
      0.008254000917077065,
      -0.02160966768860817,
      0.016647005453705788,
      0.0621330626308918,
      0.03592923283576965,
      -0.0058287279680371284,
      0.08617892861366272,
      -0.023844577372074127,
      0.03380684182047844,
      0.02186826802790165,
      -0.03086935542523861,
      -0.03488202020525932,
      0.018482742831110954,
      0.006659320555627346,
      -0.05942177027463913,
      9.850245195863398e-33,
      0.029963387176394463,
      -0.004501784685999155,
      -0.07018514722585678,
      0.00823228619992733,
      -0.0738670751452446,
      -0.030329719185829163,
      0.06223388388752937,
      0.06249701976776123,
      -0.10631043463945389,
      -0.01762753166258335,
      -0.018716128543019295,
      0.04030243679881096,
      0.00046373670920729637,
      -0.007677381858229637,
      0.00023264341871254146,
      -0.1329123079776764,
      -0.041516732424497604,
      -0.009280605241656303,
      0.032326892018318176,
      -0.04536541551351547,
      0.04975591599941254,
      0.030671877786517143,
      0.026740455999970436,
      -0.021382853388786316,
      0.010810242034494877,
      0.04838971421122551,
      0.007661035750061274,
      -0.03486842289566994,
      -0.055114082992076874,
      0.04045586287975311,
      0.05897330492734909,
      -0.024171952158212662,
      0.009227469563484192,
      0.01457519643008709,
      0.004322722088545561,
      0.06214803457260132,
      0.017476078122854233,
      -0.02740350365638733,
      -0.02836761437356472,
      -0.05211632698774338,
      -0.034165170043706894,
      0.027469396591186523,
      -0.050095826387405396,
      -0.0046562314964830875,
      -0.08746536821126938,
      -0.08456682413816452,
      0.04576180875301361,
      -0.009626490995287895,
      0.03709178417921066,
      -7.72848361521028e-05,
      -0.029222914949059486,
      0.0021701087243855,
      0.05920012667775154,
      0.012953303754329681,
      0.021178076043725014,
      -0.02437356673181057,
      -0.03746270760893822,
      -0.044024378061294556,
      -0.01527307741343975,
      -0.006176053546369076,
      0.01611917093396187,
      -0.014832551591098309,
      -0.09155161678791046,
      0.003426393261179328,
      -0.0658569410443306,
      0.008974762633442879,
      -0.005726007279008627,
      -0.06664653867483139,
      0.01876462809741497,
      0.007290152367204428,
      -0.01672801375389099,
      0.0024511534720659256,
      0.05601216480135918,
      0.04933437705039978,
      -0.0452214814722538,
      -0.014641877263784409,
      0.042336128652095795,
      -0.04597511887550354,
      -0.013170304708182812,
      -0.05829663202166557,
      -0.004616860765963793,
      0.03266292065382004,
      0.020477334037423134,
      0.009324065409600735,
      0.017555391415953636,
      -0.10246975719928741,
      -0.0013533210149034858,
      -0.016761653125286102,
      -0.02755853347480297,
      -0.05267199128866196,
      0.015715546905994415,
      -0.02315462753176689,
      0.0573585070669651,
      -0.0063293264247477055,
      -0.03156372532248497,
      -9.862440949753179e-33,
      -0.05606185644865036,
      0.023059232160449028,
      0.012084084562957287,
      0.042615409940481186,
      -0.024145161733031273,
      -0.008797980844974518,
      -0.052531544119119644,
      -0.05689660832285881,
      0.05955957993865013,
      -0.057754822075366974,
      -0.08445004373788834,
      0.008437706157565117,
      -0.03596509248018265,
      0.034855809062719345,
      0.06408950686454773,
      -0.0811040997505188,
      -0.09314049780368805,
      -0.028943268582224846,
      0.006769856438040733,
      -0.00044647310278378427,
      0.025707384571433067,
      0.059198614209890366,
      0.004291319288313389,
      0.038202445954084396,
      -0.05449507012963295,
      0.016363510861992836,
      -0.039863523095846176,
      0.06604453921318054,
      0.044801656156778336,
      0.05178690329194069,
      -0.03389587625861168,
      -0.09051039069890976,
      -0.0514657124876976,
      -0.04844457283616066,
      -0.042080771178007126,
      -0.0571652390062809,
      0.03617657348513603,
      0.03334726020693779,
      -0.023255161941051483,
      0.09123723208904266,
      0.05163092538714409,
      -0.01970486156642437,
      -0.04119373485445976,
      0.010346085764467716,
      0.041778814047575,
      0.05836991220712662,
      -0.054453928023576736,
      -0.0518944226205349,
      0.031719330698251724,
      -0.026019852608442307,
      -0.045028891414403915,
      0.008558541536331177,
      -0.04003637284040451,
      0.10593773424625397,
      -0.09224141389131546,
      0.004252735059708357,
      0.11681871861219406,
      -0.007668816018849611,
      0.10545194149017334,
      0.00048046998563222587,
      0.08163932710886002,
      0.03295530378818512,
      0.04271834343671799,
      0.008770952932536602,
      0.036235686391592026,
      0.04411383718252182,
      0.023868504911661148,
      -0.058003731071949005,
      0.07018238306045532,
      0.06172163039445877,
      0.029629118740558624,
      -0.04645682871341705,
      -0.02141563594341278,
      -0.02266288548707962,
      0.03624516725540161,
      0.07698820531368256,
      0.010144737549126148,
      -0.003976084757596254,
      0.021688872948288918,
      0.04811256006360054,
      0.03621893376111984,
      0.025210561230778694,
      0.04438898712396622,
      -0.1491287350654602,
      -0.043174032121896744,
      -0.08386022597551346,
      0.10301613062620163,
      0.017132218927145004,
      -0.047042615711688995,
      -0.0045083677396178246,
      -0.07059083878993988,
      -0.053531236946582794,
      0.09380678832530975,
      0.02807500958442688,
      -0.08054068684577942,
      -6.412358288798714e-08,
      -0.042298126965761185,
      0.005714572500437498,
      -0.009500904940068722,
      0.015994708985090256,
      -0.020847275853157043,
      -0.010811356827616692,
      -0.0067382571287453175,
      0.007715340703725815,
      -0.08262216299772263,
      -0.04321032017469406,
      0.14514829218387604,
      0.0012075281701982021,
      0.021604809910058975,
      -0.10125795006752014,
      0.07858267426490784,
      -0.06492691487073898,
      -0.013995219022035599,
      0.029865307733416557,
      -0.08288738876581192,
      -0.021194903180003166,
      0.005040051881223917,
      0.05928715318441391,
      -0.05149772763252258,
      -0.09563928842544556,
      0.004627645947039127,
      0.006160010118037462,
      0.02771134488284588,
      0.10122775286436081,
      0.003545677289366722,
      0.01273372583091259,
      -0.06379952281713486,
      0.05418398231267929,
      0.06840904802083969,
      -0.01690289005637169,
      -0.08177053183317184,
      0.10384060442447662,
      -0.094200000166893,
      -0.04839439317584038,
      0.04648541286587715,
      0.13174939155578613,
      0.010171515867114067,
      0.03526339307427406,
      -0.044282861053943634,
      0.017986444756388664,
      0.043520793318748474,
      0.05936744809150696,
      -0.04274562746286392,
      -0.030591387301683426,
      0.057189010083675385,
      -0.04222214221954346,
      0.021592214703559875,
      0.007131607737392187,
      -0.059339024126529694,
      0.049446795135736465,
      -0.012097463011741638,
      0.007409763056784868,
      -0.023642409592866898,
      -0.006970223039388657,
      0.01944705843925476,
      -0.03180091828107834,
      -0.024902570992708206,
      -0.02445365861058235,
      -0.051142070442438126,
      -0.012799488380551338
    ],
    [
      -0.05896558240056038,
      0.022983817383646965,
      -0.13288675248622894,
      0.027006836608052254,
      0.10322559624910355,
      -0.04678919538855553,
      0.09084946662187576,
      0.047937989234924316,
      0.07114937901496887,
      0.007516657933592796,
      0.06269001215696335,
      0.012633081525564194,
      -0.0192161425948143,
      -0.011550686322152615,
      -0.026776881888508797,
      -0.040197741240262985,
      -0.05212301388382912,
      -0.051003582775592804,
      0.004057405516505241,
      0.034831494092941284,
      0.01486650574952364,
      0.018575916066765785,
      0.05518662557005882,
      -0.004464316181838512,
      -0.007822851650416851,
      -0.09687302261590958,
      0.033456847071647644,
      0.07826639711856842,
      -0.020863639190793037,
      -0.05512222275137901,
      0.052903879433870316,
      0.048307958990335464,
      -0.022450797259807587,
      -0.036260444670915604,
      0.07074960321187973,
      0.0006018345011398196,
      0.02991769276559353,
      -0.08345732092857361,
      -0.04465651512145996,
      -0.02291763946413994,
      0.003210752736777067,
      -0.04901375249028206,
      -0.05327026918530464,
      0.05351013317704201,
      -0.035877473652362823,
      0.0034993470180779696,
      0.05539105460047722,
      0.035327933728694916,
      -0.05859571695327759,
      0.07729240506887436,
      0.015118631534278393,
      0.03251799941062927,
      -0.02096773497760296,
      0.049762435257434845,
      -0.013703891076147556,
      0.035120103508234024,
      -0.011705712415277958,
      -0.07134462147951126,
      -0.015385662205517292,
      0.052205923944711685,
      0.05178922787308693,
      0.0026295583229511976,
      -0.08667415380477905,
      -0.045086853206157684,
      -0.06671887636184692,
      0.044806767255067825,
      0.053762368857860565,
      0.04705037176609039,
      0.029764026403427124,
      -0.014568112790584564,
      -0.0514652319252491,
      -3.5463745007291436e-05,
      -0.013287973590195179,
      -0.05602755397558212,
      0.09372315555810928,
      0.03074033558368683,
      -0.04388711601495743,
      -0.04950176551938057,
      0.05660705640912056,
      -0.14828036725521088,
      -0.05105521157383919,
      -0.09183164685964584,
      0.062469832599163055,
      -0.007780509069561958,
      0.09185577183961868,
      -0.01676183193922043,
      0.08533703535795212,
      0.008137946017086506,
      0.13813921809196472,
      0.0022442429326474667,
      0.08923926204442978,
      0.05397964268922806,
      -0.055343806743621826,
      -0.017261527478694916,
      0.023191004991531372,
      0.06394153833389282,
      0.026363087818026543,
      0.01883474551141262,
      -0.02034054696559906,
      0.02499121055006981,
      -0.028361814096570015,
      -0.013309872709214687,
      -0.03357282653450966,
      -0.01484477985650301,
      0.052566323429346085,
      0.014966782182455063,
      0.024856872856616974,
      0.007030611392110586,
      0.024010397493839264,
      0.04728635028004646,
      -0.013999550603330135,
      0.003387468634173274,
      0.0022097700275480747,
      -0.00742555595934391,
      -0.0007026169914752245,
      0.03957159444689751,
      -0.07354559749364853,
      0.041787710040807724,
      0.01551454421132803,
      -0.05551189184188843,
      0.06622854620218277,
      0.09196741133928299,
      0.0025939110200852156,
      -0.01906491443514824,
      -0.012306543998420238,
      0.014790289103984833,
      0.0004816848668269813,
      8.405161501255588e-33,
      0.09712504595518112,
      0.027933243662118912,
      -0.05180616304278374,
      -0.018664421513676643,
      -0.023398105055093765,
      0.005663153249770403,
      0.028138816356658936,
      0.06146703660488129,
      -0.084074005484581,
      0.12919291853904724,
      0.028998486697673798,
      0.016653843224048615,
      0.012961647473275661,
      -0.07125725597143173,
      0.0010673507349565625,
      0.02717689611017704,
      -0.03006640449166298,
      -0.0015526415081694722,
      0.0625847652554512,
      0.05957096815109253,
      0.06088348105549812,
      -0.023595701903104782,
      0.030052045360207558,
      -0.09481464326381683,
      0.013625551015138626,
      0.11498599499464035,
      0.014116261154413223,
      0.05337003245949745,
      0.05239059403538704,
      0.05752459540963173,
      0.041485145688056946,
      0.010555122047662735,
      0.06165570020675659,
      0.008157667703926563,
      0.08400833606719971,
      0.025770088657736778,
      -0.09836932271718979,
      -0.03195742517709732,
      -0.05968620628118515,
      -0.03487619757652283,
      0.07324530929327011,
      0.00968941580504179,
      -0.03890027105808258,
      0.020570717751979828,
      -0.022291414439678192,
      -0.057192571461200714,
      0.016121957451105118,
      0.05089273303747177,
      0.10123340040445328,
      -0.01601298712193966,
      -0.10849817097187042,
      0.020768307149410248,
      -0.06113671511411667,
      -0.04307078570127487,
      0.028685055673122406,
      -0.11021190136671066,
      -0.053542546927928925,
      0.08970881253480911,
      -0.08194313198328018,
      0.0051355003379285336,
      -0.03393961489200592,
      -0.02990303561091423,
      -0.0017596782417967916,
      -0.02648373506963253,
      -0.06034451350569725,
      0.04859309270977974,
      -0.07211944460868835,
      -0.008455098606646061,
      0.00048286118544638157,
      -0.029890503734350204,
      -0.014694788493216038,
      0.02473808266222477,
      0.01360417902469635,
      0.029346397146582603,
      -0.06365801393985748,
      -0.07338302582502365,
      0.06689584255218506,
      0.1114133894443512,
      0.026549771428108215,
      -0.06055103987455368,
      -0.02849547192454338,
      -0.04850202798843384,
      0.02724948339164257,
      0.14689211547374725,
      -0.009030509740114212,
      -0.016576169058680534,
      -0.01433663908392191,
      -0.011563457548618317,
      -0.05245084688067436,
      -0.02485649846494198,
      0.025103246793150902,
      -0.060078609734773636,
      0.05161415785551071,
      -0.05870801955461502,
      -0.05136127024888992,
      -9.975787257847249e-33,
      -0.07302283495664597,
      0.010308696888387203,
      -0.06540735810995102,
      0.019308045506477356,
      -0.04892325773835182,
      -0.005766925401985645,
      -0.016841042786836624,
      0.027295870706439018,
      0.009401556104421616,
      -0.04493967816233635,
      -0.012706337496638298,
      0.006943041924387217,
      0.012847346253693104,
      -0.04040097817778587,
      0.028443865478038788,
      -0.05297340080142021,
      -0.05099143832921982,
      -0.10155227035284042,
      -0.014561367221176624,
      0.003928355872631073,
      -0.04011096432805061,
      0.07690131664276123,
      0.041417282074689865,
      0.09392940998077393,
      -0.024600684642791748,
      -0.010999303311109543,
      0.0013724920572713017,
      -0.04242785647511482,
      -0.0608680434525013,
      0.002238647313788533,
      0.002432542387396097,
      0.040829237550497055,
      -0.0765305683016777,
      0.014171712100505829,
      -0.06994660198688507,
      -0.14559081196784973,
      0.023728085681796074,
      0.056032225489616394,
      0.007154565770179033,
      0.1245899572968483,
      0.05915675312280655,
      -0.013894731178879738,
      0.02416679821908474,
      -0.0675743892788887,
      -0.04168710485100746,
      0.009331597946584225,
      0.008384965360164642,
      0.012365253642201424,
      0.04704030603170395,
      0.0013311592629179358,
      -0.011141136288642883,
      -0.028180278837680817,
      -0.03767623379826546,
      0.02972419187426567,
      -0.07554474472999573,
      0.07244816422462463,
      0.020938126370310783,
      0.010269871912896633,
      0.061998479068279266,
      0.03567846119403839,
      0.04303372651338577,
      -0.0011157025583088398,
      0.010951783508062363,
      0.02178915962576866,
      0.03189782053232193,
      0.035968516021966934,
      -0.07190734148025513,
      -0.06051205098628998,
      0.12395265698432922,
      0.021815193817019463,
      0.10534285753965378,
      -0.08310063928365707,
      -0.04951900243759155,
      -0.03810149058699608,
      0.0011454088380560279,
      0.0018964038463309407,
      0.03211623802781105,
      -0.10703818500041962,
      -0.033388860523700714,
      0.045571669936180115,
      0.014597147703170776,
      0.02981535531580448,
      -0.04000767692923546,
      -0.04248413071036339,
      -0.019865624606609344,
      -0.10746295750141144,
      0.030092131346464157,
      -0.048541828989982605,
      -0.03214908391237259,
      0.002529690507799387,
      -0.06621883809566498,
      -0.01678808219730854,
      -0.04633726552128792,
      0.04151154309511185,
      -0.016377462074160576,
      -6.837914412471946e-08,
      -0.01031797006726265,
      0.02724607102572918,
      -0.0006801242125220597,
      -0.024604476988315582,
      0.06224494427442551,
      0.021552270278334618,
      0.006713897921144962,
      0.005347811616957188,
      -0.06813663989305496,
      -0.00498935766518116,
      0.04818679764866829,
      0.016024746000766754,
      -0.03122328221797943,
      -0.08436640352010727,
      0.01412369403988123,
      -0.046062927693128586,
      0.010620634071528912,
      0.006972499657422304,
      -0.13076911866664886,
      -0.05972431227564812,
      -0.07840421050786972,
      0.0072762202471494675,
      -0.017257383093237877,
      -0.028353171423077583,
      -0.03307291120290756,
      -0.007922188378870487,
      0.063932865858078,
      0.020817331969738007,
      0.06320445984601974,
      -0.0018787793815135956,
      -0.005470503121614456,
      -0.011483737267553806,
      0.05199966952204704,
      -0.03784635663032532,
      -0.12493753433227539,
      0.12645305693149567,
      -0.00940659549087286,
      -0.020200492814183235,
      0.06752331554889679,
      0.07587472349405289,
      0.032327551394701004,
      0.03391937538981438,
      -0.05232904478907585,
      0.07445050030946732,
      -0.03417649120092392,
      -0.021667921915650368,
      -0.03876897692680359,
      -0.031563837081193924,
      0.07039845734834671,
      -0.009029400534927845,
      -0.0232706181704998,
      -0.04589036479592323,
      0.025459473952651024,
      0.013725086115300655,
      -0.015887701883912086,
      0.0279918871819973,
      -0.04018307849764824,
      -0.029794510453939438,
      0.07060179859399796,
      0.024193502962589264,
      0.030358590185642242,
      -0.07468623667955399,
      0.019788874313235283,
      -0.04361400380730629
    ],
    [
      -0.18743856251239777,
      0.032025158405303955,
      -0.06070444732904434,
      0.01474831998348236,
      0.04924823343753815,
      0.030821291729807854,
      0.1299254596233368,
      0.04277578368782997,
      0.05269886180758476,
      0.08185604214668274,
      0.043288446962833405,
      -0.06426955759525299,
      0.018100900575518608,
      0.06143806129693985,
      0.00549997016787529,
      0.033102281391620636,
      0.023579753935337067,
      -0.025474825873970985,
      0.009580240584909916,
      -0.038462791591882706,
      0.07420063763856888,
      -0.05145005136728287,
      -0.05700035020709038,
      0.029731865972280502,
      0.04463125765323639,
      -0.05645434558391571,
      -0.008405709639191628,
      0.0023006838746368885,
      0.018809400498867035,
      -0.023057853803038597,
      0.03640487790107727,
      -0.057826533913612366,
      0.01006859540939331,
      -0.05165490508079529,
      -0.06669789552688599,
      0.0576963908970356,
      -0.15498775243759155,
      -0.05090167000889778,
      -0.09226337820291519,
      -0.028770772740244865,
      -0.0008216180140152574,
      -0.045691631734371185,
      -0.036266863346099854,
      -0.04415799304842949,
      0.02312186360359192,
      0.022683605551719666,
      0.015039036050438881,
      0.10315387696027756,
      -0.052380818873643875,
      0.011585242114961147,
      0.06005539745092392,
      0.06895066052675247,
      0.038436178117990494,
      0.07222459465265274,
      -0.041294269263744354,
      0.017551472410559654,
      0.08539808541536331,
      -0.03995906561613083,
      -0.03664916753768921,
      -0.007949704304337502,
      0.03211616352200508,
      -0.015678469091653824,
      0.0031057840678840876,
      -0.04362988844513893,
      -0.012836595997214317,
      -0.009168111719191074,
      0.0037822199519723654,
      0.05029672756791115,
      -0.008524706587195396,
      -0.08448594808578491,
      0.12632788717746735,
      -0.04274047538638115,
      -0.02237677201628685,
      -0.06179223582148552,
      0.07023299485445023,
      0.021836500614881516,
      -0.0749584436416626,
      0.003825398162007332,
      0.009406653232872486,
      -0.0767902135848999,
      -0.03544082120060921,
      0.05933139845728874,
      0.07285609096288681,
      -0.04275151714682579,
      0.08015244454145432,
      -0.034686729311943054,
      -0.02493702992796898,
      -0.009273400530219078,
      0.06865229457616806,
      0.09770773351192474,
      0.05894532427191734,
      0.005564017221331596,
      -0.05968918651342392,
      0.00903989840298891,
      -0.05831416696310043,
      -0.026191985234618187,
      -0.029557544738054276,
      -0.009706180542707443,
      -0.04479844495654106,
      0.035078514367341995,
      0.0009617679752409458,
      0.04769062250852585,
      -0.10313145071268082,
      0.01043739728629589,
      0.040755320340394974,
      -0.022511757910251617,
      0.017153048887848854,
      -0.0027678199112415314,
      0.02712489850819111,
      -0.017401525750756264,
      -0.025604460388422012,
      0.01091010496020317,
      0.03236248344182968,
      0.026230232790112495,
      -0.03238311782479286,
      0.05364745110273361,
      -0.05466007813811302,
      0.019341133534908295,
      0.022593623027205467,
      -0.1459023356437683,
      0.020922821015119553,
      0.029370443895459175,
      -0.009595834650099277,
      -0.047410137951374054,
      0.03776896372437477,
      0.024656806141138077,
      -0.020675666630268097,
      5.358927033159156e-33,
      0.03216348588466644,
      0.06053027883172035,
      -0.046465832740068436,
      -0.0061652157455682755,
      -0.03686891496181488,
      -0.00513490941375494,
      0.007533916737884283,
      0.05891628935933113,
      -0.04072163626551628,
      0.015404228121042252,
      0.024988848716020584,
      0.1270601451396942,
      0.06958504766225815,
      0.07493899017572403,
      -0.01218151394277811,
      -0.07257476449012756,
      -0.03205081447958946,
      -0.028823139145970345,
      0.105890654027462,
      -0.023572398349642754,
      0.07600725442171097,
      0.037860430777072906,
      0.05082373693585396,
      -0.033897604793310165,
      0.014412359334528446,
      3.480933446553536e-05,
      -0.01880795881152153,
      0.010704378597438335,
      -0.09668648988008499,
      0.026316633448004723,
      0.07156741619110107,
      -0.056190140545368195,
      0.04838094860315323,
      0.0006306033465079963,
      0.021800102666020393,
      0.046414658427238464,
      -0.018396742641925812,
      -0.04598461091518402,
      -0.078243188560009,
      -0.0570274218916893,
      0.023973820731043816,
      0.028496503829956055,
      0.001315753092058003,
      0.00942959077656269,
      -0.09631688892841339,
      -0.09882665425539017,
      0.043691251426935196,
      0.017681485041975975,
      0.015850864350795746,
      0.08051072806119919,
      0.0541013740003109,
      -0.02726341225206852,
      0.01646655611693859,
      -0.05369282141327858,
      -0.005849355366080999,
      -0.034185729920864105,
      -0.08147677034139633,
      -0.01937670260667801,
      0.07878335565328598,
      -0.04219116270542145,
      0.042653776705265045,
      -0.02597837895154953,
      -0.07083548605442047,
      0.018039124086499214,
      -0.10021845996379852,
      0.09240366518497467,
      0.015194040723145008,
      -0.07156937569379807,
      -0.0013491965364664793,
      0.019945142790675163,
      0.02037489041686058,
      0.0464230440557003,
      0.023289062082767487,
      -0.032771430909633636,
      -0.007467546034604311,
      -0.03813868388533592,
      0.010756900534033775,
      -0.029037142172455788,
      -0.06264591962099075,
      -0.01851733773946762,
      -0.04473969340324402,
      -0.031042521819472313,
      0.05958325415849686,
      0.06930222362279892,
      -0.0007878489559516311,
      0.01861356385052204,
      -0.05244368687272072,
      -0.09103888273239136,
      -0.0068834018893539906,
      -0.02797957882285118,
      0.04111463576555252,
      -0.026450470089912415,
      0.0384894534945488,
      0.08737195283174515,
      -0.02608218975365162,
      -5.707897143113722e-33,
      0.010736808180809021,
      -0.019105590879917145,
      -0.003540513338521123,
      -0.06370383501052856,
      0.06564716249704361,
      -0.03346693143248558,
      -0.058266688138246536,
      0.004208531230688095,
      -0.05575904622673988,
      -0.059902310371398926,
      -0.09720936417579651,
      0.0113532030954957,
      0.019038669764995575,
      0.1008082926273346,
      0.029490329325199127,
      -0.08710996061563492,
      -0.05736832320690155,
      0.009396805427968502,
      -0.03474858030676842,
      -0.05184929072856903,
      0.023007521405816078,
      0.07863559573888779,
      0.005040834192186594,
      0.050096724182367325,
      0.010838779620826244,
      0.013079103082418442,
      0.014983629807829857,
      0.0173952616751194,
      0.01784549653530121,
      0.02524421364068985,
      0.04550939053297043,
      -0.07075931876897812,
      -0.11571666598320007,
      -0.05898367986083031,
      0.009377025067806244,
      0.0006040184525772929,
      0.003464949084445834,
      0.05761915445327759,
      -0.09284290671348572,
      0.06054740399122238,
      0.06083615869283676,
      -0.06712310016155243,
      0.011556107550859451,
      0.021716836839914322,
      -0.025661809369921684,
      0.029247038066387177,
      -0.020234238356351852,
      -0.04464064911007881,
      0.04058888927102089,
      -0.02014530822634697,
      0.03125502169132233,
      -0.04616788402199745,
      0.02782556042075157,
      0.12424816936254501,
      -0.034567009657621384,
      -0.03249625116586685,
      0.02468644641339779,
      -0.04014875739812851,
      0.08987344801425934,
      -0.051502689719200134,
      0.00918809324502945,
      0.019933238625526428,
      0.03843872994184494,
      0.08367226272821426,
      0.007489342708140612,
      -0.05091330409049988,
      0.0169338621199131,
      -0.008559194393455982,
      0.058313120156526566,
      0.06327524036169052,
      0.11269862949848175,
      0.029083354398608208,
      -0.015802642330527306,
      -0.06389553099870682,
      0.03162671625614166,
      0.08829186856746674,
      -0.023623276501893997,
      0.0015468319179490209,
      -0.042785827070474625,
      -0.042733948677778244,
      -0.006723782978951931,
      -0.03802084922790527,
      0.08929871022701263,
      -0.04753518104553223,
      -0.05934346094727516,
      -0.05730276182293892,
      0.018194621428847313,
      0.023141711950302124,
      -0.031501565128564835,
      0.1024046391248703,
      0.013421472162008286,
      0.027066869661211967,
      0.04356438294053078,
      0.02826160565018654,
      0.0002922565909102559,
      -6.081332770691006e-08,
      -0.015943434089422226,
      0.04922856390476227,
      0.014548719860613346,
      -0.05667497590184212,
      -0.0504169799387455,
      -0.04901069775223732,
      0.06885214895009995,
      -0.028808003291487694,
      -0.07319850474596024,
      -0.022331079468131065,
      0.08551595360040665,
      0.0275675468146801,
      -0.026124482974410057,
      -0.1494797021150589,
      0.013300413265824318,
      0.0008058686507865787,
      -0.017032571136951447,
      0.05296920984983444,
      -0.04544997960329056,
      -0.03196465224027634,
      0.01764516718685627,
      -0.026559943333268166,
      -0.03890678659081459,
      -0.08835180103778839,
      -0.011368640698492527,
      -0.022880084812641144,
      0.04881156608462334,
      -0.011148166842758656,
      0.01071262452751398,
      0.02718890830874443,
      -0.03145265206694603,
      0.03421645611524582,
      0.09030048549175262,
      0.017036885023117065,
      0.06498021632432938,
      0.08773406594991684,
      0.0004292420344427228,
      -0.03025626577436924,
      -0.010097873397171497,
      -0.04557621479034424,
      -0.07291895896196365,
      0.0929243192076683,
      -0.005030142609030008,
      0.0011931945336982608,
      0.010991880670189857,
      0.015926502645015717,
      -0.06979335844516754,
      -0.048995982855558395,
      0.03704110160470009,
      -0.030493056401610374,
      -0.018596945330500603,
      -0.0796782448887825,
      -0.026378095149993896,
      0.07161398231983185,
      -0.008574176579713821,
      -0.014327560551464558,
      -0.008671648800373077,
      -0.07176224887371063,
      0.09912792593240738,
      -0.0267146248370409,
      0.09278540313243866,
      -0.007580821868032217,
      0.027568569406867027,
      0.016029365360736847
    ],
    [
      -0.1271151602268219,
      0.0012574619613587856,
      -0.07642898708581924,
      0.0013681011041626334,
      0.0064192647114396095,
      0.026660215109586716,
      -0.011964465491473675,
      0.07552672177553177,
      0.013225520960986614,
      0.0456106960773468,
      0.010890222154557705,
      0.0009500551386736333,
      0.013380685821175575,
      0.03112162835896015,
      0.01684458553791046,
      0.013450197875499725,
      0.014185826294124126,
      -0.10837481915950775,
      0.014923453330993652,
      -0.08233630657196045,
      0.06753099709749222,
      -0.05656696483492851,
      -0.03741545230150223,
      -0.012669570744037628,
      0.0015949285589158535,
      0.010103963315486908,
      -0.004973039962351322,
      -0.021633923053741455,
      0.006864135153591633,
      0.012052342295646667,
      0.03366320952773094,
      -0.05694761127233505,
      0.009752503596246243,
      -0.023151155561208725,
      -0.0659504309296608,
      0.05406830087304115,
      0.03249368816614151,
      -0.09526992589235306,
      -0.05379685387015343,
      -0.04085196182131767,
      -0.0454239584505558,
      -0.09065885096788406,
      -0.057005271315574646,
      -0.02677958644926548,
      0.07615566998720169,
      -0.028827877715229988,
      0.018659358844161034,
      0.016315139830112457,
      -0.12683822214603424,
      -0.03941828012466431,
      0.033609285950660706,
      0.08066882193088531,
      0.0024367240257561207,
      0.035676609724760056,
      0.1578301042318344,
      0.04945593699812889,
      0.03364294022321701,
      0.030587054789066315,
      0.0008671840187162161,
      -0.0034817287232726812,
      -0.04433431103825569,
      -0.03194328770041466,
      -0.10594785958528519,
      0.0076860650442540646,
      -0.0066827526316046715,
      0.001295209163799882,
      0.04726151004433632,
      -0.041666656732559204,
      0.07589105516672134,
      -0.02999148704111576,
      -0.05095928907394409,
      -0.0033757195342332125,
      0.017167845740914345,
      -0.02502635307610035,
      0.06512174010276794,
      -0.0174458809196949,
      -0.0316278412938118,
      0.03229912742972374,
      -0.003424000693485141,
      -0.17830312252044678,
      -0.01903422549366951,
      0.013355933129787445,
      0.005273814313113689,
      0.048220377415418625,
      0.04795549064874649,
      -0.0338718481361866,
      -0.03091123327612877,
      0.022390859201550484,
      0.12043694406747818,
      0.03671498969197273,
      -0.004413798451423645,
      0.04739056155085564,
      -0.09995369613170624,
      -0.012105390429496765,
      -0.03794548660516739,
      0.01567578874528408,
      0.006176459603011608,
      0.030117180198431015,
      -0.011045143939554691,
      0.09652556478977203,
      -0.05562390014529228,
      -0.0051139285787940025,
      -0.04011893644928932,
      0.04853165149688721,
      0.07773515582084656,
      -0.04414833337068558,
      -0.022759905084967613,
      -0.006055111531168222,
      -0.005318619776517153,
      0.012833286076784134,
      0.010399672202765942,
      0.008211561478674412,
      0.02804846130311489,
      -0.04189185053110123,
      -0.012207848951220512,
      0.020315121859312057,
      -0.020848365500569344,
      0.01015490759164095,
      0.07026500254869461,
      0.0306730754673481,
      0.08700726181268692,
      0.0027387638110667467,
      0.0325164757668972,
      -0.014029784128069878,
      0.004831325728446245,
      0.07073159515857697,
      0.06108779460191727,
      1.2554297299197293e-32,
      -0.012761690653860569,
      -0.0024017756804823875,
      -0.08005113899707794,
      -0.02436438947916031,
      -0.026036124676465988,
      0.023792972788214684,
      0.08153431117534637,
      0.023871615529060364,
      -0.09454212337732315,
      0.012403623200953007,
      0.047549184411764145,
      0.09613930433988571,
      0.01972181908786297,
      0.06229773536324501,
      0.041551876813173294,
      -0.06724068522453308,
      -0.004083363804966211,
      -0.029052915051579475,
      0.07258792966604233,
      -0.05656800419092178,
      0.0829860121011734,
      -0.052957385778427124,
      0.002143962075933814,
      -0.0356367751955986,
      0.09905233234167099,
      0.03315200284123421,
      -0.008984792977571487,
      -0.005039419047534466,
      -0.07622402906417847,
      0.024287141859531403,
      0.07206939905881882,
      -0.016622481867671013,
      -0.03786230832338333,
      -0.007787318434566259,
      0.04752710089087486,
      0.01887795701622963,
      0.04208913445472717,
      -0.029016882181167603,
      -0.06666713207960129,
      -0.11936645209789276,
      0.0003481335879769176,
      0.02542051300406456,
      -0.12215413898229599,
      0.03000222146511078,
      -0.02702212892472744,
      -0.060823649168014526,
      -0.05397859215736389,
      0.016890766099095345,
      0.09537103027105331,
      -0.013924309983849525,
      0.04211480915546417,
      0.03347461670637131,
      0.08266186714172363,
      -0.1009422019124031,
      -0.008925344794988632,
      -0.01376222725957632,
      -0.014817613177001476,
      -0.0490725003182888,
      -0.057342782616615295,
      0.03472889959812164,
      0.05435013398528099,
      -0.055383238941431046,
      -0.0084827346727252,
      -0.04138108342885971,
      -0.04724390059709549,
      0.060621634125709534,
      -0.029644545167684555,
      -0.016066983342170715,
      0.043978478759527206,
      0.03411117196083069,
      -0.04234345629811287,
      0.03612766042351723,
      -0.0035203436855226755,
      -0.004669235087931156,
      -0.006818755995482206,
      0.0005470409523695707,
      0.1208505630493164,
      0.0312664769589901,
      -0.012673567980527878,
      -0.10682114958763123,
      -0.03645821288228035,
      -0.0835973247885704,
      0.019395437091588974,
      0.07670658081769943,
      0.04453888535499573,
      -0.06931625306606293,
      -0.04636376351118088,
      -0.053835127502679825,
      -0.028846178203821182,
      -0.014990010298788548,
      -0.03260685130953789,
      -0.01529338862746954,
      0.08615108579397202,
      0.07695800065994263,
      -0.050713375210762024,
      -1.3820682342593098e-32,
      0.02833658456802368,
      0.008097086101770401,
      -0.04264286905527115,
      0.023963486775755882,
      0.0050475867465138435,
      -0.02138610929250717,
      -0.07560475170612335,
      0.00565473735332489,
      -0.0096603287383914,
      0.024458980187773705,
      0.03361989185214043,
      -0.02517770417034626,
      0.0635204166173935,
      -0.03614398464560509,
      0.02294909954071045,
      -0.06131244823336601,
      -0.03704779967665672,
      -0.05050988122820854,
      -0.00030142502509988844,
      0.005193325225263834,
      -0.0011786173563450575,
      0.09507636725902557,
      -0.041851695626974106,
      0.04713013395667076,
      0.011411546729505062,
      -0.01155155710875988,
      0.036570772528648376,
      -0.04529440775513649,
      -0.07966137677431107,
      -0.019091274589300156,
      0.027248723432421684,
      -0.07517402619123459,
      -0.0781799927353859,
      -0.02408738248050213,
      0.012528741732239723,
      0.05064326524734497,
      0.0035699959844350815,
      -0.03403354436159134,
      -0.02871026284992695,
      0.11742222309112549,
      0.08210703730583191,
      -0.010327841155230999,
      -0.03526351973414421,
      0.03717136010527611,
      -0.04250558465719223,
      0.07367593050003052,
      -0.08626756072044373,
      0.047729622572660446,
      -0.04182925447821617,
      -0.06592538952827454,
      0.051796525716781616,
      -0.013042694889008999,
      0.004581167828291655,
      0.005099182948470116,
      -0.06489236652851105,
      0.007299679331481457,
      0.048800211399793625,
      -0.017581826075911522,
      0.0750570297241211,
      0.01987927220761776,
      0.04142256826162338,
      -0.07914889603853226,
      -0.01825951226055622,
      0.05312163382768631,
      0.04852774366736412,
      -0.05505039542913437,
      -0.05257472023367882,
      -0.029491811990737915,
      0.07718992233276367,
      0.06017940863966942,
      0.11774677038192749,
      0.007995223626494408,
      -0.05222179368138313,
      -0.021655431017279625,
      0.027034366503357887,
      0.0037812262307852507,
      -0.04348662868142128,
      -0.045169610530138016,
      -0.03328999504446983,
      0.03301950544118881,
      -0.03438926860690117,
      0.06196161359548569,
      0.033163655549287796,
      -0.04427257180213928,
      -0.0716261938214302,
      -0.029569365084171295,
      0.036971595138311386,
      0.04108543321490288,
      -0.018565073609352112,
      -0.03514887019991875,
      -0.03067173808813095,
      0.01489804033190012,
      -0.03845002502202988,
      0.0843120887875557,
      -0.07595444470643997,
      -7.44817540976328e-08,
      -0.020128170028328896,
      -0.043718624860048294,
      -0.017949892207980156,
      0.02128039300441742,
      0.012807386927306652,
      0.049859996885061264,
      0.0037830080837011337,
      -0.04173523932695389,
      -0.022009942680597305,
      -0.09331467002630234,
      0.10770253837108612,
      0.05477486178278923,
      -0.0016497806645929813,
      -0.12950529158115387,
      0.04918534308671951,
      -0.044932637363672256,
      0.008042908273637295,
      0.021990256384015083,
      -0.10864776372909546,
      -0.033505555242300034,
      0.015481223352253437,
      0.0071196043863892555,
      -0.04530688747763634,
      -0.12411662936210632,
      -0.012751640751957893,
      -0.07114856690168381,
      0.07429119199514389,
      0.12877710163593292,
      0.03760700672864914,
      0.027314024046063423,
      -0.039603278040885925,
      0.018053442239761353,
      0.02371452935039997,
      0.003065834054723382,
      -0.026605525985360146,
      0.08536310493946075,
      -0.00677304295822978,
      -0.000778396672103554,
      0.10139714181423187,
      0.02200343832373619,
      -0.014277125708758831,
      0.01677693799138069,
      -0.0735509917140007,
      0.026603756472468376,
      -0.09684531390666962,
      0.05741225928068161,
      -0.04079493135213852,
      0.047054629772901535,
      0.05637958273291588,
      -0.044545724987983704,
      -0.04198786988854408,
      -0.04478374123573303,
      -0.02803798019886017,
      0.011187723837792873,
      0.03337385505437851,
      0.014597776345908642,
      -0.00475889490917325,
      -0.11018015444278717,
      0.07963751256465912,
      -0.013664494268596172,
      -0.010228072293102741,
      0.038063351064920425,
      0.025731343775987625,
      0.01385230477899313
    ],
    [
      -0.016957741230726242,
      0.013775760307908058,
      -0.10165837407112122,
      0.023971613496541977,
      0.0768093541264534,
      -0.009237960912287235,
      0.040835537016391754,
      0.029216935858130455,
      -0.013198522850871086,
      0.02448229305446148,
      0.05844053998589516,
      -0.042315926402807236,
      0.024537723511457443,
      0.001996094360947609,
      0.03567299619317055,
      -0.021077411249279976,
      -0.045304249972105026,
      0.012296652421355247,
      -0.007322684861719608,
      0.06711681932210922,
      -0.011447600089013577,
      -0.1146579384803772,
      0.11939828842878342,
      -0.08456795662641525,
      -0.0077513218857347965,
      0.007722759619355202,
      0.046563856303691864,
      0.033908311277627945,
      -0.014454946853220463,
      -0.026079783216118813,
      0.0225130133330822,
      -0.008991754613816738,
      -0.06664089858531952,
      -0.07442981749773026,
      0.04808135703206062,
      0.035893093794584274,
      -0.11891241371631622,
      -0.10784482210874557,
      -0.04525143653154373,
      -0.01071437168866396,
      -0.005117509048432112,
      -0.00233648344874382,
      -0.08353683352470398,
      -0.08391063660383224,
      -0.12462052702903748,
      -0.057150065898895264,
      0.03233366087079048,
      -0.03898279741406441,
      -0.005991046316921711,
      -0.0005588215426541865,
      -0.007170417811721563,
      0.0419909805059433,
      -0.017568985000252724,
      -0.08122803270816803,
      -0.1049385592341423,
      0.04182221740484238,
      0.007580653298646212,
      0.008220365270972252,
      -0.019769402220845222,
      0.042459189891815186,
      -0.04025835916399956,
      0.030415335670113564,
      -0.007503040134906769,
      0.01168795581907034,
      -0.005127786658704281,
      0.0650007501244545,
      0.06623703986406326,
      0.08993946015834808,
      -0.02732899785041809,
      -0.01946866512298584,
      -0.037814781069755554,
      -0.04126186668872833,
      0.024969039484858513,
      0.02657434158027172,
      0.022644218057394028,
      -0.11205046623945236,
      -0.0013967156410217285,
      -0.0033164620399475098,
      -0.013943127356469631,
      -0.15657688677310944,
      -0.042786456644535065,
      -0.1103619635105133,
      0.060136932879686356,
      0.07442447543144226,
      0.09964094310998917,
      0.09270499646663666,
      0.0773693099617958,
      0.038092635571956635,
      0.10463014245033264,
      0.014371751807630062,
      -0.006914969999343157,
      0.06425867229700089,
      -0.03613618016242981,
      0.11524403095245361,
      0.022732146084308624,
      0.0003306955622974783,
      0.034146860241889954,
      0.02771192602813244,
      -0.06233372166752815,
      0.0955965667963028,
      0.0018346590222790837,
      -0.023119091987609863,
      0.06689933687448502,
      0.09331987798213959,
      0.06577147543430328,
      -0.0026981921400874853,
      0.04869939014315605,
      0.011490528471767902,
      0.022361578419804573,
      0.04248032718896866,
      0.09308183938264847,
      0.034106142818927765,
      0.0011144733289256692,
      -0.0636746808886528,
      -0.02041725255548954,
      -0.014670852571725845,
      -0.00895471591502428,
      -0.008449779823422432,
      0.09744640439748764,
      0.028388313949108124,
      0.10042650997638702,
      -0.007418982684612274,
      -0.0499526672065258,
      -0.005436521489173174,
      -0.06505957245826721,
      -0.012377061881124973,
      0.034335907548666,
      4.979670311255653e-33,
      -0.0036694249138236046,
      -0.07869448512792587,
      -0.018654679879546165,
      -0.0008677661535330117,
      0.09237755835056305,
      0.05835988000035286,
      0.07906973361968994,
      0.060631152242422104,
      -0.049670666456222534,
      0.017897283658385277,
      -0.06635747849941254,
      -0.058686234056949615,
      -0.04056575894355774,
      0.019639920443296432,
      -0.033133864402770996,
      -0.1019965410232544,
      -0.02561207301914692,
      -0.010102305561304092,
      0.10222126543521881,
      0.06183938682079315,
      0.01879582740366459,
      -0.059071917086839676,
      0.06204264611005783,
      -0.02014198526740074,
      -0.03248211368918419,
      0.06900369375944138,
      0.05291284993290901,
      0.06564124673604965,
      -0.002383704297244549,
      0.0013764312025159597,
      0.08646974712610245,
      0.025977736338973045,
      0.02985602803528309,
      0.0003416967228986323,
      -0.03482843562960625,
      -0.027438146993517876,
      -0.0825304239988327,
      -0.005110458470880985,
      -0.0625009536743164,
      -0.02284403145313263,
      0.09925074130296707,
      -0.05564746633172035,
      0.01714429073035717,
      0.009152707643806934,
      -0.04757660999894142,
      -0.055638764053583145,
      0.06956500560045242,
      0.07045496255159378,
      0.050370629876852036,
      -0.03426070883870125,
      -0.05948968231678009,
      0.02955777943134308,
      -0.06294860690832138,
      -0.013211614452302456,
      -0.03291599452495575,
      -0.0754651129245758,
      -0.1053992360830307,
      0.008087988011538982,
      0.0160130113363266,
      -0.06351082026958466,
      -0.07658397406339645,
      0.052879732102155685,
      0.018902702257037163,
      -0.006674777716398239,
      -0.019197486340999603,
      0.05891575664281845,
      -0.038076650351285934,
      0.0061171757988631725,
      -0.06722396612167358,
      -0.08635758608579636,
      -0.03066396526992321,
      -0.02332925982773304,
      0.08947472274303436,
      0.0018313800683245063,
      0.006099808029830456,
      0.036610618233680725,
      0.029490778222680092,
      0.034205373376607895,
      0.02579105645418167,
      -0.06472722440958023,
      -0.0047645349986851215,
      0.036588672548532486,
      -0.015998324379324913,
      -0.03198026493191719,
      -0.055010274052619934,
      0.02811681665480137,
      0.021937835961580276,
      -0.010526585392653942,
      0.03032139502465725,
      0.06401021778583527,
      0.04553583636879921,
      -0.03480624780058861,
      -0.017786340788006783,
      -0.07965137809515,
      -0.08796387165784836,
      -5.777451878535846e-33,
      -0.036677036434412,
      0.009558115154504776,
      -0.03447794169187546,
      0.011325989849865437,
      0.03422719985246658,
      0.024616442620754242,
      0.022357089444994926,
      0.03798796609044075,
      0.060279056429862976,
      0.03208956494927406,
      -0.042786892503499985,
      0.048802874982357025,
      0.019115546718239784,
      -0.1075267344713211,
      0.02937845140695572,
      0.07751139998435974,
      -0.02657848782837391,
      0.04797588661313057,
      0.05828262120485306,
      -0.04386897385120392,
      -0.00011313534923829138,
      0.09311719238758087,
      -0.019772306084632874,
      0.05171999707818031,
      0.008538806810975075,
      -0.01855512335896492,
      0.06021714210510254,
      0.015903297811746597,
      0.018711144104599953,
      0.01899810880422592,
      -0.007526366971433163,
      0.03199952095746994,
      -0.06197701767086983,
      0.06485136598348618,
      0.020227158442139626,
      -0.013641751371324062,
      0.022524917498230934,
      -0.00795354787260294,
      -0.030084973201155663,
      0.04309689253568649,
      -0.041083041578531265,
      -0.02764005772769451,
      -0.03540479764342308,
      0.023073764517903328,
      0.014614514075219631,
      0.04303188621997833,
      0.05224540829658508,
      -0.007330295629799366,
      -0.004509400576353073,
      0.030795108526945114,
      -0.010695580393075943,
      -0.1148264929652214,
      -0.0257266853004694,
      -0.06288214772939682,
      -0.01771206222474575,
      0.01823454350233078,
      -0.015357419848442078,
      0.037196338176727295,
      -0.042459480464458466,
      -0.011729377321898937,
      -0.0008132849470712245,
      -0.0410892516374588,
      0.056338392198085785,
      -0.03885066881775856,
      0.028965553268790245,
      0.05819161236286163,
      -0.07777608186006546,
      0.02661994844675064,
      0.08019053190946579,
      0.042095575481653214,
      -0.013627072796225548,
      0.009077365510165691,
      0.023952700197696686,
      -0.12566925585269928,
      0.05317092314362526,
      -0.011869559064507484,
      0.07134335488080978,
      -0.010932981967926025,
      -0.033430859446525574,
      -0.047971341758966446,
      0.08938866853713989,
      0.00401085801422596,
      0.013400878757238388,
      -0.13506242632865906,
      -0.04360257089138031,
      -0.012452575378119946,
      0.0059449453838169575,
      0.07813217490911484,
      -0.018676986917853355,
      0.004495987668633461,
      -0.02542191743850708,
      0.008108366280794144,
      0.051811035722494125,
      0.04070661589503288,
      0.0834147185087204,
      -4.737774972340958e-08,
      -0.02034524828195572,
      0.035852689296007156,
      -0.01350137498229742,
      -0.018107807263731956,
      0.04360862076282501,
      -0.053050752729177475,
      0.026215935125947,
      -0.035924188792705536,
      -0.02770036645233631,
      -0.10543090105056763,
      0.049429863691329956,
      0.011297828517854214,
      0.01757575199007988,
      -0.01911623403429985,
      -0.03654733672738075,
      0.011479418724775314,
      -0.11351313441991806,
      0.10902057588100433,
      -0.07060853391885757,
      -0.035819146782159805,
      -0.012532890774309635,
      0.016230205073952675,
      0.0556708462536335,
      0.02782493643462658,
      0.056618496775627136,
      0.01590600423514843,
      -0.05542542040348053,
      -0.036745402961969376,
      -0.04174419865012169,
      -0.01156979613006115,
      -0.03911442682147026,
      -0.04224519804120064,
      0.05145571380853653,
      -0.07408720254898071,
      0.0031325388699769974,
      0.030242040753364563,
      -0.02254522778093815,
      -0.07664700597524643,
      0.05528103560209274,
      0.02849871665239334,
      0.018501348793506622,
      -0.029590986669063568,
      -0.019453104585409164,
      0.06143821030855179,
      -0.08527529239654541,
      -0.05140570551156998,
      -0.15530981123447418,
      0.01499218586832285,
      0.025643374770879745,
      0.005396934691816568,
      0.00123154919128865,
      0.00527943903580308,
      -0.04364947974681854,
      -0.03481234237551689,
      -0.04330694302916527,
      -0.008928203023970127,
      0.022209012880921364,
      -0.012601157650351524,
      0.023508062586188316,
      0.03521614894270897,
      0.027280347421765327,
      -0.004561975598335266,
      0.05537124350667,
      -0.05738871544599533
    ],
    [
      -0.04072370380163193,
      -0.02205634117126465,
      -0.10184449702501297,
      0.08424527198076248,
      0.02463322877883911,
      0.011930816806852818,
      0.058272600173950195,
      0.10476848483085632,
      -0.021946249529719353,
      -0.06704703718423843,
      0.011014045216143131,
      -0.04856506735086441,
      0.04150749370455742,
      -0.04393606632947922,
      0.004153409972786903,
      0.0012084782356396317,
      -0.06413866579532623,
      0.021546460688114166,
      -0.036244168877601624,
      -0.017621900886297226,
      0.01786605454981327,
      -0.025911426171660423,
      0.06072850525379181,
      -0.04533804953098297,
      -0.06236480921506882,
      0.00693715363740921,
      -0.026006661355495453,
      -0.036916133016347885,
      -0.029884494841098785,
      0.011899128556251526,
      0.011934756301343441,
      0.033064376562833786,
      -0.09513586014509201,
      -0.03925948962569237,
      0.07720353454351425,
      0.010277463123202324,
      0.013889063149690628,
      -0.03575621172785759,
      -0.07929243892431259,
      -0.01783960498869419,
      -0.03674481436610222,
      0.0069891479797661304,
      -0.03141150251030922,
      -0.07070276141166687,
      -0.028265461325645447,
      -0.08131925016641617,
      0.008830123580992222,
      0.02822822332382202,
      0.03170739859342575,
      -0.001456226222217083,
      -0.09354715049266815,
      0.07274763286113739,
      0.0007391491089947522,
      -0.045710429549217224,
      0.03853001073002815,
      0.04717957600951195,
      -0.02931894175708294,
      -0.038579825311899185,
      -0.0007251689676195383,
      -0.02610030211508274,
      -0.029072092846035957,
      0.01721852645277977,
      0.03865394368767738,
      -0.02018098346889019,
      -0.0013116966001689434,
      0.016167819499969482,
      0.027429144829511642,
      0.10216011852025986,
      0.04376673698425293,
      -0.04767126590013504,
      -0.028524575755000114,
      0.020557967945933342,
      -0.06636661291122437,
      0.05961699038743973,
      0.043607454746961594,
      -0.015915244817733765,
      -0.001350762089714408,
      0.03368479013442993,
      -0.11874336749315262,
      -0.1783612221479416,
      -0.04735386371612549,
      -0.04544276371598244,
      0.026233062148094177,
      -0.03280435502529144,
      0.05337553471326828,
      0.12192665785551071,
      0.024293409660458565,
      -0.019070468842983246,
      0.09346198290586472,
      0.10207602381706238,
      0.04201255738735199,
      0.019182225689291954,
      -0.0300199706107378,
      -0.0075794970616698265,
      0.017580807209014893,
      0.08319318294525146,
      0.041270337998867035,
      0.13732880353927612,
      -0.028681717813014984,
      0.1257443130016327,
      -0.02155684120953083,
      -0.014511733315885067,
      -0.024250436574220657,
      0.08109838515520096,
      0.0002977440890390426,
      -0.010796843096613884,
      0.03179541230201721,
      0.015775155276060104,
      -0.0381108783185482,
      -0.006854410283267498,
      0.06716302037239075,
      0.017762603238224983,
      0.003991967067122459,
      -0.10942235589027405,
      0.01707267016172409,
      -0.011154092848300934,
      0.05935220047831535,
      -0.02993035316467285,
      0.06919271498918533,
      0.06879628449678421,
      0.16905584931373596,
      0.010718898847699165,
      -0.11759938299655914,
      0.06921524554491043,
      -0.03816235810518265,
      -0.009348017163574696,
      0.001721391687169671,
      4.4340076703138704e-33,
      0.03328527510166168,
      -0.05396398901939392,
      -0.0038956489879637957,
      0.03718804195523262,
      0.02172398567199707,
      0.021026702597737312,
      0.026771334931254387,
      0.07214242219924927,
      -0.036510102450847626,
      0.09499838948249817,
      -0.09207770228385925,
      -0.045076679438352585,
      -0.07872552424669266,
      -0.09462542831897736,
      -0.0789044052362442,
      -0.11202409118413925,
      -0.020978029817342758,
      -0.038662128150463104,
      0.07174504548311234,
      0.005932067986577749,
      -0.005619012285023928,
      0.007997304201126099,
      0.031030137091875076,
      0.016817161813378334,
      -0.022214584052562714,
      0.062339987605810165,
      0.005656145978718996,
      0.012350731529295444,
      0.005926082376390696,
      0.011437498033046722,
      0.03516342490911484,
      -0.06330928206443787,
      0.000273843586910516,
      0.0008094395161606371,
      -0.010113508440554142,
      -0.023275362327694893,
      -0.06819919496774673,
      -0.03245807811617851,
      -0.07194200158119202,
      -0.04594963416457176,
      0.0005163081223145127,
      -0.02001512236893177,
      -0.02998698502779007,
      0.04131830483675003,
      -0.02899901196360588,
      -0.14079396426677704,
      0.04316312074661255,
      0.05762934312224388,
      0.005402724724262953,
      -0.08608192950487137,
      -0.028105564415454865,
      0.07343712449073792,
      0.021513042971491814,
      -0.00014517635281663388,
      0.012406393885612488,
      -0.07433243095874786,
      -0.08032529056072235,
      0.005776430480182171,
      0.06189844384789467,
      0.05247431620955467,
      -0.030038129538297653,
      0.03844679892063141,
      -0.015797872096300125,
      0.010080673731863499,
      0.016940899193286896,
      0.05525730550289154,
      -0.02274424210190773,
      0.037905819714069366,
      0.0018590820254758,
      -0.02932312898337841,
      0.04799312353134155,
      -0.03768467903137207,
      0.09112904965877533,
      0.0557599738240242,
      0.08832922577857971,
      -0.017466021701693535,
      -0.0069209677167236805,
      -0.05534238740801811,
      0.01182391308248043,
      -0.025764672085642815,
      -0.07100660353899002,
      -0.0005490855546668172,
      -0.0649346187710762,
      0.05229439586400986,
      -0.011739508248865604,
      0.07213643938302994,
      0.054062291979789734,
      -0.03003663197159767,
      0.031645819544792175,
      0.03210068866610527,
      0.012792757712304592,
      0.004621254280209541,
      0.01759755052626133,
      -0.1052599772810936,
      0.0480172373354435,
      -4.9931234767588296e-33,
      -0.012227311730384827,
      -0.006148116663098335,
      -0.03023572824895382,
      -0.09408023208379745,
      -0.08340749889612198,
      0.024435384199023247,
      0.0030438294634222984,
      -0.02114788629114628,
      0.06043756380677223,
      0.03697999194264412,
      -0.038838982582092285,
      0.002613355638459325,
      0.0001760287123033777,
      -0.07839885354042053,
      0.048096030950546265,
      0.07881521433591843,
      0.011760246939957142,
      0.006235726643353701,
      0.011179259978234768,
      -0.011689277365803719,
      -0.059778761118650436,
      0.0852801650762558,
      -0.04644077643752098,
      0.0644654929637909,
      -0.0538753978908062,
      -0.03446914255619049,
      0.07483541965484619,
      0.0505952425301075,
      -0.004045265261083841,
      0.04278814420104027,
      0.03694189712405205,
      -0.03521352261304855,
      -0.09143535047769547,
      0.0537552572786808,
      -0.01785217970609665,
      -0.009335435926914215,
      0.004844231531023979,
      0.03488501161336899,
      -0.06859030574560165,
      0.043850403279066086,
      0.010021088644862175,
      -0.007441244553774595,
      -0.074880450963974,
      0.05345085635781288,
      -0.03612552210688591,
      0.05577998608350754,
      0.024198655039072037,
      -0.0284401997923851,
      -0.006347773130983114,
      -0.03752867504954338,
      0.04838692024350166,
      -0.048611484467983246,
      -0.06446442008018494,
      -0.04161108657717705,
      -0.021693013608455658,
      -0.002635305980220437,
      0.06486625969409943,
      0.02611399255692959,
      0.004698116332292557,
      -0.0015517153078690171,
      0.013614442199468613,
      -0.04286227002739906,
      0.022133460268378258,
      -0.02407986856997013,
      0.08006301522254944,
      -0.035991668701171875,
      -0.0005444552516564727,
      -0.0013683934230357409,
      -0.020766885951161385,
      0.04722416400909424,
      0.014954647049307823,
      0.02282593585550785,
      0.022270169109106064,
      -0.03515082225203514,
      0.033493805676698685,
      0.06876982748508453,
      0.07750870287418365,
      0.029267510399222374,
      -0.050251949578523636,
      0.023311171680688858,
      0.05951899662613869,
      -0.009174327366054058,
      0.0341915600001812,
      -0.09215466678142548,
      -0.059807971119880676,
      -0.06705731898546219,
      0.052176058292388916,
      0.16302399337291718,
      -0.07223176211118698,
      0.00044804069329984486,
      0.0065737031400203705,
      -0.03659671172499657,
      0.04089682549238205,
      0.01989922672510147,
      -0.03250737860798836,
      -5.132161007281866e-08,
      -0.10784579068422318,
      -0.03583109751343727,
      -0.036623530089855194,
      0.0437818244099617,
      0.03139432519674301,
      0.006088719703257084,
      0.03270048648118973,
      0.030573034659028053,
      -0.11969640105962753,
      -0.07589834928512573,
      -0.003298222552984953,
      0.07386866956949234,
      0.060560718178749084,
      -0.04412689805030823,
      0.026257256045937538,
      -0.023308243602514267,
      -0.007829158566892147,
      0.0687718391418457,
      -0.0780373141169548,
      -0.026034435257315636,
      0.038856904953718185,
      0.07874498516321182,
      -0.03894141688942909,
      0.006930917035788298,
      -0.028766576200723648,
      -0.018144303932785988,
      0.043062422424554825,
      -0.022828416898846626,
      0.02504233457148075,
      -0.02047215960919857,
      -0.007778809871524572,
      -0.04307674989104271,
      -0.0068547469563782215,
      -0.04351989924907684,
      0.007790467701852322,
      -0.02040516771376133,
      -0.006153822410851717,
      0.0031154726166278124,
      -0.027403291314840317,
      0.006920953746885061,
      -0.07445144653320312,
      0.03347006067633629,
      -0.06820093095302582,
      0.041339389979839325,
      -0.009730033576488495,
      -0.054531242698431015,
      -0.17635385692119598,
      0.06367065757513046,
      0.02944014221429825,
      0.0062887901440262794,
      0.0400528721511364,
      -0.006982471793889999,
      0.0828346312046051,
      -0.024946773424744606,
      -0.03413165360689163,
      0.015779249370098114,
      0.07760259509086609,
      0.014863881282508373,
      -0.052390776574611664,
      -0.0015440193237736821,
      -0.0040579489432275295,
      0.01794692873954773,
      0.06402236223220825,
      -0.014191389083862305
    ],
    [
      -0.027264194563031197,
      -0.03193897381424904,
      -0.10365612804889679,
      0.0582311674952507,
      -0.026366839185357094,
      0.029232269152998924,
      0.05265701934695244,
      0.0900963842868805,
      -0.01050510909408331,
      -0.05142180994153023,
      0.039996545761823654,
      -0.02742907591164112,
      0.05128927528858185,
      -0.05810268968343735,
      0.0015746416756883264,
      -0.015069261193275452,
      -0.03332597389817238,
      -0.012630307115614414,
      -0.03818107396364212,
      -0.017972193658351898,
      0.05120382085442543,
      -0.022885583341121674,
      0.024665173143148422,
      -0.048544641584157944,
      -0.08584118634462357,
      -0.024977078661322594,
      -0.02403852716088295,
      -0.06414621323347092,
      -0.017667366191744804,
      0.013405144214630127,
      0.018668966367840767,
      0.016220666468143463,
      -0.13810083270072937,
      -0.015441450290381908,
      0.050370991230010986,
      -0.009030662477016449,
      -0.017431994900107384,
      -0.03969000279903412,
      -0.036409471184015274,
      -0.02169005200266838,
      -0.0006236664485186338,
      -0.01262161135673523,
      0.00651370408013463,
      -0.06883112341165543,
      -0.04399232938885689,
      -0.0888441801071167,
      -0.0269479900598526,
      0.04892657697200775,
      0.034576453268527985,
      0.00526017788797617,
      -0.07540642470121384,
      0.04890713840723038,
      -0.020151741802692413,
      -0.05429717153310776,
      0.033129461109638214,
      0.0920233204960823,
      -0.049379218369722366,
      -0.04937116429209709,
      -0.012452860362827778,
      -0.015593874268233776,
      -0.05945960804820061,
      0.0010202762205153704,
      0.047996990382671356,
      -0.0032887232955545187,
      -0.02133658342063427,
      0.005909421481192112,
      0.012654558755457401,
      0.09213656187057495,
      0.030925588682293892,
      -0.03253868222236633,
      -0.05894852429628372,
      0.00789641123265028,
      -0.033795639872550964,
      0.08363178372383118,
      0.07443344593048096,
      -0.030599277466535568,
      -0.049287982285022736,
      0.07838919758796692,
      -0.11203115433454514,
      -0.1864285171031952,
      0.0006242064409889281,
      -0.05594582483172417,
      0.028882035985589027,
      0.015298179350793362,
      0.023172378540039062,
      0.08786632865667343,
      0.03669202700257301,
      0.027681324630975723,
      0.0939580500125885,
      0.050166234374046326,
      0.023205313831567764,
      0.04194606468081474,
      -0.011952538974583149,
      0.012433735653758049,
      0.02150076813995838,
      0.07832039892673492,
      -0.007717370521277189,
      0.10026998072862625,
      -0.012164480984210968,
      0.09769003838300705,
      -0.01730548031628132,
      -0.03398841619491577,
      0.009206882677972317,
      0.11087662726640701,
      -0.024142630398273468,
      -0.019136138260364532,
      0.04314083233475685,
      0.010884569026529789,
      -0.0064448341727256775,
      -0.001260930672287941,
      0.029065292328596115,
      0.0626288577914238,
      0.006226944737136364,
      -0.14901918172836304,
      -0.01098816841840744,
      0.003002818441018462,
      0.07099973410367966,
      -0.03179353475570679,
      0.05317598208785057,
      0.018742818385362625,
      0.1770772784948349,
      -0.016087433323264122,
      -0.10631906241178513,
      0.03892127797007561,
      -0.035894207656383514,
      -0.01050810981541872,
      -0.0025098733603954315,
      3.8367055625404646e-33,
      0.04042116180062294,
      -0.04642556235194206,
      0.009437098167836666,
      0.04797813296318054,
      0.05831427872180939,
      0.029171420261263847,
      0.046302277594804764,
      0.06553161144256592,
      -0.05451216548681259,
      0.09311025589704514,
      -0.06592812389135361,
      -0.042648736387491226,
      -0.10280873626470566,
      -0.04038635641336441,
      -0.07947967946529388,
      -0.07284855097532272,
      -0.014810513705015182,
      -0.029386665672063828,
      0.08685803413391113,
      -0.023150648921728134,
      -0.04056384041905403,
      -0.018908049911260605,
      0.061010561883449554,
      0.03080848604440689,
      0.03740367665886879,
      0.09004123508930206,
      -0.008480223827064037,
      0.02403397671878338,
      -0.012468823231756687,
      -0.009629199281334877,
      0.04457429423928261,
      -0.06270996481180191,
      -0.0002133026282535866,
      -0.004511787090450525,
      -0.0376327782869339,
      0.0003080130845773965,
      -0.08954121172428131,
      -0.027282118797302246,
      -0.05052085593342781,
      -0.032652419060468674,
      0.0023513513151556253,
      -0.06542474776506424,
      -0.004011764656752348,
      0.015936069190502167,
      -0.10275181382894516,
      -0.13960552215576172,
      0.024569477885961533,
      0.03671790286898613,
      0.021704955026507378,
      -0.035089876502752304,
      0.0010020004119724035,
      0.02942720614373684,
      -0.005820150021463633,
      -0.014620637521147728,
      0.0022344067692756653,
      -0.06385177373886108,
      -0.135966494679451,
      0.020847950130701065,
      0.06343042105436325,
      0.027609432116150856,
      -0.016484171152114868,
      0.0188252255320549,
      -0.019387319684028625,
      0.024466512724757195,
      -0.0026817487087100744,
      0.07314621657133102,
      0.010736138559877872,
      0.013810734264552593,
      0.02100570872426033,
      -0.06149609759449959,
      0.05845198407769203,
      -0.07513841986656189,
      0.05779378116130829,
      0.017898347228765488,
      0.11620915681123734,
      -0.007078113500028849,
      -0.02710423804819584,
      -0.06544847786426544,
      0.010731646791100502,
      -0.01646111160516739,
      -0.045737072825431824,
      -0.01695144921541214,
      -0.09159716218709946,
      0.03653114289045334,
      0.012451020069420338,
      0.07832612097263336,
      0.06495213508605957,
      -0.030633825808763504,
      0.06073719263076782,
      0.04696686565876007,
      -0.002584451111033559,
      -0.007790341041982174,
      0.044341593980789185,
      -0.0634673461318016,
      0.04592994973063469,
      -5.356021358060717e-33,
      -0.008085157722234726,
      -0.030928367748856544,
      -0.04314134269952774,
      -0.0765303447842598,
      -0.024688435718417168,
      0.02493147924542427,
      0.03453925624489784,
      -0.003153048688545823,
      0.06679010391235352,
      0.026585513725876808,
      -0.02417394146323204,
      0.04816257581114769,
      -0.017884686589241028,
      -0.08076561987400055,
      0.06871360540390015,
      0.0971473827958107,
      0.004364823456853628,
      0.006027596537023783,
      0.006034951191395521,
      -0.014198425225913525,
      -0.03273728862404823,
      0.06415273249149323,
      -0.061155516654253006,
      0.063029445707798,
      -0.06553934514522552,
      -0.015178211964666843,
      0.10217951238155365,
      0.05871700868010521,
      -0.016676072031259537,
      0.014354422688484192,
      0.03588735684752464,
      -0.0337967649102211,
      -0.08671706914901733,
      0.06287147849798203,
      -0.018480252474546432,
      -0.017193235456943512,
      -0.024749528616666794,
      0.06922639161348343,
      -0.04125469923019409,
      0.02761966921389103,
      0.0025603731628507376,
      -0.010253357701003551,
      -0.035862285643815994,
      0.036889929324388504,
      -0.056048423051834106,
      0.030291622504591942,
      0.03877147659659386,
      -0.04178720340132713,
      -0.020731115713715553,
      -0.0029559119138866663,
      0.008250825107097626,
      -0.04360739514231682,
      -0.035096969455480576,
      -0.040544550865888596,
      -0.011688768863677979,
      0.04339776188135147,
      0.09470081329345703,
      0.017299802973866463,
      0.0027860060799866915,
      -0.05099710449576378,
      0.00047073623863980174,
      -0.02233991213142872,
      -0.02333347126841545,
      -0.013374448753893375,
      0.08643381297588348,
      -0.022976994514465332,
      -0.00825462769716978,
      -0.017730262130498886,
      -0.05387182906270027,
      0.07013153284788132,
      -0.03457500785589218,
      0.0035963067784905434,
      0.02196337841451168,
      -0.04924913868308067,
      0.040063634514808655,
      0.06450948119163513,
      0.05936391279101372,
      0.009072885848581791,
      -0.06109882891178131,
      0.03721415251493454,
      0.06533126533031464,
      0.002734194742515683,
      0.04457671567797661,
      -0.12937749922275543,
      -0.06842298060655594,
      -0.07668525725603104,
      0.023862119764089584,
      0.15588784217834473,
      -0.03951060771942139,
      0.02217402122914791,
      0.0014914455823600292,
      -0.04314783588051796,
      0.011702149175107479,
      0.010045798495411873,
      -0.023056425154209137,
      -5.0475925661430665e-08,
      -0.12730659544467926,
      0.017052195966243744,
      -0.02279486693441868,
      0.007446177303791046,
      0.015144798904657364,
      -0.023786038160324097,
      0.04272492602467537,
      0.08497516065835953,
      -0.10126211494207382,
      -0.07965326309204102,
      0.012050044722855091,
      0.04604973644018173,
      0.06823687255382538,
      -0.005925020202994347,
      0.013929067179560661,
      -0.01807037554681301,
      -0.029375627636909485,
      0.05585617572069168,
      -0.07317092269659042,
      -0.033778268843889236,
      -0.021108359098434448,
      0.08469831198453903,
      0.00993930920958519,
      0.02429005317389965,
      0.0031632883474230766,
      -0.007695379666984081,
      0.04776199162006378,
      -0.0072082639671862125,
      -0.001390260411426425,
      0.00897462572902441,
      -0.0315600223839283,
      -0.015774644911289215,
      -0.011927105486392975,
      -0.05836322158575058,
      -0.01645633392035961,
      -0.02770184352993965,
      -0.0021677089389413595,
      -0.029735369607806206,
      0.015036171302199364,
      0.003439255291596055,
      -0.01674290932714939,
      0.04396918788552284,
      -0.039217375218868256,
      0.03145347535610199,
      -0.007980987429618835,
      -0.06114201247692108,
      -0.1644577533006668,
      0.04851818457245827,
      0.06869891285896301,
      0.022732676938176155,
      -0.002633380703628063,
      0.017190204933285713,
      0.05184473097324371,
      -0.06711132824420929,
      -0.035984478890895844,
      -0.0066279941238462925,
      0.05920346453785896,
      0.04594716057181358,
      -0.02160205878317356,
      0.01150079257786274,
      -0.014531602151691914,
      0.029986659064888954,
      0.08038318902254105,
      -0.028668146580457687
    ],
    [
      -0.00976083055138588,
      -0.0576394759118557,
      -0.002305308124050498,
      0.005839781370013952,
      0.06421224027872086,
      0.010815980844199657,
      -0.060969509184360504,
      0.09835827350616455,
      -0.17531616985797882,
      0.08951880782842636,
      -0.015285411849617958,
      -0.03573871776461601,
      -0.059186723083257675,
      0.01793988235294819,
      0.05089912191033363,
      0.07289933413267136,
      0.02677774615585804,
      0.012327870354056358,
      0.03525494411587715,
      0.007074899040162563,
      -0.010940499603748322,
      -0.0010357456048950553,
      0.0819208025932312,
      -0.06456451863050461,
      -0.030296122655272484,
      0.06431324779987335,
      -0.026913365349173546,
      0.02372642792761326,
      -0.03364653140306473,
      -0.02152414247393608,
      -0.050317127257585526,
      0.007771305739879608,
      -0.06543304026126862,
      0.023661678656935692,
      -0.050373274832963943,
      0.04042196273803711,
      0.014232139103114605,
      -0.012571007944643497,
      -0.04362897574901581,
      -0.03274871036410332,
      -0.04665839672088623,
      -0.024049295112490654,
      -0.09212285280227661,
      -0.16883710026741028,
      -0.02128177136182785,
      -0.10121259838342667,
      -0.03635408356785774,
      -0.024404777213931084,
      -0.008541289716959,
      -0.013051233254373074,
      -0.0027777263894677162,
      -0.016512000933289528,
      0.03295895829796791,
      -0.011550145223736763,
      0.031735651195049286,
      0.06744740903377533,
      -0.012371700257062912,
      0.009002944454550743,
      0.012474813498556614,
      0.02104954980313778,
      -0.03354494273662567,
      -0.02886049635708332,
      0.06000218167901039,
      -0.029424753040075302,
      0.021661676466464996,
      0.03156576678156853,
      0.06569799035787582,
      0.06258989870548248,
      0.03269360959529877,
      -0.08957727998495102,
      -0.049429383128881454,
      -0.03558476269245148,
      -0.08667678385972977,
      -0.0178372785449028,
      -0.03190378472208977,
      -0.11300791054964066,
      0.013053776696324348,
      -0.009529395960271358,
      -0.008934716694056988,
      -0.04425645247101784,
      -0.09693317115306854,
      0.013284418731927872,
      0.032415971159935,
      0.12448172271251678,
      -0.033365171402692795,
      0.18783923983573914,
      0.01715793088078499,
      0.07696797698736191,
      -0.005242409184575081,
      -0.031766802072525024,
      0.037324897944927216,
      -0.06786427646875381,
      0.007209560833871365,
      0.06173693388700485,
      0.08537273108959198,
      0.027034379541873932,
      0.0564408004283905,
      0.06944511085748672,
      -0.011036125011742115,
      0.04026506096124649,
      -0.02345912903547287,
      -0.0901331752538681,
      0.03158574923872948,
      0.01891164854168892,
      0.03493053838610649,
      -0.012460482306778431,
      0.042773813009262085,
      0.008629413321614265,
      -0.03899142146110535,
      -0.011198882944881916,
      0.037357669323682785,
      0.011903077363967896,
      -0.040593720972537994,
      -0.10731808096170425,
      -0.027426842600107193,
      -0.012921410612761974,
      -0.006276995409280062,
      -0.04824149236083031,
      0.031002499163150787,
      0.04320729523897171,
      0.06730088591575623,
      0.022051963955163956,
      -0.029995422810316086,
      0.08827093988656998,
      0.04015476256608963,
      -0.012513072229921818,
      -0.023704223334789276,
      4.543873045761568e-33,
      0.06323520094156265,
      0.06581450998783112,
      -0.04809807240962982,
      0.07804293185472488,
      0.060284145176410675,
      -0.02933555655181408,
      0.06414355337619781,
      0.06379576772451401,
      -0.12782827019691467,
      0.0838572084903717,
      -0.004269018303602934,
      0.09103250503540039,
      -0.022682268172502518,
      -0.028574641793966293,
      -0.01566137932240963,
      -0.14314600825309753,
      -0.04150092229247093,
      -0.03733634948730469,
      0.0055834148079156876,
      -0.013487383723258972,
      -0.08050437271595001,
      -0.013916276395320892,
      -0.004613107070326805,
      0.01273676659911871,
      0.036820970475673676,
      0.04830508679151535,
      0.0852215588092804,
      0.033293794840574265,
      0.010598599910736084,
      -0.009662103839218616,
      0.037056196480989456,
      -0.06220095604658127,
      0.031197158619761467,
      0.05407564714550972,
      0.0023791855201125145,
      -0.05480748787522316,
      -0.10306964069604874,
      -0.014981040731072426,
      -0.08739686757326126,
      0.002660245867446065,
      0.003062223317101598,
      0.06551121920347214,
      -0.059511832892894745,
      -0.01306553278118372,
      0.02015148289501667,
      -0.005309821106493473,
      0.020993150770664215,
      0.03826290741562843,
      0.11005380004644394,
      0.019756846129894257,
      -0.010575526393949986,
      0.007058327551931143,
      0.07809741795063019,
      0.025408735498785973,
      -0.010653771460056305,
      -0.0253662820905447,
      0.0033526394981890917,
      -0.07756571471691132,
      -0.0018280793447047472,
      0.08438978344202042,
      -0.07664649933576584,
      -0.025920221582055092,
      -0.02994895540177822,
      0.03627648577094078,
      -0.027633309364318848,
      -0.012473790906369686,
      -0.042679738253355026,
      -0.0211019329726696,
      0.06083252280950546,
      -0.05963379889726639,
      -0.016909850761294365,
      0.021736877039074898,
      0.034341566264629364,
      0.05229105427861214,
      0.0842575803399086,
      -0.03609101474285126,
      0.06436574459075928,
      0.03956051915884018,
      -0.03599490970373154,
      -0.0685027614235878,
      -0.013254907913506031,
      0.026595497503876686,
      -0.03231502324342728,
      -0.013458335772156715,
      -0.0003209940914530307,
      0.02953360788524151,
      0.015131081454455853,
      -0.027160385623574257,
      0.07832996547222137,
      -0.04347023367881775,
      0.0507945753633976,
      -0.021410735324025154,
      0.012379222549498081,
      -0.0682915598154068,
      -0.07271793484687805,
      -3.269950879525084e-33,
      -0.013325716368854046,
      0.02526206523180008,
      -0.05307428911328316,
      0.08892299979925156,
      0.015310498885810375,
      0.03865736722946167,
      0.023266026750206947,
      -0.06224965676665306,
      0.06663888692855835,
      -0.00412497203797102,
      0.013245398178696632,
      0.040872037410736084,
      0.06526090204715729,
      -0.004638866055756807,
      0.014167035929858685,
      0.07688790559768677,
      -0.08702194690704346,
      -0.04414990916848183,
      0.08098304271697998,
      -0.006703369319438934,
      0.01598488725721836,
      0.03416511043906212,
      -0.01743420585989952,
      -0.07084545493125916,
      -0.04685470461845398,
      -0.021374346688389778,
      0.01239687204360962,
      0.04350021854043007,
      -0.025515051558613777,
      -0.03122393786907196,
      0.08722758293151855,
      -0.02309127151966095,
      -0.06151152402162552,
      -0.01131377276033163,
      0.01267668604850769,
      0.0005909864557906985,
      -0.029751593247056007,
      0.08681653439998627,
      -0.05196808651089668,
      -0.033999133855104446,
      -0.04620053246617317,
      -0.012052218429744244,
      -0.08606328070163727,
      -0.02578474022448063,
      -0.07021144032478333,
      0.07337799668312073,
      -0.0033225619699805975,
      0.006163488607853651,
      -0.027458902448415756,
      -0.05666162818670273,
      -0.004529515281319618,
      -0.1263657808303833,
      0.0637722760438919,
      -0.05798380449414253,
      -0.01764691062271595,
      0.019398348405957222,
      0.004029733128845692,
      0.0424029603600502,
      -0.05556516721844673,
      0.020436352118849754,
      0.05258750170469284,
      -0.01698983460664749,
      0.08497224003076553,
      0.06301887333393097,
      -0.04315740987658501,
      -0.007416049484163523,
      -0.1315622478723526,
      -0.06263498961925507,
      -0.06690430641174316,
      0.008431123569607735,
      -0.0741468295454979,
      0.009441453032195568,
      0.05584731698036194,
      0.010430989786982536,
      0.04448830708861351,
      -0.023150965571403503,
      0.02965484745800495,
      -0.018050963059067726,
      0.018987711519002914,
      0.0031396036501973867,
      0.03556883707642555,
      0.0402681790292263,
      -0.013057920150458813,
      -0.05526481568813324,
      -0.044392090290784836,
      0.03944520652294159,
      0.050813812762498856,
      0.008849047124385834,
      -0.01786625199019909,
      0.019207820296287537,
      -0.0600477010011673,
      0.07069790363311768,
      -0.03581355884671211,
      0.06634849309921265,
      -0.004046126734465361,
      -5.238315381461689e-08,
      0.017176205292344093,
      0.03339093551039696,
      -0.14109128713607788,
      0.00577150983735919,
      0.035074666142463684,
      0.004788369871675968,
      0.08118598908185959,
      0.02887454442679882,
      0.006557028274983168,
      0.03411351889371872,
      -0.0003173498553223908,
      0.021905189380049706,
      0.004489661660045385,
      0.017976801842451096,
      0.046843864023685455,
      0.08014188706874847,
      -0.002790612168610096,
      0.08168071508407593,
      -0.05876104533672333,
      0.019949762150645256,
      0.02355583943426609,
      0.11322665959596634,
      0.09172991663217545,
      0.03426043689250946,
      0.02190811187028885,
      0.028870582580566406,
      0.05173659697175026,
      0.014581146650016308,
      0.002099577570334077,
      0.038198694586753845,
      -0.027478190138936043,
      0.028139645233750343,
      -0.011328020133078098,
      -0.04016338288784027,
      -0.013190214522182941,
      0.02120019868016243,
      -0.0922202542424202,
      0.012940755113959312,
      0.03338257968425751,
      0.06114097684621811,
      0.010880062356591225,
      0.032369401305913925,
      -0.03222037851810455,
      -0.0032420919742435217,
      -0.06868895143270493,
      -0.06456070393323898,
      -0.13582353293895721,
      -0.016257354989647865,
      0.02311890944838524,
      0.00020508942543528974,
      0.032551269978284836,
      0.021535571664571762,
      -0.009828918613493443,
      -0.03471691906452179,
      -0.025534069165587425,
      0.10911645740270615,
      0.007190574426203966,
      -0.03891414776444435,
      -0.008677644655108452,
      0.003862384706735611,
      -0.024927278980612755,
      0.048747461289167404,
      0.07892151176929474,
      0.033403489738702774
    ],
    [
      -0.0985666960477829,
      -0.057245735079050064,
      -0.05810040608048439,
      0.016972161829471588,
      -0.00189649173989892,
      -0.057224687188863754,
      0.05564270541071892,
      0.048225902020931244,
      0.04552875831723213,
      0.009354487992823124,
      0.015842141583561897,
      -0.02219471149146557,
      -0.027479296550154686,
      0.013417543843388557,
      0.04507816582918167,
      0.047984737902879715,
      -0.015542587265372276,
      -0.10332930833101273,
      -0.07096627354621887,
      -0.022966474294662476,
      0.0016120963264256716,
      -0.1020331084728241,
      -0.11847087740898132,
      0.03342778608202934,
      -0.05650440976023674,
      0.008345468901097775,
      -0.02999071031808853,
      -0.03580288961529732,
      -0.009991604834794998,
      -0.03844796493649483,
      0.0777733251452446,
      -0.009440457448363304,
      -0.15011216700077057,
      -0.029929719865322113,
      -0.025337744504213333,
      0.011854023672640324,
      -0.05754129961133003,
      0.04134630784392357,
      0.0043481518514454365,
      -0.05349540710449219,
      0.019570186734199524,
      -0.05270928889513016,
      0.05627306550741196,
      -0.04862093925476074,
      -0.005379325244575739,
      0.06235503405332565,
      0.0024633933790028095,
      0.07709918916225433,
      -0.03163702040910721,
      0.03804345056414604,
      0.059563130140304565,
      0.02395576238632202,
      -0.018635859712958336,
      0.11489078402519226,
      -0.035496991127729416,
      0.02209211140871048,
      0.05505358800292015,
      -0.012265968136489391,
      0.012974841520190239,
      0.007474453654140234,
      -0.03113701194524765,
      0.03675113245844841,
      -0.01204773597419262,
      0.027506841346621513,
      -0.03728058189153671,
      -0.0820930078625679,
      -0.007539765443652868,
      0.011602712795138359,
      0.07664268463850021,
      -0.0500100776553154,
      0.018723098561167717,
      -0.036676619201898575,
      -0.039588917046785355,
      0.03409614786505699,
      0.03467782959342003,
      0.02775661274790764,
      0.002065060194581747,
      0.062454547733068466,
      0.034534797072410583,
      -0.06583957374095917,
      0.09832342714071274,
      0.12222114205360413,
      0.03828667104244232,
      -0.053107667714357376,
      0.04218943417072296,
      0.03570493683218956,
      -0.037626128643751144,
      -0.01836593821644783,
      0.08081310242414474,
      0.09088931232690811,
      0.08681586384773254,
      -0.0054809702560305595,
      0.07106893509626389,
      -0.011927814222872257,
      -0.047482915222644806,
      0.049804702401161194,
      0.030210060998797417,
      -0.01603059098124504,
      -0.017251741141080856,
      0.05613500624895096,
      -0.03741978481411934,
      -0.09188935905694962,
      -0.024730559438467026,
      0.005641646683216095,
      -0.05507003515958786,
      -0.045841798186302185,
      0.007987968623638153,
      -0.03534457087516785,
      0.005637315101921558,
      0.010372836142778397,
      -0.05971263721585274,
      0.030527789145708084,
      0.008250436745584011,
      -0.06839359551668167,
      -0.039329078048467636,
      0.012755037285387516,
      -0.11789310723543167,
      -0.014648592099547386,
      0.009101350791752338,
      -0.03691965714097023,
      0.00013639261305797845,
      0.025085680186748505,
      0.07703043520450592,
      0.0057127694599330425,
      0.07953610271215439,
      0.045554786920547485,
      -0.039679378271102905,
      2.4447848856455393e-33,
      0.02005108818411827,
      0.049623824656009674,
      -0.04037924110889435,
      0.030817659571766853,
      -0.015208565630018711,
      -0.01926111988723278,
      0.05978459492325783,
      -0.005781348794698715,
      -0.006753910332918167,
      0.05845857411623001,
      0.017156146466732025,
      0.10700356215238571,
      0.0451764352619648,
      0.029862258583307266,
      0.0033091274090111256,
      -0.08473847061395645,
      0.020147286355495453,
      -0.009527433663606644,
      0.028738128021359444,
      -0.042358145117759705,
      0.0673491582274437,
      0.03014790080487728,
      0.04845685884356499,
      0.015559449791908264,
      0.061099182814359665,
      0.03418385982513428,
      -0.08813460171222687,
      0.04290119931101799,
      -0.005726315546780825,
      0.042496997863054276,
      0.0016535066533833742,
      -0.05439537763595581,
      0.014984022825956345,
      0.030517909675836563,
      0.04367821663618088,
      0.0664471983909607,
      -0.017749270424246788,
      -0.13396014273166656,
      -0.022145401686429977,
      -0.07601016014814377,
      -0.07169125974178314,
      -0.009625017642974854,
      -0.01713479496538639,
      0.04505207762122154,
      -0.1193179190158844,
      -0.04337130859494209,
      0.006144754122942686,
      -0.019580507650971413,
      -0.0032204787712544203,
      -0.0010822981130331755,
      0.04455962032079697,
      -0.06171436235308647,
      0.020294837653636932,
      0.014099734835326672,
      0.07041043788194656,
      -0.04915419965982437,
      -0.05042162537574768,
      -0.087839774787426,
      0.032391469925642014,
      -0.007638030219823122,
      0.06876541674137115,
      -0.013401569798588753,
      -0.1031186655163765,
      0.0053842575289309025,
      -0.05803622677922249,
      -0.005201999563723803,
      0.03582048416137695,
      0.004546037875115871,
      0.03909562528133392,
      -0.03915455564856529,
      -3.6746019759448245e-05,
      0.024547316133975983,
      0.03284618631005287,
      -0.0023693502880632877,
      0.0032633226364851,
      -0.05262962356209755,
      0.06455402076244354,
      0.04580175504088402,
      -0.047023504972457886,
      0.021401746198534966,
      -0.051855526864528656,
      -0.03459754213690758,
      0.025979571044445038,
      0.07365018874406815,
      0.0002401126839686185,
      0.023903217166662216,
      -0.013908294029533863,
      -0.018934227526187897,
      -0.056139327585697174,
      -0.042384032160043716,
      -0.0203940961509943,
      -0.020583314821124077,
      0.08707545697689056,
      0.12455277889966965,
      0.04220293089747429,
      -4.8839196842254544e-33,
      -0.09287916868925095,
      0.008456431329250336,
      0.04017895087599754,
      -0.04942022264003754,
      0.06927108019590378,
      0.001154175610281527,
      0.01482616551220417,
      -0.0033630607649683952,
      -0.010575546883046627,
      -0.03405090048909187,
      -0.16407659649848938,
      -0.0067284200340509415,
      -0.016002077609300613,
      0.043566443026065826,
      -0.0012495653936639428,
      -0.10071615129709244,
      -0.02582314983010292,
      0.02269967645406723,
      0.0024174267891794443,
      -0.01926734857261181,
      0.01576503925025463,
      0.06317930668592453,
      0.011675907298922539,
      0.02112194336950779,
      -0.03319191560149193,
      -0.03479206562042236,
      -0.05116024985909462,
      -0.010632098652422428,
      0.02056884579360485,
      0.035317134112119675,
      0.02356061153113842,
      -0.027519388124346733,
      -0.045413702726364136,
      -0.019239181652665138,
      -0.042505186051130295,
      -0.07934151589870453,
      0.015545534901320934,
      0.058615244925022125,
      -0.03632136806845665,
      -0.019969815388321877,
      0.10559024661779404,
      -0.041803084313869476,
      0.040173567831516266,
      0.07233079522848129,
      -0.007994287647306919,
      0.05800767242908478,
      -0.05935151129961014,
      -0.05517255514860153,
      0.027018576860427856,
      0.05491352453827858,
      -0.022573739290237427,
      -0.021679306402802467,
      0.02702171541750431,
      0.09136153012514114,
      -0.028694789856672287,
      -0.037119511514902115,
      0.20011992752552032,
      -0.05717705562710762,
      0.03324846178293228,
      -0.019253933802247047,
      0.06028655171394348,
      -0.05397963896393776,
      -0.03889130428433418,
      0.11231441795825958,
      0.044624604284763336,
      -0.0466577485203743,
      0.04598339647054672,
      -0.06723109632730484,
      -0.027276720851659775,
      0.05268070846796036,
      0.08090870827436447,
      -0.10979314148426056,
      -0.08778832107782364,
      -0.0407230444252491,
      0.08313505351543427,
      0.015100181102752686,
      -0.036541279405355453,
      -0.06076918914914131,
      -0.028135908767580986,
      0.01149187795817852,
      -0.04570983722805977,
      0.004393851850181818,
      0.07276711612939835,
      -0.062474265694618225,
      0.030248409137129784,
      -0.04347960278391838,
      0.08283420652151108,
      -0.10715644806623459,
      0.017367279157042503,
      0.06501856446266174,
      -0.019773272797465324,
      -0.05180282145738602,
      0.12656129896640778,
      -0.008007168769836426,
      -0.015416817739605904,
      -5.1942002698979195e-08,
      0.0003128138487227261,
      0.01436170469969511,
      0.001685719471424818,
      -0.004118714481592178,
      -0.059910111129283905,
      0.030735891312360764,
      -0.05245436728000641,
      -0.013627382926642895,
      -0.026670120656490326,
      0.005851763766258955,
      0.0396396704018116,
      0.035262614488601685,
      -0.007420632988214493,
      -0.0622032955288887,
      0.03225642815232277,
      -0.03856696933507919,
      0.013642989099025726,
      0.021423017606139183,
      -0.07181572169065475,
      -0.07513105124235153,
      -0.04378689453005791,
      0.03229016438126564,
      -0.016292816027998924,
      -0.06520184874534607,
      -0.06396476179361343,
      0.03477940708398819,
      0.058297134935855865,
      0.10051141679286957,
      -0.020243605598807335,
      -0.004289450589567423,
      -0.05255212262272835,
      0.030530737712979317,
      0.0678093209862709,
      0.010708565823733807,
      -0.08517895638942719,
      0.05322687327861786,
      0.012932827696204185,
      -0.02816048637032509,
      -0.06006312370300293,
      0.029465356841683388,
      -0.06332512944936752,
      0.06879601627588272,
      0.008448733948171139,
      0.013340549543499947,
      0.00864589773118496,
      0.030509544536471367,
      -0.09237175434827805,
      -0.05963291600346565,
      0.07253251224756241,
      0.013838442042469978,
      0.028166405856609344,
      -0.0886743813753128,
      -0.01391467172652483,
      0.033234335482120514,
      -0.015679575502872467,
      -0.02220524102449417,
      -0.03442617133259773,
      0.07887823134660721,
      0.04089885577559471,
      -0.05767158418893814,
      0.03430687263607979,
      0.014131252653896809,
      0.010266001336276531,
      0.007247642148286104
    ],
    [
      -0.018107524141669273,
      -0.004399138502776623,
      -0.026571838185191154,
      0.05135069042444229,
      0.024451905861496925,
      -0.05567285045981407,
      0.03667811304330826,
      0.03353196382522583,
      0.023378141224384308,
      -0.01670924574136734,
      -0.015866803005337715,
      -0.011066831648349762,
      -0.0018537449650466442,
      0.05249904468655586,
      -0.004085119813680649,
      0.03456205129623413,
      -0.027938678860664368,
      -0.053469218313694,
      -0.04344681277871132,
      -0.04736233130097389,
      0.0464329794049263,
      -0.13277745246887207,
      -0.055833928287029266,
      0.007616488728672266,
      -0.008950539864599705,
      0.014150782488286495,
      -0.05976343899965286,
      -0.027748143300414085,
      0.03875226899981499,
      -0.009478490799665451,
      0.06581911444664001,
      -0.003383156843483448,
      -0.0585675947368145,
      -0.03675355389714241,
      -0.024053825065493584,
      0.04645990580320358,
      -0.10616391897201538,
      -0.05280002951622009,
      -0.03777863830327988,
      0.03839247673749924,
      -0.01674026995897293,
      -0.1099596694111824,
      0.058614905923604965,
      -0.05396564304828644,
      0.03206869959831238,
      -0.0036620169412344694,
      0.012840226292610168,
      0.06021095812320709,
      -0.02420227788388729,
      -0.0010339162545278668,
      0.07969636470079422,
      -0.011547449044883251,
      -0.02141806110739708,
      0.06215716898441315,
      0.004866733681410551,
      0.03122250735759735,
      0.0032128426246345043,
      -0.028575871139764786,
      -0.019964562729001045,
      -0.03759663924574852,
      0.04274289682507515,
      -0.033706407994031906,
      -0.043846867978572845,
      -0.014468519948422909,
      -0.01314345933496952,
      -0.022742796689271927,
      0.004804477095603943,
      -0.027909839525818825,
      0.08173923194408417,
      -0.008814595639705658,
      0.07179220765829086,
      0.010908104479312897,
      -0.0030773470643907785,
      -0.049904610961675644,
      0.022644884884357452,
      0.09437879920005798,
      0.0067933606915175915,
      0.05956585332751274,
      0.04071316868066788,
      -0.11987823247909546,
      0.08356236666440964,
      0.08873605728149414,
      0.03616757690906525,
      -0.05270449444651604,
      0.04820307716727257,
      0.014146902598440647,
      -0.02750939503312111,
      0.12275533378124237,
      0.05413085222244263,
      0.07023009657859802,
      0.07402347028255463,
      0.10163857042789459,
      -0.0767672061920166,
      0.04186924546957016,
      0.0031701205298304558,
      0.0570635087788105,
      -0.013611926697194576,
      0.04823055490851402,
      -0.07388490438461304,
      0.067403145134449,
      -0.001255617244169116,
      -0.07353445887565613,
      -0.1273518055677414,
      0.0347321517765522,
      0.03820311650633812,
      -0.027163196355104446,
      -0.03379366174340248,
      0.002471545012667775,
      -0.014451837167143822,
      -0.017338113859295845,
      -0.005178018473088741,
      0.04085025563836098,
      0.03758733347058296,
      -0.01712178997695446,
      -0.03909534588456154,
      0.1324082463979721,
      -0.02710348181426525,
      0.03016464225947857,
      0.02077501267194748,
      -0.012075868435204029,
      0.04375546798110008,
      0.029357358813285828,
      0.07664302736520767,
      -0.02457360178232193,
      0.03679313510656357,
      -0.0009104017517529428,
      -0.0069010318256914616,
      1.0497039656568253e-33,
      -0.004853387828916311,
      0.041066974401474,
      -0.019668325781822205,
      -0.06408072263002396,
      -0.05678043141961098,
      -0.012751204892992973,
      0.011830671690404415,
      0.03997933492064476,
      -0.08862926810979843,
      0.02311595156788826,
      0.020503083243966103,
      -0.025637684389948845,
      0.05847081169486046,
      -0.031422484666109085,
      0.05392283946275711,
      -0.11860141158103943,
      0.05234010890126228,
      0.0012757419608533382,
      0.016744205728173256,
      -0.11271785944700241,
      0.0668591782450676,
      -0.08954693377017975,
      -0.050953641533851624,
      0.041683342307806015,
      0.04603191837668419,
      -0.02559772878885269,
      -0.00037478888407349586,
      -0.007331123109906912,
      -0.03430137410759926,
      0.033496420830488205,
      0.027010461315512657,
      -0.02225392498075962,
      0.0793113186955452,
      0.014699652791023254,
      0.06955968588590622,
      -0.013254192657768726,
      0.0975390374660492,
      -0.07831068336963654,
      -0.024155637249350548,
      -0.08301364630460739,
      -0.052569031715393066,
      -0.025004422292113304,
      -0.02787415124475956,
      0.058894723653793335,
      -0.07209952920675278,
      -0.05984743684530258,
      -2.0248580767656676e-05,
      -0.014979423955082893,
      -0.08863358944654465,
      0.005071005783975124,
      0.029260827228426933,
      0.006209202576428652,
      0.030915306881070137,
      0.00043135974556207657,
      0.04110432043671608,
      0.05094238370656967,
      -0.020112918689846992,
      -0.020464079454541206,
      -0.052622489631175995,
      0.026032526046037674,
      0.05788083001971245,
      -0.04717958718538284,
      -0.10126454383134842,
      0.01357888150960207,
      -0.09542238712310791,
      0.12750279903411865,
      0.010053860023617744,
      -0.041457682847976685,
      0.01028087642043829,
      0.01571725122630596,
      -0.004141530953347683,
      0.02030005119740963,
      -0.04034160450100899,
      -0.044042494148015976,
      -0.06656324863433838,
      -0.02729843370616436,
      0.09030091017484665,
      0.0970865786075592,
      -0.046426981687545776,
      0.030851105228066444,
      -0.03226473182439804,
      -0.051495883613824844,
      -0.04039107635617256,
      0.06325734406709671,
      -0.03033134900033474,
      -0.06129291281104088,
      -0.010889487341046333,
      0.016419144347310066,
      0.03234352171421051,
      -0.05192194879055023,
      -0.015644604340195656,
      0.015378322452306747,
      0.09821591526269913,
      0.0017921532271429896,
      0.022504761815071106,
      -8.093746048086894e-34,
      -0.060117486864328384,
      0.003878231393173337,
      -0.0003762930864468217,
      0.046469368040561676,
      0.10112737119197845,
      -0.030398523434996605,
      -0.03728492930531502,
      -0.027160296216607094,
      -0.037682972848415375,
      -0.05332981050014496,
      -0.10452728718519211,
      0.046038538217544556,
      -0.014929516240954399,
      -0.03090340457856655,
      -0.06501159071922302,
      -0.08485490828752518,
      -0.059539247304201126,
      0.08708366751670837,
      0.01918366551399231,
      0.07151389867067337,
      0.07344263046979904,
      0.044608913362026215,
      -0.06262576580047607,
      0.06433234363794327,
      -0.00013850160758011043,
      0.03085942752659321,
      -0.0106913847848773,
      -0.02828061394393444,
      0.018560420721769333,
      0.0853605642914772,
      0.04061269760131836,
      -0.10798577219247818,
      -0.04914889484643936,
      -0.06092819944024086,
      -0.030788913369178772,
      0.02894146926701069,
      0.00421997532248497,
      0.032417844980955124,
      0.03914160281419754,
      0.03509917110204697,
      0.056006137281656265,
      0.010537464171648026,
      -0.01217156182974577,
      -0.03761803358793259,
      -0.04125669226050377,
      0.04007362574338913,
      -0.021683238446712494,
      0.008663579821586609,
      0.008298142813146114,
      -0.0018722083186730742,
      -0.0452633798122406,
      -0.025771459564566612,
      0.016417840495705605,
      0.06588946282863617,
      -0.0056497277691960335,
      -0.07414361089468002,
      0.10003741830587387,
      -0.06741848587989807,
      0.013216478750109673,
      0.011816225945949554,
      0.04219292104244232,
      -0.04701671749353409,
      -0.005971196573227644,
      0.1341535449028015,
      0.08662059903144836,
      -0.04969056323170662,
      0.020675653591752052,
      -0.0020355849992483854,
      -0.011285755783319473,
      0.04485015571117401,
      0.05471813678741455,
      0.018811486661434174,
      -0.03711964935064316,
      0.04274427890777588,
      0.03721584379673004,
      0.033801592886447906,
      -0.05448443442583084,
      0.029767781496047974,
      0.01726865954697132,
      0.00859854370355606,
      -0.044594790786504745,
      0.032791513949632645,
      0.028951074928045273,
      -0.06510120630264282,
      0.003858624491840601,
      0.0026552584022283554,
      0.08395001292228699,
      -0.02087029628455639,
      0.01230723224580288,
      0.0008121260907500982,
      0.008086075074970722,
      -0.004252744372934103,
      0.0680786669254303,
      -0.021574120968580246,
      -0.021493932232260704,
      -5.076883624610673e-08,
      -0.012164533138275146,
      0.03078106790781021,
      -0.047381117939949036,
      0.02308516576886177,
      0.03542889654636383,
      0.017895612865686417,
      0.023106494918465614,
      -0.11480335891246796,
      0.022013986483216286,
      0.009365064091980457,
      0.062211304903030396,
      -0.03397480025887489,
      -0.013734237290918827,
      -0.1009964719414711,
      -0.03875938057899475,
      -0.07490642368793488,
      0.00946056842803955,
      -0.00017620738071855158,
      -0.03593187406659126,
      -0.043621793389320374,
      0.030472591519355774,
      0.02404305525124073,
      -0.005518950056284666,
      -0.08447175472974777,
      -0.03518930822610855,
      0.013103102333843708,
      0.13825276494026184,
      0.11104802787303925,
      0.0563356950879097,
      0.043556325137615204,
      -0.06308966875076294,
      -0.02568644843995571,
      0.04193579778075218,
      0.02824266441166401,
      -0.05836896598339081,
      0.08804463595151901,
      -0.05969977751374245,
      0.03797757998108864,
      0.024097565561532974,
      0.12715774774551392,
      -0.06428830325603485,
      0.06037944182753563,
      0.025470415130257607,
      -0.03636545315384865,
      -0.05629444122314453,
      0.04997837170958519,
      -0.09617648273706436,
      -0.015261394903063774,
      0.027625402435660362,
      -0.02211025357246399,
      0.09384144842624664,
      -0.0696994736790657,
      -0.07366955280303955,
      0.021806877106428146,
      0.039058487862348557,
      0.021185068413615227,
      0.023431597277522087,
      0.0045700292102992535,
      0.0761171281337738,
      -0.1221923679113388,
      -0.029891379177570343,
      -0.004591073840856552,
      -0.08580763638019562,
      -0.018247121945023537
    ],
    [
      -0.04579022899270058,
      -0.017831292003393173,
      -0.08592738211154938,
      0.06978543102741241,
      -0.011312643066048622,
      -0.026921313256025314,
      0.037685576826334,
      0.07172098755836487,
      -0.021882982924580574,
      -0.045668065547943115,
      0.01709350198507309,
      -0.046929143369197845,
      0.04279191419482231,
      -0.07005279511213303,
      0.01635928265750408,
      0.012806008569896221,
      -0.013639947399497032,
      -0.007913733832538128,
      -0.055275775492191315,
      -0.01902063935995102,
      0.06186541169881821,
      -0.0017915483331307769,
      0.04738321155309677,
      -0.011246093548834324,
      -0.09820259362459183,
      -0.02525908127427101,
      -0.031563650816679,
      -0.026145288720726967,
      -0.02294871024787426,
      -0.0035793769638985395,
      0.011115857400000095,
      0.03123493865132332,
      -0.13115264475345612,
      -0.03712117671966553,
      0.09431593865156174,
      0.002340656006708741,
      -0.03286803886294365,
      -0.02626407891511917,
      -0.013747069053351879,
      -0.012117733247578144,
      0.024111418053507805,
      -0.01922786235809326,
      -0.019007224589586258,
      -0.08114702999591827,
      -0.04875500500202179,
      -0.09539520740509033,
      -0.009778059087693691,
      0.05344525724649429,
      0.05556071549654007,
      -0.021593699231743813,
      -0.08219043165445328,
      0.09590636193752289,
      -0.02655341662466526,
      -0.04915845766663551,
      0.03466372564435005,
      0.050861820578575134,
      -0.013129953294992447,
      -0.02462863363325596,
      -0.003854757407680154,
      -0.023044593632221222,
      -0.05227741599082947,
      -0.0006519338930957019,
      0.03435767814517021,
      0.0028929365798830986,
      -0.01318391039967537,
      0.0039318823255598545,
      0.04128669202327728,
      0.06371347606182098,
      0.049064479768276215,
      -0.058051642030477524,
      -0.048122111707925797,
      -0.007987245917320251,
      -0.009011555463075638,
      0.03178390860557556,
      0.08453343063592911,
      -0.06208033487200737,
      0.023247940465807915,
      0.05408298596739769,
      -0.11708831787109375,
      -0.1784934401512146,
      -0.01906523108482361,
      -0.08369892835617065,
      0.04135492071509361,
      -0.0039986916817724705,
      0.039759229868650436,
      0.060830067843198776,
      0.07585377246141434,
      0.03907040134072304,
      0.08975706994533539,
      0.01987523026764393,
      0.028861621394753456,
      0.024349596351385117,
      -0.024906188249588013,
      0.014929908327758312,
      0.004975918214768171,
      0.08734791725873947,
      0.0328080989420414,
      0.09400679916143417,
      -0.0507461316883564,
      0.11272472143173218,
      -0.015651993453502655,
      -0.03772905841469765,
      -0.014937429688870907,
      0.09997681528329849,
      -0.01871969923377037,
      -0.036398228257894516,
      0.027198897674679756,
      0.018369164317846298,
      0.009406640194356441,
      -0.022842679172754288,
      0.04167569428682327,
      0.0181755218654871,
      0.005018262192606926,
      -0.13070441782474518,
      -0.005647033452987671,
      -0.003465791465714574,
      0.062045201659202576,
      -0.018970342352986336,
      0.07591671496629715,
      0.021345440298318863,
      0.17288067936897278,
      -0.02041301317512989,
      -0.07827126234769821,
      0.05627194792032242,
      -0.05339369922876358,
      -0.013085094280540943,
      -0.008808664977550507,
      4.285645956902697e-33,
      0.021165577694773674,
      -0.052149150520563126,
      0.016709648072719574,
      -0.017620379105210304,
      0.025478141382336617,
      0.013028435409069061,
      0.026334265246987343,
      0.06814436614513397,
      -0.021533505991101265,
      0.04210466146469116,
      -0.08133122324943542,
      -0.019605400040745735,
      -0.08704693615436554,
      -0.04526970908045769,
      -0.05471930652856827,
      -0.09536577016115189,
      -0.009589224122464657,
      -0.02766762115061283,
      0.08679056912660599,
      0.02409932389855385,
      -0.03409019112586975,
      -0.012880945578217506,
      0.024144012480974197,
      0.005284404382109642,
      0.002302745822817087,
      0.06434904783964157,
      0.017288142815232277,
      0.05422220006585121,
      -0.015220935456454754,
      -0.0032959349919110537,
      0.051399633288383484,
      -0.05061831325292587,
      -0.016104524955153465,
      -0.02597905695438385,
      -0.050538741052150726,
      -0.021999219432473183,
      -0.09685305505990982,
      -0.043932411819696426,
      -0.06098904088139534,
      -0.060804322361946106,
      -0.026078764349222183,
      -0.010796381160616875,
      0.0039012283086776733,
      -0.008004318922758102,
      -0.04894895851612091,
      -0.15002110600471497,
      0.03465878963470459,
      0.03241245076060295,
      0.016225716099143028,
      -0.06989613175392151,
      0.015297896228730679,
      0.05783853679895401,
      0.017655499279499054,
      -0.013475230894982815,
      -0.00960903987288475,
      -0.06641624867916107,
      -0.07726499438285828,
      -0.0008381402585655451,
      0.09581609070301056,
      0.01740868203341961,
      -0.009684659540653229,
      -0.0035524985287338495,
      0.009347856044769287,
      -0.0046293409541249275,
      -0.012109336443245411,
      0.07885564863681793,
      -0.001236237003467977,
      0.05585081875324249,
      0.026259835809469223,
      -0.031895510852336884,
      0.015704937279224396,
      -0.043676622211933136,
      0.11522433161735535,
      0.03254254162311554,
      0.12485192716121674,
      0.012286484241485596,
      -0.0016483800718560815,
      -0.07635397464036942,
      0.02377139776945114,
      -0.02722553350031376,
      -0.03077072463929653,
      -0.013988704420626163,
      -0.04611479863524437,
      0.028810907155275345,
      0.0033404442947357893,
      0.06797543168067932,
      0.035136181861162186,
      -0.008536653593182564,
      0.04972929134964943,
      0.05949821695685387,
      -0.04042984917759895,
      -0.00913949403911829,
      0.01907176896929741,
      -0.0741792619228363,
      0.05567066743969917,
      -5.605256282477782e-33,
      -0.0054986849427223206,
      -0.014694630168378353,
      -0.02814246155321598,
      -0.09317649155855179,
      -0.047805141657590866,
      0.016503866761922836,
      0.030271468684077263,
      0.0010289772180840373,
      0.08538069576025009,
      0.04174335300922394,
      -0.022135054692626,
      0.017355896532535553,
      0.015290415845811367,
      -0.09623056650161743,
      0.06316546350717545,
      0.12240084260702133,
      -0.0020976809319108725,
      0.03027500957250595,
      0.022147495299577713,
      -0.014617884531617165,
      -0.029603172093629837,
      0.0813509151339531,
      -0.07919778674840927,
      0.037818145006895065,
      -0.0955447107553482,
      -0.03307361900806427,
      0.09099721908569336,
      0.03517420217394829,
      -0.020439008250832558,
      0.007033909671008587,
      0.004883614834398031,
      -0.01737719401717186,
      -0.13913308084011078,
      0.07031669467687607,
      -0.04076264053583145,
      0.027010295540094376,
      -0.022569123655557632,
      0.026800187304615974,
      -0.07803793996572495,
      0.03916951268911362,
      0.005484652705490589,
      0.033135052770376205,
      -0.05199737101793289,
      0.04043285548686981,
      -0.01876213401556015,
      0.003430776298046112,
      0.04449237883090973,
      -0.04502267763018608,
      -0.02255123294889927,
      -0.008095323108136654,
      0.029976844787597656,
      -0.04361575096845627,
      -0.0590885691344738,
      -0.04920092970132828,
      -0.021236542612314224,
      0.014641255140304565,
      0.07480113953351974,
      0.048217177391052246,
      -0.022080445662140846,
      -0.05533884838223457,
      -0.022360140457749367,
      -0.043860673904418945,
      0.010413434356451035,
      -0.02972831018269062,
      0.07680796086788177,
      0.015250861644744873,
      -0.03363533690571785,
      -0.030922267585992813,
      -0.014245287515223026,
      0.05978095158934593,
      0.005623016972094774,
      0.020130574703216553,
      0.019792689010500908,
      -0.029719563201069832,
      0.04921681433916092,
      0.1308109164237976,
      0.04848087579011917,
      0.02182881161570549,
      -0.056065309792757034,
      0.035749465227127075,
      0.08683982491493225,
      -0.004614479374140501,
      0.05218558385968208,
      -0.1144167110323906,
      -0.10055404901504517,
      -0.053296562284231186,
      0.05030777305364609,
      0.1352992206811905,
      -0.04037554934620857,
      -0.017273826524615288,
      -0.005045472178608179,
      -0.014107100665569305,
      0.061855487525463104,
      0.016722561791539192,
      0.013881474733352661,
      -5.003504099931888e-08,
      -0.08878286927938461,
      -0.0009594560251571238,
      -0.013871727511286736,
      0.03861130774021149,
      0.03226134926080704,
      -0.010951348580420017,
      0.030309148132801056,
      0.055986348539590836,
      -0.09848003089427948,
      -0.08317936211824417,
      -0.02596491202712059,
      0.053415726870298386,
      0.07465636730194092,
      -0.003575891023501754,
      0.011829489842057228,
      0.02306663990020752,
      -0.02887558564543724,
      0.04151938855648041,
      -0.06838478893041611,
      -0.041382525116205215,
      0.021465349942445755,
      0.07516559213399887,
      0.018069127574563026,
      0.037261538207530975,
      -0.0007402808405458927,
      -0.019718550145626068,
      0.03940312936902046,
      -0.008634421974420547,
      -0.009328821673989296,
      -0.01783822663128376,
      -0.009450175799429417,
      -0.07143983244895935,
      -0.011053686030209064,
      -0.06434359401464462,
      0.030865538865327835,
      -0.029536932706832886,
      0.018822386860847473,
      -0.009186978451907635,
      0.016230788081884384,
      0.04369815066456795,
      -0.01462212298065424,
      0.007304141763597727,
      -0.041707392781972885,
      0.03472592309117317,
      0.03143419325351715,
      -0.04845358431339264,
      -0.20470938086509705,
      0.062261294573545456,
      0.03815599903464317,
      0.028622912243008614,
      0.03329984098672867,
      -0.022378582507371902,
      0.018424317240715027,
      -0.0651445984840393,
      -0.03066258132457733,
      -0.019346363842487335,
      0.010820801369845867,
      0.029582858085632324,
      -0.011978399008512497,
      0.0023746518418192863,
      0.02608502469956875,
      0.02594100683927536,
      0.07523754239082336,
      -0.029173893854022026
    ],
    [
      -0.04758884757757187,
      -0.043526820838451385,
      -0.025682635605335236,
      0.05101005733013153,
      0.01342768408358097,
      -0.008901322260499,
      0.01677796058356762,
      0.04338366538286209,
      0.02131011337041855,
      -0.0677141472697258,
      0.006276797503232956,
      -0.022357551380991936,
      0.006833767984062433,
      -0.053222741931676865,
      0.017211085185408592,
      0.01618037559092045,
      -0.008864548988640308,
      0.00265618902631104,
      -0.06341163069009781,
      -0.013124274089932442,
      0.06170514225959778,
      -0.0348658487200737,
      0.03901541233062744,
      -0.02458314038813114,
      -0.08905177563428879,
      0.0026217724662274122,
      -0.02550027333199978,
      -0.04792875796556473,
      -0.037380218505859375,
      -0.0033926668111234903,
      0.043646909296512604,
      -0.01240220945328474,
      -0.13533052802085876,
      -0.06935552507638931,
      0.04518318548798561,
      0.001956215826794505,
      -0.028539540246129036,
      -0.010630050674080849,
      0.012978416867554188,
      0.003653909545391798,
      0.015130219049751759,
      -0.02033570408821106,
      0.004073859192430973,
      -0.0957842692732811,
      -0.0046175806783139706,
      -0.0934096947312355,
      -0.013051546178758144,
      0.04574848711490631,
      0.03901759907603264,
      0.0030390641186386347,
      -0.06572706997394562,
      0.09850297123193741,
      -0.006916317157447338,
      -0.03836671635508537,
      0.013359539210796356,
      0.050444912165403366,
      -0.0455738790333271,
      0.006725252140313387,
      0.010476983152329922,
      0.01731252670288086,
      -0.02647271938621998,
      -0.007804142776876688,
      0.0355331227183342,
      0.0043611833825707436,
      0.009528047405183315,
      -0.002852377947419882,
      0.01349854189902544,
      0.058034785091876984,
      0.005282527767121792,
      -0.025635886937379837,
      -0.0172139722853899,
      0.008549096994102001,
      0.024578941985964775,
      0.04082181304693222,
      0.08360831439495087,
      -0.07774344086647034,
      -0.006728605832904577,
      0.05592162907123566,
      -0.08704834431409836,
      -0.1452668160200119,
      -0.014477637596428394,
      -0.1010284498333931,
      0.05475550889968872,
      -0.002639088546857238,
      0.03265964984893799,
      0.10543757677078247,
      0.044015951454639435,
      0.05232218652963638,
      0.08042388409376144,
      0.01789894886314869,
      -0.002976788906380534,
      0.03740251064300537,
      -0.01617458276450634,
      0.03357690945267677,
      0.004187903366982937,
      0.07318929582834244,
      0.0077342982403934,
      0.10120564699172974,
      -0.07036142796278,
      0.09465456753969193,
      -0.02888515032827854,
      -0.012371163815259933,
      -0.01497050654143095,
      0.0962398573756218,
      -0.013381626456975937,
      -0.045611508190631866,
      0.008821318857371807,
      0.03773689642548561,
      0.02452990412712097,
      -0.021006206050515175,
      0.04643154889345169,
      0.0747935101389885,
      -0.0067382375709712505,
      -0.11187592893838882,
      -0.05542032793164253,
      -0.010219226591289043,
      0.08981427550315857,
      -0.05244646966457367,
      0.11984754353761673,
      0.03142208978533745,
      0.18599092960357666,
      -0.010705639608204365,
      -0.07429447025060654,
      0.06429804116487503,
      -0.023502197116613388,
      0.002125821076333523,
      -0.009085568599402905,
      5.191474556806659e-33,
      0.004254679195582867,
      -0.029688941314816475,
      -0.0041690245270729065,
      0.009235688485205173,
      0.012151604518294334,
      -0.001197240431793034,
      0.007558978162705898,
      0.06722564250230789,
      -0.06066441535949707,
      0.03558628633618355,
      -0.0636373907327652,
      0.001998281106352806,
      -0.08289346098899841,
      -0.053870122879743576,
      -0.06079062819480896,
      -0.09853943437337875,
      0.009442487731575966,
      -0.04499449580907822,
      0.09314201772212982,
      -0.002615899546071887,
      -0.04471093416213989,
      0.0023610801436007023,
      0.05004090443253517,
      0.028150340542197227,
      -0.00811163429170847,
      0.058267366141080856,
      0.029537497088313103,
      0.08350713551044464,
      -0.027644023299217224,
      -0.000853878736961633,
      0.06561325490474701,
      -0.04626336321234703,
      -0.030577117577195168,
      -0.011486241593956947,
      -0.02641587145626545,
      0.0030540945008397102,
      -0.1192283034324646,
      -0.041271574795246124,
      -0.046893514692783356,
      -0.043049491941928864,
      0.010070902295410633,
      -0.015205435454845428,
      -0.019751407206058502,
      0.001660787034779787,
      -0.047641415148973465,
      -0.14700889587402344,
      0.058590542525053024,
      0.026966307312250137,
      0.02817659080028534,
      -0.07224100828170776,
      -0.018412351608276367,
      0.08986423909664154,
      0.02136443555355072,
      -0.020617008209228516,
      0.01559002511203289,
      -0.07716816663742065,
      -0.10737468302249908,
      -0.01955210417509079,
      0.07041288912296295,
      0.005271910224109888,
      0.0028365657199174166,
      -0.005062827840447426,
      0.0007268303306773305,
      0.0008682007901370525,
      -0.03724602237343788,
      0.033364929258823395,
      -0.015699058771133423,
      0.0674610435962677,
      -0.006866619922220707,
      -0.056242939084768295,
      0.040094152092933655,
      -0.0459437221288681,
      0.1364092230796814,
      0.04522765427827835,
      0.11946302652359009,
      0.014898393303155899,
      -0.016541065648198128,
      -0.06973695009946823,
      0.03184923157095909,
      -0.05092703178524971,
      -0.01691685989499092,
      -0.025897715240716934,
      -0.06154699996113777,
      0.05171293765306473,
      0.029366353526711464,
      0.09127571433782578,
      0.00822792574763298,
      -0.014765799045562744,
      0.06337244808673859,
      0.09191124141216278,
      -0.03037574514746666,
      -0.007010876666754484,
      0.004169137217104435,
      -0.07467515021562576,
      0.036540184170007706,
      -6.724393393359818e-33,
      -0.022744663059711456,
      -0.0003373370273038745,
      -0.060886263847351074,
      -0.06411109864711761,
      -0.05394008755683899,
      0.029097143560647964,
      0.03524971753358841,
      0.010345530696213245,
      0.07531088590621948,
      0.024537770077586174,
      -0.0004792661056853831,
      0.028181923553347588,
      -0.002728377003222704,
      -0.08026079833507538,
      0.025228247046470642,
      0.10999497771263123,
      -0.006814713589847088,
      0.029039358720183372,
      0.03827555850148201,
      -0.053167663514614105,
      0.013328381814062595,
      0.09202463924884796,
      -0.07333081215620041,
      0.05836910009384155,
      -0.10394852608442307,
      -0.03647581860423088,
      0.08834566175937653,
      0.0386909618973732,
      -0.056869689375162125,
      0.011735987849533558,
      -0.002353850519284606,
      -0.009139920584857464,
      -0.09989747405052185,
      0.09415438026189804,
      -0.012976073659956455,
      0.022698204964399338,
      -0.028518369421362877,
      0.02297881804406643,
      -0.08305562287569046,
      0.02547786571085453,
      -0.039236314594745636,
      -0.01444560568779707,
      -0.059974320232868195,
      0.02524374984204769,
      -0.006694527342915535,
      0.028116675093770027,
      0.05230790376663208,
      -0.029412059113383293,
      -0.011686718091368675,
      0.004115909803658724,
      0.0009128710371442139,
      -0.07368402183055878,
      -0.0696287751197815,
      -0.05820811167359352,
      -0.015772126615047455,
      -0.00366035639308393,
      0.052587755024433136,
      0.02592853084206581,
      -0.00932274479418993,
      -0.03492773324251175,
      -0.01856379583477974,
      -0.05331806093454361,
      0.01990770548582077,
      -0.029412968084216118,
      0.08638688921928406,
      0.002885813359171152,
      -0.02320179156959057,
      0.004009691532701254,
      0.026929078623652458,
      0.06048281863331795,
      -0.001595293520949781,
      -0.00509019335731864,
      0.03758106753230095,
      -0.04476359486579895,
      0.04931721091270447,
      0.10039369761943817,
      0.061511822044849396,
      0.001997876912355423,
      -0.05263936519622803,
      0.010819472372531891,
      0.09565428644418716,
      -0.007055899128317833,
      0.049439433962106705,
      -0.13820180296897888,
      -0.06326225399971008,
      -0.03355228528380394,
      0.04223371669650078,
      0.11745601892471313,
      -0.0793793797492981,
      -0.027119016274809837,
      0.019356660544872284,
      0.005594383459538221,
      0.04490262269973755,
      0.010672738775610924,
      0.005638936068862677,
      -5.12353466319837e-08,
      -0.10554016381502151,
      -0.0002930469636339694,
      -0.044298119843006134,
      -0.01380024291574955,
      -0.012810967862606049,
      -0.020936336368322372,
      0.03000919707119465,
      0.04696647822856903,
      -0.09108195453882217,
      -0.1030535027384758,
      -0.02141995169222355,
      0.07326725125312805,
      0.10112466663122177,
      -0.004542027600109577,
      0.0018041380681097507,
      0.012364543043076992,
      -0.047438111156225204,
      0.04697056859731674,
      -0.06551261246204376,
      -0.014535618014633656,
      0.02969755046069622,
      0.08306962996721268,
      0.02788727916777134,
      0.027974912896752357,
      0.006428650580346584,
      -0.05295815318822861,
      -0.0018253606976941228,
      -0.013501635752618313,
      -0.01072014681994915,
      -0.005044602323323488,
      -0.02001289837062359,
      -0.05632690712809563,
      0.00537578109651804,
      -0.07076781243085861,
      0.006193222478032112,
      -0.03576325997710228,
      0.02644306793808937,
      -0.01954478956758976,
      0.03540518134832382,
      0.03082871250808239,
      0.01878255419433117,
      -0.01083795353770256,
      -0.04625159874558449,
      0.05195191502571106,
      0.005274545401334763,
      -0.04361735284328461,
      -0.17935588955879211,
      0.059375036507844925,
      0.030702466145157814,
      0.035366788506507874,
      0.04412008821964264,
      0.003134962171316147,
      0.01304975338280201,
      -0.068608857691288,
      -0.02821345068514347,
      -0.04590436443686485,
      0.0026929606683552265,
      0.02322547696530819,
      -0.019173767417669296,
      -0.0035604373551905155,
      0.028518009930849075,
      0.02175423689186573,
      0.0677543506026268,
      -0.0430292971432209
    ],
    [
      -0.00956845935434103,
      0.02325327694416046,
      -0.02579447254538536,
      -0.005330667831003666,
      0.08686523139476776,
      0.040480971336364746,
      0.08607933670282364,
      0.09750014543533325,
      -0.006452606990933418,
      0.04120165482163429,
      0.05527337267994881,
      -0.004769197199493647,
      0.03399959206581116,
      0.014624930918216705,
      -0.0005766666727140546,
      -0.010595312342047691,
      -0.11711115390062332,
      -0.034766677767038345,
      0.008995524607598782,
      0.06808755546808243,
      -0.042308565229177475,
      -0.10465995222330093,
      0.1040736734867096,
      -0.01660790666937828,
      0.011768353171646595,
      0.062373917549848557,
      0.01953151263296604,
      -0.0013203690759837627,
      -0.015156335197389126,
      -0.09920657426118851,
      0.013957369141280651,
      0.041879333555698395,
      0.04035907983779907,
      -0.0028642641846090555,
      0.027683550491929054,
      0.0954020619392395,
      0.010336155071854591,
      -0.05785535275936127,
      -0.023947536945343018,
      -0.06294376403093338,
      -0.014758762903511524,
      -0.0004087792185600847,
      0.0037511775735765696,
      -0.05282577499747276,
      -0.020810648798942566,
      0.07624083012342453,
      0.0003458256833255291,
      0.00984711293131113,
      0.036594051867723465,
      0.04497035592794418,
      -0.05611100420355797,
      -0.04884873330593109,
      -0.05640014633536339,
      -0.09657523781061172,
      0.004544360097497702,
      0.13193956017494202,
      0.061960458755493164,
      0.018847599625587463,
      0.01870993711054325,
      0.005304752849042416,
      0.05224759876728058,
      0.08277823776006699,
      -0.010448908433318138,
      0.010983563028275967,
      -0.0048692855052649975,
      0.06767085194587708,
      -0.013785328716039658,
      -0.059481047093868256,
      0.03965955227613449,
      -0.0869876965880394,
      0.017299426719546318,
      -0.06534487009048462,
      0.06976871192455292,
      -0.05852252617478371,
      -0.026113342493772507,
      -0.0007369027007371187,
      0.003330410923808813,
      0.029461249709129333,
      0.06517982482910156,
      -0.1950109899044037,
      -0.028923511505126953,
      0.04233400523662567,
      0.01680285483598709,
      0.012248593382537365,
      0.061194341629743576,
      0.01846957765519619,
      -0.015028595924377441,
      -0.011351498775184155,
      0.017281530424952507,
      0.0497841015458107,
      0.05115707963705063,
      -0.03673630207777023,
      -0.04848871007561684,
      -0.0063313026912510395,
      0.0458148792386055,
      0.01430554874241352,
      -0.07074213773012161,
      -0.0062462142668664455,
      -0.09415294975042343,
      0.05296531319618225,
      -0.04910096898674965,
      -0.027321428060531616,
      -0.021813426166772842,
      0.023425815626978874,
      0.10410714894533157,
      0.048777516931295395,
      0.051118310540914536,
      -0.12132768332958221,
      0.003933700267225504,
      -0.008999135345220566,
      -0.02320168912410736,
      0.025943033397197723,
      0.027293790131807327,
      -0.007197888568043709,
      -0.023833494633436203,
      0.03648465871810913,
      -0.0020760903134942055,
      -0.0002634210104588419,
      0.03261260315775871,
      -0.005419549997895956,
      0.08693912625312805,
      -0.024159682914614677,
      0.056749869138002396,
      -0.010485860519111156,
      -0.032017357647418976,
      -0.04648008570075035,
      -0.07252835482358932,
      3.834544489644875e-33,
      -0.017171664163470268,
      -0.017531782388687134,
      -0.042726799845695496,
      0.04077481850981712,
      0.022300245240330696,
      -0.04807770252227783,
      0.01370982825756073,
      0.011968770995736122,
      -0.09986529499292374,
      0.03334028273820877,
      -0.022954320535063744,
      -0.012960230931639671,
      -0.031160766258835793,
      0.08418009430170059,
      0.020376041531562805,
      -0.018823502585291862,
      -0.04837310314178467,
      -0.015360446646809578,
      -0.017766224220395088,
      -0.018695054575800896,
      0.03357338532805443,
      -0.10340004414319992,
      -0.06578370928764343,
      -0.003012498142197728,
      0.005939152091741562,
      0.10023880749940872,
      0.042267411947250366,
      0.10500162839889526,
      0.03267495706677437,
      -0.007096170447766781,
      0.05852340906858444,
      -0.02060483582317829,
      0.03287183493375778,
      0.012224878184497356,
      -0.034386031329631805,
      -0.07215803861618042,
      0.010048573836684227,
      -0.02958890236914158,
      -0.1069444939494133,
      0.048208050429821014,
      0.006174467504024506,
      -0.047388896346092224,
      -0.008066197857260704,
      0.011684496887028217,
      0.04942413046956062,
      0.046131569892168045,
      0.06361262500286102,
      0.0650990828871727,
      0.023787135258316994,
      -0.061205342411994934,
      -0.0001965327828656882,
      -0.020250026136636734,
      -0.018487248569726944,
      -0.10012779384851456,
      -0.04030611738562584,
      -0.08163243532180786,
      -0.07656748592853546,
      0.02619856595993042,
      0.024140845984220505,
      -0.06036637723445892,
      -0.04399138316512108,
      0.05019969120621681,
      0.02093852311372757,
      0.042067065834999084,
      0.007442426402121782,
      0.0961240828037262,
      -0.008832953870296478,
      -0.054164543747901917,
      -0.03791729360818863,
      -0.0564209409058094,
      -0.007591343484818935,
      0.012136382050812244,
      -0.02274465560913086,
      -0.027088206261396408,
      -0.08116067200899124,
      -0.016997545957565308,
      0.037184033542871475,
      -0.04850880056619644,
      -0.06699132919311523,
      -0.0027985558845102787,
      -0.10104065388441086,
      -0.026265840977430344,
      -0.0027627695817500353,
      -0.023185499012470245,
      0.03794271871447563,
      -0.0494033582508564,
      0.14014680683612823,
      -0.019332999363541603,
      -0.004597047809511423,
      -0.0019907960668206215,
      -0.02238941378891468,
      0.009948741644620895,
      -0.010321272537112236,
      -0.05317401885986328,
      -0.02385990135371685,
      -3.9051825165796785e-33,
      0.06336025148630142,
      0.00735697615891695,
      0.012761224061250687,
      -0.012801846489310265,
      0.015568140894174576,
      0.027110135182738304,
      0.051861900836229324,
      0.07379461079835892,
      -0.01041715033352375,
      -0.033114150166511536,
      -0.011645318008959293,
      0.018556222319602966,
      -0.014947708696126938,
      -0.0988355427980423,
      0.005066560115665197,
      0.007122636307030916,
      -0.05293269827961922,
      0.08294952660799026,
      -0.03396020084619522,
      0.06564021855592728,
      -0.029929829761385918,
      0.09324204176664352,
      -0.014957163482904434,
      0.05585585907101631,
      -0.00216919113881886,
      0.09561672061681747,
      0.06531929224729538,
      0.03796326741576195,
      0.005692909471690655,
      0.006202002987265587,
      0.00808633677661419,
      0.0360582061111927,
      -0.06028030067682266,
      0.09955704212188721,
      0.05612886697053909,
      0.02539675682783127,
      0.0027432783972471952,
      -0.020925061777234077,
      -0.115918830037117,
      0.06165086850523949,
      0.060711365193128586,
      0.021281251683831215,
      -0.014601855538785458,
      0.015970567241311073,
      -0.026458201929926872,
      -0.06696882843971252,
      0.014409688301384449,
      0.04135743901133537,
      0.008900544606149197,
      0.037562403827905655,
      0.030572157353162766,
      -0.13702763617038727,
      0.013049118220806122,
      0.03370220214128494,
      -0.03509333357214928,
      0.11167079955339432,
      0.047289926558732986,
      0.00627546152099967,
      0.056871090084314346,
      -0.007427684497088194,
      0.09421467036008835,
      -0.12999291718006134,
      -0.007963557727634907,
      -0.055879656225442886,
      0.04048559069633484,
      -0.017250102013349533,
      -0.05258706212043762,
      0.06639232486486435,
      -0.06070422753691673,
      0.10436764359474182,
      -0.01210944913327694,
      -0.03926824405789375,
      0.03177892044186592,
      0.0002337331388844177,
      0.09310455620288849,
      0.052929796278476715,
      0.022440478205680847,
      0.01923929527401924,
      0.027937039732933044,
      -0.07176728546619415,
      -0.010332305915653706,
      -0.0563669428229332,
      -0.01643500290811062,
      -0.027790458872914314,
      0.046207182109355927,
      0.02714737504720688,
      -0.04910532757639885,
      0.01423205342143774,
      0.02462763898074627,
      0.00389210507273674,
      -0.09137070178985596,
      -0.004704676568508148,
      0.09899230301380157,
      -0.0010522814700379968,
      0.058073192834854126,
      -5.013696835476367e-08,
      -0.0043103015050292015,
      -0.022685153409838676,
      0.01936616748571396,
      -0.050342537462711334,
      0.05264624208211899,
      -0.020010169595479965,
      -0.03250310942530632,
      -0.09860514849424362,
      -0.060476675629615784,
      -0.038921184837818146,
      -0.05386103689670563,
      0.016558343544602394,
      -0.052492182701826096,
      -0.02478819526731968,
      -0.02715022675693035,
      -0.00494224252179265,
      -0.0935964435338974,
      0.09999530017375946,
      -0.040044765919446945,
      -0.06289345771074295,
      -0.04807061702013016,
      -0.03014000877737999,
      0.015004678629338741,
      -0.008776983246207237,
      -0.01778077892959118,
      -0.012683232314884663,
      -0.05388706177473068,
      -0.03721131384372711,
      0.002770225750282407,
      0.03365522250533104,
      0.050183169543743134,
      0.018813101574778557,
      0.14294449985027313,
      -0.03856587037444115,
      -0.016632525250315666,
      0.05254784971475601,
      0.013109315186738968,
      -0.02702067233622074,
      0.019109051674604416,
      -0.008637183345854282,
      -0.018695911392569542,
      -0.060559798032045364,
      -0.04632152244448662,
      -0.03183078020811081,
      -0.06890793889760971,
      -0.06792331486940384,
      0.08791673183441162,
      -0.0008001148235052824,
      -0.04273322969675064,
      0.06066102907061577,
      0.011962546035647392,
      -0.09899479150772095,
      0.0060450187884271145,
      0.02737829089164734,
      -0.01786632463335991,
      0.014310651458799839,
      0.0902194082736969,
      -0.020733799785375595,
      0.09801679104566574,
      0.06669409573078156,
      -0.02723892219364643,
      -0.02048386260867119,
      -0.0028320972342044115,
      -0.08230506628751755
    ],
    [
      -0.003046456491574645,
      0.03802049905061722,
      0.0094107361510396,
      -0.02354198694229126,
      0.047122322022914886,
      -0.08430569618940353,
      -0.02286674827337265,
      -0.030801137909293175,
      0.05272796377539635,
      0.0287555530667305,
      0.020762205123901367,
      -0.11607082188129425,
      0.06971602886915207,
      -0.03496088087558746,
      0.0008528083562850952,
      -0.07115847617387772,
      0.06576315313577652,
      0.018745657056570053,
      -0.04362747073173523,
      0.05028626695275307,
      -0.02909238263964653,
      0.07008549571037292,
      0.042556531727313995,
      -0.036523737013339996,
      -0.0682109147310257,
      -0.012457814067602158,
      -0.02228420414030552,
      0.02058255486190319,
      0.0035623374860733747,
      -0.0569193959236145,
      0.05958373844623566,
      0.06984806805849075,
      -0.014409668743610382,
      0.010360500775277615,
      0.11340580880641937,
      0.12996672093868256,
      -0.053926508873701096,
      0.002840872388333082,
      -0.010467078536748886,
      -0.008297410793602467,
      0.07495246827602386,
      -0.08020475506782532,
      -0.06900616735219955,
      -0.06935153901576996,
      -0.04812682420015335,
      0.033033788204193115,
      0.0285814069211483,
      -0.08337399363517761,
      -0.023748112842440605,
      0.019203783944249153,
      -0.01901850476861,
      -0.10445241630077362,
      0.008062935434281826,
      -0.004062103107571602,
      -0.07320541888475418,
      -0.015927152708172798,
      0.0021851868368685246,
      0.07620751857757568,
      0.0002921424456872046,
      0.008734392933547497,
      -0.01327807642519474,
      0.018908780068159103,
      -0.03171519935131073,
      -0.0016451728297397494,
      -0.038964662700891495,
      0.03465283662080765,
      0.06430443376302719,
      0.005086818709969521,
      0.041780225932598114,
      -0.0008965534507296979,
      0.0836992859840393,
      0.05039067193865776,
      -0.011130310595035553,
      -0.13301828503608704,
      -0.11405795812606812,
      0.07945035398006439,
      -0.04684421420097351,
      0.04262620955705643,
      0.05622520297765732,
      -0.02827306091785431,
      0.06366761028766632,
      -0.029483024030923843,
      0.041391391307115555,
      0.01776251755654812,
      -0.04669269546866417,
      0.036473434418439865,
      0.0491066612303257,
      0.013034685514867306,
      0.0633733794093132,
      -0.07362723350524902,
      0.027327245101332664,
      -0.04888320341706276,
      0.017989300191402435,
      0.04595283046364784,
      0.07733602076768875,
      -0.022347694262862206,
      -0.041612591594457626,
      -0.026758870109915733,
      0.03033621795475483,
      0.020275896415114403,
      -0.03752832114696503,
      -0.018017398193478584,
      0.01751355454325676,
      -0.047026459127664566,
      0.05058527737855911,
      0.08984619379043579,
      -0.027287615463137627,
      0.058374952524900436,
      -0.0038606442976742983,
      0.02956099435687065,
      0.042908817529678345,
      0.031048215925693512,
      -0.059077274054288864,
      -0.03725504130125046,
      0.04694249853491783,
      0.042399488389492035,
      -0.028353797271847725,
      -0.02125849761068821,
      -0.05065535753965378,
      -0.0011004351545125246,
      0.06586547195911407,
      -0.008993154391646385,
      0.0764964297413826,
      -0.033853910863399506,
      -0.09826681762933731,
      -0.002427955623716116,
      -0.07446304708719254,
      3.280203394316162e-33,
      0.020922226831316948,
      -0.10819701850414276,
      0.04560012370347977,
      0.04441363364458084,
      0.060968752950429916,
      0.08517556637525558,
      0.004270248580724001,
      0.001881288830190897,
      -0.033936187624931335,
      0.035338472574949265,
      -0.021097520366311073,
      -0.012006465345621109,
      -0.030966848134994507,
      0.047924503684043884,
      0.04281012713909149,
      0.014416884630918503,
      -0.010037099942564964,
      0.020108507946133614,
      0.04721147194504738,
      -0.0459844172000885,
      0.028575867414474487,
      -0.0763046145439148,
      -0.0221130158752203,
      -0.03944481909275055,
      0.04241521656513214,
      -0.045198626816272736,
      0.03211001679301262,
      -0.08327106386423111,
      0.03985678404569626,
      -0.02329089678823948,
      -0.01975833624601364,
      -0.0021063785534352064,
      0.10041067004203796,
      0.07143937051296234,
      -0.016384007409214973,
      -0.011652342043817043,
      -0.13212087750434875,
      0.02697550319135189,
      -0.07691404223442078,
      0.04412355273962021,
      0.14223162829875946,
      -0.06745913624763489,
      0.04475416988134384,
      -0.053030114620923996,
      0.04022708162665367,
      -0.03254489228129387,
      -0.02579573169350624,
      -0.08801078051328659,
      0.030702626332640648,
      0.0625196322798729,
      0.05460749939084053,
      -0.00789880845695734,
      -0.10311946272850037,
      -0.0944766253232956,
      -0.05106353759765625,
      -0.023758171126246452,
      0.02907591313123703,
      -0.015020187944173813,
      -0.022057710215449333,
      -0.05915755033493042,
      -0.1206945925951004,
      0.0636460930109024,
      0.05073421820998192,
      0.004931024741381407,
      -0.007835878059267998,
      0.003794164163991809,
      -0.03546914458274841,
      0.03011699579656124,
      -0.07352035492658615,
      0.07171755284070969,
      -0.06707924604415894,
      0.017138773575425148,
      0.039313264191150665,
      -0.03656074032187462,
      0.030844952911138535,
      -0.0627780333161354,
      -0.011521534994244576,
      -0.06362750381231308,
      -0.027033694088459015,
      -0.03333982080221176,
      0.01597410812973976,
      0.036805082112550735,
      -0.027351493015885353,
      0.062255654484033585,
      -0.10955274105072021,
      -0.05733056738972664,
      0.04538532346487045,
      0.06889297068119049,
      -0.008075506426393986,
      0.06251117587089539,
      0.04941469803452492,
      -0.03596200421452522,
      -0.033350441604852676,
      -0.04242479428648949,
      -0.11953474581241608,
      -5.351138281059004e-33,
      0.009925207123160362,
      0.06326848268508911,
      -0.016126787289977074,
      0.03627915307879448,
      0.05991464853286743,
      -0.013823608867824078,
      0.07094406336545944,
      0.03125365450978279,
      -0.025462264195084572,
      -0.05761853605508804,
      -0.046500105410814285,
      0.11284081637859344,
      0.016682906076312065,
      0.009978198446333408,
      -0.04987787455320358,
      0.06310530006885529,
      -0.011664540506899357,
      -0.011573621071875095,
      -0.029360391199588776,
      0.01629612222313881,
      0.01923806220293045,
      -0.007031957618892193,
      0.11917512118816376,
      0.04828939959406853,
      0.016789007931947708,
      -0.042109280824661255,
      0.08633799850940704,
      0.01774442009627819,
      0.06561817973852158,
      0.07482839375734329,
      -0.02368401549756527,
      0.0644320547580719,
      -0.07657703757286072,
      -0.0027973009273409843,
      0.03887055441737175,
      -0.03840281441807747,
      0.04906046763062477,
      0.02630116418004036,
      0.021828602999448776,
      -0.042936380952596664,
      -0.06261308491230011,
      -0.012760717421770096,
      -0.08031388372182846,
      -0.05940639600157738,
      -0.020272670313715935,
      0.025759104639291763,
      0.06878197193145752,
      -0.03911221772432327,
      -0.02350514568388462,
      -0.06430912017822266,
      -0.02932962030172348,
      -0.010922711342573166,
      -0.04191301763057709,
      0.08267305791378021,
      0.009808541275560856,
      0.0062329708598554134,
      -0.03662734851241112,
      0.022557314485311508,
      -0.0371682234108448,
      -0.017963964492082596,
      0.05373045802116394,
      -0.01621038280427456,
      -0.002591206692159176,
      0.003104032715782523,
      -0.05015978589653969,
      0.019162647426128387,
      -0.06463082879781723,
      -0.0069657894782722,
      -0.07262435555458069,
      0.036167535930871964,
      0.002529219491407275,
      -0.04536055773496628,
      -0.018287470564246178,
      -0.009868679568171501,
      0.0151314502581954,
      -0.06217271834611893,
      0.014391033910214901,
      -0.10573441535234451,
      0.0712500810623169,
      -0.015732429921627045,
      0.08536241203546524,
      0.04597094655036926,
      -0.005817595403641462,
      -0.0946444720029831,
      0.04075979068875313,
      0.017048759385943413,
      0.0621451772749424,
      -8.837458835841971e-07,
      0.06329761445522308,
      0.012093372642993927,
      -0.03580272197723389,
      -0.07214018702507019,
      -0.040449466556310654,
      -0.003524230094626546,
      0.04839283600449562,
      -5.1531873879184786e-08,
      0.03990817070007324,
      0.061888959258794785,
      0.03937454894185066,
      0.019376350566744804,
      0.09103894233703613,
      -0.07478650659322739,
      0.032572776079177856,
      0.032998643815517426,
      0.002592143602669239,
      0.005910612642765045,
      0.008640734478831291,
      -0.06682346761226654,
      -0.04678387567400932,
      0.01391118299216032,
      0.002100266283378005,
      0.07975507527589798,
      -0.030667534098029137,
      0.03236965090036392,
      0.00957541260868311,
      -0.1005609855055809,
      -0.07604298740625381,
      -0.02350369468331337,
      0.001397522515617311,
      -0.03468231111764908,
      0.045849256217479706,
      0.003247612388804555,
      0.04654508829116821,
      -0.06869274377822876,
      0.0063910093158483505,
      -0.007136268075555563,
      0.06184349209070206,
      -0.03440605476498604,
      0.016476156190037727,
      -0.008508175611495972,
      -0.01684633083641529,
      0.038195863366127014,
      -0.059285666793584824,
      -0.02496470883488655,
      0.06951817870140076,
      0.0004900033818557858,
      -0.11934234201908112,
      -0.003886351129040122,
      0.037720996886491776,
      -0.024918196722865105,
      -0.08422399312257767,
      -0.05286029353737831,
      0.08577536046504974,
      -0.013367612846195698,
      -0.09132330864667892,
      0.10278809070587158,
      0.07259028404951096,
      -0.039711687713861465,
      -0.046746160835027695,
      0.08956001698970795,
      0.0360044464468956,
      0.03882243111729622,
      0.013409828767180443,
      -0.03259206935763359,
      0.023127049207687378,
      0.0005776365287601948,
      -0.02830253727734089,
      0.021352527663111687,
      0.011613655835390091,
      -0.0840359777212143
    ],
    [
      -0.054271355271339417,
      -0.03410251438617706,
      -0.026072418317198753,
      0.036471299827098846,
      0.11095946282148361,
      -0.0770006850361824,
      -0.0336570106446743,
      0.03263799473643303,
      -0.04016360640525818,
      -0.0556161105632782,
      -0.042295489460229874,
      0.07851719856262207,
      0.014849213883280754,
      0.038107868283987045,
      0.01829235628247261,
      0.04660386964678764,
      0.008079275488853455,
      -0.06739384680986404,
      -0.07909050583839417,
      -0.06686875969171524,
      -0.014198888093233109,
      -0.10756732523441315,
      0.02864508517086506,
      -0.06642385572195053,
      -0.010364172048866749,
      0.08548925817012787,
      -0.007945780642330647,
      0.004564391449093819,
      -0.0373428650200367,
      -0.015584349632263184,
      0.05126962065696716,
      0.09930445998907089,
      -0.06160670146346092,
      0.01931307092308998,
      -0.03862869367003441,
      -0.03578299283981323,
      0.02641305699944496,
      -0.025624610483646393,
      0.051570288836956024,
      0.0699276253581047,
      -0.02314681187272072,
      -0.04628016799688339,
      0.0615600049495697,
      -0.024327903985977173,
      0.014588411897420883,
      -0.05000573396682739,
      -0.05835919454693794,
      -0.05391857028007507,
      -0.01932043395936489,
      0.005445552058517933,
      -0.09582778066396713,
      -0.05452859029173851,
      -0.037371810525655746,
      0.0053857965394854546,
      0.0705018937587738,
      -0.013384316116571426,
      -0.04525422304868698,
      -0.0012340596877038479,
      0.024257734417915344,
      -0.01956513524055481,
      0.019215622916817665,
      -0.011134170927107334,
      -0.05037349835038185,
      0.030108340084552765,
      -0.041842639446258545,
      -0.0023102196864783764,
      -0.019744405522942543,
      0.018278023228049278,
      0.09711671620607376,
      -0.13599510490894318,
      -0.06723983585834503,
      0.047328583896160126,
      0.024937912821769714,
      0.0013379626907408237,
      -0.028880111873149872,
      0.0037479873280972242,
      0.024165773764252663,
      0.0528767928481102,
      0.07393276691436768,
      -0.17187350988388062,
      0.12032034248113632,
      0.011481120251119137,
      0.011880249716341496,
      0.09983345866203308,
      0.04431046545505524,
      0.051465991884469986,
      0.041141413152217865,
      0.01833934150636196,
      -0.003924244083464146,
      0.06462030857801437,
      0.019715920090675354,
      0.0257602296769619,
      -0.005266265477985144,
      0.05793924257159233,
      -0.05547158792614937,
      0.0532783605158329,
      -0.00595116289332509,
      -0.016521820798516273,
      -0.0024011260829865932,
      0.09970780462026596,
      -0.02784554846584797,
      -0.041137419641017914,
      0.07374480366706848,
      0.05432920530438423,
      -0.11700239777565002,
      -0.06041518226265907,
      -0.014886853285133839,
      0.10981584340333939,
      -0.03665861487388611,
      -0.02762259729206562,
      -0.013808703050017357,
      0.081740602850914,
      -0.08600550889968872,
      -0.07432789355516434,
      0.04113449901342392,
      -0.09289862960577011,
      0.008245979435741901,
      -0.044106826186180115,
      -0.021267790347337723,
      0.005525234621018171,
      0.0716368705034256,
      0.017867401242256165,
      0.015884680673480034,
      -0.01518667209893465,
      0.06527871638536453,
      0.03962573781609535,
      -0.06451380997896194,
      3.167320304464713e-33,
      0.0589895024895668,
      0.09159480035305023,
      -0.04494399577379227,
      0.030218040570616722,
      -0.02739923819899559,
      -0.0526273138821125,
      -0.030567623674869537,
      0.06132960692048073,
      -0.017574451863765717,
      -0.018119465559720993,
      0.054471809417009354,
      0.147603839635849,
      -0.05633285641670227,
      0.060075391083955765,
      0.03688975051045418,
      -0.07293534278869629,
      0.025298263877630234,
      0.03996169939637184,
      -0.014702357351779938,
      -0.07230377197265625,
      0.02316095307469368,
      -0.03866279125213623,
      0.022635087370872498,
      -0.009449684992432594,
      0.03890709578990936,
      0.09598204493522644,
      0.013349434360861778,
      0.01344524696469307,
      -0.01792084611952305,
      0.04292173311114311,
      0.07881301641464233,
      -0.022863183170557022,
      -0.005903817713260651,
      0.007918582297861576,
      -0.008478457108139992,
      -0.0025516136083751917,
      -0.13482873141765594,
      -0.1625889390707016,
      0.0058125946670770645,
      -0.001976934727281332,
      -0.0679340660572052,
      -0.014143578708171844,
      -0.08803655952215195,
      0.03283785283565521,
      -0.026180654764175415,
      0.015074041672050953,
      -0.029157143086194992,
      -0.034590933471918106,
      0.10805533826351166,
      -0.03354358673095703,
      0.017071740701794624,
      -0.005722210742533207,
      0.02440325915813446,
      0.04736083373427391,
      0.04054286330938339,
      0.055405039340257645,
      0.0014638162683695555,
      -0.07561632990837097,
      0.04887348785996437,
      0.019176464527845383,
      0.013314547017216682,
      -0.0009579158504493535,
      -0.12551064789295197,
      -0.05003894492983818,
      0.006008474621921778,
      0.0850599929690361,
      0.0268505048006773,
      0.07236883044242859,
      -0.015986010432243347,
      0.03538889437913895,
      0.032225802540779114,
      -0.04526473581790924,
      0.005260906182229519,
      0.07531249523162842,
      -0.03362264111638069,
      0.01586252823472023,
      0.02907107025384903,
      0.030452227219939232,
      -0.030088135972619057,
      -0.009050585329532623,
      -0.05571352317929268,
      -0.11984778940677643,
      0.03615359961986542,
      -0.06411377340555191,
      -0.047890275716781616,
      0.02108868770301342,
      0.008325579576194286,
      -0.010475336574018002,
      0.034422069787979126,
      0.0004540499357972294,
      -0.04356521740555763,
      0.013414449989795685,
      -0.0066221775487065315,
      -0.0031275167129933834,
      -0.035648878663778305,
      -3.739858787028124e-33,
      -0.10267635434865952,
      0.005678925197571516,
      -0.047826945781707764,
      0.04433511942625046,
      -0.007813586853444576,
      0.03789928928017616,
      -0.06243598833680153,
      0.05480720475316048,
      0.04162698984146118,
      0.04739980399608612,
      0.01491237711161375,
      0.024666033685207367,
      0.010841211304068565,
      -0.009111113846302032,
      -0.021202299743890762,
      0.0010134506737813354,
      0.0019458255264908075,
      -0.042711418122053146,
      -0.056662626564502716,
      0.10124421864748001,
      -0.011921863071620464,
      0.06226659193634987,
      -0.04553651064634323,
      -0.012778767384588718,
      -0.013211719691753387,
      0.03861316666007042,
      0.05223376303911209,
      -0.06016244366765022,
      -0.04642660543322563,
      0.019314149394631386,
      -0.017497407272458076,
      -0.005466224160045385,
      -0.013149676844477654,
      0.0138630960136652,
      0.0725855752825737,
      0.037901733070611954,
      0.010872814804315567,
      -0.014256899245083332,
      -0.007124566938728094,
      -0.04252833127975464,
      0.02512320503592491,
      0.025731513276696205,
      -0.02719401754438877,
      -0.0348222516477108,
      -0.04695044457912445,
      0.012761088088154793,
      -0.1579248458147049,
      0.05970324948430061,
      0.04888414219021797,
      0.003237044671550393,
      0.03943433612585068,
      0.03456417843699455,
      0.037772949784994125,
      -0.09076185524463654,
      -0.06598499417304993,
      -0.06646303087472916,
      0.07772202044725418,
      -0.05804470181465149,
      0.010474910959601402,
      0.021894341334700584,
      -0.009137430228292942,
      -0.04546351730823517,
      -0.1168379932641983,
      0.016678962856531143,
      0.05869090557098389,
      -0.02652658335864544,
      0.001418325467966497,
      -0.015857616439461708,
      -0.06796928495168686,
      -0.015922514721751213,
      0.04569154977798462,
      -0.041462741792201996,
      -0.021102936938405037,
      -0.02352374605834484,
      -0.002199700800701976,
      -0.004462165758013725,
      -0.01877402514219284,
      0.021244173869490623,
      -0.015582994557917118,
      0.0964471697807312,
      0.10368131101131439,
      0.07185105234384537,
      0.04208876192569733,
      -0.08692528307437897,
      -0.013302800245583057,
      0.03873331472277641,
      -0.047481928020715714,
      0.018631497398018837,
      0.012315027415752411,
      -0.07732866704463959,
      -0.09517260640859604,
      0.018753841519355774,
      -0.006821448914706707,
      0.029502492398023605,
      0.060117073357105255,
      -3.240690205075225e-08,
      -0.04613339528441429,
      0.024728592485189438,
      0.07810132950544357,
      0.02324439398944378,
      0.03312358260154724,
      0.005254835821688175,
      -0.028424333781003952,
      0.041198935359716415,
      -0.015951775014400482,
      0.01582835614681244,
      -0.058232441544532776,
      -0.03262553736567497,
      -0.059015028178691864,
      0.06044984236359596,
      -0.019880924373865128,
      -0.04961485043168068,
      -0.017510846257209778,
      0.04136107116937637,
      -0.01552912499755621,
      -0.04539364203810692,
      0.006601652130484581,
      0.06350188702344894,
      0.11896222084760666,
      0.006203416734933853,
      0.05368504300713539,
      0.004154526628553867,
      0.03372214734554291,
      0.04640178754925728,
      0.03155450522899628,
      -0.049214139580726624,
      -0.07266608625650406,
      0.04698333144187927,
      0.06608384847640991,
      -0.08285123854875565,
      -0.028401458635926247,
      0.09654030948877335,
      0.049862343817949295,
      0.011258813552558422,
      -0.019627181813120842,
      -0.006616675760596991,
      -0.00885077379643917,
      -0.026656372472643852,
      -0.0019083466613665223,
      0.01723858155310154,
      0.006931256968528032,
      0.0336979441344738,
      -0.06365333497524261,
      -0.02698991261422634,
      -0.008219088427722454,
      -0.00663768919184804,
      0.06186293438076973,
      -0.10346531122922897,
      -0.03579088672995567,
      0.0020881714299321175,
      -0.0748930498957634,
      -0.050467632710933685,
      -0.03889533132314682,
      0.02558179944753647,
      0.05609191209077835,
      0.013635873794555664,
      -0.00016052545106504112,
      0.05228943005204201,
      0.026820337399840355,
      0.02710888907313347
    ],
    [
      -0.06347885727882385,
      0.016618873924016953,
      -0.06205756589770317,
      -0.012596415355801582,
      -0.02833012118935585,
      -0.05123118311166763,
      0.04580950364470482,
      0.007946503348648548,
      0.07369035482406616,
      -0.01322347205132246,
      -0.0020290417596697807,
      -0.0008131447830237448,
      0.051061924546957016,
      -0.06478301435709,
      0.04311998561024666,
      0.02146339602768421,
      -0.06064079329371452,
      -0.04875921085476875,
      0.0003804570296779275,
      -0.018951771780848503,
      0.06468402594327927,
      -0.02996479719877243,
      -0.09776777774095535,
      0.06933259218931198,
      -0.110319122672081,
      0.044722817838191986,
      -0.03753240033984184,
      -0.004812858998775482,
      -0.049437008798122406,
      0.01877727173268795,
      0.07225804030895233,
      -0.03735361993312836,
      -0.058820940554142,
      0.06905872374773026,
      -0.14714279770851135,
      -0.0007077569607645273,
      0.03795912116765976,
      0.017469041049480438,
      -0.004259237553924322,
      -0.0542309544980526,
      -0.03453467786312103,
      -0.0638006404042244,
      0.0034552349243313074,
      -0.030418239533901215,
      0.03986500948667526,
      0.059178706258535385,
      -0.06080590561032295,
      0.018240706995129585,
      -0.1122296154499054,
      -0.016978634521365166,
      -0.022187476977705956,
      -0.016984574496746063,
      0.04159481078386307,
      0.10444804280996323,
      0.06075112521648407,
      0.0158187597990036,
      0.019908620044589043,
      -0.09137488156557083,
      -0.0001853849389590323,
      -0.005224032327532768,
      0.013887666165828705,
      0.015666067600250244,
      -0.016962237656116486,
      0.08988124877214432,
      0.0049489219672977924,
      -0.03181515634059906,
      -0.04246993735432625,
      0.04978850483894348,
      0.056046366691589355,
      -0.042513586580753326,
      -0.052442703396081924,
      -0.0191013365983963,
      -0.03860783576965332,
      0.026250770315527916,
      0.04065011441707611,
      -0.07273246347904205,
      0.016423143446445465,
      0.0623011589050293,
      0.005254195537418127,
      0.002101475838571787,
      -0.005820349790155888,
      0.12612242996692657,
      0.0007859431789256632,
      -0.015044033527374268,
      -0.02236386016011238,
      -0.013298586010932922,
      0.00989604089409113,
      0.02667967416346073,
      0.00025506134261377156,
      0.02636032924056053,
      0.02314312569797039,
      -0.02686731331050396,
      0.058386869728565216,
      -0.007193530444055796,
      0.07129024714231491,
      0.0008889855234883726,
      0.06298325955867767,
      -0.02449939213693142,
      0.03391531482338905,
      0.07300923019647598,
      0.026390602812170982,
      0.006589432712644339,
      -0.0012343821581453085,
      0.06300846487283707,
      -0.010562369599938393,
      0.02262958697974682,
      0.006791134364902973,
      -0.009312184527516365,
      -0.0028202938847243786,
      -0.033644501119852066,
      -0.06205723062157631,
      -0.025844959542155266,
      -0.10442467778921127,
      -0.028869757428765297,
      0.008189053274691105,
      0.02703678235411644,
      -0.047770388424396515,
      0.04268570989370346,
      0.05309335142374039,
      0.04604743421077728,
      0.04492894932627678,
      0.016922343522310257,
      0.04944892227649689,
      -0.05519504100084305,
      0.02369747683405876,
      0.020136112347245216,
      -0.03853202983736992,
      2.4248554809533014e-33,
      -0.008298440836369991,
      0.0016897020395845175,
      -0.028172703459858894,
      0.01251328643411398,
      0.07631775736808777,
      0.007330676540732384,
      -0.029611103236675262,
      0.01917893998324871,
      -0.05008874833583832,
      0.07984361052513123,
      0.05977896228432655,
      0.08070003986358643,
      0.04996471479535103,
      0.12924820184707642,
      0.037846311926841736,
      -0.03071252629160881,
      -0.04387543722987175,
      0.0322190597653389,
      0.10369978845119476,
      0.008135168813169003,
      -0.03976226598024368,
      -0.00869809091091156,
      0.06852620840072632,
      0.009232222102582455,
      0.03259873017668724,
      0.0629744827747345,
      -0.033524658530950546,
      0.011844456195831299,
      -0.034708358347415924,
      0.03018730878829956,
      -0.004765464924275875,
      -0.03415101021528244,
      0.025256667286157608,
      0.018437571823596954,
      0.05188903585076332,
      0.01727266050875187,
      0.01014784723520279,
      -0.11480492353439331,
      0.030019424855709076,
      -0.0853046402335167,
      -0.024281637743115425,
      -0.006597224622964859,
      -0.05092574656009674,
      -0.01832626201212406,
      -0.049233224242925644,
      0.011463390663266182,
      0.017441732808947563,
      0.0531950369477272,
      0.023436909541487694,
      0.05371645838022232,
      0.04925839975476265,
      0.0183006152510643,
      -0.03989279270172119,
      -0.03654652088880539,
      0.01841447688639164,
      0.01507575809955597,
      -0.0507696159183979,
      -0.03821217641234398,
      -0.030615372583270073,
      0.07831653952598572,
      0.041648007929325104,
      -0.03451623022556305,
      -0.05963557958602905,
      0.03230120241641998,
      -0.02382616326212883,
      0.045001596212387085,
      0.059961576014757156,
      0.01712312363088131,
      0.03693705424666405,
      -0.008017929270863533,
      0.020061587914824486,
      0.012306337244808674,
      -0.051495086401700974,
      0.08300958573818207,
      -0.07496604323387146,
      -0.0002075093798339367,
      0.0006561013287864625,
      0.04464368522167206,
      -0.10015031695365906,
      0.09238335490226746,
      -0.13267692923545837,
      -0.02902512066066265,
      -0.08434592187404633,
      0.03496347367763519,
      -0.12422830611467361,
      0.06704074889421463,
      -0.012431268580257893,
      -0.003853253787383437,
      0.04784305766224861,
      -0.0817679613828659,
      -0.004603059031069279,
      -0.02906552329659462,
      0.0766109898686409,
      0.015131799504160881,
      0.02420194074511528,
      -5.125811442369726e-33,
      -0.014520304277539253,
      0.002365985419601202,
      -0.10934951901435852,
      -0.06140071153640747,
      -0.024607252329587936,
      -0.02455270104110241,
      0.03400581702589989,
      0.008297637104988098,
      -0.05186598375439644,
      0.0036811456084251404,
      -0.12978495657444,
      0.022275252267718315,
      -0.002295807236805558,
      -0.05122321844100952,
      0.029397383332252502,
      -0.07362756878137589,
      -0.024789387360215187,
      -0.0704968273639679,
      -0.0380866639316082,
      0.02350407838821411,
      -0.022315718233585358,
      0.07418274134397507,
      0.007358473259955645,
      -0.018085096031427383,
      -0.002420558361336589,
      0.017272494733333588,
      -0.053669970482587814,
      0.019001109525561333,
      0.06781645864248276,
      -0.048244114965200424,
      0.02957657352089882,
      -0.09768368303775787,
      0.03849638253450394,
      -0.027036843821406364,
      -0.02283346652984619,
      -0.02722281962633133,
      0.05697137862443924,
      -0.01656126044690609,
      0.05925614759325981,
      -0.020097775384783745,
      0.04953467845916748,
      -0.006166552659124136,
      0.059180013835430145,
      -0.03171981871128082,
      -0.0211627334356308,
      0.06810007989406586,
      -0.09420143067836761,
      0.1341734379529953,
      -0.04799859598278999,
      -0.03901445120573044,
      0.012828974053263664,
      0.0172651968896389,
      -0.012471846304833889,
      -0.028008127585053444,
      -0.08935713022947311,
      0.025931358337402344,
      0.07211779803037643,
      0.015206048265099525,
      0.053667888045310974,
      -0.03130703791975975,
      0.008053972385823727,
      -0.07471928000450134,
      -0.023060863837599754,
      0.19948995113372803,
      0.007830492220818996,
      -0.07550320029258728,
      -0.06937865912914276,
      -0.09753008931875229,
      -0.06401652842760086,
      0.02530861459672451,
      0.04779617115855217,
      -0.035522010177373886,
      -0.07644010335206985,
      -0.024399330839514732,
      0.01387579832226038,
      -0.04879424348473549,
      -0.043439947068691254,
      -0.13187848031520844,
      -0.04136429354548454,
      0.014698446728289127,
      -0.03136299550533295,
      0.03771238401532173,
      0.08758173882961273,
      0.0010976246558129787,
      0.002943456871435046,
      -0.07954129576683044,
      0.036841440945863724,
      -0.048970021307468414,
      0.017592817544937134,
      -0.051380645483732224,
      -0.015579569153487682,
      0.05292365700006485,
      -0.09745749086141586,
      0.04431957006454468,
      -0.06895030289888382,
      -6.320684065030946e-08,
      -0.002207919955253601,
      -0.08133801072835922,
      0.03750356286764145,
      0.029743850231170654,
      -0.09138494729995728,
      0.03486780449748039,
      0.04571082442998886,
      -0.04348650202155113,
      -0.012504883110523224,
      0.007135452702641487,
      -0.004177108407020569,
      0.047742001712322235,
      -0.08423728495836258,
      -0.05752326548099518,
      0.030575793236494064,
      0.030173154547810555,
      0.05157221108675003,
      0.04340976104140282,
      -0.02460712008178234,
      0.010143103078007698,
      -0.022508081048727036,
      -0.027511434629559517,
      -0.028192663565278053,
      -0.026376327499747276,
      -0.010919344611465931,
      -0.008076892234385014,
      0.08481497317552567,
      0.11048972606658936,
      0.004478184971958399,
      -0.02785327285528183,
      -0.007140463218092918,
      0.018710214644670486,
      0.08428525179624557,
      -0.0032510231249034405,
      -0.00700810831040144,
      0.09331142157316208,
      -0.0036753127351403236,
      -0.06519041210412979,
      0.00137510325293988,
      -0.0075478204526007175,
      -0.0742044672369957,
      0.018699854612350464,
      0.013892051763832569,
      -0.01647019386291504,
      -0.002994833281263709,
      -0.003410512348636985,
      -0.11318602412939072,
      0.02114836499094963,
      0.07009364664554596,
      0.03908733278512955,
      -0.016259128227829933,
      -0.003918202128261328,
      0.043281085789203644,
      0.0527305006980896,
      -0.03088601492345333,
      0.004028323572129011,
      -0.02417149767279625,
      -0.0417330339550972,
      0.11143996566534042,
      0.002580842934548855,
      0.10856681317090988,
      0.07051960378885269,
      0.11184727400541306,
      -0.021423405036330223
    ],
    [
      -0.013929163105785847,
      0.0757552906870842,
      -0.03522282838821411,
      0.03462248668074608,
      0.014498732052743435,
      0.025601277127861977,
      0.005188571289181709,
      -0.019157128408551216,
      -0.021123506128787994,
      -0.03226732462644577,
      0.08749736845493317,
      -0.0392598994076252,
      0.027561308816075325,
      -0.0435183160007,
      -0.114427350461483,
      -0.01170328352600336,
      -0.027290912345051765,
      -0.0448240265250206,
      -0.02371870167553425,
      -0.020635241642594337,
      0.014912103302776814,
      -0.009035080671310425,
      -0.0741172805428505,
      -0.05041508376598358,
      0.012551899999380112,
      0.06326481699943542,
      -0.01744818687438965,
      0.029470765963196754,
      -0.03075355850160122,
      -0.06828970462083817,
      -0.0572873130440712,
      0.034533511847257614,
      -0.07263870537281036,
      -0.02182670123875141,
      0.07692279666662216,
      -0.04116072505712509,
      0.05306103080511093,
      -0.003308988641947508,
      0.072796531021595,
      0.006177997682243586,
      -0.0220749843865633,
      -0.16244259476661682,
      0.021213432773947716,
      -0.048884067684412,
      -0.027179760858416557,
      -0.06126566603779793,
      -0.05584017559885979,
      0.00014895958884153515,
      -0.013307176530361176,
      0.007757751736789942,
      -0.11559553444385529,
      0.014067918062210083,
      -0.07522674649953842,
      -0.010974320583045483,
      0.0331672765314579,
      0.012672891840338707,
      -0.047603409737348557,
      -0.08227408677339554,
      0.04038720577955246,
      -0.06636616587638855,
      -0.031567417085170746,
      0.03785000368952751,
      -0.05795205384492874,
      0.046332601457834244,
      -0.08055144548416138,
      -0.05466610938310623,
      -0.07067739218473434,
      0.06682009249925613,
      -0.011021958664059639,
      0.0031680867541581392,
      -0.06090496852993965,
      -0.029200086370110512,
      -0.05165482684969902,
      0.0037664445117115974,
      0.010873946361243725,
      0.04606521874666214,
      0.04197373986244202,
      -0.024853499606251717,
      -0.044930897653102875,
      -0.192314013838768,
      -0.057687580585479736,
      -0.036702558398246765,
      -0.0432441309094429,
      -0.01636071316897869,
      0.053459543734788895,
      -0.06511469930410385,
      0.016501637175679207,
      0.004409533925354481,
      0.039624299854040146,
      -0.022200128063559532,
      0.009379290044307709,
      0.0035550857428461313,
      -0.04263528063893318,
      0.0069718873128294945,
      -0.007173581980168819,
      -0.027411939576268196,
      -0.0363830104470253,
      0.033615607768297195,
      0.07008057832717896,
      0.14906729757785797,
      0.02750791423022747,
      0.02448938973248005,
      -0.1407584249973297,
      0.00798520352691412,
      -0.09865903854370117,
      -0.04388337582349777,
      -0.05797193944454193,
      0.09793252497911453,
      0.0007648371392861009,
      -0.014959549531340599,
      -0.0266395416110754,
      0.05297864228487015,
      0.020617883652448654,
      -0.13133513927459717,
      0.011128556914627552,
      0.03383539989590645,
      -0.027453629299998283,
      -0.007087660487741232,
      0.02802995778620243,
      0.018275722861289978,
      0.09662284702062607,
      0.024623768404126167,
      -0.028495410457253456,
      0.04786355420947075,
      -0.045753419399261475,
      0.014822257682681084,
      0.11634093523025513,
      1.5326351337466525e-34,
      -0.040291041135787964,
      -0.03508519008755684,
      0.010659485124051571,
      -0.047815993428230286,
      0.02692561224102974,
      0.07681659609079361,
      -0.02236912027001381,
      0.058012332767248154,
      -0.007902301847934723,
      0.005790592636913061,
      -0.010835829190909863,
      -0.038267768919467926,
      -0.025094231590628624,
      -0.0940348282456398,
      -0.09721614420413971,
      -0.007581626996397972,
      0.005992218852043152,
      0.0572388656437397,
      -0.026273909956216812,
      0.006520832888782024,
      0.03442080318927765,
      -0.035884883254766464,
      0.006454570218920708,
      0.06516151875257492,
      0.05722108483314514,
      0.05423639342188835,
      0.03828825056552887,
      0.014520569704473019,
      -0.06818976253271103,
      0.06358514726161957,
      0.12333289533853531,
      -0.016122151166200638,
      0.050901878625154495,
      -0.04834086820483208,
      0.02199045941233635,
      0.0035301772877573967,
      0.023859728127717972,
      -0.0399227999150753,
      -0.014488895423710346,
      -0.016393372789025307,
      -0.0410885289311409,
      0.007411577273160219,
      -0.01643877476453781,
      -0.039715543389320374,
      -0.044933121651411057,
      -0.0035973943304270506,
      0.03214244544506073,
      0.06448866426944733,
      0.04523169994354248,
      -0.06452246010303497,
      -0.06522409617900848,
      -0.009285484440624714,
      -0.04219784215092659,
      -0.038073666393756866,
      0.023709826171398163,
      0.03192492201924324,
      -0.05616995692253113,
      -0.005493751261383295,
      -0.009926185943186283,
      -0.021197712048888206,
      0.02399999462068081,
      0.11901917308568954,
      -0.04546408727765083,
      -0.09160280972719193,
      2.8448703233152628e-05,
      0.05681170895695686,
      0.07222416251897812,
      0.06164161115884781,
      0.017466645687818527,
      0.028345707803964615,
      -0.012584942393004894,
      -0.048593711107969284,
      0.1062956303358078,
      0.04209725931286812,
      0.05289262905716896,
      -0.01389822456985712,
      0.050409141927957535,
      0.0402803011238575,
      0.016227610409259796,
      -0.06885308772325516,
      -0.0735970288515091,
      0.01097465492784977,
      0.020569926127791405,
      -0.007848593406379223,
      -0.038511622697114944,
      0.03053382597863674,
      -0.059275250881910324,
      -0.0017843059031292796,
      -0.05094774812459946,
      -0.018263179808855057,
      -0.029444750398397446,
      -0.006593933794647455,
      -0.020301660522818565,
      -0.08400723338127136,
      -0.08091772347688675,
      -5.485248594834396e-33,
      -0.05847162753343582,
      0.06878755241632462,
      -0.01673099957406521,
      -0.017344752326607704,
      0.005507560912519693,
      -0.016303593292832375,
      0.012849362567067146,
      -0.0009975132998079062,
      0.031032133847475052,
      0.09311927855014801,
      0.034544240683317184,
      -0.030675267800688744,
      -0.05761170759797096,
      -0.035443924367427826,
      0.0059034801088273525,
      -0.01368553377687931,
      0.057419080287218094,
      -0.009029817767441273,
      -0.1045682281255722,
      0.0029924456030130386,
      -0.051023926585912704,
      0.16096575558185577,
      -0.016697626560926437,
      0.0877349004149437,
      0.023239243775606155,
      0.08510109037160873,
      0.0009748231968842447,
      0.029369965195655823,
      -0.084687240421772,
      0.05832471325993538,
      -0.023386970162391663,
      -0.0728999674320221,
      -0.08336148411035538,
      0.06028984487056732,
      -0.055269140750169754,
      -0.044617682695388794,
      0.048635002225637436,
      0.013739146292209625,
      -0.0074507393874228,
      0.05483352020382881,
      0.006764954887330532,
      0.043006181716918945,
      -0.004228593315929174,
      0.016932381317019463,
      -0.03211567550897598,
      -0.01283284928649664,
      0.04694098234176636,
      0.0011027916334569454,
      0.025583941489458084,
      -0.017987141385674477,
      -0.04540547728538513,
      -0.02881159447133541,
      -0.06051994860172272,
      0.06283006817102432,
      -0.07466001063585281,
      0.04962987080216408,
      0.06183275580406189,
      -0.03534601628780365,
      -0.062367215752601624,
      -0.02482643723487854,
      0.021011674776673317,
      0.016730638220906258,
      0.018769608810544014,
      -0.0010645732982084155,
      0.07990071922540665,
      -0.10970479995012283,
      -0.004602568224072456,
      0.00859508290886879,
      0.061137013137340546,
      -0.06484045833349228,
      0.08449460566043854,
      0.006749169435352087,
      -0.024539638310670853,
      -0.024851953610777855,
      0.0030679914634674788,
      0.06236666813492775,
      0.027696650475263596,
      0.04357157275080681,
      -0.038797564804553986,
      0.03284764662384987,
      -0.10062064230442047,
      0.03624817356467247,
      0.0420219711959362,
      0.01752563752233982,
      -0.09058500081300735,
      -0.07018747925758362,
      -0.03687945380806923,
      0.002909478498622775,
      0.0003718459338415414,
      0.008749013766646385,
      -0.07214629650115967,
      0.018712185323238373,
      0.002250057877972722,
      -0.03349661827087402,
      0.05251164734363556,
      -5.104832112579061e-08,
      -0.01848115213215351,
      -0.023334268480539322,
      -0.020720113068819046,
      0.049070678651332855,
      0.04839993640780449,
      -0.04738475754857063,
      -0.03701408579945564,
      -0.04029021039605141,
      -0.05734926089644432,
      -0.03169195353984833,
      0.0815826952457428,
      -0.013972088694572449,
      -0.012779570184648037,
      -0.11863967776298523,
      -0.05121493712067604,
      -0.0828850045800209,
      -0.0035640993155539036,
      -0.00022545461251866072,
      -0.09713388234376907,
      -0.09782496094703674,
      0.03313034027814865,
      0.021464329212903976,
      -0.010180484503507614,
      -0.046273231506347656,
      0.0031670823227614164,
      -0.03934893384575844,
      -0.025202669203281403,
      0.07848364114761353,
      0.08483494073152542,
      -0.03687433898448944,
      -0.00622627092525363,
      0.008759863674640656,
      -0.013524753041565418,
      -0.09056757390499115,
      -0.10596875101327896,
      0.012381422333419323,
      -0.0011357844341546297,
      0.015492813661694527,
      -0.055079687386751175,
      0.022517578676342964,
      0.0250479094684124,
      -0.027479879558086395,
      -0.0004351752868387848,
      0.10223376750946045,
      -0.012072831392288208,
      -0.020883100107312202,
      -0.039222825318574905,
      -0.10544977337121964,
      0.07621537894010544,
      -0.05299277976155281,
      0.008180644363164902,
      -0.06096488609910011,
      0.06499986350536346,
      -0.004026736132800579,
      0.027695445343852043,
      -0.042346056550741196,
      0.04195936396718025,
      0.004871897399425507,
      -0.00996902771294117,
      0.0298601146787405,
      0.033532578498125076,
      0.0026030978187918663,
      0.013448589481413364,
      0.06483491510152817
    ],
    [
      0.038802459836006165,
      -0.030092550441622734,
      -0.006467175669968128,
      -0.015098783187568188,
      0.0037387744523584843,
      -0.05217668041586876,
      -0.03667084500193596,
      0.006041696295142174,
      -0.11928945034742355,
      -0.04216214269399643,
      0.042982637882232666,
      -0.02543717809021473,
      -0.03157534822821617,
      0.03282436355948448,
      0.029725022614002228,
      0.036316655576229095,
      -0.033121492713689804,
      -0.08678419888019562,
      0.0423898808658123,
      0.054482877254486084,
      -0.03173314034938812,
      -0.08047495037317276,
      0.05770540609955788,
      -0.042697757482528687,
      0.05300401896238327,
      0.02734413929283619,
      -0.009725724346935749,
      0.1035587340593338,
      0.043369170278310776,
      -0.011281109414994717,
      0.12065894156694412,
      0.06145894154906273,
      0.0035805702209472656,
      -0.05427625775337219,
      0.039162348955869675,
      0.08850414305925369,
      -0.03196621313691139,
      -0.04622502252459526,
      -0.011159822344779968,
      0.018594492226839066,
      0.0071369051001966,
      0.005304733756929636,
      0.054325949400663376,
      -0.08736372739076614,
      0.03352769464254379,
      -0.02591603621840477,
      0.043050434440374374,
      -0.04062290117144585,
      -0.03751438483595848,
      -0.04221411794424057,
      0.024139011278748512,
      -0.0277765691280365,
      0.0016947193071246147,
      -0.09960473328828812,
      0.07539620250463486,
      -0.04074055328965187,
      -0.03820743411779404,
      0.10789377242326736,
      0.02500923164188862,
      -0.0060980855487287045,
      -0.05614420399069786,
      0.0334327407181263,
      -0.036908019334077835,
      0.0006365308072417974,
      -0.07368311285972595,
      6.204760575201362e-05,
      0.06605111062526703,
      -0.012289201840758324,
      -0.03673965483903885,
      -0.0583466999232769,
      -0.0883064940571785,
      -0.06710008531808853,
      0.047528836876153946,
      -0.018621517345309258,
      -0.050184328109025955,
      0.06495314836502075,
      0.02725822664797306,
      -0.016228515654802322,
      0.016364047303795815,
      -0.12955713272094727,
      0.0001269178173970431,
      -0.07477772235870361,
      0.010854091495275497,
      0.025395246222615242,
      0.04071417078375816,
      0.036808814853429794,
      -0.00703489501029253,
      -0.01979057863354683,
      0.023853952065110207,
      0.01725034788250923,
      0.021289626136422157,
      -0.014826502650976181,
      0.024118227884173393,
      0.1192627027630806,
      0.11308597028255463,
      0.036561548709869385,
      0.026962392032146454,
      0.05651846155524254,
      -0.0907009169459343,
      0.09703555703163147,
      -0.07359159737825394,
      -0.006853658240288496,
      -0.002868562238290906,
      0.13070476055145264,
      -0.013797427527606487,
      -0.07276959717273712,
      0.0408337228000164,
      0.05399306118488312,
      -0.04531894251704216,
      -0.05133543163537979,
      0.06328779458999634,
      -0.013979179784655571,
      -0.009358870796859264,
      -0.14554622769355774,
      0.01847151666879654,
      -0.07608764618635178,
      -0.052753422409296036,
      -0.051006026566028595,
      0.0032147173769772053,
      -0.03772744536399841,
      0.03489873185753822,
      -0.04458469897508621,
      -0.05246465653181076,
      0.05623640865087509,
      0.014325735159218311,
      -0.016980627551674843,
      0.03490038961172104,
      4.453038189169714e-33,
      -0.002791770501062274,
      -0.01827588491141796,
      -0.02469240128993988,
      0.10138897597789764,
      0.014782228507101536,
      -0.027180897071957588,
      0.0599711537361145,
      0.002936073811724782,
      -0.0959210991859436,
      0.06360681354999542,
      0.008910494856536388,
      -0.0006290919845923781,
      -0.010098054073750973,
      0.06761384755373001,
      -0.016618674620985985,
      -0.04799201339483261,
      0.06085433438420296,
      0.009862943552434444,
      -0.08467195928096771,
      0.013428792357444763,
      0.05367961525917053,
      -0.0717790424823761,
      -0.03242801874876022,
      -0.047359321266412735,
      -0.06368178874254227,
      0.11664652079343796,
      0.069175586104393,
      -0.03063153848052025,
      0.05493979901075363,
      0.012760365381836891,
      0.013929284177720547,
      -0.029424484819173813,
      0.08222684264183044,
      0.03506402298808098,
      -0.0021122037433087826,
      -0.05155135691165924,
      -0.09035275131464005,
      -0.04279332607984543,
      -0.10706791281700134,
      -0.05332881584763527,
      0.03117757849395275,
      0.001011714106425643,
      -0.08960230648517609,
      0.016875911504030228,
      0.0915667787194252,
      0.06959681212902069,
      -0.04400874674320221,
      0.008661184459924698,
      0.07310722768306732,
      -0.021922342479228973,
      0.004702018573880196,
      0.05458543822169304,
      -0.040148790925741196,
      -0.03817141801118851,
      0.07123246043920517,
      -0.007648813538253307,
      -0.046232786029577255,
      0.02484871819615364,
      0.018971432000398636,
      -0.031790878623723984,
      -0.019157906994223595,
      0.08676811307668686,
      -0.04962525889277458,
      0.03982057422399521,
      0.05137460678815842,
      0.0700625628232956,
      -0.041013166308403015,
      -0.10603605210781097,
      -0.03837589547038078,
      0.045575372874736786,
      -0.0016895197331905365,
      0.002868094714358449,
      -0.017308803275227547,
      0.07404827326536179,
      0.11019502580165863,
      0.027419185265898705,
      0.04693886637687683,
      0.11817793548107147,
      -0.036223240196704865,
      -0.036563217639923096,
      -0.09852961450815201,
      -0.012227384373545647,
      -0.039188552647829056,
      -0.025180062279105186,
      0.030190279707312584,
      -0.0460827462375164,
      -0.0028854168485850096,
      0.07242551445960999,
      0.06208379566669464,
      0.04334140568971634,
      0.053812362253665924,
      -0.06771091371774673,
      -0.05359978601336479,
      0.013786145485937595,
      -0.09550987929105759,
      -4.13962347724966e-33,
      -0.04656505212187767,
      0.07755577564239502,
      -0.10689476132392883,
      0.0013260554987937212,
      -0.09799499809741974,
      0.03352713957428932,
      0.05127091333270073,
      0.036943040788173676,
      0.026882754638791084,
      0.03527398034930229,
      0.014817112125456333,
      0.05511924624443054,
      0.05892978981137276,
      -0.06765476614236832,
      -0.016894076019525528,
      -0.042149867862463,
      -0.07136724889278412,
      -0.023286519572138786,
      0.0023250265512615442,
      0.11312302201986313,
      0.01832914911210537,
      0.07961735874414444,
      0.007387846242636442,
      0.06962433457374573,
      0.009727527387440205,
      0.05388818681240082,
      0.07769449800252914,
      0.04097191244363785,
      -0.00684097595512867,
      -0.05782849341630936,
      0.0030937204137444496,
      0.06186988204717636,
      -0.08999871462583542,
      -0.010273134335875511,
      -0.024225600063800812,
      0.021495016291737556,
      0.005201907828450203,
      0.003048139391466975,
      -0.05637573078274727,
      0.011487952433526516,
      -0.019719453528523445,
      -0.019895074889063835,
      -0.07737217843532562,
      0.049699850380420685,
      -0.02135244384407997,
      0.015428926795721054,
      0.02964949607849121,
      -0.00015309166337829083,
      0.08884057402610779,
      -0.05878659710288048,
      0.023475203663110733,
      -0.02111288160085678,
      0.07022950053215027,
      -0.007430981379002333,
      0.02736888825893402,
      -0.031389761716127396,
      0.011781830340623856,
      -0.03840089589357376,
      0.00987728126347065,
      -0.005622968077659607,
      0.029676400125026703,
      -0.06905567646026611,
      0.09183211624622345,
      -0.038852378726005554,
      -0.0010445218067616224,
      0.0006366544403135777,
      -0.08346744626760483,
      0.005530333612114191,
      -0.06016145646572113,
      0.024584714323282242,
      -0.015309782698750496,
      -0.031403832137584686,
      0.029854508116841316,
      -0.0355159267783165,
      -0.017307015135884285,
      0.024732669815421104,
      -0.03826729580760002,
      -0.007428583223372698,
      0.02240670844912529,
      0.009506810456514359,
      0.02142537757754326,
      0.06491659581661224,
      0.013357223942875862,
      0.01555447094142437,
      -0.003316743765026331,
      -0.01533721573650837,
      0.004836758133023977,
      0.017145911231637,
      0.07260085642337799,
      -0.08242681622505188,
      0.02453407272696495,
      0.03239737078547478,
      -0.01934122107923031,
      0.03262033313512802,
      0.047008316963911057,
      -5.652462675698189e-08,
      -0.05199706181883812,
      0.040878865867853165,
      -0.08508633077144623,
      -0.041065849363803864,
      0.026967531070113182,
      0.039935290813446045,
      -0.003359770169481635,
      -0.0891817957162857,
      0.01209939457476139,
      -0.00832262635231018,
      0.028925592079758644,
      0.00779420742765069,
      -0.004492699168622494,
      0.05309879034757614,
      -0.03642449900507927,
      -0.03352195397019386,
      -0.05085013806819916,
      0.042423397302627563,
      -0.02608662284910679,
      0.0861433818936348,
      -0.0801120400428772,
      -0.03420617803931236,
      0.03987370431423187,
      -0.07682669907808304,
      0.05616828054189682,
      -0.10750868916511536,
      0.04034343734383583,
      -0.001589546911418438,
      0.01710248365998268,
      -0.01627497188746929,
      0.010935479775071144,
      0.03423534706234932,
      0.07955195754766464,
      0.05946909636259079,
      -0.10886994749307632,
      0.01837305724620819,
      0.05871456116437912,
      0.06881560385227203,
      -0.006474936846643686,
      -0.01934708096086979,
      0.002916038502007723,
      -0.07466915249824524,
      -0.010017147287726402,
      -0.0114784250035882,
      -0.08290238678455353,
      -0.021028069779276848,
      -0.06139851734042168,
      -0.0654674842953682,
      0.03552544489502907,
      0.010894300416111946,
      0.03814162686467171,
      -0.006672806106507778,
      -0.057165972888469696,
      -0.016599690541625023,
      0.05544188991189003,
      -0.08352191746234894,
      -0.01617499068379402,
      0.00923391804099083,
      0.030421439558267593,
      0.04839497432112694,
      -0.01124636735767126,
      -0.013054270297288895,
      0.036818601191043854,
      -0.004771842621266842
    ],
    [
      0.03995843604207039,
      -0.028361763805150986,
      -0.0411226786673069,
      0.04045374318957329,
      0.0443282313644886,
      -0.07443474978208542,
      0.02566133439540863,
      0.033638305962085724,
      -0.08234063535928726,
      0.06360793858766556,
      -0.029722493141889572,
      0.021185794845223427,
      0.000819208100438118,
      0.031344521790742874,
      -0.00028512795688584447,
      0.021137304604053497,
      0.07866759598255157,
      0.001775397569872439,
      0.021195154637098312,
      0.0339667983353138,
      -0.10132157802581787,
      -0.06657904386520386,
      0.021926719695329666,
      -0.023648247122764587,
      -0.1019224300980568,
      0.08485155552625656,
      -0.10273577272891998,
      -0.039163485169410706,
      -0.03466378152370453,
      -0.013907104730606079,
      0.08114134520292282,
      0.038458071649074554,
      -0.08361072838306427,
      0.034697841852903366,
      0.01765390671789646,
      0.036224961280822754,
      -0.0463397353887558,
      -0.0344865508377552,
      -0.030320344492793083,
      0.04079527407884598,
      0.015651235356926918,
      -0.05843672528862953,
      -0.017812836915254593,
      -0.031346019357442856,
      -0.01605279929935932,
      -0.08231578022241592,
      -0.020882941782474518,
      -0.05378198251128197,
      0.024667371064424515,
      -0.033252306282520294,
      -0.03933555632829666,
      0.024782996624708176,
      -0.03951949253678322,
      -0.029269102960824966,
      0.016019267961382866,
      0.05203105881810188,
      -0.061002280563116074,
      -0.09412338584661484,
      -0.004095844458788633,
      -0.018000874668359756,
      0.0013604150153696537,
      -0.08255956321954727,
      0.026870310306549072,
      0.005063437391072512,
      -0.02036004327237606,
      0.03526238724589348,
      0.020215678960084915,
      0.07593551278114319,
      0.13523653149604797,
      -0.0204149279743433,
      0.04627613723278046,
      0.02459621988236904,
      -0.06354910880327225,
      -0.02589624747633934,
      -0.07229293137788773,
      -0.012550656683743,
      0.03681154176592827,
      0.02513592131435871,
      -0.04523898661136627,
      -0.05803457647562027,
      0.023561494424939156,
      0.04252641275525093,
      -0.014626740477979183,
      0.028937969356775284,
      -0.0035858391784131527,
      0.08519509434700012,
      0.04643663763999939,
      0.03863304480910301,
      -0.006065186113119125,
      0.007148541044443846,
      0.10300812870264053,
      0.07219276577234268,
      0.003175006713718176,
      0.022740544751286507,
      -0.009460682980716228,
      0.00516809057444334,
      0.04525163769721985,
      -0.0018879788694903255,
      -0.05889645963907242,
      0.08561315387487411,
      0.060084570199251175,
      -0.05922837555408478,
      0.0024823995772749186,
      0.07941894233226776,
      0.013173433020710945,
      -0.09440391510725021,
      -0.04842529818415642,
      0.030827436596155167,
      -0.018886735662817955,
      -0.0017387522384524345,
      0.047635518014431,
      0.008598411455750465,
      -0.10798327624797821,
      -0.06082722172141075,
      -0.0036239903420209885,
      -0.0021467076148837805,
      0.0522611029446125,
      -0.0365329273045063,
      0.05440936237573624,
      0.08068051189184189,
      0.032815150916576385,
      -0.04934491589665413,
      0.031146198511123657,
      0.02454022690653801,
      0.02898736111819744,
      0.010029183700680733,
      -0.09133052080869675,
      7.031098236588584e-33,
      0.006248984485864639,
      0.015532348304986954,
      -0.07532553374767303,
      -0.06678620725870132,
      0.14251475036144257,
      0.019844522699713707,
      0.07235901057720184,
      0.028300868347287178,
      -0.054945819079875946,
      -0.007581851910799742,
      0.003986766096204519,
      0.033252861350774765,
      -0.024438532069325447,
      -0.06895557790994644,
      0.013831191696226597,
      -0.09575122594833374,
      -0.04288005828857422,
      0.0218513123691082,
      0.012858192436397076,
      -0.08724106103181839,
      -0.08565348386764526,
      -0.09385040402412415,
      -0.012992070987820625,
      -0.01869913749396801,
      0.05132801830768585,
      -0.039787981659173965,
      -0.017574943602085114,
      0.005054793320596218,
      0.039359744638204575,
      0.013341549783945084,
      0.06282736361026764,
      0.014784575439989567,
      0.08192070573568344,
      0.06454350054264069,
      0.000849301228299737,
      -0.053940676152706146,
      -0.10509157180786133,
      -0.07856405526399612,
      -0.004273515194654465,
      -0.02182019129395485,
      -0.07531405240297318,
      0.02599981240928173,
      -0.02013627253472805,
      0.06623022258281708,
      -0.027698608115315437,
      -0.09916168451309204,
      0.01451187301427126,
      0.04669348895549774,
      0.013157364912331104,
      0.018034541979432106,
      0.070229671895504,
      -0.014128148555755615,
      0.03528812900185585,
      0.0697314590215683,
      -3.364517033332959e-05,
      -0.04361806809902191,
      -0.03612310066819191,
      -0.036153394728899,
      0.050982795655727386,
      0.10573464632034302,
      -0.10751865804195404,
      -0.06416571885347366,
      -0.0653761625289917,
      0.0029355075675994158,
      0.0031235378701239824,
      0.08637870848178864,
      0.013725421391427517,
      0.025437185540795326,
      -0.003956748638302088,
      -0.032628145068883896,
      0.03593524172902107,
      -0.035890646278858185,
      0.07584694027900696,
      0.04235173761844635,
      0.03642917424440384,
      -0.007847893051803112,
      -0.007862935774028301,
      0.054301053285598755,
      -0.08319582790136337,
      -0.011307992041110992,
      -0.011148097924888134,
      0.07049715518951416,
      -0.04615744203329086,
      0.08959368616342545,
      0.020309243351221085,
      -0.024922486394643784,
      0.07194496691226959,
      0.005717064719647169,
      0.026621732860803604,
      0.07609910517930984,
      0.04317260533571243,
      0.05299709737300873,
      0.055642880499362946,
      -0.09779774397611618,
      -0.05588337033987045,
      -4.696075319622068e-33,
      -0.04430321976542473,
      -0.020188938826322556,
      -0.09623869508504868,
      0.04534658044576645,
      -0.019062897190451622,
      -0.04311106353998184,
      0.030644232407212257,
      -0.050394944846630096,
      0.043131910264492035,
      0.007282876875251532,
      -0.004926004912704229,
      0.030803656205534935,
      0.02511529251933098,
      -0.04169667512178421,
      -0.1077820286154747,
      0.01884845271706581,
      -0.030058156698942184,
      -0.00474975910037756,
      0.04464992508292198,
      0.02341569773852825,
      0.004860864020884037,
      0.02102537453174591,
      0.026559675112366676,
      0.015028350986540318,
      -0.0688958689570427,
      -0.025844646617770195,
      0.06056052818894386,
      -0.016562163829803467,
      0.011960607953369617,
      -0.05384250730276108,
      0.01206265576183796,
      0.04087783396244049,
      -0.0563008151948452,
      -0.030281703919172287,
      0.05154206231236458,
      0.03845575451850891,
      -0.01977439969778061,
      0.10294970870018005,
      -0.039046429097652435,
      -0.021955372765660286,
      0.005161928944289684,
      0.03870842978358269,
      -0.07189228385686874,
      -0.0039218273013830185,
      -0.06467998027801514,
      0.04010652378201485,
      0.016452742740511894,
      0.05458721145987511,
      -0.05431109666824341,
      0.017370175570249557,
      -0.08413907885551453,
      -0.11610119789838791,
      0.0081799840554595,
      0.0702759325504303,
      -0.041329674422740936,
      -0.043535612523555756,
      0.023070115596055984,
      0.05571732297539711,
      -0.07782372832298279,
      -0.008934860117733479,
      0.091278575360775,
      -0.10523132234811783,
      -0.009542773477733135,
      0.029940351843833923,
      0.0753311887383461,
      0.02137557603418827,
      -0.0244127307087183,
      0.022965293377637863,
      -0.028217613697052002,
      0.09508828073740005,
      0.027396228164434433,
      -0.029558168724179268,
      0.012185856699943542,
      0.036795008927583694,
      0.050714343786239624,
      0.00604724558070302,
      0.013912233524024487,
      -0.03773241490125656,
      -0.006235659588128328,
      0.02743585780262947,
      -0.018542636185884476,
      0.1375388652086258,
      -0.001776797929778695,
      -0.12906323373317719,
      -0.02834704890847206,
      -0.006477339658886194,
      0.05879487469792366,
      0.05767488107085228,
      -0.0277261883020401,
      0.024977760389447212,
      0.026791710406541824,
      -0.02312784641981125,
      -0.00978822261095047,
      0.018211884424090385,
      0.004145131446421146,
      -5.423103033308507e-08,
      -0.03859930858016014,
      0.018732784315943718,
      -0.037260401993989944,
      0.03251935914158821,
      0.038476116955280304,
      -0.013671012595295906,
      0.10994940996170044,
      -0.040540892630815506,
      -0.003545593237504363,
      0.011903993785381317,
      0.010503089986741543,
      -0.024353625252842903,
      -0.035165172070264816,
      -0.02929060533642769,
      0.008004161529242992,
      0.07997915148735046,
      0.04471775144338608,
      0.030877474695444107,
      -0.0544247142970562,
      -0.005872598383575678,
      0.012147119268774986,
      0.0902259349822998,
      0.09098127484321594,
      0.05002716928720474,
      -0.0002551358484197408,
      0.06724848598241806,
      0.11281002312898636,
      0.027803311124444008,
      -0.04715054854750633,
      -0.0417768657207489,
      -0.003922170028090477,
      -0.07870142161846161,
      0.037828169763088226,
      0.03272148221731186,
      -0.013782168738543987,
      0.007898548617959023,
      -0.05616602301597595,
      -0.00733845354989171,
      0.04354781657457352,
      -0.007053574547171593,
      -0.09617021679878235,
      -0.04749109968543053,
      -0.029611939564347267,
      0.011124958284199238,
      -0.046524159610271454,
      -0.05212787538766861,
      -0.19940035045146942,
      0.011255175806581974,
      0.03418814763426781,
      0.017316097393631935,
      0.10725637525320053,
      -0.024954333901405334,
      0.0027862272690981627,
      -0.04226269945502281,
      0.06232818588614464,
      0.039856500923633575,
      0.026963863521814346,
      0.008037242107093334,
      0.07014995068311691,
      0.0461280457675457,
      -0.003380383364856243,
      0.061203476041555405,
      0.005522615276277065,
      0.013534143567085266
    ],
    [
      -0.03038886934518814,
      -0.0014024078845977783,
      -0.05059446394443512,
      0.00844407919794321,
      0.04689303785562515,
      -0.06545610725879669,
      0.049073245376348495,
      -0.004107377026230097,
      -0.015760919079184532,
      0.008455143310129642,
      0.02451559528708458,
      0.043904200196266174,
      0.029171643778681755,
      -0.018005911260843277,
      0.012497160583734512,
      0.04252541437745094,
      -0.027009138837456703,
      -0.02378111332654953,
      0.005010158754885197,
      -0.03815153241157532,
      -0.005601842422038317,
      -0.11101557314395905,
      -0.039984460920095444,
      0.033709313720464706,
      -0.08640500903129578,
      0.06800892949104309,
      -0.11036329716444016,
      0.002113994676619768,
      -0.009353467263281345,
      -0.04822714254260063,
      0.05265574902296066,
      0.039030689746141434,
      -0.08648847788572311,
      0.05569234490394592,
      -0.06464610993862152,
      0.05226830020546913,
      -0.014988225884735584,
      -0.016261711716651917,
      -0.033093374222517014,
      0.039588041603565216,
      -0.003913055174052715,
      -0.12194891273975372,
      -0.023396575823426247,
      -0.05252913758158684,
      -0.021809875965118408,
      -0.045854534953832626,
      0.029984287917613983,
      -0.03705308213829994,
      -0.05337196961045265,
      -0.03957140073180199,
      0.01205175369977951,
      0.036607399582862854,
      -0.03876729682087898,
      0.024709079414606094,
      0.019749552011489868,
      0.05119233578443527,
      0.008412591181695461,
      -0.08001520484685898,
      0.040833134204149246,
      -0.03652770444750786,
      0.0465480238199234,
      -0.02592046558856964,
      -0.0019939185585826635,
      0.03151390701532364,
      0.020275088027119637,
      -0.012071743607521057,
      0.006230506114661694,
      -0.005040666554123163,
      0.07243689894676208,
      -0.0038789899554103613,
      0.05026331916451454,
      0.04163293540477753,
      -0.04165846109390259,
      -0.03900149092078209,
      -0.05559531971812248,
      0.06786365061998367,
      -0.02040286175906658,
      0.046273376792669296,
      -0.00012348897871561348,
      -0.1271917074918747,
      0.037376973778009415,
      0.07497531920671463,
      0.054822541773319244,
      -0.01605103351175785,
      0.03591981530189514,
      0.04152444750070572,
      0.0017543811118230224,
      0.05399962142109871,
      0.02816011756658554,
      0.038796644657850266,
      0.07278428226709366,
      0.06327489018440247,
      -0.05985768884420395,
      0.07326146215200424,
      0.0009951143292710185,
      0.015313157811760902,
      0.020189302042126656,
      0.00169014697894454,
      0.004962006118148565,
      0.09250377118587494,
      0.03083883784711361,
      -0.103678859770298,
      -0.05334208905696869,
      0.049860913306474686,
      -0.011693071573972702,
      -0.058859989047050476,
      -0.04123397171497345,
      0.0032782566267997026,
      -0.005831812508404255,
      -0.00218608183786273,
      0.01906154304742813,
      0.05630766972899437,
      -0.033328086137771606,
      -0.10143078118562698,
      -0.06826042383909225,
      0.05659133568406105,
      -0.0408681184053421,
      0.02188424952328205,
      0.028503485023975372,
      0.05588625371456146,
      0.06385664641857147,
      -0.002801538910716772,
      0.0656457245349884,
      0.01415548287332058,
      0.055519890040159225,
      0.006885985378175974,
      -0.01050596684217453,
      4.275988536126723e-33,
      0.010506611317396164,
      0.025014832615852356,
      -0.061087001115083694,
      0.008622424677014351,
      0.03949601575732231,
      0.04855053126811981,
      0.040943991392850876,
      -0.0076901172287762165,
      -0.0552532784640789,
      0.0033373478800058365,
      -0.0063876137137413025,
      0.025843068957328796,
      -0.001835393370129168,
      -0.02687118388712406,
      0.024166733026504517,
      -0.1344572901725769,
      0.027702240273356438,
      0.02355179190635681,
      0.05847514420747757,
      -0.07576926797628403,
      0.06393756717443466,
      -0.1269351691007614,
      -0.02767886035144329,
      0.056720178574323654,
      0.01714586652815342,
      0.06515153497457504,
      -0.008845741860568523,
      0.049793731421232224,
      0.008923656307160854,
      0.057493578642606735,
      0.012458979152143002,
      -0.05076679587364197,
      0.11529509723186493,
      0.036818888038396835,
      0.06500701606273651,
      0.02739272266626358,
      -0.04575803875923157,
      -0.09269560128450394,
      -0.013144584372639656,
      -0.07858922332525253,
      -0.014614112675189972,
      -0.06782029569149017,
      -0.06519545614719391,
      0.07529091835021973,
      -0.007536132354289293,
      -0.03521869704127312,
      -0.0002752990694716573,
      0.03336125984787941,
      0.03937521576881409,
      -0.03963835537433624,
      0.008958416990935802,
      -4.184155841358006e-05,
      0.042338158935308456,
      -0.03524121269583702,
      0.015454892069101334,
      0.039308808743953705,
      -0.02884340099990368,
      -0.10838264226913452,
      -0.051299139857292175,
      0.062130630016326904,
      -0.033542510122060776,
      -0.08685512840747833,
      -0.14713644981384277,
      -0.03672310337424278,
      -0.0422247014939785,
      0.10100489109754562,
      0.01860731840133667,
      -0.0012924752663820982,
      0.018560132011771202,
      -0.049581799656152725,
      -0.023303162306547165,
      0.003815063275396824,
      0.02027933858335018,
      0.05281985551118851,
      -0.009984909556806087,
      -0.009083050303161144,
      0.03476869687438011,
      0.11311814188957214,
      -0.0758654996752739,
      -0.0172421932220459,
      -0.09081687033176422,
      -0.046021878719329834,
      -0.1243027076125145,
      0.06994189321994781,
      -0.026031428948044777,
      -0.02558087930083275,
      0.02832341380417347,
      0.0007021374185569584,
      0.004057280719280243,
      0.025788677856326103,
      -0.0056376149877905846,
      0.026232993230223656,
      0.09287267178297043,
      -0.013593759387731552,
      -0.01337004080414772,
      -4.994594314065296e-33,
      -0.043166063725948334,
      -0.021037094295024872,
      -0.054212067276239395,
      0.022294463589787483,
      0.03096480295062065,
      0.02892732247710228,
      -0.012381289154291153,
      -0.01825045980513096,
      -0.021061399951577187,
      -0.04176441207528114,
      -0.08187280595302582,
      0.014481929130852222,
      -0.02809104323387146,
      -0.11139312386512756,
      -0.1252119094133377,
      -0.02817467227578163,
      -0.046453945338726044,
      0.11409257352352142,
      0.02700086124241352,
      0.04171222448348999,
      0.062235526740550995,
      0.054538872092962265,
      -0.007936986163258553,
      0.06505056470632553,
      0.0041175405494868755,
      -0.005140724591910839,
      -0.0013743541203439236,
      -0.015977459028363228,
      0.03386659175157547,
      0.0819597914814949,
      0.05551162362098694,
      -0.05457339808344841,
      -0.07765757292509079,
      -0.05332539230585098,
      -0.024691276252269745,
      0.011025475338101387,
      0.0045915162190794945,
      0.04989127069711685,
      0.004504215903580189,
      0.026111897081136703,
      0.055154237896203995,
      0.03844839334487915,
      -0.04198980703949928,
      0.010370254516601562,
      -0.07208983600139618,
      0.06857693940401077,
      0.030949890613555908,
      0.036208171397447586,
      -0.08805901557207108,
      0.0026025359984487295,
      -0.001083280541934073,
      -0.08663478493690491,
      0.007520499173551798,
      0.03633827343583107,
      -0.02195509895682335,
      0.02233407273888588,
      0.05541055649518967,
      -0.004978350829333067,
      -0.01854960434138775,
      0.056831520050764084,
      0.05878109484910965,
      -0.07503655552864075,
      0.017743302509188652,
      0.06646697968244553,
      0.06657420843839645,
      -0.019947979599237442,
      0.002516896231099963,
      0.03557567670941353,
      -0.001992355100810528,
      0.09104694426059723,
      0.0770319253206253,
      -0.0004454736190382391,
      -0.03826174512505531,
      0.03662271797657013,
      0.06745365262031555,
      -0.02340834029018879,
      -0.04744472727179527,
      -0.04254070296883583,
      -0.031128346920013428,
      0.010933426208794117,
      -0.043392717838287354,
      0.045740075409412384,
      0.013959369622170925,
      -0.05273056775331497,
      -0.023791590705513954,
      -0.053844571113586426,
      0.1105295717716217,
      0.024377265945076942,
      -0.009889660403132439,
      0.0021698917262256145,
      -0.04118611291050911,
      0.0302372295409441,
      -0.02827100083231926,
      0.014013797976076603,
      -0.0522252582013607,
      -5.713386741490467e-08,
      -0.06697406619787216,
      0.009624028578400612,
      -0.050417568534612656,
      -0.021161485463380814,
      0.029379386454820633,
      -0.015025013126432896,
      0.09403535723686218,
      -0.08344563841819763,
      0.012349453754723072,
      -0.07761900871992111,
      0.04823695868253708,
      0.020565703511238098,
      -0.03085278905928135,
      -0.08146703243255615,
      0.014632969163358212,
      -0.003434138372540474,
      0.0004690693167503923,
      0.04263072833418846,
      -0.0867762491106987,
      -0.06928600370883942,
      0.004905760753899813,
      0.038939330726861954,
      0.03750826045870781,
      0.016271205618977547,
      0.0481879860162735,
      0.056575924158096313,
      0.09711239486932755,
      0.07618960738182068,
      0.025407418608665466,
      0.07338456809520721,
      -0.0323471762239933,
      -0.056784555315971375,
      0.07303623110055923,
      -0.002736584050580859,
      -0.04099179431796074,
      0.11968838423490524,
      -0.021923376247286797,
      0.004561073612421751,
      0.06421282142400742,
      0.05479373037815094,
      -0.09288378804922104,
      0.05009671673178673,
      0.03163830563426018,
      0.0022557456977665424,
      -0.07113137096166611,
      0.009597762487828732,
      -0.21188203990459442,
      0.027819205075502396,
      -0.005896444898098707,
      -0.00460602855309844,
      0.07630271464586258,
      -0.054304420948028564,
      -0.0445849634706974,
      0.038578953593969345,
      -0.01806160807609558,
      -0.006788201164454222,
      0.020115772262215614,
      -0.006304048001766205,
      0.10436506569385529,
      -0.061911556869745255,
      0.001585951540619135,
      0.04438384622335434,
      0.06625957787036896,
      -0.038423169404268265
    ],
    [
      -0.0047930157743394375,
      -0.08869324624538422,
      -0.03610636293888092,
      0.02309281937777996,
      -0.02822941355407238,
      0.016066880896687508,
      0.09152945131063461,
      0.03500726819038391,
      -0.046148430556058884,
      0.11122288554906845,
      0.01929200068116188,
      0.026381716132164,
      0.02222066931426525,
      0.012282731011509895,
      0.06701041013002396,
      0.040115661919116974,
      -0.047551970928907394,
      -0.03153239190578461,
      0.0326845608651638,
      -0.014830012805759907,
      -0.005799887701869011,
      -0.013318399898707867,
      0.060906849801540375,
      -0.036029111593961716,
      -0.024418259039521217,
      -0.029483985155820847,
      -0.005666742101311684,
      0.03191883862018585,
      -0.02005356177687645,
      -0.03230024874210358,
      0.08669450879096985,
      0.06695820391178131,
      -0.06426598876714706,
      0.05179028958082199,
      0.07502781599760056,
      -0.00594688905403018,
      -0.037140484899282455,
      -0.02394763007760048,
      0.001939025823958218,
      -0.02270611561834812,
      0.021041350439190865,
      -0.06072584539651871,
      0.01497748214751482,
      -0.0682055652141571,
      -0.029530253261327744,
      -0.000471646839287132,
      -0.03996114432811737,
      -0.020359013229608536,
      -0.03599847853183746,
      0.01212055329233408,
      -0.0350688211619854,
      0.009701626375317574,
      -0.05255589634180069,
      0.00997770857065916,
      -0.023848431184887886,
      0.08228784799575806,
      -0.004250402096658945,
      -0.09122681617736816,
      0.0085911825299263,
      0.017308713868260384,
      -0.003140497487038374,
      -0.003141475608572364,
      0.011158556677401066,
      -0.07410790026187897,
      -0.021052127704024315,
      0.08389841020107269,
      0.03419714421033859,
      0.03920364007353783,
      0.0779426246881485,
      -0.054206907749176025,
      0.004913428332656622,
      -0.005793395917862654,
      -0.042983390390872955,
      -0.030114667490124702,
      -0.016228798776865005,
      -0.023984359577298164,
      -0.05145924165844917,
      0.03841228410601616,
      -0.06774275749921799,
      -0.16873741149902344,
      -0.06082407385110855,
      0.021512361243367195,
      0.07571588456630707,
      0.024838237091898918,
      -0.0033876728266477585,
      0.10219268500804901,
      0.06838595867156982,
      0.009967461228370667,
      0.039044465869665146,
      0.053468186408281326,
      0.04580464959144592,
      -0.03251659497618675,
      0.06513603776693344,
      0.05082608386874199,
      0.05172490328550339,
      0.045086704194545746,
      0.10869810730218887,
      0.04350508376955986,
      -0.010944558307528496,
      0.10078035295009613,
      -0.044689856469631195,
      -0.027619225904345512,
      -0.012984108179807663,
      0.1267700344324112,
      0.07835814356803894,
      0.020361866801977158,
      -0.010479015298187733,
      -0.10188712179660797,
      -0.020870810374617577,
      0.014697571285068989,
      -0.013509179465472698,
      0.1080249696969986,
      -0.026498708873987198,
      -0.03455135598778725,
      -0.03669561445713043,
      -0.033951323479413986,
      -0.011685905046761036,
      0.036182742565870285,
      0.04302598536014557,
      -0.0006020593573339283,
      0.036135733127593994,
      -0.03844574838876724,
      -0.10722434520721436,
      0.05186927318572998,
      -0.007010642439126968,
      0.08443189412355423,
      0.0006354177021421492,
      3.0950641360876055e-33,
      0.07087208330631256,
      0.09645204991102219,
      0.05189790949225426,
      0.026131846010684967,
      0.005463337991386652,
      0.004620651714503765,
      0.09730620682239532,
      0.02234945073723793,
      -0.07489946484565735,
      0.06160418316721916,
      -0.00998684111982584,
      0.05190681666135788,
      -0.03059375286102295,
      -0.0644373968243599,
      -0.0479554682970047,
      -0.09711190313100815,
      -0.019511530175805092,
      0.0758824348449707,
      0.050680600106716156,
      -0.004222045186907053,
      -0.053226273506879807,
      0.010834292508661747,
      -0.013824278488755226,
      -0.0398966483771801,
      0.034139566123485565,
      0.045032843947410583,
      -0.03927432745695114,
      0.03017512708902359,
      0.02160438895225525,
      0.03617927059531212,
      0.09526395797729492,
      -0.010333999991416931,
      0.055456653237342834,
      0.04727388545870781,
      0.04278504103422165,
      -0.043316550552845,
      -0.0830133929848671,
      -0.051964301615953445,
      -0.043699730187654495,
      -0.004537879955023527,
      0.07656753808259964,
      -0.03912504389882088,
      -0.028186053037643433,
      0.0579957440495491,
      -0.10159191489219666,
      -0.03856528922915459,
      0.01712324284017086,
      0.0648193433880806,
      0.15862727165222168,
      -0.0312894843518734,
      0.017667969688773155,
      -0.006542982999235392,
      -0.059196602553129196,
      -0.043183255940675735,
      -0.0027502637822180986,
      -0.07571806013584137,
      -0.079769566655159,
      -0.008079158142209053,
      0.03718818724155426,
      0.01195452455431223,
      -0.06621012836694717,
      0.0008555969689041376,
      -0.049782685935497284,
      0.02804655395448208,
      0.004389240872114897,
      -0.05931226164102554,
      -0.024259086698293686,
      -0.06703119724988937,
      0.06543436646461487,
      -0.102759450674057,
      0.045383673161268234,
      0.0007273959927260876,
      -0.05311674252152443,
      0.030554581433534622,
      0.07298936694860458,
      -0.03918352723121643,
      0.05260831117630005,
      0.041539017111063004,
      -0.09219618886709213,
      -0.038574445992708206,
      0.01181379146873951,
      0.07309427857398987,
      -0.1108660101890564,
      0.07035794854164124,
      -0.000939217337872833,
      -0.02767910063266754,
      0.015874875709414482,
      -0.021403148770332336,
      -0.0021951058879494667,
      -0.04394184425473213,
      0.00469305319711566,
      0.022735990583896637,
      0.02876906469464302,
      -0.025632783770561218,
      -0.05593841150403023,
      -1.6183109706297128e-33,
      0.006344053894281387,
      -0.055425096303224564,
      -0.04603391885757446,
      0.03879569470882416,
      -0.022167937830090523,
      -0.03931804001331329,
      0.08141625672578812,
      -0.007235707249492407,
      -0.08138243854045868,
      0.05262681841850281,
      -0.004555762279778719,
      -0.002740017604082823,
      0.05640491098165512,
      -0.10237866640090942,
      0.009617955423891544,
      -0.039246320724487305,
      -0.013799511827528477,
      -0.002835031133145094,
      0.032546792179346085,
      0.05174354463815689,
      0.013049802742898464,
      0.044314004480838776,
      -0.0025944020599126816,
      0.06156368926167488,
      -0.008168098516762257,
      0.014284520410001278,
      0.013753722421824932,
      0.09005182981491089,
      0.01968812756240368,
      -0.07017776370048523,
      0.05534287914633751,
      0.058072999119758606,
      -0.11835911124944687,
      0.001138842198997736,
      -0.0651375949382782,
      -0.06761426478624344,
      -0.0517190657556057,
      0.08677256107330322,
      -0.054580941796302795,
      0.06547564268112183,
      -0.040728747844696045,
      0.02641737274825573,
      -0.07026029378175735,
      0.014480632729828358,
      0.0028227188158780336,
      0.033399779349565506,
      0.13517914712429047,
      0.011378982104361057,
      -0.02792220190167427,
      0.012480903416872025,
      0.009175390005111694,
      0.023077301681041718,
      -0.04832702875137329,
      -0.08521870523691177,
      -0.043449584394693375,
      0.013955903239548206,
      0.06079832836985588,
      -0.0835915356874466,
      -0.006077133119106293,
      -0.0139213427901268,
      0.09203463792800903,
      0.0009787980234250426,
      0.11281796544790268,
      0.08618622273206711,
      0.0385875329375267,
      -0.08479005843400955,
      -0.003779307473450899,
      -0.011247350834310055,
      -0.016167214140295982,
      -0.034384969621896744,
      0.037312306463718414,
      -0.09634646028280258,
      0.042561519891023636,
      -0.023856375366449356,
      0.10019214451313019,
      -0.039949651807546616,
      -0.009279499761760235,
      0.03134991228580475,
      -0.01207104604691267,
      -0.03644967079162598,
      0.010398919694125652,
      0.020741991698741913,
      0.014026015996932983,
      -0.08802052587270737,
      -0.04057685285806656,
      0.0023681269958615303,
      0.11737779527902603,
      0.02530287206172943,
      -0.07256056368350983,
      0.06755665689706802,
      -0.014902757480740547,
      -0.06718292087316513,
      0.020222468301653862,
      0.02587847039103508,
      0.03493174538016319,
      -4.8715058653669985e-08,
      -0.03128272667527199,
      0.03269702196121216,
      -0.05172455683350563,
      -0.007587406784296036,
      -0.04735768213868141,
      -0.08650500327348709,
      0.02761702798306942,
      0.03694894164800644,
      -0.02329965867102146,
      -0.0458933562040329,
      -0.02601589635014534,
      0.0429529994726181,
      0.007608434651046991,
      0.05695580318570137,
      -0.014856219291687012,
      0.042389918118715286,
      0.017050277441740036,
      -0.02901337668299675,
      -0.09488499164581299,
      -0.019012736156582832,
      -0.04199465736746788,
      0.04044865444302559,
      0.09771756082773209,
      -0.039642635732889175,
      0.035477202385663986,
      0.09862683713436127,
      0.047447726130485535,
      0.026171693578362465,
      0.07452785223722458,
      0.026763586327433586,
      -0.017569148913025856,
      -0.03901747986674309,
      0.018897749483585358,
      -0.01814942993223667,
      -0.03227437660098076,
      0.049229420721530914,
      -0.029012752696871758,
      -0.018697531893849373,
      0.02561258152127266,
      -0.015699665993452072,
      -0.013257323764264584,
      0.001910222228616476,
      -0.030270179733633995,
      0.05063369870185852,
      -0.03141821175813675,
      -0.035080742090940475,
      -0.05967529118061066,
      0.004599231760948896,
      0.05182507261633873,
      -0.08449850231409073,
      0.008271823637187481,
      -0.024248866364359856,
      -0.024250715970993042,
      -0.020711971446871758,
      -0.05546809732913971,
      0.10338038951158524,
      -0.005000356584787369,
      0.03792760893702507,
      0.03292406350374222,
      -0.03019438497722149,
      -0.028099404647946358,
      0.0013908016262575984,
      -0.08053711801767349,
      -0.051401540637016296
    ],
    [
      -0.03944993391633034,
      -0.020049728453159332,
      0.036307644098997116,
      -0.010951243340969086,
      0.06148146837949753,
      -0.08393878489732742,
      -0.03335901349782944,
      -0.010296554304659367,
      -0.07682879269123077,
      0.01669549196958542,
      0.06862927973270416,
      0.034264516085386276,
      0.07977985590696335,
      -0.03149034455418587,
      0.050673630088567734,
      0.032090507447719574,
      0.002654036972671747,
      -0.02550678513944149,
      0.02823771722614765,
      -0.041011471301317215,
      -0.11895700544118881,
      -0.10325347632169724,
      -0.02234126254916191,
      0.0002523740695323795,
      -0.07383453845977783,
      -0.0010489082196727395,
      -0.07992938905954361,
      0.0056630210019648075,
      0.014502659440040588,
      -0.04614022746682167,
      0.026951318606734276,
      0.010219712741672993,
      -0.060101982206106186,
      0.08554022759199142,
      0.044564127922058105,
      0.11911298334598541,
      0.032317183911800385,
      -0.0033074922394007444,
      -0.024919794872403145,
      0.0051269554533064365,
      0.1424178183078766,
      -0.07201585173606873,
      -0.027551064267754555,
      -0.10889489203691483,
      0.10533885657787323,
      -0.0178001057356596,
      -0.03786328807473183,
      -0.0019434272544458508,
      0.037945087999105453,
      -0.042799536138772964,
      -0.023248616605997086,
      -0.11316627264022827,
      -0.0544140450656414,
      0.029914027079939842,
      0.03633774444460869,
      0.0784967839717865,
      -0.04160870239138603,
      -0.003877998096868396,
      0.048407867550849915,
      0.0306834913790226,
      0.016721567139029503,
      -0.01759899966418743,
      -0.0730568990111351,
      0.027671078220009804,
      0.059803031384944916,
      0.06135042384266853,
      0.06431561708450317,
      -0.016067933291196823,
      0.02851167507469654,
      -0.034679751843214035,
      0.052111122757196426,
      0.023064743727445602,
      -0.08313606679439545,
      -0.030985994264483452,
      -0.1472739279270172,
      0.0684623196721077,
      0.0036409308668226004,
      0.05904673784971237,
      0.023789122700691223,
      -0.046101007610559464,
      0.03480696305632591,
      0.009580678306519985,
      0.050606418401002884,
      0.016015827655792236,
      -0.10710787773132324,
      -0.07316290587186813,
      -0.005062632728368044,
      0.023370740935206413,
      0.006970527116209269,
      -0.04083001986145973,
      0.02814250811934471,
      0.03204374015331268,
      -0.05892396718263626,
      0.00949003640562296,
      0.04507818818092346,
      0.035081714391708374,
      -0.029987657442688942,
      -0.033326976001262665,
      0.026435647159814835,
      0.05518966540694237,
      -0.05776070058345795,
      -0.0738844946026802,
      0.04666744917631149,
      0.013583374209702015,
      -0.03250863775610924,
      -0.008370715193450451,
      -0.0016782914754003286,
      0.022902879863977432,
      0.05264490470290184,
      0.005493380129337311,
      -0.08797766268253326,
      0.08397242426872253,
      -0.08382144570350647,
      -0.04476107284426689,
      -0.05829808488488197,
      0.005109767429530621,
      -0.05487699434161186,
      -0.053104281425476074,
      -0.005245111882686615,
      0.06584620475769043,
      0.08171985298395157,
      -0.0249776728451252,
      0.051425397396087646,
      -0.0482039637863636,
      0.022688286378979683,
      -0.0014621278969570994,
      -0.06075463816523552,
      3.645630057840256e-33,
      0.01882018707692623,
      -0.018138039857149124,
      0.10714062303304672,
      -0.013460533693432808,
      0.09646610915660858,
      0.01983327604830265,
      0.007938781753182411,
      -0.05349031090736389,
      -0.0891367644071579,
      0.0308602936565876,
      -0.046351026743650436,
      0.031472720205783844,
      -0.06055236607789993,
      0.08897936344146729,
      0.021330827847123146,
      -0.059222299605607986,
      0.07883008569478989,
      0.018004365265369415,
      0.04805116355419159,
      -0.050874244421720505,
      -0.024787336587905884,
      -0.08493681997060776,
      -0.010313156992197037,
      -0.01577410288155079,
      0.008912730030715466,
      0.023627208545804024,
      0.009330421686172485,
      -0.020645301789045334,
      0.10953837633132935,
      -0.002956895623356104,
      0.06059484928846359,
      -0.019064584746956825,
      0.05273592099547386,
      0.11624609678983688,
      -0.044771961867809296,
      -0.026773404330015182,
      -0.07095449417829514,
      -0.08851016312837601,
      -0.03221987187862396,
      0.035146988928318024,
      -0.008417815901339054,
      -0.009552624076604843,
      0.03119567781686783,
      -0.028197260573506355,
      -0.011995209380984306,
      0.04678715020418167,
      0.010882268659770489,
      -0.14531603455543518,
      0.052316803485155106,
      0.01496848464012146,
      0.07085205614566803,
      0.00981573574244976,
      -0.07769912481307983,
      -0.05509185791015625,
      0.019003216177225113,
      0.004281642846763134,
      0.022613586857914925,
      -0.10699066519737244,
      -0.029325759038329124,
      0.023858848959207535,
      0.01911289617419243,
      -0.014488576911389828,
      -0.013517134822905064,
      0.030193958431482315,
      0.026171352714300156,
      0.054971933364868164,
      -0.058842193335294724,
      0.00039943394949659705,
      -0.0270419679582119,
      0.029008913785219193,
      0.03068389743566513,
      -0.026619790121912956,
      0.0225258469581604,
      0.013150268234312534,
      0.06800029426813126,
      -0.04722796007990837,
      0.001823888043873012,
      0.0468064583837986,
      -0.10063690692186356,
      -0.012861407361924648,
      -0.09991341084241867,
      -0.08674966543912888,
      -0.09825334697961807,
      0.048038069158792496,
      -0.03763749450445175,
      0.01785142533481121,
      0.04854844883084297,
      -0.02131911925971508,
      0.04748685285449028,
      -0.05423872917890549,
      -0.04713813588023186,
      0.02924535609781742,
      -0.01771222986280918,
      -0.018928520381450653,
      -0.05596490204334259,
      -4.3826304856592746e-33,
      0.012755343690514565,
      0.010287048295140266,
      0.029042193666100502,
      0.006650359835475683,
      0.0610293485224247,
      0.02236979827284813,
      0.06456270813941956,
      0.03074019029736519,
      0.01988387666642666,
      0.10368631035089493,
      -0.02231164276599884,
      0.04202428087592125,
      -0.01222627330571413,
      -0.09510626643896103,
      -0.07184555381536484,
      -0.03034958988428116,
      0.035158172249794006,
      -0.020142752677202225,
      0.009508526884019375,
      0.021989349275827408,
      0.013506039045751095,
      0.07870375365018845,
      0.05326983332633972,
      0.041844408959150314,
      -0.0045798239298164845,
      0.0007162016117945313,
      0.05948905646800995,
      0.040018171072006226,
      0.017985094338655472,
      0.020882200449705124,
      -0.08325833827257156,
      0.03742820769548416,
      -0.06194327399134636,
      -0.020917262881994247,
      0.05125848576426506,
      0.01954585127532482,
      -0.024165812879800797,
      0.04003883898258209,
      0.02718864381313324,
      -0.07330375909805298,
      0.010322670452296734,
      -0.018754752352833748,
      -0.05473260208964348,
      -0.06706000864505768,
      0.008127454668283463,
      0.03444337099790573,
      0.025716226547956467,
      -0.026629269123077393,
      0.002067547058686614,
      -0.00608709454536438,
      -0.0033289799466729164,
      0.03431036323308945,
      -0.007826313376426697,
      0.09186528623104095,
      -0.048079971224069595,
      0.021242080256342888,
      -0.01623259298503399,
      0.035663023591041565,
      0.04131967946887016,
      -0.023621072992682457,
      0.06805794686079025,
      -0.11377284675836563,
      -0.07377427816390991,
      -0.0041134171187877655,
      0.015289656817913055,
      0.030695736408233643,
      -0.033464137464761734,
      0.025365840643644333,
      -0.05442238226532936,
      0.06384147703647614,
      -0.07462251931428909,
      -0.008275095373392105,
      0.050640206784009933,
      0.03581080958247185,
      -0.036889851093292236,
      -0.0013511708239093423,
      -0.017203601077198982,
      -0.06296629458665848,
      0.06909824907779694,
      -0.027625778689980507,
      0.055542245507240295,
      0.050061486661434174,
      -0.03700767457485199,
      -0.037172578275203705,
      0.04350222274661064,
      -0.06552167236804962,
      0.05247807130217552,
      0.0181154515594244,
      0.06147141009569168,
      0.02636246755719185,
      -0.06790650635957718,
      0.022458437830209732,
      0.04813208058476448,
      0.029962612316012383,
      -0.0021509036887437105,
      -5.264287850081928e-08,
      0.009893528185784817,
      0.03416336700320244,
      -0.005336260888725519,
      0.007733627688139677,
      0.06968525797128677,
      -0.018812982365489006,
      0.04439568519592285,
      0.020386043936014175,
      0.05883186683058739,
      0.01656562276184559,
      -0.009751418605446815,
      0.028660420328378677,
      -0.03612133860588074,
      0.02531283348798752,
      -0.10547182708978653,
      0.031265467405319214,
      -0.042071014642715454,
      0.0002223460905952379,
      -0.003526135813444853,
      -0.026238372549414635,
      -0.08607977628707886,
      0.0392451249063015,
      0.025224249809980392,
      -0.011091913096606731,
      -0.0010007013333961368,
      0.03609118610620499,
      0.11961617320775986,
      0.015208208002150059,
      -0.006446897052228451,
      0.02156197279691696,
      -0.02051723748445511,
      -0.008684799075126648,
      0.03514821082353592,
      -0.038466595113277435,
      -0.038228750228881836,
      0.02175944484770298,
      -0.0836334154009819,
      0.0533912368118763,
      0.07394346594810486,
      -0.03093622997403145,
      -0.06955376267433167,
      0.0012423045700415969,
      0.07444172352552414,
      -0.055664580315351486,
      -0.007071725558489561,
      -0.10502709448337555,
      -0.07334151118993759,
      0.054466065019369125,
      -0.012616022489964962,
      0.09696446359157562,
      0.07762623578310013,
      -0.10712818056344986,
      -0.034091606736183167,
      0.03410278633236885,
      0.07514753192663193,
      -0.11324141919612885,
      0.0638003721833229,
      -0.04725634306669235,
      0.07458092272281647,
      0.07531967759132385,
      -0.017743755131959915,
      -0.041674308478832245,
      0.035789281129837036,
      -0.0594400055706501
    ],
    [
      -0.021967638283967972,
      -0.1042945384979248,
      -0.032048698514699936,
      0.028782133013010025,
      0.05263375863432884,
      -0.07031261920928955,
      -0.0760512501001358,
      0.028783129528164864,
      -0.03166528418660164,
      0.04691949114203453,
      -0.017390936613082886,
      0.07064702361822128,
      -0.028621163219213486,
      -0.014928537420928478,
      0.08266320824623108,
      0.04127579927444458,
      0.041993629187345505,
      -0.11371134221553802,
      0.06735396385192871,
      0.02588612772524357,
      -0.1067415103316307,
      -0.0628713071346283,
      -0.02951696887612343,
      -0.024691803380846977,
      -0.0595952533185482,
      -0.01291585061699152,
      -0.07838072627782822,
      -0.007426528260111809,
      -0.05375242233276367,
      0.0467711016535759,
      0.0642799437046051,
      0.06058383360505104,
      -0.056185282766819,
      -0.0167823638767004,
      -0.047809720039367676,
      -0.0017791559221222997,
      0.03929672762751579,
      0.000998256029561162,
      -0.016165221109986305,
      0.035618122667074203,
      -0.020258909091353416,
      -0.06319749355316162,
      0.018581658601760864,
      -0.025560598820447922,
      -0.003296739188954234,
      -0.1289132982492447,
      -0.0018399977125227451,
      0.005159545224159956,
      0.0027542172465473413,
      -0.006404627114534378,
      0.05393523350358009,
      -0.032195623964071274,
      -0.05999485403299332,
      0.10764220356941223,
      0.07529084384441376,
      0.018635602667927742,
      -0.019554901868104935,
      0.00644346559420228,
      -0.040686581283807755,
      0.03520840406417847,
      0.05646021291613579,
      -0.0076242536306381226,
      -0.06996571272611618,
      -0.0255469661206007,
      -0.03390403836965561,
      -0.05047597736120224,
      0.050761718302965164,
      -0.023082375526428223,
      0.09945163130760193,
      -0.06581748276948929,
      -0.08354344964027405,
      0.05360176041722298,
      0.0075292703695595264,
      -0.07716616988182068,
      0.035504382103681564,
      0.07642757147550583,
      0.07317589968442917,
      0.10162920504808426,
      0.06229599192738533,
      -0.11587259918451309,
      0.06854652613401413,
      0.05761435255408287,
      0.07031581550836563,
      -0.07040395587682724,
      -0.04374944418668747,
      0.03654768690466881,
      -0.04829532280564308,
      -0.011274871416389942,
      -0.059413887560367584,
      0.029252661392092705,
      0.0652640238404274,
      -0.0015680581564083695,
      -0.0390288308262825,
      0.039265330880880356,
      -0.015166926197707653,
      0.029982080683112144,
      0.021595053374767303,
      0.04009314253926277,
      -0.004357810597866774,
      0.01580802910029888,
      -0.05856668949127197,
      -0.06222422420978546,
      -0.03972116857767105,
      0.001453785807825625,
      -0.0565057136118412,
      -0.07107168436050415,
      -0.031568270176649094,
      0.11880580335855484,
      -0.02591739408671856,
      -0.0394742488861084,
      0.008558345958590508,
      0.028281327337026596,
      -0.05019398778676987,
      -0.06928996741771698,
      -0.07662595808506012,
      0.05474073067307472,
      -0.08571522682905197,
      0.0007012919522821903,
      -0.007247744128108025,
      0.0659668892621994,
      0.020645087584853172,
      0.020371586084365845,
      0.01655111089348793,
      0.05905183404684067,
      0.04702862352132797,
      0.024338848888874054,
      0.0009462666930630803,
      1.819990169058308e-33,
      0.06318666785955429,
      0.07268799096345901,
      -0.03186206892132759,
      0.05837605893611908,
      0.020430132746696472,
      -0.03751613199710846,
      0.0585549958050251,
      -0.014167274348437786,
      -0.047486811876297,
      0.04061568155884743,
      0.03947795554995537,
      0.033381711691617966,
      -0.05047226324677467,
      -0.04271852597594261,
      0.038169726729393005,
      -0.09257900714874268,
      -0.024755312129855156,
      0.019216878339648247,
      0.06546642631292343,
      -0.12018484622240067,
      0.03988468647003174,
      -0.013756591826677322,
      -0.020204374566674232,
      -0.052605438977479935,
      0.14780256152153015,
      0.0985201969742775,
      -0.0022499843034893274,
      0.07835716009140015,
      -0.00932449009269476,
      0.05776303634047508,
      0.001710020937025547,
      -0.06089167296886444,
      0.0829932764172554,
      0.014543413184583187,
      0.05503058433532715,
      -0.06698857992887497,
      -0.09189110994338989,
      -0.07814143598079681,
      -0.12552644312381744,
      -0.04101537540555,
      0.022967712953686714,
      0.02486940659582615,
      -0.09029805660247803,
      -0.0195063017308712,
      0.030155126005411148,
      -0.05605676770210266,
      -0.002557951956987381,
      -0.0012467551277950406,
      0.12377851456403732,
      -0.03953849524259567,
      0.055462561547756195,
      0.006952753756195307,
      -0.00557313859462738,
      0.05238678678870201,
      0.10817483812570572,
      -0.0065717874094843864,
      0.037214234471321106,
      -0.08240779489278793,
      0.013118874281644821,
      0.01637151464819908,
      0.009970354847609997,
      -0.07790202647447586,
      -0.08332698792219162,
      -0.07257221639156342,
      0.07107246667146683,
      0.05327096953988075,
      0.01175730675458908,
      0.009690850041806698,
      0.021560102701187134,
      0.03829464688897133,
      0.02649662457406521,
      0.0060351137071847916,
      -0.01075892522931099,
      0.03796679899096489,
      0.048997554928064346,
      0.0014642442110925913,
      0.08049247413873672,
      0.05198591202497482,
      0.022133296355605125,
      0.008273305371403694,
      -0.08908567577600479,
      -0.021884428337216377,
      -0.08053367584943771,
      0.11960506439208984,
      0.04502786695957184,
      -0.017007743939757347,
      -0.022495973855257034,
      0.003611984895542264,
      0.018945841118693352,
      -0.052479229867458344,
      0.030068576335906982,
      0.0542500875890255,
      0.020678188651800156,
      -0.0013549714349210262,
      0.004634153097867966,
      -2.0127113658496682e-33,
      -0.050671882927417755,
      -0.01812737062573433,
      -0.08542358130216599,
      -0.05217823013663292,
      -0.02282368764281273,
      -0.012800907716155052,
      -0.012753473594784737,
      0.0001797205477487296,
      0.0030504947062581778,
      0.0029800725169479847,
      -0.043619636446237564,
      0.060521770268678665,
      -0.04548685625195503,
      -0.08573532104492188,
      -0.13431450724601746,
      0.009231891483068466,
      -0.01657148450613022,
      -0.08131516724824905,
      0.02849120832979679,
      0.0403771847486496,
      0.012019575573503971,
      -0.012554038316011429,
      0.08194668591022491,
      -0.0021421429701149464,
      -0.02859393134713173,
      -0.05146678537130356,
      0.04326742887496948,
      0.019797474145889282,
      -0.012114770710468292,
      0.0024058963172137737,
      0.07604549080133438,
      -0.016259441152215004,
      -0.06172650307416916,
      -0.058138374239206314,
      -0.04064776748418808,
      0.007330056745558977,
      0.0017280905740335584,
      0.02810916118323803,
      -0.04371609911322594,
      0.01907525397837162,
      0.0389510914683342,
      0.0463407002389431,
      -0.038058843463659286,
      -0.028600601479411125,
      0.007339193485677242,
      0.026204371824860573,
      -0.01670851744711399,
      -0.027773983776569366,
      0.020051706582307816,
      -0.026191601529717445,
      0.012425328604876995,
      -0.073250912129879,
      0.00867838878184557,
      0.037231069058179855,
      -0.053605616092681885,
      -0.024960849434137344,
      0.1047445610165596,
      0.07085482776165009,
      -0.0008473492925986648,
      0.03463854268193245,
      0.11111331731081009,
      -0.021325547248125076,
      0.005055379122495651,
      0.035158850252628326,
      0.051948267966508865,
      0.062326882034540176,
      0.021878309547901154,
      0.10908833891153336,
      -0.026313547044992447,
      0.07311515510082245,
      0.05766762048006058,
      -0.06831297278404236,
      -0.08381438255310059,
      -0.0012513542314991355,
      -0.004770983476191759,
      -0.02383594401180744,
      0.013619227334856987,
      -0.0022630433086305857,
      -0.03749199956655502,
      0.09284337610006332,
      -0.032979242503643036,
      0.03376279026269913,
      -0.012291827239096165,
      0.0021958695724606514,
      -0.0077152373269200325,
      -0.05914637818932533,
      0.08950773626565933,
      -0.025756586343050003,
      0.03235723823308945,
      0.006109429523348808,
      -0.05273847654461861,
      0.05190097540616989,
      -0.05821686238050461,
      -0.00062793173128739,
      0.004066390451043844,
      -5.139305159218566e-08,
      -0.07016046345233917,
      0.07316499203443527,
      -0.09981603175401688,
      0.01678275130689144,
      0.034247420728206635,
      0.0215399619191885,
      0.009353838860988617,
      -0.0010642418637871742,
      -0.0030323569662868977,
      0.03272425755858421,
      -0.04376843944191933,
      0.030208105221390724,
      0.03287627175450325,
      -0.00938230287283659,
      -0.007142944261431694,
      -0.05897206813097,
      0.025274144485592842,
      0.027328455820679665,
      -0.06321000307798386,
      -0.0838666707277298,
      -0.03171425685286522,
      0.07180140167474747,
      0.06438492238521576,
      -0.017091521993279457,
      0.02145412191748619,
      -0.033091723918914795,
      0.07215620577335358,
      -0.01441924273967743,
      0.06767429411411285,
      0.016787655651569366,
      -0.01692104898393154,
      0.040457192808389664,
      -0.0030821217224001884,
      0.01049756072461605,
      -0.03725934401154518,
      0.0019648869056254625,
      -0.009515576995909214,
      0.05206670984625816,
      0.008728069253265858,
      0.06844402104616165,
      -0.004578023217618465,
      0.09618906676769257,
      -0.02208797261118889,
      0.012557783164083958,
      0.018751434981822968,
      0.011016396805644035,
      -0.05184844881296158,
      0.018866783007979393,
      -0.015946974977850914,
      -0.021513190120458603,
      0.0630379393696785,
      -0.03251213952898979,
      -0.09417858719825745,
      -0.03350573033094406,
      -0.004051505122333765,
      0.04849935322999954,
      -0.056406181305646896,
      0.07109618186950684,
      0.05208593234419823,
      -0.060712914913892746,
      -0.07750393450260162,
      -0.010851548053324223,
      0.051644615828990936,
      -0.00031692851916886866
    ],
    [
      0.0006329714087769389,
      -0.04001929610967636,
      -0.009347406215965748,
      0.015114364214241505,
      0.07613508403301239,
      -0.09967202693223953,
      0.042958978563547134,
      0.07548996806144714,
      -0.04102960228919983,
      0.051322679966688156,
      -0.0022357162088155746,
      0.03861154988408089,
      -0.022313466295599937,
      0.024003110826015472,
      0.023403776809573174,
      0.009749623015522957,
      -0.09455636143684387,
      -0.08708272874355316,
      0.07214654982089996,
      0.03928442671895027,
      0.003987835254520178,
      -0.0890750139951706,
      0.044717688113451004,
      -0.08937002718448639,
      -0.03427945449948311,
      0.06921683996915817,
      -0.06160646677017212,
      0.0035220766440033913,
      -0.020710574463009834,
      -0.056971192359924316,
      0.06715112924575806,
      0.10561374574899673,
      -0.10226519405841827,
      0.0003401009307708591,
      0.009565905667841434,
      -0.007792558986693621,
      0.005045305471867323,
      -0.04591559246182442,
      -0.02009233646094799,
      0.064994677901268,
      0.015562011860311031,
      -0.06795129179954529,
      0.0032328711822628975,
      -0.08382245153188705,
      -0.02719493955373764,
      -0.02570483088493347,
      0.015484102070331573,
      -0.01753777079284191,
      0.01711888425052166,
      0.008104309439659119,
      -0.016710197553038597,
      0.013916478492319584,
      -0.057390764355659485,
      0.03014037013053894,
      0.04300874471664429,
      0.056929364800453186,
      0.00671060336753726,
      -0.06236837059259415,
      0.03841278329491615,
      -0.03041808120906353,
      -0.0006318428786471486,
      0.0025581626687198877,
      -0.03620343282818794,
      0.012656725011765957,
      -0.034121572971343994,
      0.06155224144458771,
      -0.027655521407723427,
      0.04673842713236809,
      0.0821659192442894,
      -0.07327118515968323,
      -0.05987374484539032,
      0.060875967144966125,
      0.009183982387185097,
      -0.029542088508605957,
      0.0013161427341401577,
      0.039251815527677536,
      0.06855262070894241,
      0.06909307092428207,
      -0.006495652254670858,
      -0.15748600661754608,
      0.09591034054756165,
      0.07017667591571808,
      0.04179353639483452,
      0.053267959505319595,
      0.08222917467355728,
      0.07260112464427948,
      -0.009651741944253445,
      0.02938777580857277,
      0.017779752612113953,
      0.004422763828188181,
      0.03608931228518486,
      0.042424920946359634,
      -0.061910271644592285,
      0.0638401210308075,
      -0.030718449503183365,
      0.06629571318626404,
      0.0275042112916708,
      -0.024646906182169914,
      -0.04214533418416977,
      0.09167618304491043,
      -0.019584832713007927,
      -0.07277344167232513,
      0.02402685582637787,
      0.1272859126329422,
      -0.013396522030234337,
      -0.058267828077077866,
      -0.05631551519036293,
      0.04483607038855553,
      -0.0032896962948143482,
      -0.021019507199525833,
      0.0024483720771968365,
      0.039056215435266495,
      -0.08438078314065933,
      -0.10695777088403702,
      -0.03561427444219589,
      -0.02561786212027073,
      -0.05494122579693794,
      -0.009610209614038467,
      0.04881549999117851,
      0.0019331224029883742,
      0.05060843378305435,
      -0.032124388962984085,
      -0.0683526024222374,
      0.03424395993351936,
      0.08121110498905182,
      0.025296002626419067,
      -0.019202472642064095,
      5.952422743287805e-33,
      0.028379706665873528,
      0.08928971737623215,
      -0.07334765791893005,
      -0.002654922427609563,
      0.09548915922641754,
      -0.018615957349538803,
      0.05420573055744171,
      -0.043067384511232376,
      -0.06468065083026886,
      0.06119215115904808,
      -0.09344043582677841,
      0.0376930832862854,
      -0.05938640609383583,
      -0.04638800397515297,
      -0.04624344781041145,
      -0.05640104413032532,
      0.009965765289962292,
      0.060394950211048126,
      -0.03735320270061493,
      -0.06007158383727074,
      0.01921786181628704,
      -0.02877267822623253,
      0.0035648259799927473,
      -0.052297186106443405,
      0.06623994559049606,
      0.10474717617034912,
      -0.044970277696847916,
      0.10105523467063904,
      0.06644738465547562,
      0.031880397349596024,
      0.05308705195784569,
      -0.013606677763164043,
      0.12997913360595703,
      0.024938160553574562,
      0.05631599947810173,
      -0.06597157567739487,
      -0.08352155238389969,
      -0.0898360162973404,
      -0.06327124685049057,
      0.02683807536959648,
      -0.005830081645399332,
      0.02041228488087654,
      -0.04997853562235832,
      0.06177061051130295,
      -0.02181599847972393,
      -0.04405050352215767,
      0.02189282514154911,
      0.013607308268547058,
      0.09801806509494781,
      -0.005197130609303713,
      0.017312193289399147,
      -0.016842316836118698,
      -0.008042250759899616,
      0.007292065303772688,
      0.08209303021430969,
      -0.016067394986748695,
      -0.0952293872833252,
      -0.04138487949967384,
      0.024268928915262222,
      0.023596113547682762,
      -0.013242759741842747,
      -0.056164104491472244,
      -0.0782357007265091,
      -0.03289230912923813,
      0.013115992769598961,
      0.04524247720837593,
      0.055821072310209274,
      0.03328954428434372,
      0.0646306499838829,
      -0.03704005107283592,
      0.010879776440560818,
      0.010085350833833218,
      -0.0020214547403156757,
      0.029688898473978043,
      0.05614890158176422,
      -0.04255353659391403,
      0.05702084302902222,
      0.002334199147298932,
      -0.09170276671648026,
      0.08137280493974686,
      -0.07908819615840912,
      -0.07383088022470474,
      -0.10516069829463959,
      0.030571971088647842,
      0.014326927252113819,
      0.0053129675798118114,
      0.103126160800457,
      -0.03889494761824608,
      -0.014620346948504448,
      -0.006290596444159746,
      0.030608410015702248,
      0.044555045664310455,
      0.016009937971830368,
      -0.0626097247004509,
      -0.06646444648504257,
      -3.648127983335753e-33,
      -0.027720773592591286,
      -0.009734224528074265,
      -0.07014515995979309,
      -0.012174293398857117,
      -0.026339199393987656,
      -0.016934888437390327,
      0.08980267494916916,
      0.05773841589689255,
      0.035891156643629074,
      0.02985123172402382,
      0.022883405908942223,
      0.029099270701408386,
      -0.04309028759598732,
      -0.15956130623817444,
      -0.10454799234867096,
      0.02097467891871929,
      0.016564100980758667,
      0.003777518402785063,
      -0.009163890965282917,
      0.06961438804864883,
      -0.040171921253204346,
      0.040469564497470856,
      -0.0051970952190458775,
      0.009029452688992023,
      -0.02200441248714924,
      0.03596470132470131,
      0.07691586762666702,
      -0.006549855228513479,
      -0.029897138476371765,
      -0.013061978854238987,
      -0.008028884418308735,
      -0.004196986556053162,
      -0.08397998660802841,
      0.0048124054446816444,
      0.02926807850599289,
      0.02427080273628235,
      -0.027822943404316902,
      0.024106282740831375,
      -0.053092293441295624,
      -0.0003248821012675762,
      0.07108926773071289,
      0.0454324334859848,
      -0.0430365689098835,
      0.0006648713606409729,
      -0.05926822870969772,
      0.03266265243291855,
      0.013346045278012753,
      0.03450828418135643,
      0.00042047162423841655,
      0.03265984356403351,
      -0.008880140259861946,
      -0.09462839365005493,
      -0.0007339503499679267,
      -0.00013636966468766332,
      -0.0493626669049263,
      -0.03186773136258125,
      0.09199546277523041,
      0.01698237657546997,
      -0.09482215344905853,
      0.04845571890473366,
      0.11235443502664566,
      -0.13663986325263977,
      -0.016979513689875603,
      0.027733320370316505,
      0.09203595668077469,
      0.021490417420864105,
      -0.03788070008158684,
      0.014528356492519379,
      -0.016079967841506004,
      0.10901442170143127,
      0.026895293965935707,
      -0.04008368030190468,
      -0.029369669035077095,
      -0.022467873990535736,
      0.12071353942155838,
      -0.0031198079232126474,
      -0.03417452797293663,
      0.020759759470820427,
      -0.04151809960603714,
      0.020617734640836716,
      -0.00036815667408518493,
      0.06311289966106415,
      -0.04317205026745796,
      -0.05000153183937073,
      -0.009442157112061977,
      -0.0032705282792448997,
      0.030742069706320763,
      0.031710948795080185,
      -0.010654357261955738,
      0.00015786901349201798,
      -0.0633096769452095,
      0.02639913186430931,
      0.029824571684002876,
      0.061601147055625916,
      0.007114405278116465,
      -5.399145663886884e-08,
      -0.04871759191155434,
      0.06539638340473175,
      -0.05037365108728409,
      -0.015220738016068935,
      0.03230724483728409,
      0.009371794760227203,
      0.04836651682853699,
      -0.05365121737122536,
      -0.042233146727085114,
      -0.016487902030348778,
      -0.017104817554354668,
      0.08285543322563171,
      0.017558710649609566,
      0.011569158174097538,
      0.01145871076732874,
      -0.007474970072507858,
      -0.011622768826782703,
      0.020525772124528885,
      -0.08511951565742493,
      -0.09262174367904663,
      -0.017198285087943077,
      0.08318422734737396,
      0.03624502569437027,
      0.018636079505085945,
      0.04708688706159592,
      0.10259970277547836,
      0.022914165630936623,
      -0.019304027780890465,
      0.048298392444849014,
      -0.002160087926313281,
      -0.009149503894150257,
      -0.046348586678504944,
      0.0388789139688015,
      -0.006321053020656109,
      -0.06249077990651131,
      0.0917266234755516,
      -0.04359869286417961,
      0.025074858218431473,
      -0.020850548520684242,
      0.005737593863159418,
      -0.005665381904691458,
      0.026816904544830322,
      -0.009345204569399357,
      0.005263286642730236,
      -0.05702798441052437,
      0.030158178880810738,
      -0.08473821729421616,
      0.06422241032123566,
      -0.0029020444490015507,
      -0.003532903268933296,
      0.055276691913604736,
      -0.07265976816415787,
      -0.046377286314964294,
      -0.03577901050448418,
      -0.027224404737353325,
      -0.053673382848501205,
      0.04024903476238251,
      0.02501853182911873,
      0.033653900027275085,
      0.010921633802354336,
      -0.07007759809494019,
      0.006005463656038046,
      0.013988890685141087,
      -0.0015714069595560431
    ],
    [
      -0.04010884463787079,
      -0.10729383677244186,
      -0.00770291592925787,
      0.052023373544216156,
      0.06493083387613297,
      -0.06476946920156479,
      -0.06804966926574707,
      0.017832214012742043,
      -0.02463485114276409,
      0.046118296682834625,
      -0.013526945374906063,
      0.08337666094303131,
      -0.0478811077773571,
      0.003970158752053976,
      0.08772771805524826,
      0.0358230285346508,
      0.0351562537252903,
      -0.11314648389816284,
      0.04780769348144531,
      0.02906976267695427,
      -0.0869017094373703,
      -0.06387604027986526,
      -0.032497867941856384,
      -0.020151447504758835,
      -0.03753996640443802,
      -0.003118440741673112,
      -0.0946858748793602,
      -0.005060211755335331,
      -0.046870965510606766,
      0.04061100259423256,
      0.048106927424669266,
      0.06523460894823074,
      -0.05939416587352753,
      -0.0066557577811181545,
      -0.038311928510665894,
      -0.03607019782066345,
      0.029502322897315025,
      0.007832718081772327,
      0.008443010970950127,
      0.040302105247974396,
      -0.033639147877693176,
      -0.07307285070419312,
      0.03551941365003586,
      -0.030261455103754997,
      -0.011881694197654724,
      -0.11765590310096741,
      -0.008422790095210075,
      -0.011372040025889874,
      -0.0014679695013910532,
      -0.003229745663702488,
      0.05008544400334358,
      -0.031506337225437164,
      -0.04001549258828163,
      0.10998150706291199,
      0.09529466927051544,
      -0.0018245254177600145,
      -0.034321438521146774,
      -0.01318440679460764,
      -0.045330606400966644,
      0.017467446625232697,
      0.05904317647218704,
      -0.015313194133341312,
      -0.08322294801473618,
      -0.02403617464005947,
      -0.048377398401498795,
      -0.03784235939383507,
      0.06605175882577896,
      -0.0045883143320679665,
      0.11666395515203476,
      -0.06663821637630463,
      -0.09673161804676056,
      0.06850267201662064,
      0.02462507225573063,
      -0.0504627451300621,
      0.0440298393368721,
      0.09822192043066025,
      0.08766967058181763,
      0.0757938101887703,
      0.04330132529139519,
      -0.10919484496116638,
      0.07267419248819351,
      0.056546058505773544,
      0.07602991908788681,
      -0.06189032644033432,
      -0.018020205199718475,
      0.026668580248951912,
      -0.04656333848834038,
      0.005589366890490055,
      -0.0638386607170105,
      0.02057473361492157,
      0.03726179897785187,
      0.02296406589448452,
      -0.006816208828240633,
      0.050595201551914215,
      -0.031236374750733376,
      0.038808051496744156,
      0.009926794096827507,
      0.041755326092243195,
      -0.01309111062437296,
      0.01028553768992424,
      -0.051854852586984634,
      -0.06258179992437363,
      -0.0679735541343689,
      0.006222705356776714,
      -0.05809720605611801,
      -0.06838295608758926,
      -0.025388138368725777,
      0.11378303915262222,
      -0.014805404469370842,
      -0.02701370231807232,
      0.009256181307137012,
      0.020306382328271866,
      -0.049925658851861954,
      -0.07414723932743073,
      -0.08503300696611404,
      0.06086871400475502,
      -0.08071134239435196,
      0.01582275703549385,
      0.005941540934145451,
      0.06389383226633072,
      0.02666633576154709,
      0.022598642855882645,
      0.01258031465113163,
      0.04954708367586136,
      0.06024042144417763,
      0.017780426889657974,
      0.0037537605967372656,
      1.3266621896540644e-33,
      0.06011075899004936,
      0.08456139266490936,
      -0.05180099233984947,
      0.031948819756507874,
      0.012504175305366516,
      -0.03252982720732689,
      0.039037156850099564,
      -0.026393990963697433,
      -0.058525942265987396,
      0.04099876433610916,
      0.01897754706442356,
      0.03743090108036995,
      -0.05269309878349304,
      -0.04558573663234711,
      0.03141767531633377,
      -0.08271298557519913,
      -0.012847873382270336,
      0.02990092523396015,
      0.04258512705564499,
      -0.1029067263007164,
      0.010689393617212772,
      -0.018856879323720932,
      -0.01793479546904564,
      -0.06146552786231041,
      0.12549066543579102,
      0.10701402276754379,
      -0.0018840787233784795,
      0.08329911530017853,
      0.0009826243622228503,
      0.057675544172525406,
      -0.005782637745141983,
      -0.05217955261468887,
      0.09737139195203781,
      0.0098973223939538,
      0.06699906289577484,
      -0.07308246195316315,
      -0.1040661558508873,
      -0.07163491100072861,
      -0.11654343456029892,
      -0.0293929111212492,
      0.02171998843550682,
      0.019878294318914413,
      -0.1108788400888443,
      -0.003428227500990033,
      0.035624999552965164,
      -0.05759419500827789,
      -0.005147438962012529,
      -0.0006224260432645679,
      0.12547184526920319,
      -0.06008383631706238,
      0.04999786615371704,
      0.010593345388770103,
      -0.01860186830163002,
      0.0412118136882782,
      0.11456290632486343,
      -0.0023981176782399416,
      0.03355612978339195,
      -0.07098047435283661,
      0.017084302380681038,
      0.019524067640304565,
      0.011094702407717705,
      -0.08823639154434204,
      -0.07974492013454437,
      -0.07477384060621262,
      0.08138828724622726,
      0.05196203291416168,
      0.025886349380016327,
      0.02181944064795971,
      -0.0009874494280666113,
      0.04711218923330307,
      0.022396814078092575,
      0.0012501743622124195,
      -0.011558609083294868,
      0.0583278052508831,
      0.04732518643140793,
      -0.0024463259615004063,
      0.08940034359693527,
      0.06190342456102371,
      0.03687150403857231,
      0.0251096673309803,
      -0.10791907459497452,
      -0.034994520246982574,
      -0.06378886103630066,
      0.09921317547559738,
      0.047136079519987106,
      -0.02162112481892109,
      -0.0310497023165226,
      0.008150657638907433,
      0.019045017659664154,
      -0.03960924223065376,
      0.020543690770864487,
      0.05698456987738609,
      0.02157229371368885,
      -0.003329418133944273,
      -0.011421983130276203,
      -1.1790935675877115e-33,
      -0.04566359519958496,
      0.010475161485373974,
      -0.10615343600511551,
      -0.060719091445207596,
      -0.038448408246040344,
      -0.0063871522434055805,
      -8.970287126430776e-06,
      0.02099660597741604,
      0.018531255424022675,
      0.004975396208465099,
      -0.015334385447204113,
      0.05725650116801262,
      -0.04163604602217674,
      -0.08787854015827179,
      -0.11510574817657471,
      0.011810677126049995,
      -0.009472697041928768,
      -0.09337742626667023,
      0.007448832504451275,
      0.033619437366724014,
      0.022040316835045815,
      -0.012008029036223888,
      0.07092868536710739,
      0.008345049805939198,
      -0.038957513868808746,
      -0.04862458258867264,
      0.06370682269334793,
      0.013488845899701118,
      -0.014056007377803326,
      0.01319806557148695,
      0.06286302953958511,
      -0.02281726524233818,
      -0.06285050511360168,
      -0.04277776926755905,
      -0.0330485962331295,
      0.015786560252308846,
      -0.0017656165873631835,
      0.004825781565159559,
      -0.04132183641195297,
      0.020753657445311546,
      0.029644867405295372,
      0.061958517879247665,
      -0.01773262768983841,
      -0.030224133282899857,
      0.00773440720513463,
      0.024006685242056847,
      -0.017506234347820282,
      -0.019696764647960663,
      0.012801512144505978,
      -0.032319605350494385,
      0.015243195928633213,
      -0.07097283750772476,
      0.006232529412955046,
      0.03260881453752518,
      -0.03919151797890663,
      -0.02815810590982437,
      0.09888472408056259,
      0.0684226006269455,
      0.0009665703400969505,
      0.03187207132577896,
      0.10571795701980591,
      -0.016704684123396873,
      0.0066977269016206264,
      0.0423666387796402,
      0.07671217620372772,
      0.08303830772638321,
      0.01844150945544243,
      0.0857018455862999,
      -0.021290933713316917,
      0.08573832362890244,
      0.08960071951150894,
      -0.06579722464084625,
      -0.10098481923341751,
      0.003990567289292812,
      -0.00925730261951685,
      -0.018690716475248337,
      0.020563751459121704,
      0.0163444634526968,
      -0.04052508622407913,
      0.08517443388700485,
      -0.011319704353809357,
      0.04650694131851196,
      -0.004563590977340937,
      -0.014173680916428566,
      0.0077697099186480045,
      -0.04517680034041405,
      0.07211791723966599,
      -0.013860507868230343,
      0.04603773355484009,
      0.01133569423109293,
      -0.0619971938431263,
      0.04523581266403198,
      -0.06379327178001404,
      -0.002984522143378854,
      0.003534785471856594,
      -5.2901846459008084e-08,
      -0.06263957917690277,
      0.07675743103027344,
      -0.09820019453763962,
      0.014433692209422588,
      0.040671803057193756,
      0.023977773264050484,
      -0.004236799664795399,
      0.000630908296443522,
      -0.008315367624163628,
      0.03350510820746422,
      -0.048569366335868835,
      0.034660704433918,
      0.03578225523233414,
      -0.015698306262493134,
      0.006014905404299498,
      -0.07870828360319138,
      0.018256107345223427,
      0.02861936204135418,
      -0.0640057921409607,
      -0.0820210874080658,
      -0.016210652887821198,
      0.06587065756320953,
      0.06647059321403503,
      -0.0207179207354784,
      0.01921224780380726,
      -0.028509117662906647,
      0.0690935030579567,
      -0.014196199364960194,
      0.06417074054479599,
      -0.0036977671552449465,
      -0.009861677885055542,
      0.0270284004509449,
      0.009999244473874569,
      -0.0009932985994964838,
      -0.03581857308745384,
      0.01526342798024416,
      -0.01717607118189335,
      0.05625426396727562,
      0.009020470082759857,
      0.07539506256580353,
      0.0007722973823547363,
      0.06419364362955093,
      -0.022009732201695442,
      0.025535576045513153,
      0.012531952001154423,
      0.024313393980264664,
      -0.047227151691913605,
      0.007832041941583157,
      -0.017087209969758987,
      -0.029083987697958946,
      0.08736860752105713,
      -0.04592723771929741,
      -0.09862945228815079,
      -0.04053710773587227,
      -0.019677704200148582,
      0.029041213914752007,
      -0.04606158658862114,
      0.06801052391529083,
      0.029997853562235832,
      -0.06973476707935333,
      -0.05595528706908226,
      -0.006709326524287462,
      0.03801094740629196,
      0.010238705202937126
    ],
    [
      -0.1238396167755127,
      -0.05306475982069969,
      -0.09134474396705627,
      -0.027810731902718544,
      0.10941120982170105,
      0.024796999990940094,
      -0.0006567638483829796,
      0.050822895020246506,
      0.002626381115987897,
      0.015032799914479256,
      0.004969114437699318,
      0.004135485738515854,
      0.0002498692483641207,
      -0.007459685206413269,
      0.043851736932992935,
      -0.01152501069009304,
      0.004884747788310051,
      -0.0675814300775528,
      -0.013182604685425758,
      -0.040396448224782944,
      0.010540128685534,
      -0.07862319052219391,
      -0.0014442882966250181,
      -0.013215531595051289,
      -0.059268828481435776,
      -0.004173452500253916,
      -0.019668858498334885,
      0.022445864975452423,
      0.037661634385585785,
      -0.017758596688508987,
      0.09337920695543289,
      -0.04164090380072594,
      -0.11716847121715546,
      -0.010977325960993767,
      -0.02967183105647564,
      0.03923933580517769,
      -0.04862036556005478,
      -0.06920165568590164,
      -0.029176224023103714,
      0.004870841279625893,
      0.007618221919983625,
      -0.04098748788237572,
      -0.009500156156718731,
      -0.06120501458644867,
      -0.005871264263987541,
      -0.027076655998826027,
      -0.021157866343855858,
      -0.0022569652646780014,
      0.0454445406794548,
      0.04727813974022865,
      -0.030090203508734703,
      0.010300284251570702,
      -0.053887318819761276,
      0.02736922912299633,
      0.0417751669883728,
      0.015416626818478107,
      0.03135063499212265,
      0.002843130612745881,
      0.06833123415708542,
      0.07153299450874329,
      0.009501720778644085,
      -0.01636124961078167,
      -0.013895153999328613,
      0.021317319944500923,
      0.030775001272559166,
      -0.03512299805879593,
      -0.03647894784808159,
      0.09661856293678284,
      0.023362139239907265,
      -0.022379525005817413,
      -0.060944411903619766,
      0.05891861766576767,
      -0.05686743184924126,
      0.0014840122312307358,
      0.0032041030935943127,
      -0.08142651617527008,
      -0.1067918986082077,
      0.02739470824599266,
      -0.0336429700255394,
      -0.0454045906662941,
      0.07853422313928604,
      -0.0046412148512899876,
      0.026299191638827324,
      -0.01425871904939413,
      0.0495961457490921,
      0.08549214154481888,
      0.057247113436460495,
      0.023971108719706535,
      -0.013754219748079777,
      0.03032597340643406,
      -0.006799441762268543,
      0.055935535579919815,
      -0.07031448930501938,
      0.08363668620586395,
      0.007130260579288006,
      0.050378911197185516,
      -0.04841763153672218,
      0.010939191095530987,
      -0.018478568643331528,
      0.05484908074140549,
      -0.007043253164738417,
      -0.016439225524663925,
      -0.04253186658024788,
      -0.004618688020855188,
      -0.015258271247148514,
      -0.03488064929842949,
      -0.030514273792505264,
      0.11122699826955795,
      0.05099375173449516,
      0.031123917549848557,
      -0.03261701390147209,
      0.07297676801681519,
      -0.01246150117367506,
      -0.09283650666475296,
      -0.06685906648635864,
      -0.014884098432958126,
      -0.008977163583040237,
      0.029530316591262817,
      -0.004701747093349695,
      0.006998653523623943,
      0.09764991700649261,
      0.015685556456446648,
      0.030022496357560158,
      -0.006129477638751268,
      0.08484890311956406,
      -0.08165822923183441,
      0.08412375301122665,
      4.270041636737516e-33,
      0.03896914795041084,
      0.025738585740327835,
      -0.03192353993654251,
      0.05521441623568535,
      -0.017679300159215927,
      -0.012255479581654072,
      0.05446617305278778,
      0.06287570297718048,
      -0.05947878956794739,
      0.05051261931657791,
      0.036459650844335556,
      -0.006781384814530611,
      -0.03721678629517555,
      -0.0673222616314888,
      -0.08006986975669861,
      -0.03572526574134827,
      -0.021955760195851326,
      -0.06299754977226257,
      0.045995719730854034,
      0.016685055568814278,
      0.05837376415729523,
      -0.06431253999471664,
      0.06966553628444672,
      0.04732203856110573,
      0.010404035449028015,
      0.0637301504611969,
      0.005261697340756655,
      0.12954704463481903,
      0.010624685324728489,
      0.02531806007027626,
      0.0021981787867844105,
      -0.07367367297410965,
      0.006380623672157526,
      0.046604011207818985,
      0.10459800809621811,
      -0.03903988376259804,
      -0.04996566101908684,
      -0.10464945435523987,
      -0.1396270990371704,
      -0.04792087897658348,
      0.05160979554057121,
      -0.05869077146053314,
      -0.08588489145040512,
      0.0037357613909989595,
      -0.03317495435476303,
      -0.021832957863807678,
      -0.014787922613322735,
      -0.013799111358821392,
      0.0859588086605072,
      -0.0012667805422097445,
      -0.026980765163898468,
      0.06798277795314789,
      0.027021747082471848,
      -0.09583647549152374,
      0.020657164976000786,
      -0.004710640758275986,
      -0.07054200023412704,
      -0.059543170034885406,
      -0.017836540937423706,
      0.02408384345471859,
      0.0026842469815164804,
      -0.010357237420976162,
      -0.03212958574295044,
      -0.04876650497317314,
      -0.06735895574092865,
      0.049319904297590256,
      -0.004059377126395702,
      -0.0025144717656075954,
      0.07949061691761017,
      -0.05144372209906578,
      -0.043722718954086304,
      0.005332599859684706,
      0.07160621881484985,
      0.05472138524055481,
      0.04208773747086525,
      0.01222294196486473,
      -0.0669170618057251,
      0.020453976467251778,
      0.05875015631318092,
      -0.10091283917427063,
      -0.035388074815273285,
      -0.12491874396800995,
      -0.0336012989282608,
      0.09740719199180603,
      0.039075810462236404,
      -0.0694998949766159,
      -0.05135519430041313,
      -0.058907195925712585,
      0.05361070856451988,
      -0.0239370446652174,
      -0.006969675421714783,
      0.008486270904541016,
      -0.006000129040330648,
      -0.07978517562150955,
      0.006453319452702999,
      -5.623135184211804e-33,
      0.007092314772307873,
      0.008503743447363377,
      -0.06002980098128319,
      0.018391549587249756,
      0.034005776047706604,
      0.0023222395684570074,
      0.05741732195019722,
      0.048819649964571,
      0.06122029945254326,
      0.057127226144075394,
      -0.030108677223324776,
      -0.06112607195973396,
      -0.0357467420399189,
      -0.06215948611497879,
      -0.005182681139558554,
      0.02814163640141487,
      -0.05309196934103966,
      -0.02457364834845066,
      -0.02727106586098671,
      -0.034686535596847534,
      0.01882741041481495,
      0.08142667263746262,
      0.017525920644402504,
      0.03006405383348465,
      -0.02943030744791031,
      0.03255932405591011,
      0.011572464369237423,
      0.0013891755370423198,
      0.06375768035650253,
      0.10361703485250473,
      0.07333345711231232,
      0.01747024431824684,
      -0.10594651103019714,
      0.012780931778252125,
      -0.05819672346115112,
      -0.019192617386579514,
      0.14220812916755676,
      0.0886450782418251,
      -0.03525376319885254,
      0.013580214232206345,
      0.09809626638889313,
      0.0485151968896389,
      -0.08395043015480042,
      -0.036309029906988144,
      -0.03985651582479477,
      -0.017019815742969513,
      -0.011752873659133911,
      0.050651390105485916,
      0.04044270142912865,
      -0.008888543583452702,
      0.03495147079229355,
      -0.05235104635357857,
      0.00435021985322237,
      -0.023299628868699074,
      -0.0303456149995327,
      0.0028389275539666414,
      0.07316034287214279,
      0.0025027464143931866,
      0.05542101338505745,
      0.07605349272489548,
      0.04423779249191284,
      -0.08256727457046509,
      -0.024442682042717934,
      -0.007004328537732363,
      0.08837228268384933,
      -0.011642642319202423,
      0.08320734649896622,
      0.10972850024700165,
      0.03354804590344429,
      0.02328825555741787,
      0.044822439551353455,
      -0.06387432664632797,
      0.09262926131486893,
      -0.014111708849668503,
      0.08868417143821716,
      0.019951719790697098,
      0.05243615806102753,
      -0.045590732246637344,
      -0.025690991431474686,
      0.09235163778066635,
      0.08947554975748062,
      -0.014100388623774052,
      0.0371059849858284,
      0.008580828085541725,
      0.02105976827442646,
      -0.03307698294520378,
      0.07925611734390259,
      -0.027516204863786697,
      -0.03544102609157562,
      -0.0539274625480175,
      -0.07835512608289719,
      0.0829833447933197,
      -0.01814841479063034,
      0.027094611898064613,
      0.05226213112473488,
      -5.361118482483107e-08,
      -0.0916677936911583,
      -0.031735897064208984,
      -0.06521166115999222,
      -0.05579286068677902,
      -0.04805871844291687,
      0.003105365438386798,
      -0.035156652331352234,
      -0.08465226739645004,
      -0.02484431117773056,
      -0.11207415908575058,
      -0.002347439294680953,
      0.027644097805023193,
      0.01379793044179678,
      -0.004362425766885281,
      -0.021807052195072174,
      -0.06457994878292084,
      -0.051410261541604996,
      0.058203134685754776,
      -0.06685123592615128,
      -0.03466995432972908,
      -0.05153389647603035,
      0.020349280908703804,
      0.04500597342848778,
      -0.05528204143047333,
      0.04311656579375267,
      -0.026801876723766327,
      0.05836985260248184,
      0.04048223793506622,
      0.004171786829829216,
      -0.011360032483935356,
      -0.07955498993396759,
      0.01139669306576252,
      0.018003903329372406,
      -0.10926701128482819,
      -0.06673259288072586,
      0.0756073147058487,
      0.029324971139431,
      -0.021787526085972786,
      0.030685294419527054,
      0.05389091745018959,
      -0.002050846815109253,
      0.04430549219250679,
      -0.018260588869452477,
      -0.008808722719550133,
      0.012749011628329754,
      0.00541834207251668,
      -0.048740629106760025,
      0.019368471577763557,
      -0.01725795306265354,
      0.0136627908796072,
      -0.04170205444097519,
      -0.04882344603538513,
      -0.09693294763565063,
      -0.025373069569468498,
      -0.0006195620517246425,
      -0.03454948961734772,
      -0.056131117045879364,
      0.005891673732548952,
      -0.0040596663020551205,
      -0.049298882484436035,
      0.008229565806686878,
      0.05586041510105133,
      0.13154074549674988,
      -0.027843480929732323
    ],
    [
      -0.049618978053331375,
      0.04206474870443344,
      -0.06056094169616699,
      0.028328029438853264,
      0.13090714812278748,
      -0.019786572083830833,
      -0.03263657167553902,
      0.03939581289887428,
      0.0011464053532108665,
      -0.004681584425270557,
      0.011046401225030422,
      -0.00986487977206707,
      0.028932007029652596,
      -0.006877952720969915,
      -0.010137238539755344,
      -0.04923368990421295,
      -0.014380328357219696,
      0.01121505070477724,
      0.1141204759478569,
      0.08208765089511871,
      -0.06079094856977463,
      -0.007965545170009136,
      -0.04960324242711067,
      0.03194699063897133,
      -0.09059319645166397,
      -0.0028649503365159035,
      -0.02090124972164631,
      -0.07592613995075226,
      -0.055581822991371155,
      -0.018966544419527054,
      0.13722962141036987,
      0.060951005667448044,
      0.011521842330694199,
      0.05538303777575493,
      -0.0016683073481544852,
      -0.017004139721393585,
      0.060323428362607956,
      -0.029351510107517242,
      -0.01914629153907299,
      -0.036119382828474045,
      -0.0038464346434921026,
      -0.08434771746397018,
      -0.013117047958076,
      -0.02992447279393673,
      -0.013057638891041279,
      -0.025750145316123962,
      0.023442931473255157,
      -0.04600149393081665,
      -0.09706796705722809,
      0.024548638612031937,
      0.017699895426630974,
      -0.0007426196825690567,
      -0.05121583491563797,
      0.028905488550662994,
      -0.04321030154824257,
      -0.038337573409080505,
      0.045047543942928314,
      -0.07006292045116425,
      -0.05859878659248352,
      0.02939632348716259,
      0.06160735338926315,
      0.038687266409397125,
      -0.08252497017383575,
      0.05757513642311096,
      -0.05304770916700363,
      0.1109514907002449,
      0.007831177674233913,
      0.11514700204133987,
      0.044205404818058014,
      -0.03287474066019058,
      0.007744008209556341,
      0.002405750099569559,
      0.057106003165245056,
      -0.04283050075173378,
      0.06294600665569305,
      0.03175945207476616,
      -0.06907737255096436,
      -0.036723535507917404,
      0.007024297956377268,
      -0.10459290444850922,
      -0.06098092719912529,
      0.018714841455221176,
      0.051031120121479034,
      -0.024810589849948883,
      0.002914212876930833,
      0.06849946826696396,
      0.045518141239881516,
      0.04295410215854645,
      -0.02302946336567402,
      0.02020832523703575,
      0.10414397716522217,
      -0.03170396015048027,
      -0.018477827310562134,
      0.010752822272479534,
      0.017330024391412735,
      0.007759239990264177,
      0.01182201411575079,
      -0.07113504409790039,
      0.07530966401100159,
      -0.003122824477031827,
      -0.03652691841125488,
      0.03293784335255623,
      -0.003577857045456767,
      -0.005037951748818159,
      0.05978766083717346,
      0.032985053956508636,
      0.02091226913034916,
      -0.0909690260887146,
      0.04452365264296532,
      -0.03303033486008644,
      0.034489959478378296,
      -0.02079715020954609,
      -0.05412588268518448,
      -0.09120742976665497,
      -0.047028541564941406,
      0.012028161436319351,
      -0.03533713147044182,
      0.013146325014531612,
      -0.019587302580475807,
      0.05955791473388672,
      -0.02679564245045185,
      0.01149601861834526,
      0.0661507099866867,
      -0.008555561304092407,
      0.049823831766843796,
      -0.024029050022363663,
      0.01043270155787468,
      6.841771647077208e-33,
      0.019924016669392586,
      0.021297791972756386,
      -0.027537325397133827,
      0.03753821179270744,
      0.009785372763872147,
      0.008368400856852531,
      0.047994598746299744,
      0.0033437844831496477,
      -0.014478358440101147,
      0.068985715508461,
      0.019449815154075623,
      0.06130000576376915,
      0.014555326662957668,
      0.009162988513708115,
      -0.014010721817612648,
      0.02322835847735405,
      -0.09666693210601807,
      -0.027473557740449905,
      0.03264935687184334,
      0.0073568676598370075,
      0.027530409395694733,
      -0.08238036185503006,
      0.07968667894601822,
      -0.0546669103205204,
      0.0575532428920269,
      0.09929082542657852,
      0.03228894621133804,
      0.01879601925611496,
      0.03828945383429527,
      0.019337868317961693,
      0.005700295325368643,
      -0.08136219531297684,
      0.03831478953361511,
      0.11730150133371353,
      0.047126732766628265,
      0.09976053982973099,
      -0.07209727168083191,
      -0.04687202721834183,
      -0.02948361448943615,
      -0.04226459935307503,
      0.011585112661123276,
      -0.05437912791967392,
      4.218839967506938e-05,
      0.008123905397951603,
      0.04557910934090614,
      -0.00422155624255538,
      -0.02779444120824337,
      3.930301681975834e-05,
      0.07193678617477417,
      0.027937188744544983,
      -0.017707323655486107,
      0.019020400941371918,
      -0.06804825365543365,
      -0.06897637248039246,
      0.01000107079744339,
      -0.10023149847984314,
      -0.03812384605407715,
      0.04301122948527336,
      0.02982124499976635,
      0.03371390700340271,
      -0.026995129883289337,
      -0.0604231022298336,
      -0.054372888058423996,
      -0.06127181649208069,
      -0.12518839538097382,
      0.02185276336967945,
      -0.09450659900903702,
      -0.10850708931684494,
      0.008875083178281784,
      -0.02758348360657692,
      -0.020165523514151573,
      0.04396732524037361,
      0.0008057541563175619,
      0.05432036519050598,
      0.06325645744800568,
      -0.0009139910689555109,
      0.00687536783516407,
      0.021623246371746063,
      -0.04237978160381317,
      -0.03685038909316063,
      -0.052234258502721786,
      -0.06219470128417015,
      -0.003895927919074893,
      0.1196659579873085,
      -0.007365104742348194,
      -0.03999687731266022,
      -0.05705014243721962,
      -0.003467012196779251,
      0.013604671694338322,
      -0.04263663664460182,
      0.014702701941132545,
      0.012266932055354118,
      0.032641954720020294,
      -0.025759855285286903,
      0.056240614503622055,
      -7.28405506999394e-33,
      -0.054353516548871994,
      -0.06900534778833389,
      -0.015622328966856003,
      0.0684792548418045,
      0.00397393899038434,
      0.009951368905603886,
      0.03342887759208679,
      0.11461833119392395,
      0.011094211600720882,
      0.0013320245780050755,
      0.002477593021467328,
      0.003734180238097906,
      0.01592673361301422,
      -0.06671226769685745,
      -0.059882476925849915,
      -0.043604303151369095,
      -0.09519293159246445,
      -0.0021351270843297243,
      0.04382595792412758,
      0.0391312874853611,
      0.03299907594919205,
      0.01528597716242075,
      0.04273567721247673,
      0.09418397396802902,
      0.022016005590558052,
      0.06143181771039963,
      -0.028295885771512985,
      -0.13015054166316986,
      0.018042519688606262,
      0.046004123985767365,
      0.05329446494579315,
      0.08086605370044708,
      -0.048860568553209305,
      0.022824328392744064,
      -0.04375644028186798,
      -0.040661975741386414,
      0.07258589565753937,
      0.16384311020374298,
      -0.025743067264556885,
      0.010364857502281666,
      0.027228327468037605,
      0.0741497054696083,
      -0.025149520486593246,
      -0.06515973061323166,
      -0.05593551695346832,
      -0.014162342064082623,
      -0.03483081981539726,
      0.018908103927969933,
      0.06633942574262619,
      0.02354815974831581,
      0.0060986666940152645,
      -0.09085457772016525,
      0.034138280898332596,
      -0.0359848290681839,
      -0.08485317975282669,
      0.009950376115739346,
      0.053172945976257324,
      -0.01678580790758133,
      -0.035308148711919785,
      0.04284728318452835,
      0.014395976439118385,
      -0.014841674827039242,
      0.03844138979911804,
      0.044081542640924454,
      0.010066666640341282,
      -0.027146052569150925,
      -0.016078568994998932,
      0.06309647113084793,
      -0.06850925087928772,
      0.035499539226293564,
      0.06846197694540024,
      -0.032445088028907776,
      -0.11304345726966858,
      -0.01224147155880928,
      0.08460942655801773,
      -0.03749998286366463,
      0.032288968563079834,
      -0.13523930311203003,
      -0.019065236672759056,
      0.027838366106152534,
      0.09367409348487854,
      0.00192249845713377,
      0.0024843562860041857,
      0.0835951492190361,
      0.01591426134109497,
      0.02959948219358921,
      0.04134611040353775,
      -0.0988922044634819,
      -0.038046084344387054,
      -0.0209853183478117,
      -0.09437813609838486,
      0.09332067519426346,
      -0.005959542468190193,
      0.007723971735686064,
      0.026518844068050385,
      -4.984614321301706e-08,
      -0.11145533621311188,
      -0.06813373416662216,
      0.014975493773818016,
      -0.031609341502189636,
      -0.030505307018756866,
      0.022760864347219467,
      -0.03457808867096901,
      -0.04846196621656418,
      -0.054871708154678345,
      -0.06889475136995316,
      0.03920016437768936,
      -0.022059204056859016,
      -0.07590706646442413,
      -0.07651175558567047,
      0.04654096066951752,
      -0.0306341964751482,
      0.02851361408829689,
      0.022077279165387154,
      -0.0666193962097168,
      0.013027754612267017,
      -0.010569537989795208,
      0.0393630675971508,
      0.02402629144489765,
      -0.012545289471745491,
      0.03373858332633972,
      0.05415934696793556,
      0.08466791361570358,
      0.044013187289237976,
      0.05516170337796211,
      -0.011912669986486435,
      0.02274385653436184,
      -0.006359374150633812,
      0.011411488056182861,
      -0.02219792641699314,
      -0.013706437312066555,
      0.12256238609552383,
      0.02917216531932354,
      -0.015846386551856995,
      -0.015289545990526676,
      -0.009739639237523079,
      -0.06497195363044739,
      -0.023629728704690933,
      -0.051807720214128494,
      -0.060013167560100555,
      -0.03147323429584503,
      -0.06233474984765053,
      -0.055283814668655396,
      -0.04817596450448036,
      -0.017726216465234756,
      -0.00837617740035057,
      -0.007070436142385006,
      -0.06888023018836975,
      0.0241170022636652,
      0.03048083186149597,
      -0.08162988722324371,
      0.006365320645272732,
      0.029642730951309204,
      -0.02464461140334606,
      0.09348471462726593,
      -0.08650343120098114,
      0.06126084178686142,
      -0.004555208142846823,
      0.10821803659200668,
      0.034144289791584015
    ],
    [
      -0.04827376827597618,
      0.044231902807950974,
      -0.05680061876773834,
      0.003281169570982456,
      0.11743525415658951,
      -0.08689787238836288,
      -0.013449125923216343,
      0.09035749733448029,
      -0.04808348789811134,
      0.051190514117479324,
      0.0187115166336298,
      -0.009340346790850163,
      0.054009873420000076,
      -0.03564799949526787,
      -0.0029149253387004137,
      0.05458586663007736,
      0.0038448036648333073,
      0.002829313976690173,
      0.018060632050037384,
      0.0015930264489725232,
      -0.03692539408802986,
      -0.06816165149211884,
      -0.022886551916599274,
      -0.006632599048316479,
      -0.05991865694522858,
      0.01782033033668995,
      -0.037140458822250366,
      0.00497803557664156,
      -0.02796117402613163,
      -0.11640042066574097,
      0.0661158636212349,
      0.036113519221544266,
      -0.05272717773914337,
      0.027569226920604706,
      -0.036177512258291245,
      0.0627230703830719,
      0.05957832559943199,
      -0.042233046144247055,
      -0.08495692163705826,
      -0.0033991290256381035,
      0.027784103527665138,
      -0.10049299150705338,
      -0.07551711052656174,
      -0.028150184080004692,
      -0.06276245415210724,
      -0.003636925481259823,
      0.01549288909882307,
      -0.01615994982421398,
      -0.059697847813367844,
      0.01696324534714222,
      -0.011872421950101852,
      0.002972154878079891,
      -0.044858697801828384,
      0.08549874275922775,
      0.025912495329976082,
      0.029774921014904976,
      0.02106860652565956,
      -0.06497330963611603,
      -0.0037002810277044773,
      0.041687436401844025,
      0.05250301584601402,
      0.05298253521323204,
      -0.05924074724316597,
      0.041145119816064835,
      -0.0012057449202984571,
      -0.0035699268337339163,
      0.07437890768051147,
      0.06166522577404976,
      0.069832943379879,
      -0.05024101585149765,
      -0.04678567498922348,
      0.026940450072288513,
      -0.013143610209226608,
      0.016036884859204292,
      -0.03915085643529892,
      0.040717966854572296,
      -0.021034343168139458,
      -0.029169969260692596,
      0.07079554349184036,
      -0.1283794492483139,
      0.005382773466408253,
      0.08222628384828568,
      0.0009462084854021668,
      0.0062312050722539425,
      0.0267945509403944,
      0.021739404648542404,
      0.014990274794399738,
      0.022161763161420822,
      -0.007534774020314217,
      -0.009642329066991806,
      0.10859066247940063,
      0.012938776053488255,
      -0.025256549939513206,
      0.026563823223114014,
      0.0481392964720726,
      0.03989603742957115,
      0.011848236434161663,
      -0.06835607439279556,
      0.03391221538186073,
      0.0722607746720314,
      -0.028715800493955612,
      0.03895631060004234,
      0.01371405366808176,
      -0.02773212268948555,
      0.0048751672729849815,
      -0.019783273339271545,
      -0.03886723145842552,
      0.01496644876897335,
      0.010323160327970982,
      -0.009883395396173,
      -0.03842950612306595,
      -0.01716843992471695,
      -0.07326602935791016,
      -0.12486181408166885,
      -0.030334630981087685,
      -0.012429807335138321,
      -0.1345064342021942,
      -0.039578672498464584,
      -0.02314668335020542,
      -0.022093087434768677,
      0.055061113089323044,
      -0.016601869836449623,
      0.05463188514113426,
      0.027717024087905884,
      0.07472632080316544,
      -0.031178204342722893,
      -0.030162645503878593,
      6.609287517159361e-33,
      0.0169377438724041,
      0.054219841957092285,
      -0.03082634136080742,
      0.00018277313211001456,
      0.002033303026109934,
      -0.010771485976874828,
      0.034500978887081146,
      0.003949136007577181,
      -0.1359092891216278,
      0.08183075487613678,
      -0.057757262140512466,
      0.06012355908751488,
      -0.0440778024494648,
      0.030089424923062325,
      0.05023353546857834,
      -0.040363799780607224,
      -0.021637924015522003,
      0.029699478298425674,
      0.02611788548529148,
      0.007848582230508327,
      0.05851041525602341,
      -0.07018035650253296,
      0.025538822636008263,
      -0.03651214763522148,
      0.07861114293336868,
      0.06734220683574677,
      0.04808864742517471,
      0.05584592744708061,
      0.10827052593231201,
      0.03396859019994736,
      0.04041339457035065,
      -0.06758024543523788,
      0.08382832258939743,
      0.05065232515335083,
      0.07173828035593033,
      -0.009107555262744427,
      -0.07573667168617249,
      -0.10692380368709564,
      -0.08855076134204865,
      0.0035787224769592285,
      0.04380038008093834,
      0.012659475207328796,
      -0.004455684218555689,
      0.04316425696015358,
      -0.005540560465306044,
      -0.012701704166829586,
      -0.0056923809461295605,
      -0.0012922064634039998,
      0.022941822186112404,
      0.013004536740481853,
      0.01924310438334942,
      0.010104038752615452,
      -0.030140958726406097,
      -0.03950159624218941,
      0.007265379186719656,
      -0.048591144382953644,
      -0.049527011811733246,
      -0.0535249188542366,
      0.007477425970137119,
      0.07016418874263763,
      -0.05083363503217697,
      -0.07789887487888336,
      -0.07732829451560974,
      -0.011336538009345531,
      -0.05154700577259064,
      0.04532792419195175,
      -0.07371263206005096,
      -0.057122986763715744,
      0.05066690593957901,
      -0.029320234432816505,
      -0.036054279655218124,
      0.02415912225842476,
      0.030312256887555122,
      0.017374157905578613,
      0.034753020852804184,
      -0.028831616044044495,
      -0.0183490552008152,
      0.004333984572440386,
      -0.04549289122223854,
      -0.021679868921637535,
      -0.11686162650585175,
      -0.07404297590255737,
      -0.058769434690475464,
      0.07848071306943893,
      0.026025502011179924,
      -0.06641972810029984,
      -0.002056851051747799,
      -0.036896347999572754,
      -0.0675370842218399,
      -0.03597602620720863,
      0.03532230108976364,
      0.01090390793979168,
      0.05905861780047417,
      -0.04527482017874718,
      -0.02203800342977047,
      -6.27045788269056e-33,
      -0.04886738955974579,
      -0.007817256264388561,
      -0.05171489715576172,
      0.10137449204921722,
      0.029836371541023254,
      0.030059177428483963,
      0.05160747841000557,
      0.06530602276325226,
      -0.05700979754328728,
      -0.05845407024025917,
      -0.040049176663160324,
      0.007437039166688919,
      0.013547420501708984,
      -0.11113499850034714,
      -0.022892165929079056,
      -0.04727284237742424,
      -0.028084121644496918,
      -0.06946051865816116,
      -0.022330736741423607,
      0.08237047493457794,
      0.028741588816046715,
      0.06286083906888962,
      0.028691831976175308,
      0.10239139199256897,
      0.005906026344746351,
      0.06971464306116104,
      -0.020642925053834915,
      -0.09195075184106827,
      0.019371850416064262,
      0.0642004981637001,
      -0.008294056169688702,
      -0.010683499276638031,
      -0.058169178664684296,
      -0.07026363164186478,
      -0.07802935689687729,
      -0.04517579451203346,
      0.07573194056749344,
      0.05457691848278046,
      -0.06285200268030167,
      0.04705508053302765,
      0.08231586217880249,
      0.04035527631640434,
      -0.05953707545995712,
      -0.03378016874194145,
      -0.05914441868662834,
      0.05848349258303642,
      -0.10268445312976837,
      0.05577684938907623,
      0.03849073871970177,
      0.01245134323835373,
      0.00776567542925477,
      -0.039978355169296265,
      0.00792491901665926,
      -0.02004389464855194,
      -0.006176378112286329,
      -0.0006541549228131771,
      0.01937120035290718,
      0.0540538914501667,
      -0.05256493389606476,
      0.08109118044376373,
      0.07069602608680725,
      -0.07437151670455933,
      0.0011366935214027762,
      0.05639474838972092,
      0.023197965696454048,
      0.0034643211401998997,
      -0.010602690279483795,
      7.753123645670712e-05,
      -0.08915390074253082,
      0.06064161658287048,
      0.03366141393780708,
      -0.017512023448944092,
      -0.041546810418367386,
      -0.010382509790360928,
      0.12380433082580566,
      -0.06356710195541382,
      -0.023701630532741547,
      -0.08949838578701019,
      0.0007669005426578224,
      0.07053934037685394,
      -0.015836773440241814,
      0.02543157897889614,
      0.017057202756404877,
      0.03837505728006363,
      0.0337894968688488,
      0.004739440977573395,
      0.050155866891145706,
      -0.057608749717473984,
      0.002008658368140459,
      0.013253343291580677,
      -0.1310085654258728,
      0.0889212042093277,
      -0.07113625854253769,
      0.10281742364168167,
      0.039533182978630066,
      -5.809110348309332e-08,
      -0.033153142780065536,
      -0.061724189668893814,
      0.043636586517095566,
      -0.019561415538191795,
      0.021992173045873642,
      -0.01604282855987549,
      0.013817955739796162,
      0.041400305926799774,
      -0.01185676734894514,
      -0.009616127237677574,
      0.05451041832566261,
      0.029565751552581787,
      -0.08082699775695801,
      -0.043026555329561234,
      0.0809631496667862,
      0.02567378804087639,
      0.06041553616523743,
      0.022273540496826172,
      -0.09584455192089081,
      -0.07865730673074722,
      -0.0515013113617897,
      0.06474817544221878,
      -0.056517139077186584,
      -0.010009108111262321,
      0.06658317148685455,
      0.026325222104787827,
      0.11081576347351074,
      0.08614129573106766,
      0.06734257191419601,
      -0.028161386027932167,
      0.03609709441661835,
      -0.04585594683885574,
      0.06323622167110443,
      0.008894001133739948,
      -0.04131297394633293,
      0.14369849860668182,
      -0.037144243717193604,
      0.04785998538136482,
      0.007431520614773035,
      0.003550458699464798,
      -0.019703196361660957,
      0.049101006239652634,
      0.005775837693363428,
      -0.002938122721388936,
      0.01690056174993515,
      -0.009951657615602016,
      -0.06354264169931412,
      0.04033387824892998,
      -0.0639919564127922,
      0.025351300835609436,
      -0.009359382092952728,
      -0.07054656744003296,
      -0.061767809092998505,
      0.03335240110754967,
      -0.0007851230329833925,
      -0.01908986084163189,
      -0.0018446637550368905,
      0.005434696096926928,
      0.08532803505659103,
      0.015797201544046402,
      0.048797931522130966,
      -0.058859869837760925,
      0.051370859146118164,
      -0.012753885239362717
    ],
    [
      0.08350783586502075,
      -0.017301108688116074,
      -0.024792412295937538,
      0.0373266339302063,
      0.014586638659238815,
      0.028079837560653687,
      0.06371837109327316,
      0.05946439877152443,
      -0.020036477595567703,
      0.04686058685183525,
      0.0029240932781249285,
      -0.011022568680346012,
      0.012896914966404438,
      -0.09650787711143494,
      0.021344535052776337,
      0.01787444017827511,
      -0.07245152443647385,
      -0.0616229847073555,
      -0.03474489226937294,
      0.0241025909781456,
      0.019486647099256516,
      0.018773388117551804,
      0.009103798307478428,
      -0.0964793711900711,
      -0.021932728588581085,
      0.08960177004337311,
      -0.04020778089761734,
      -0.012292472645640373,
      -0.09971518069505692,
      -0.011365441605448723,
      -0.018383676186203957,
      0.07299619913101196,
      -0.09564399719238281,
      0.05093371495604515,
      0.06735116988420486,
      -0.05114031583070755,
      -0.04174082353711128,
      0.00890622939914465,
      0.04712756723165512,
      0.07391580194234848,
      -0.020808203145861626,
      -0.017323702573776245,
      0.029621634632349014,
      -0.16177698969841003,
      -0.05790511146187782,
      -0.09045617282390594,
      -0.07805290818214417,
      -0.09355957806110382,
      0.0366978645324707,
      0.02084367349743843,
      -0.04573473706841469,
      0.07531058043241501,
      -0.03645463287830353,
      0.012332742102444172,
      0.0726565420627594,
      0.050750136375427246,
      -0.04243458807468414,
      -0.029527075588703156,
      0.02041253261268139,
      -0.0021069305948913097,
      -0.01973126456141472,
      -0.0007049757987260818,
      0.00875895842909813,
      -0.0520966500043869,
      -0.016476551070809364,
      0.020085783675312996,
      -0.039842914789915085,
      0.09092467278242111,
      -0.003549170447513461,
      -0.017998160794377327,
      -0.018014218658208847,
      0.08250991255044937,
      -0.00029427226400002837,
      -0.007939686067402363,
      0.05398458614945412,
      -0.0566597655415535,
      -0.00638195313513279,
      0.06181393191218376,
      0.003347634570673108,
      -0.15144160389900208,
      -0.014303012751042843,
      -0.004914635326713324,
      0.011980917304754257,
      0.01752091944217682,
      0.030558308586478233,
      0.05058453604578972,
      0.005562151316553354,
      -0.013491147197782993,
      0.004771146923303604,
      0.02536824531853199,
      -0.0008450144086964428,
      0.003950878977775574,
      -0.0067076594568789005,
      0.06297580152750015,
      -0.06894328445196152,
      0.031821589916944504,
      0.018942857161164284,
      0.04069739207625389,
      -0.036314357072114944,
      0.06675881147384644,
      -0.010631787590682507,
      -0.06343143433332443,
      0.008683902211487293,
      0.11136368662118912,
      0.008167295716702938,
      -0.08363573998212814,
      0.022037215530872345,
      -0.03840247169137001,
      0.020452430471777916,
      -0.04834709316492081,
      -0.014962568879127502,
      0.04805382713675499,
      -0.09887715429067612,
      -0.10481756180524826,
      -0.08690610527992249,
      -0.04825729504227638,
      -0.006315181497484446,
      -0.0639677420258522,
      0.05448448657989502,
      0.0166967511177063,
      0.060044873505830765,
      -0.020928317680954933,
      -0.09673549979925156,
      0.07268879562616348,
      -0.05019382759928703,
      -0.026056814938783646,
      0.006249468773603439,
      1.1534039467028566e-32,
      0.032950397580862045,
      -0.057027433067560196,
      0.02693166211247444,
      -0.003007902530953288,
      0.11041520535945892,
      -0.042590558528900146,
      0.03482777997851372,
      0.0566902831196785,
      0.03450051695108414,
      0.06986434757709503,
      -0.0800168439745903,
      0.0006776343798264861,
      -0.07783868908882141,
      -0.05505404993891716,
      -0.08093968033790588,
      -0.05732790380716324,
      -0.03438761085271835,
      -0.03207524120807648,
      -0.010883721522986889,
      -0.05078184977173805,
      -0.016736917197704315,
      0.007543053012341261,
      0.06120371073484421,
      -0.01793675683438778,
      0.0006284037954173982,
      -0.024299761280417442,
      -0.026314951479434967,
      0.07436135411262512,
      0.019274618476629257,
      0.021180327981710434,
      0.05609205365180969,
      0.013410059735178947,
      0.11317633092403412,
      0.024417880922555923,
      -0.018093958497047424,
      0.001045542536303401,
      -0.0629286915063858,
      0.01462237536907196,
      0.012764355167746544,
      0.04507773742079735,
      -0.0017235403647646308,
      -0.03316281735897064,
      -0.03736156225204468,
      0.01904093660414219,
      -0.008488441817462444,
      -0.041966404765844345,
      0.0455474928021431,
      0.051997650414705276,
      0.0615350566804409,
      -0.05316459760069847,
      0.005076279863715172,
      0.06346838176250458,
      -0.024178020656108856,
      0.03176134079694748,
      -0.0009722413378767669,
      -0.011555418372154236,
      -0.10995476692914963,
      0.0009958264417946339,
      0.019337689504027367,
      0.0498952642083168,
      -0.09213637560606003,
      -0.028319353237748146,
      0.05006750673055649,
      -0.0011247920338064432,
      -0.030454568564891815,
      0.10616171360015869,
      0.007332583889365196,
      0.03463002294301987,
      0.021742992103099823,
      -0.1299608200788498,
      0.005739868618547916,
      -0.07012984156608582,
      0.08878789097070694,
      -0.0006427458138205111,
      0.11836355179548264,
      0.0016917864559218287,
      0.032454296946525574,
      -0.026593850925564766,
      -0.05162956565618515,
      -0.039931200444698334,
      0.012875683605670929,
      -0.019953060895204544,
      -0.09731858223676682,
      0.025738218799233437,
      -0.0317055769264698,
      -0.003841341007500887,
      0.08839564025402069,
      -0.06361767649650574,
      0.04825400933623314,
      0.054536934942007065,
      -0.06892628222703934,
      0.045061830431222916,
      -0.035547658801078796,
      -0.0898907408118248,
      0.030795607715845108,
      -1.1052410778821873e-32,
      0.040174778550863266,
      0.04770826920866966,
      -0.019413797184824944,
      -0.03546978160738945,
      0.0340287983417511,
      0.008086669258773327,
      0.08165532350540161,
      0.024507876485586166,
      0.03719951584935188,
      0.08088941127061844,
      0.011618785560131073,
      -0.027837639674544334,
      -0.041840288788080215,
      -0.10126515477895737,
      -0.09424610435962677,
      0.05011853575706482,
      -0.047086913138628006,
      0.07000086456537247,
      0.03822563961148262,
      -0.03413550555706024,
      -0.041345249861478806,
      0.0411393940448761,
      -0.00592659879475832,
      0.03268319368362427,
      -0.04429933428764343,
      -0.02074611559510231,
      0.02630290575325489,
      -0.018995610997080803,
      0.052352793514728546,
      0.0204571895301342,
      0.027182625606656075,
      0.05162665992975235,
      -0.07965785264968872,
      0.08129020035266876,
      -0.0035464479587972164,
      0.014562656171619892,
      0.04262993112206459,
      0.043553151190280914,
      -0.08147426694631577,
      0.058146264404058456,
      0.003223198000341654,
      0.013866174966096878,
      0.012461824342608452,
      0.004592466168105602,
      -0.0064433300867676735,
      -0.0005867397412657738,
      0.11466825753450394,
      0.008745183236896992,
      -0.05026090145111084,
      0.012058697640895844,
      0.04018534719944,
      -0.10573407262563705,
      -0.05263685807585716,
      -0.027137115597724915,
      -0.04271587356925011,
      0.020935827866196632,
      0.02670392207801342,
      -0.006743209436535835,
      -0.02850625105202198,
      -0.008876643143594265,
      0.001858597737737,
      -0.034371670335531235,
      0.04716009274125099,
      0.012163895182311535,
      0.11529357731342316,
      0.013771320693194866,
      0.03953924402594566,
      0.03563147038221359,
      0.05952365696430206,
      0.05925547331571579,
      -0.005992252379655838,
      0.004986828658729792,
      0.00831597950309515,
      0.006400723941624165,
      0.085613913834095,
      0.039321355521678925,
      -0.01877640187740326,
      -0.01017718855291605,
      -0.03089299611747265,
      0.04289262369275093,
      0.0928783193230629,
      0.021326221525669098,
      0.014957534149289131,
      -0.13849806785583496,
      -0.06124047562479973,
      -0.0036566518247127533,
      0.06654322892427444,
      0.09166702628135681,
      -0.07595327496528625,
      0.0066055175848305225,
      -0.03719034790992737,
      -0.032400619238615036,
      0.0484318882226944,
      0.048267412930727005,
      -0.012584337033331394,
      -5.6339082732392853e-08,
      -0.08597266674041748,
      0.0029051576275378466,
      -0.07643302530050278,
      -0.01523482333868742,
      0.007376962807029486,
      -0.03405548259615898,
      0.08842487633228302,
      -0.008383618667721748,
      -0.04057509824633598,
      -0.09756787866353989,
      0.03399069234728813,
      0.08215894550085068,
      0.03069700114428997,
      -0.037272222340106964,
      -0.038347627967596054,
      -0.044573355466127396,
      -0.014732482843101025,
      -0.006557090673595667,
      -0.03325088322162628,
      0.017307402566075325,
      0.009305945597589016,
      0.06807374954223633,
      0.03919849917292595,
      0.0025372172240167856,
      0.06953802704811096,
      0.013222474604845047,
      -0.03157041594386101,
      -0.006109526380896568,
      -0.023910783231258392,
      0.10411286354064941,
      0.019441641867160797,
      -0.03802879527211189,
      0.02328851819038391,
      -0.06958448141813278,
      0.01466329675167799,
      -0.03814733400940895,
      0.0223255418241024,
      -0.051510199904441833,
      0.03034905716776848,
      0.02008541114628315,
      -0.06288422644138336,
      0.014893116429448128,
      -0.07918236404657364,
      0.040176331996917725,
      -0.010363586246967316,
      -0.04854538291692734,
      -0.09756304323673248,
      0.13031114637851715,
      0.06406967341899872,
      -0.04230299964547157,
      0.02717055007815361,
      0.026819422841072083,
      -0.0024823793210089207,
      -0.0795174315571785,
      -0.06905972212553024,
      -0.037786323577165604,
      0.01097418274730444,
      0.09633644670248032,
      -0.021359512582421303,
      -0.042763713747262955,
      -0.0759957805275917,
      0.022344397380948067,
      -0.001003435580059886,
      -0.005510223098099232
    ],
    [
      -0.014918224886059761,
      0.009118154644966125,
      -0.08715976029634476,
      0.014894239604473114,
      0.008842773735523224,
      -0.0424966998398304,
      0.05578440800309181,
      0.019155394285917282,
      0.033818285912275314,
      0.017057238146662712,
      0.10136383026838303,
      -0.02971162460744381,
      0.02759496681392193,
      0.009762633591890335,
      -0.03368242830038071,
      -0.020804578438401222,
      0.016287151724100113,
      -0.09903474152088165,
      0.05541786178946495,
      0.09500772505998611,
      -0.027936628088355064,
      0.0297481007874012,
      -0.023979121819138527,
      0.08573466539382935,
      -0.039137210696935654,
      -0.04110978543758392,
      -0.024094076827168465,
      -0.03391824662685394,
      -0.0030528020579367876,
      -0.03988509625196457,
      0.07414034754037857,
      0.05077044665813446,
      -0.016211465001106262,
      0.07829315960407257,
      0.02185812219977379,
      -0.0021970043890178204,
      0.11283861845731735,
      0.016044670715928078,
      -0.05798560753464699,
      -0.045280225574970245,
      0.06549466401338577,
      -0.0895645022392273,
      0.028283748775720596,
      -0.0029302777256816626,
      0.0234703216701746,
      0.07746373116970062,
      0.015750374644994736,
      -0.02473311312496662,
      -0.06356238573789597,
      0.07034335285425186,
      0.03342239558696747,
      0.07620498538017273,
      -0.004421133082360029,
      0.12201985716819763,
      -0.015481295064091682,
      -0.04754987731575966,
      -0.008546863682568073,
      -0.10618071258068085,
      -0.03428640589118004,
      0.05854421481490135,
      -0.03724600747227669,
      0.04192548617720604,
      -0.028439199551939964,
      0.008194410242140293,
      -0.034162119030952454,
      0.008338782005012035,
      -0.034022022038698196,
      -0.04060349240899086,
      0.027088234201073647,
      -0.10216245800256729,
      -0.028533410280942917,
      -0.025475289672613144,
      0.012762948870658875,
      -0.00890627596527338,
      0.05283091589808464,
      -0.0002704316866584122,
      0.009428565390408039,
      -0.010652804747223854,
      0.006785182747989893,
      -0.12544932961463928,
      -0.005321236792951822,
      0.00977545790374279,
      0.008473510853946209,
      0.04263059422373772,
      0.02121027000248432,
      0.020228352397680283,
      -0.01725386083126068,
      0.024874603375792503,
      -0.03378934785723686,
      0.04664818197488785,
      0.049539193511009216,
      0.0714678093791008,
      -0.057699769735336304,
      0.0072795916348695755,
      0.059457190334796906,
      -0.011205042712390423,
      0.08023238182067871,
      -0.04800749570131302,
      0.059941552579402924,
      0.04944704845547676,
      0.030573805794119835,
      0.09139702469110489,
      0.0032238324638456106,
      0.010575049556791782,
      -0.03815143182873726,
      -0.05644292011857033,
      0.0028798398561775684,
      0.0183753352612257,
      0.021477850154042244,
      -0.03924577310681343,
      -0.06958895176649094,
      -0.025120358914136887,
      0.01401885412633419,
      -0.03600421920418739,
      -0.018233340233564377,
      0.08096633106470108,
      -0.09877308458089828,
      0.00981068704277277,
      -0.05508502572774887,
      -0.042908456176519394,
      0.01902831718325615,
      -0.009347626008093357,
      -0.02994144707918167,
      0.06615142524242401,
      0.002815247280523181,
      -0.029824338853359222,
      -0.008906100876629353,
      4.737462271662613e-33,
      0.04248417168855667,
      0.003588456427678466,
      -0.030960237607359886,
      0.009151284582912922,
      -0.03667707368731499,
      0.039688002318143845,
      0.12093658000230789,
      0.04082226753234863,
      -0.002629073103889823,
      0.01733144000172615,
      -0.026890622451901436,
      -0.07413297891616821,
      -0.030294746160507202,
      -0.009657108224928379,
      -0.055846430361270905,
      0.02092592604458332,
      -0.06223837658762932,
      0.06700437515974045,
      0.05063696578145027,
      0.04661569371819496,
      0.058672964572906494,
      -0.017964398488402367,
      0.06970582157373428,
      -0.09869125485420227,
      0.009159685112535954,
      0.0645872950553894,
      -0.08437386155128479,
      -0.02327732928097248,
      -0.00948238279670477,
      0.016043078154325485,
      -0.008838588371872902,
      0.03027184307575226,
      -0.00765132624655962,
      0.1163615733385086,
      0.018937285989522934,
      0.03817218914628029,
      -0.004645904526114464,
      -0.11685416102409363,
      -0.09655448794364929,
      0.08667193353176117,
      0.049830496311187744,
      -0.013322844170033932,
      -0.04762999340891838,
      -0.08259128779172897,
      -0.0504908487200737,
      0.010300218127667904,
      -0.11732811480760574,
      -0.029243839904665947,
      0.04052317142486572,
      0.03644794598221779,
      0.045617055147886276,
      0.023126745596528053,
      -0.010654028505086899,
      -0.035909123718738556,
      0.05299706757068634,
      -0.08439809083938599,
      -0.026566239073872566,
      0.000710644235368818,
      -0.01906616799533367,
      0.07808788120746613,
      -0.01727866940200329,
      0.0026877166237682104,
      -0.044405218213796616,
      -0.02098790742456913,
      -0.06371552497148514,
      -0.020956100896000862,
      -0.04954363405704498,
      -0.11142866313457489,
      -0.01834028586745262,
      0.022423727437853813,
      -0.047933004796504974,
      0.02495426870882511,
      0.07518412172794342,
      0.006509013473987579,
      0.08129888772964478,
      -0.04919428005814552,
      -0.03930892422795296,
      0.04669353365898132,
      0.07023867964744568,
      0.016876930370926857,
      0.025244060903787613,
      -0.029065508395433426,
      0.015187972225248814,
      0.06752125918865204,
      -0.019381435588002205,
      0.06574101001024246,
      0.023407964035868645,
      -0.06812666356563568,
      -0.020817246288061142,
      -0.10970891267061234,
      -0.02501211129128933,
      -0.06135641038417816,
      -0.01241099089384079,
      -0.01966230198740959,
      0.09906616061925888,
      -5.596598031900006e-33,
      -0.0320512093603611,
      0.00789602566510439,
      -0.05865095183253288,
      0.08420996367931366,
      0.00443023769184947,
      -0.0673767477273941,
      0.0020626052282750607,
      -0.010116985067725182,
      0.04042885825037956,
      -0.011846034787595272,
      0.05237727239727974,
      -0.09206293523311615,
      0.01724494807422161,
      -0.029995441436767578,
      0.05677897110581398,
      -0.012542937882244587,
      -0.029360003769397736,
      -0.09516411274671555,
      0.04058365523815155,
      0.009057438001036644,
      -0.06498390436172485,
      0.0001137924482463859,
      0.03072822466492653,
      -0.001224654377438128,
      0.007860592566430569,
      0.01555095799267292,
      -0.005247181281447411,
      0.002508759032934904,
      0.07235585153102875,
      -0.028428398072719574,
      -0.013012713752686977,
      0.05397187918424606,
      0.0003983795759268105,
      -0.02131701074540615,
      -0.026479847729206085,
      -0.047415755689144135,
      0.007122961338609457,
      0.09250219911336899,
      0.03217000886797905,
      -0.008577575907111168,
      0.07898490130901337,
      0.02930774912238121,
      -0.03573320060968399,
      -0.05228171870112419,
      0.00813828781247139,
      -0.0027420467231422663,
      -0.028590243309736252,
      0.030087227001786232,
      0.12519171833992004,
      0.022263681516051292,
      0.07482845336198807,
      0.008392377756536007,
      -0.007406662683933973,
      0.003820808371528983,
      -0.07588458061218262,
      0.12246333807706833,
      0.029930278658866882,
      0.03325260058045387,
      -0.017079364508390427,
      -0.03398376703262329,
      -0.030859649181365967,
      0.02089107036590576,
      -0.010408162139356136,
      0.07338689267635345,
      0.06742130219936371,
      -0.05551077052950859,
      0.0683046504855156,
      -0.03554542735219002,
      -0.027706090360879898,
      -0.022261636331677437,
      0.013799602165818214,
      -0.0882033258676529,
      -0.013821740634739399,
      -0.01173817366361618,
      0.12897340953350067,
      -0.059451885521411896,
      0.026984913274645805,
      -0.049754828214645386,
      0.041802674531936646,
      0.019252410158514977,
      0.005592447705566883,
      0.03169047832489014,
      0.11166520416736603,
      0.07550211250782013,
      0.05090482532978058,
      0.04235103726387024,
      0.01174689270555973,
      0.07993656396865845,
      -0.01287035457789898,
      -0.0857396274805069,
      -0.01898539997637272,
      0.045247238129377365,
      -0.017851604148745537,
      -0.046254027634859085,
      0.042574193328619,
      -6.008424691117398e-08,
      -0.10315997153520584,
      -0.08094357699155807,
      -0.11702525615692139,
      0.03610721975564957,
      0.05089117959141731,
      0.023412715643644333,
      -0.05047081038355827,
      -0.028959492221474648,
      -0.015577214770019054,
      -0.013993270695209503,
      -0.0020466395653784275,
      0.05280780792236328,
      -0.05653831362724304,
      -0.10426367074251175,
      0.019995205104351044,
      -0.03624950349330902,
      0.004405622836202383,
      -0.05476517230272293,
      -0.0596526674926281,
      -0.07040378451347351,
      -0.05816853418946266,
      -0.040586747229099274,
      0.012620060704648495,
      -0.06322784721851349,
      -0.04701885208487511,
      -0.025478661060333252,
      0.09433667361736298,
      0.16390052437782288,
      0.05665810778737068,
      -0.035998862236738205,
      -0.05890408530831337,
      -0.010784249752759933,
      -0.0070052496157586575,
      -0.034566354006528854,
      0.0488499291241169,
      0.0637383684515953,
      -0.022013988345861435,
      -0.04116445779800415,
      0.027815768495202065,
      0.038892120122909546,
      -0.017649583518505096,
      -0.0022909350227564573,
      -0.01332137081772089,
      -0.03425580635666847,
      0.022440718486905098,
      0.027094848453998566,
      -0.10233990848064423,
      -0.0453314408659935,
      -0.01423683762550354,
      -0.05164568871259689,
      -0.05208117887377739,
      -0.027386970818042755,
      0.1198045089840889,
      -0.007293200120329857,
      0.035893697291612625,
      0.042467836290597916,
      0.018498839810490608,
      -0.08018867671489716,
      0.10295510292053223,
      -0.025246579200029373,
      0.04718469828367233,
      -0.02660607174038887,
      0.03339231014251709,
      -0.039920102804899216
    ],
    [
      -0.09597419947385788,
      -0.016598105430603027,
      -0.07223237305879593,
      0.03464723005890846,
      0.006131830159574747,
      0.017255714163184166,
      -0.006429906003177166,
      -0.034212175756692886,
      0.017474869266152382,
      0.03376762941479683,
      -0.01993977092206478,
      0.050047617405653,
      0.011608237400650978,
      -0.07864907383918762,
      -0.03970584645867348,
      0.043854862451553345,
      0.05001256242394447,
      -0.08821596950292587,
      -0.004701016470789909,
      -0.0008845828124321997,
      -0.006026553921401501,
      -0.06375697255134583,
      -0.031855612993240356,
      0.07735464721918106,
      -0.05480961129069328,
      -0.06319032609462738,
      -0.03666817024350166,
      0.010391317307949066,
      -0.039291054010391235,
      -0.056191638112068176,
      0.08038441091775894,
      0.10346953570842743,
      -0.017324993386864662,
      -0.000542862806469202,
      -0.05307023227214813,
      -0.06585416197776794,
      0.047740284353494644,
      -0.004525668453425169,
      -0.06117410957813263,
      0.00786600448191166,
      0.09565199166536331,
      -0.05263416841626167,
      0.012900711968541145,
      -0.03918149322271347,
      -0.037221577018499374,
      -0.0019310368224978447,
      -0.10622692108154297,
      0.03548320755362511,
      -0.0882585346698761,
      0.014844952151179314,
      0.013915716670453548,
      -0.004343916196376085,
      0.0033900311682373285,
      0.11002006381750107,
      0.06189940497279167,
      0.08303903788328171,
      0.027588773518800735,
      -0.05217253789305687,
      -0.02615978568792343,
      0.06783317029476166,
      0.04542010277509689,
      0.00818577129393816,
      -0.058638796210289,
      -0.06159217283129692,
      0.058115944266319275,
      0.011002627201378345,
      -0.05444665253162384,
      0.03621914982795715,
      0.029039176180958748,
      -0.012517045252025127,
      0.044328317046165466,
      -0.043385300785303116,
      -0.02312050200998783,
      0.01715610735118389,
      0.05358016863465309,
      -0.010128037072718143,
      0.005915661342442036,
      0.034125786274671555,
      0.043516773730516434,
      -0.06772004067897797,
      -0.09256751090288162,
      -0.027055125683546066,
      -0.008879055269062519,
      -0.1117357537150383,
      -0.01049469318240881,
      0.019450852647423744,
      0.004596534185111523,
      0.051244501024484634,
      -0.04959068074822426,
      -0.004103891551494598,
      0.10755950212478638,
      0.014381092973053455,
      -0.06616344302892685,
      0.04273667931556702,
      0.02316594123840332,
      0.028704019263386726,
      -0.020614104345440865,
      -0.08192659914493561,
      0.0493166446685791,
      0.01439613290131092,
      0.01447202917188406,
      0.012890158221125603,
      -0.005687515251338482,
      0.013791573233902454,
      0.03981174901127815,
      -0.09834786504507065,
      0.012703127227723598,
      0.024581341072916985,
      -0.020780274644494057,
      0.02569572627544403,
      0.0427609421312809,
      -0.008100380189716816,
      0.061408404260873795,
      -0.0005473322817124426,
      -0.08666645735502243,
      0.026705875992774963,
      -0.1006256714463234,
      0.008537481538951397,
      0.034262821078300476,
      -0.0008715986623428762,
      0.047794170677661896,
      0.039723098278045654,
      0.0365622416138649,
      -0.05727497488260269,
      0.02495582029223442,
      0.04687972739338875,
      -0.052177682518959045,
      4.980682705765299e-33,
      0.023647723719477654,
      -0.0711674839258194,
      0.03630053251981735,
      0.027050646021962166,
      0.033590786159038544,
      -0.02875927835702896,
      -0.047337111085653305,
      -0.01529357023537159,
      0.0013926082756370306,
      0.07553981244564056,
      -0.014232280664145947,
      0.011569551192224026,
      0.021173063665628433,
      -0.04746519774198532,
      -0.03430940955877304,
      -0.04113607108592987,
      0.004112581722438335,
      0.002423452213406563,
      -0.016629444435238838,
      -0.009482597932219505,
      0.03154406696557999,
      -0.07459607720375061,
      -0.03661208599805832,
      -0.04897115007042885,
      0.14130209386348724,
      0.016242623329162598,
      -0.048810213804244995,
      0.053898751735687256,
      -0.006859638262540102,
      0.04725351929664612,
      -0.014669735915958881,
      -0.040044765919446945,
      0.04501057788729668,
      0.035986389964818954,
      0.006071867886930704,
      0.01428075972944498,
      -0.04369271174073219,
      -0.11030405014753342,
      -0.1032944843173027,
      -0.02941223792731762,
      -0.013888247311115265,
      -0.04795968532562256,
      -0.10361917316913605,
      0.02756236121058464,
      -0.02251453883945942,
      -0.0637570172548294,
      0.021990066394209862,
      -0.015547752380371094,
      -0.03660525381565094,
      0.04700980335474014,
      0.08596227318048477,
      0.017167694866657257,
      0.018403058871626854,
      -0.047435659915208817,
      0.018183432519435883,
      -0.00035513268085196614,
      0.027705339714884758,
      0.016116855666041374,
      0.04305918887257576,
      0.11881989985704422,
      -0.03801785409450531,
      -0.050896402448415756,
      -0.07018481194972992,
      -0.05916718766093254,
      -0.008565885946154594,
      0.1392865628004074,
      -0.0014230282977223396,
      -0.11168336868286133,
      -0.05471843108534813,
      -0.008648009039461613,
      0.03498160094022751,
      0.022921334952116013,
      0.009858767502009869,
      0.03520822525024414,
      -0.033895641565322876,
      0.006281154230237007,
      0.0058451080694794655,
      0.07546508312225342,
      -0.008168715052306652,
      -0.05339258909225464,
      0.024910418316721916,
      -0.04299674928188324,
      0.02019522339105606,
      0.11657597124576569,
      -0.01283407025039196,
      -0.09012458473443985,
      0.02476535178720951,
      -0.021763276308774948,
      -0.04516226053237915,
      -0.06562721729278564,
      -0.009522683918476105,
      0.06892943382263184,
      0.03727460652589798,
      -0.006375093944370747,
      0.11192356050014496,
      -4.219011957600382e-33,
      -0.0002076001837849617,
      0.005203432869166136,
      -0.06104573607444763,
      0.002019193023443222,
      0.08405610918998718,
      -0.03306485339999199,
      0.06816709041595459,
      0.03940271586179733,
      -0.01638687402009964,
      -0.05705055594444275,
      -0.018119946122169495,
      -0.0033784236293286085,
      -0.057793378829956055,
      -0.0510241836309433,
      -0.033760640770196915,
      -0.05850929766893387,
      -0.012630159966647625,
      -0.038644324988126755,
      0.021509939804673195,
      0.07439545542001724,
      0.04564548656344414,
      -0.010429554618895054,
      0.014405247755348682,
      0.007962511852383614,
      -0.10777393728494644,
      -0.011235677637159824,
      0.0326426662504673,
      -0.007213459350168705,
      0.002392322989180684,
      0.019953332841396332,
      0.03125687316060066,
      -0.04016653448343277,
      -0.06854045391082764,
      -0.026883775368332863,
      -0.04622697830200195,
      -0.06647253036499023,
      0.07346327602863312,
      0.10280126333236694,
      0.0008548616315238178,
      0.034918803721666336,
      0.06532295048236847,
      0.11587606370449066,
      -0.029497945681214333,
      -0.07351997494697571,
      -0.013901788741350174,
      0.03654934838414192,
      0.009678209200501442,
      0.0024479550775140524,
      -0.015972694382071495,
      -0.06995050609111786,
      0.021020343527197838,
      -0.029737399891018867,
      0.12411058694124222,
      0.1614762395620346,
      -0.06564975529909134,
      0.01738038659095764,
      0.05010063946247101,
      0.012000702321529388,
      0.0074669914320111275,
      0.015880953520536423,
      0.047540247440338135,
      -0.049070924520492554,
      -0.005507289431989193,
      0.06926349550485611,
      0.0758935734629631,
      -0.014965623617172241,
      0.06522426009178162,
      -0.03230210393667221,
      0.02774822898209095,
      0.04167470708489418,
      0.09795522689819336,
      0.02586066722869873,
      0.04529326409101486,
      0.05198201909661293,
      0.027542725205421448,
      0.008540053851902485,
      -0.046432048082351685,
      -0.10354039818048477,
      0.05058049038052559,
      0.08133047074079514,
      -0.039575107395648956,
      0.03113420680165291,
      0.021366743370890617,
      -0.00018512112728785723,
      0.04603390395641327,
      0.046775270253419876,
      0.03627202287316322,
      0.025587880983948708,
      0.036557503044605255,
      0.0024820188991725445,
      -0.069118432700634,
      0.008394625037908554,
      -0.12100186198949814,
      0.027337385341525078,
      -0.07167361676692963,
      -6.01811578349043e-08,
      -0.010840374045073986,
      -0.0934387594461441,
      -0.02872219681739807,
      -0.04231855273246765,
      0.03994421660900116,
      0.03578206151723862,
      0.0516577884554863,
      -0.11955920606851578,
      0.0524744912981987,
      0.04771145433187485,
      0.006235432345420122,
      0.0017032289179041982,
      -0.025157874450087547,
      -0.026471363380551338,
      0.04634067416191101,
      -0.06533512473106384,
      0.02638842724263668,
      -0.0635375827550888,
      -0.09069611132144928,
      0.005772027187049389,
      -0.025215819478034973,
      0.11266681551933289,
      0.028740234673023224,
      0.020000556483864784,
      0.03906262665987015,
      -0.006327089853584766,
      0.10775236040353775,
      0.1136988028883934,
      0.013297042809426785,
      -0.022374626249074936,
      -0.0215341504663229,
      0.01360945776104927,
      0.04708101600408554,
      -0.014302089810371399,
      -0.03592820465564728,
      0.07805860042572021,
      0.03913547471165657,
      0.036250147968530655,
      0.0692475289106369,
      0.0920892208814621,
      -0.024745503440499306,
      -0.029324572533369064,
      -0.04944191500544548,
      -0.023195326328277588,
      0.09334789961576462,
      -0.03100866824388504,
      -0.060968171805143356,
      0.04181665554642677,
      -0.05201083421707153,
      -0.005034914705902338,
      -0.007133833598345518,
      -0.010623469948768616,
      -0.024956950917840004,
      -0.0077252620831131935,
      -0.03723014146089554,
      -0.013850431889295578,
      -0.01707373932003975,
      0.07451131194829941,
      0.008411026559770107,
      -0.023070696741342545,
      0.09056724607944489,
      -0.041354939341545105,
      0.07020748406648636,
      -0.025590935721993446
    ],
    [
      -0.12187182158231735,
      0.05552889406681061,
      -0.07507532835006714,
      -0.05582261458039284,
      -0.00019980497017968446,
      -0.038509681820869446,
      -0.10186570137739182,
      0.05621182173490524,
      0.008142822422087193,
      0.037402164191007614,
      0.01216125674545765,
      -0.04790481552481651,
      0.04117874056100845,
      0.0325234979391098,
      0.05989978089928627,
      0.02146417275071144,
      -0.02978329546749592,
      0.03476850315928459,
      0.021636519581079483,
      -0.01557500846683979,
      0.022157741710543633,
      -0.00703545194119215,
      -0.050476349890232086,
      -0.04005204513669014,
      -0.08447364717721939,
      -0.04424181953072548,
      -0.012894446030259132,
      -0.0067727090790867805,
      -0.058446288108825684,
      0.04739436134696007,
      0.030512725934386253,
      0.015551024116575718,
      -0.127802312374115,
      0.017339296638965607,
      0.04388285428285599,
      0.00856972299516201,
      0.0069106463342905045,
      -0.07559335231781006,
      0.07132408767938614,
      -0.038652338087558746,
      0.060997240245342255,
      -0.030464202165603638,
      -0.03686627745628357,
      -0.07921744138002396,
      0.044151175767183304,
      -0.06910807639360428,
      -0.03217428922653198,
      -0.01945960894227028,
      -0.013127882964909077,
      0.07963862270116806,
      0.016040435060858727,
      0.04187127202749252,
      0.05516161769628525,
      0.03289381414651871,
      0.04925483092665672,
      -0.051030103117227554,
      -0.050188079476356506,
      -0.01929645799100399,
      -0.019689295440912247,
      0.05813165009021759,
      0.039481498301029205,
      -0.04401565343141556,
      -0.036321595311164856,
      -0.004653576761484146,
      -0.026168620213866234,
      -0.020873451605439186,
      0.003037242451682687,
      -0.07177532464265823,
      0.063318632543087,
      -0.09086024761199951,
      -0.006028520409017801,
      0.027472348883748055,
      0.031409431248903275,
      -0.023153355345129967,
      0.033110905438661575,
      -0.0001997925719479099,
      -0.0367361456155777,
      0.00023728729865979403,
      -0.0003342145646456629,
      -0.0755152553319931,
      -0.02832578867673874,
      0.023806091398000717,
      0.048216428607702255,
      0.03686702996492386,
      -0.014653141610324383,
      0.08640294522047043,
      -0.005671343300491571,
      0.03848031908273697,
      -0.03488825634121895,
      0.06939716637134552,
      0.022017354145646095,
      -0.01762537844479084,
      -0.04203003644943237,
      0.018924105912446976,
      0.06797328591346741,
      0.03472550958395004,
      0.05446159467101097,
      -0.09295620024204254,
      0.04742342606186867,
      0.10375122725963593,
      -0.09304829686880112,
      -0.05121257156133652,
      0.007154584396630526,
      -0.03040257655084133,
      0.0647941455245018,
      0.01153680868446827,
      0.010745563544332981,
      -0.05588241666555405,
      -0.058316007256507874,
      0.04799635335803032,
      0.025425216183066368,
      0.05436937138438225,
      -0.038865335285663605,
      -0.05185138061642647,
      -0.06062215939164162,
      0.12293948233127594,
      0.011801368556916714,
      0.024819545447826385,
      -0.014180434867739677,
      0.008012267760932446,
      0.032911721616983414,
      -0.04737268015742302,
      0.034305915236473083,
      0.04364873468875885,
      0.05798085778951645,
      -0.03300539031624794,
      0.024184025824069977,
      2.5819569948628384e-33,
      0.02686331234872341,
      -0.0074757738038897514,
      0.07231992483139038,
      0.03113681636750698,
      -0.03950616717338562,
      -0.05645952746272087,
      0.06371673941612244,
      0.03505336493253708,
      0.018459929153323174,
      -0.05239419639110565,
      -0.04557652398943901,
      0.09450483322143555,
      -0.019159996882081032,
      -0.023628178983926773,
      -0.021966837346553802,
      -0.052574943751096725,
      0.0053171440958976746,
      -0.029634764418005943,
      0.07082162797451019,
      -0.026974378153681755,
      0.10212123394012451,
      -0.03069894388318062,
      0.10781293362379074,
      -0.013776680454611778,
      0.0057495166547596455,
      0.03654608875513077,
      0.018730802461504936,
      0.05146599933505058,
      0.012603847309947014,
      0.034561675041913986,
      -0.004920936189591885,
      -0.04861089587211609,
      -0.010584930889308453,
      0.024868404492735863,
      0.10154051333665848,
      0.03542495146393776,
      -0.020500222221016884,
      -0.043467819690704346,
      -0.11338317394256592,
      0.008746318519115448,
      0.051351387053728104,
      0.042863231152296066,
      -0.08435627818107605,
      -0.03896501287817955,
      -0.06780415028333664,
      -0.020851263776421547,
      -0.05521383881568909,
      -0.0677553117275238,
      0.06890405714511871,
      0.03997533768415451,
      -0.04323982447385788,
      0.07904672622680664,
      -0.03969215974211693,
      -0.000610893068369478,
      0.026450110599398613,
      -0.06010649353265762,
      0.050262220203876495,
      -0.07277209311723709,
      0.03527029603719711,
      0.06207729130983353,
      -0.03157154470682144,
      -0.014443296939134598,
      -0.036438170820474625,
      0.004713285714387894,
      -0.06479433178901672,
      0.044252555817365646,
      -0.08481860160827637,
      -0.04357646778225899,
      -0.0248673465102911,
      -0.030907977372407913,
      0.03736019507050514,
      0.03289024531841278,
      -0.00905443262308836,
      0.033639516681432724,
      0.047890059649944305,
      -0.00356959062628448,
      0.08217859268188477,
      0.0716368556022644,
      0.030922411009669304,
      -0.07654578983783722,
      0.09153284132480621,
      -0.005036509595811367,
      -0.05701515078544617,
      0.055738452821969986,
      0.01454142201691866,
      -0.013753705658018589,
      -0.062145017087459564,
      -0.04747052490711212,
      -0.03346937522292137,
      -0.021825214847922325,
      -0.02399325557053089,
      0.01598772406578064,
      -0.004704135935753584,
      -0.005848580505698919,
      -0.03749151900410652,
      -3.872134594932264e-33,
      -0.05148714408278465,
      -0.09431099146604538,
      -0.009375580586493015,
      -0.00021689919230993837,
      0.023691650480031967,
      -0.07944364845752716,
      0.006804994773119688,
      0.025961318984627724,
      0.012177481316030025,
      0.05983424559235573,
      -0.056247830390930176,
      -0.06889713555574417,
      0.01864040270447731,
      -0.00939350388944149,
      -0.0032281510066241026,
      0.009893947280943394,
      -0.07796505093574524,
      -0.0607709176838398,
      0.08538742363452911,
      0.0782824158668518,
      0.057663317769765854,
      0.07805527001619339,
      0.0027974576223641634,
      -0.018962321802973747,
      -0.0716993436217308,
      -0.015521369874477386,
      -0.017333775758743286,
      0.00399235961958766,
      -0.07597596943378448,
      0.0049906326457858086,
      0.028118552640080452,
      -0.0870782658457756,
      -0.07146578282117844,
      0.0014160623541101813,
      0.029122887179255486,
      -0.058584365993738174,
      0.07374367862939835,
      0.08370465785264969,
      0.005465527530759573,
      0.05754220485687256,
      0.04119624197483063,
      -0.0096290847286582,
      -0.07678692787885666,
      0.008502239361405373,
      0.0022763030137866735,
      0.006524768657982349,
      -0.09529490768909454,
      0.04360703006386757,
      -0.011670546606183052,
      -0.040991514921188354,
      0.029044805094599724,
      0.03206981346011162,
      -0.0004655889351852238,
      -0.02687167190015316,
      -0.04325809329748154,
      -0.020776480436325073,
      0.09875530004501343,
      -0.01268711406737566,
      0.010427133180201054,
      0.10158520191907883,
      -0.00032793122227303684,
      -0.10583548992872238,
      -0.011402592994272709,
      0.0761822834610939,
      0.046741943806409836,
      -0.05797193944454193,
      0.023846948519349098,
      -0.06191946938633919,
      -0.018340203911066055,
      0.04402473196387291,
      0.022456364706158638,
      -0.11584775149822235,
      0.002358432160690427,
      0.013492494821548462,
      0.061356380581855774,
      -0.0877700224518776,
      0.036705829203128815,
      -0.023542840033769608,
      0.11781755834817886,
      0.02051934227347374,
      -0.04905449226498604,
      0.011557299643754959,
      0.05830341577529907,
      0.09215565770864487,
      0.05375972017645836,
      0.06711754947900772,
      0.09605184942483902,
      0.0064813243225216866,
      -0.010327626019716263,
      -0.0015053623355925083,
      0.008105357177555561,
      0.038224928081035614,
      0.012869685888290405,
      -0.018870782107114792,
      0.007522099185734987,
      -5.7196167801976117e-08,
      -0.0468878373503685,
      -0.0581732802093029,
      -0.07603096961975098,
      0.08896088600158691,
      -0.05896856635808945,
      0.01927873305976391,
      -0.03742465376853943,
      -0.01962796039879322,
      0.059041041880846024,
      -0.023079335689544678,
      0.08766239881515503,
      0.09698033332824707,
      -0.053500209003686905,
      -0.08409913629293442,
      -0.02290346659719944,
      0.045991744846105576,
      -0.017886685207486153,
      0.07107093185186386,
      -0.02714320458471775,
      0.02124911919236183,
      -0.01160085666924715,
      0.041697580367326736,
      0.010146157816052437,
      -0.059030357748270035,
      0.08030056208372116,
      0.04123430326581001,
      0.06404774636030197,
      0.07006290555000305,
      -0.12889820337295532,
      -0.06382047384977341,
      -0.06686162203550339,
      -0.010771709494292736,
      -0.023938603699207306,
      -0.03804400563240051,
      -0.039355941116809845,
      0.033752962946891785,
      0.019880294799804688,
      -0.010863743722438812,
      0.04443802684545517,
      0.017756856977939606,
      0.009767209179699421,
      0.11545377969741821,
      -0.1067294329404831,
      -0.017407752573490143,
      0.06611964851617813,
      0.07691432535648346,
      -0.027582429349422455,
      0.04315401613712311,
      -0.019162561744451523,
      -0.05610879883170128,
      -0.08362118154764175,
      -0.053243573755025864,
      0.008087546564638615,
      0.030474897474050522,
      -0.10524196177721024,
      0.03336113318800926,
      -0.05236164480447769,
      0.021284382790327072,
      0.04617910459637642,
      -0.027155550196766853,
      0.12366867810487747,
      -0.020023275166749954,
      0.011942557990550995,
      0.018064003437757492
    ],
    [
      -0.1245148777961731,
      0.022227274253964424,
      -0.06271287053823471,
      0.06064518913626671,
      0.05102958530187607,
      -0.006973465904593468,
      0.02471587434411049,
      0.03636680170893669,
      -0.005844357423484325,
      0.027552105486392975,
      0.026943929493427277,
      -0.10340003669261932,
      0.005009592976421118,
      -0.025974271818995476,
      -0.03261105716228485,
      -0.009426465258002281,
      0.07057914137840271,
      -0.017163900658488274,
      0.024079306051135063,
      -0.03164762631058693,
      0.02186131663620472,
      -0.019105898216366768,
      0.027604633942246437,
      0.0635039210319519,
      0.03986843302845955,
      -0.027224024757742882,
      -0.07592282444238663,
      -0.03646614030003548,
      0.03458346799015999,
      -0.022342000156641006,
      0.0634772777557373,
      0.067957803606987,
      0.015749605372548103,
      0.0009932777611538768,
      0.09378089010715485,
      -0.008346057496964931,
      0.03716162592172623,
      -0.006314779166132212,
      -0.004668826702982187,
      0.0024365547578781843,
      0.05760520324110985,
      -0.05502692982554436,
      -0.023593438789248466,
      -0.0013111840235069394,
      0.034150172024965286,
      0.042321134358644485,
      0.006045844405889511,
      0.03805098682641983,
      -0.09480948001146317,
      0.04580753296613693,
      0.01767401210963726,
      0.02421274594962597,
      0.045991070568561554,
      -0.03181058168411255,
      0.04908280074596405,
      -0.06855329871177673,
      0.029731398448348045,
      -0.10371673107147217,
      0.03835592418909073,
      0.072392538189888,
      -0.009218058548867702,
      -0.016466332599520683,
      -0.030482785776257515,
      -0.0707053393125534,
      0.043202824890613556,
      0.030874403193593025,
      -0.10612114518880844,
      0.02848302200436592,
      0.01399019081145525,
      0.0124434232711792,
      -0.0027814747299999,
      0.044120579957962036,
      0.052725646644830704,
      0.09698142856359482,
      0.03490406647324562,
      -0.0819731131196022,
      -0.016533376649022102,
      0.048024699091911316,
      -0.018960565328598022,
      -0.14255709946155548,
      -0.14681702852249146,
      -0.044208914041519165,
      -0.04154306277632713,
      -0.06759507209062576,
      0.003036764683201909,
      0.038591425865888596,
      0.12463455647230148,
      0.10568985342979431,
      -0.02153119258582592,
      0.026798859238624573,
      0.09902163594961166,
      0.015088764950633049,
      -0.12414941191673279,
      0.061107464134693146,
      0.05349910631775856,
      -0.01962028257548809,
      -0.03826252371072769,
      -0.04643215239048004,
      0.03882182016968727,
      0.03929924964904785,
      -0.018868518993258476,
      -0.0022804560139775276,
      -0.06572920083999634,
      -0.019741980358958244,
      -0.006852044723927975,
      -0.07455269247293472,
      0.018823161721229553,
      0.05086078494787216,
      -0.014336756430566311,
      0.04127020388841629,
      0.06339062750339508,
      -0.03662202134728432,
      0.04619039222598076,
      -0.03481503948569298,
      0.039847634732723236,
      0.004482091870158911,
      -0.017203442752361298,
      -0.03996432200074196,
      0.06657717376947403,
      -0.0631534606218338,
      0.05833343788981438,
      0.013326176442205906,
      0.03163523226976395,
      -0.035026535391807556,
      0.026020513847470284,
      -0.016592249274253845,
      0.07003725320100784,
      6.653937200707407e-33,
      0.013683244585990906,
      -0.0018261425429955125,
      -0.022725025191903114,
      0.043324414640665054,
      -0.015358081087470055,
      0.02000410482287407,
      -0.010642235167324543,
      0.004584527108818293,
      0.0356312096118927,
      0.056794896721839905,
      -0.015485130250453949,
      -0.0653502568602562,
      -0.020626122131943703,
      -0.057390227913856506,
      -0.10449517518281937,
      -0.024070847779512405,
      0.06003126874566078,
      0.05279223993420601,
      -0.045558031648397446,
      0.0736277624964714,
      0.0691596195101738,
      -0.06678982824087143,
      -0.04435987025499344,
      0.009232847951352596,
      0.027805205434560776,
      -0.002556130988523364,
      0.01234419271349907,
      0.004141328856348991,
      -0.050791747868061066,
      0.0191554706543684,
      -0.0008740394259802997,
      -0.003521731123328209,
      -0.0013073976151645184,
      0.06387637555599213,
      0.029330356046557426,
      0.040594432502985,
      -0.02926362119615078,
      -0.04521415755152702,
      -0.0510820671916008,
      -0.001558716525323689,
      -0.03473256900906563,
      -0.012857923284173012,
      -0.07318086922168732,
      -0.05145542323589325,
      -0.020842205733060837,
      -0.07409850507974625,
      -0.007602139376103878,
      -0.05205492675304413,
      -0.022733235731720924,
      -0.06385403126478195,
      0.08107864111661911,
      0.11740653216838837,
      0.01801128312945366,
      -0.06149915233254433,
      0.026588499546051025,
      -0.04331064596772194,
      -0.0003568723623175174,
      0.07952799648046494,
      0.07116140425205231,
      0.09852384030818939,
      0.023265011608600616,
      0.006926112342625856,
      -0.07836036384105682,
      -0.03374132886528969,
      -0.11210115998983383,
      0.06275290995836258,
      -0.035054925829172134,
      -0.06161728873848915,
      0.01564975269138813,
      -0.016632823273539543,
      0.022762754932045937,
      -0.06305623799562454,
      0.05112573876976967,
      0.038635190576314926,
      0.03144478052854538,
      -0.05741720646619797,
      0.021617284044623375,
      0.058159928768873215,
      -0.059798479080200195,
      -0.0662182942032814,
      0.09159739315509796,
      0.019438132643699646,
      -0.041336096823215485,
      0.00011388379061827436,
      -0.04479153826832771,
      -0.04354747012257576,
      0.0013939229538664222,
      -0.0027912792284041643,
      -0.11419466882944107,
      -0.03303942456841469,
      -0.06459473818540573,
      -0.05350947007536888,
      -0.01879182457923889,
      -0.030703306198120117,
      0.04042445868253708,
      -6.023924758570463e-33,
      0.041809264570474625,
      0.029239585623145103,
      -0.01972855068743229,
      0.0072067370638251305,
      -0.024167409166693687,
      -0.0528421550989151,
      -0.00130409374833107,
      0.0909428521990776,
      -0.029053786769509315,
      -0.037213366478681564,
      0.05906400829553604,
      -0.044677529484033585,
      -0.050303734838962555,
      0.0009369580657221377,
      -0.09216751158237457,
      0.022564921528100967,
      -0.03628212958574295,
      -0.10095526278018951,
      0.0019965849351137877,
      0.03726063296198845,
      0.005818717647343874,
      0.07645246386528015,
      0.0006142747006379068,
      0.04875355213880539,
      -0.09399884939193726,
      0.0750240683555603,
      -0.013073503971099854,
      0.08109507709741592,
      0.067048080265522,
      -0.052241530269384384,
      -0.030165355652570724,
      -0.02349678799510002,
      -0.08837246894836426,
      -0.02333926595747471,
      0.016183096915483475,
      -0.0847620815038681,
      0.061574291437864304,
      0.08122318238019943,
      -0.012102565728127956,
      0.04715155065059662,
      0.10031471401453018,
      0.04749440774321556,
      -0.01809200644493103,
      -0.04511212185025215,
      0.010819497518241405,
      0.00965775828808546,
      0.06130782514810562,
      -0.037324804812669754,
      0.04639912396669388,
      -0.0332123227417469,
      0.03753381222486496,
      0.019303690642118454,
      0.06543917208909988,
      0.07546421885490417,
      -0.02997765876352787,
      0.006572111044079065,
      -0.0654725432395935,
      0.0010408918606117368,
      -0.018328934907913208,
      0.048291098326444626,
      -0.029185429215431213,
      -0.009304164908826351,
      0.08048396557569504,
      0.09366333484649658,
      0.03311561420559883,
      -0.022417904809117317,
      -0.005776157137006521,
      -0.025085896253585815,
      0.07148141413927078,
      0.03263173997402191,
      0.008873878046870232,
      0.07414647936820984,
      -0.03990546986460686,
      0.008171327412128448,
      0.0019255244405940175,
      -0.0029666384216398,
      0.08309709280729294,
      -0.02279812842607498,
      0.037931639701128006,
      0.12212476879358292,
      -0.05721832811832428,
      0.019575579091906548,
      0.04432190954685211,
      0.03186711668968201,
      0.020447060465812683,
      0.05295535549521446,
      -0.005791956093162298,
      0.030003266409039497,
      0.05094412341713905,
      -0.03638292849063873,
      -0.053292494267225266,
      -0.024099163711071014,
      -0.08904718607664108,
      -0.04560597613453865,
      -0.06660620123147964,
      -6.060461288370789e-08,
      -0.03368477523326874,
      -0.11760608106851578,
      0.01335848681628704,
      -0.043637022376060486,
      0.008922034874558449,
      0.02899995632469654,
      -0.01241941750049591,
      -0.14881476759910583,
      -0.023821456357836723,
      -0.08167647570371628,
      0.07419731467962265,
      -0.010652572847902775,
      -0.029510729014873505,
      -0.05373142287135124,
      0.025819633156061172,
      -0.0872831717133522,
      -0.021489080041646957,
      -0.009311835281550884,
      -0.03358277305960655,
      -0.01682368852198124,
      -0.0011679157614707947,
      0.02767878584563732,
      0.062344297766685486,
      -0.00429188460111618,
      0.021037472411990166,
      0.006538740824908018,
      0.05043375492095947,
      0.02637707069516182,
      -0.0016416580183431506,
      0.01570810005068779,
      0.03753434866666794,
      0.009606672450900078,
      0.04997996240854263,
      -0.04224778711795807,
      0.08518873900175095,
      0.056172993034124374,
      0.0018624310614541173,
      0.046847131103277206,
      0.1198771595954895,
      0.07481961697340012,
      -0.04522789269685745,
      -0.009855462238192558,
      -0.042860519140958786,
      -0.007146631367504597,
      0.04155599698424339,
      -0.019285161048173904,
      -0.12226301431655884,
      -0.049073901027441025,
      -0.07455987483263016,
      -0.0617724284529686,
      0.005974964238703251,
      -0.008096877485513687,
      0.0396302305161953,
      0.04569672420620918,
      -0.01016271859407425,
      0.02481892704963684,
      0.003546937135979533,
      -0.029234765097498894,
      -0.006382210645824671,
      0.010316520929336548,
      0.10842052102088928,
      -0.07342644780874252,
      0.05256981402635574,
      0.013990635983645916
    ],
    [
      -0.09758777916431427,
      -0.0146441999822855,
      -0.09034263342618942,
      0.0007370828534476459,
      -0.016308583319187164,
      0.029416071251034737,
      0.05181310325860977,
      -0.07792899757623672,
      0.004439628683030605,
      -0.03168461099267006,
      -0.0360671691596508,
      -0.01070372574031353,
      0.0456676185131073,
      -0.0790620818734169,
      -0.10525469481945038,
      0.035612743347883224,
      0.09243094176054001,
      -0.0565408356487751,
      0.11723963916301727,
      0.0442267470061779,
      -0.04934303089976311,
      -0.003801442915573716,
      -0.02605064958333969,
      0.07772322744131088,
      0.026964345946907997,
      -0.02613387070596218,
      -0.012357828207314014,
      -0.01669333130121231,
      -0.025614934042096138,
      -0.02137869969010353,
      0.09575440734624863,
      0.19157174229621887,
      -0.04278359189629555,
      -0.03778970241546631,
      0.07985798269510269,
      0.0011869077570736408,
      0.04325851798057556,
      0.00890620332211256,
      -0.06191572919487953,
      -0.024715915322303772,
      0.08953623473644257,
      -0.009198972955346107,
      0.004217725712805986,
      -0.04976268112659454,
      -0.015676133334636688,
      -0.03955603763461113,
      0.01207220833748579,
      -0.014845127239823341,
      -0.0469902828335762,
      0.005401440896093845,
      -0.003412898164242506,
      -0.07241970300674438,
      0.022843310609459877,
      0.04397336021065712,
      -0.017124265432357788,
      -0.010505062527954578,
      0.08865056931972504,
      -0.02454780787229538,
      -0.06582997739315033,
      -0.024458369240164757,
      0.0569247342646122,
      0.016284264624118805,
      -0.08047707378864288,
      -0.05028657615184784,
      -0.015141768380999565,
      0.1019616350531578,
      -0.024339919909834862,
      -0.025640804320573807,
      0.009563518688082695,
      -0.010974394157528877,
      0.035376664251089096,
      -0.017562193796038628,
      -0.006683739367872477,
      0.023064570501446724,
      0.027261456474661827,
      0.014191096648573875,
      -0.0018503335304558277,
      -0.002082878490909934,
      0.06515146791934967,
      -0.07306427508592606,
      -0.08046179264783859,
      -0.056390222162008286,
      0.03710167482495308,
      -0.05262337625026703,
      0.006679327692836523,
      0.058952655643224716,
      0.016084808856248856,
      0.013505615293979645,
      0.055928561836481094,
      0.03398432955145836,
      0.055708110332489014,
      0.06951911747455597,
      0.007016289513558149,
      -0.07271194458007812,
      0.16767264902591705,
      0.017556441947817802,
      0.01913524977862835,
      -0.10972937941551208,
      0.09104035794734955,
      0.05216465890407562,
      0.012239753268659115,
      0.057952187955379486,
      0.021084215492010117,
      -0.03736712411046028,
      0.08588734269142151,
      0.030001379549503326,
      0.01670421101152897,
      -0.018478766083717346,
      0.026816019788384438,
      0.016200434416532516,
      0.019086016342043877,
      -0.012082518078386784,
      0.07537686824798584,
      0.011502878740429878,
      -0.06624380499124527,
      0.06777092069387436,
      -0.03623638674616814,
      -0.008047731593251228,
      0.02274888940155506,
      -0.009053613990545273,
      0.011544648557901382,
      0.05667710304260254,
      -0.04448161646723747,
      -0.009545975364744663,
      -0.03439541161060333,
      -0.0027981121093034744,
      -0.03214211389422417,
      5.617181305324889e-33,
      0.048194583505392075,
      -0.021978290751576424,
      0.020074471831321716,
      0.061962585896253586,
      0.019536932930350304,
      -0.038085564970970154,
      0.022367477416992188,
      -0.005600813310593367,
      -0.0406816266477108,
      0.013141024857759476,
      -0.006027077324688435,
      -0.01229967549443245,
      -0.01343213114887476,
      -0.0367259681224823,
      -0.030474800616502762,
      -0.010230873711407185,
      -0.03395141661167145,
      -0.011262180283665657,
      0.08140385150909424,
      0.06019657105207443,
      -0.014352316036820412,
      -0.06152307242155075,
      -0.01818268373608589,
      -0.06138802319765091,
      0.0477675162255764,
      0.006614742800593376,
      -0.047190528362989426,
      0.012206333689391613,
      -0.01770276017487049,
      0.008471992798149586,
      0.03517771512269974,
      -0.04535853490233421,
      0.056077614426612854,
      0.056207574903964996,
      -0.0487946942448616,
      0.006455898284912109,
      -0.05687842145562172,
      -0.05906367674469948,
      -0.03638264909386635,
      -0.05573585256934166,
      0.04339437931776047,
      -0.027204351499676704,
      -0.03688522428274155,
      0.061062365770339966,
      0.05065411701798439,
      -0.041009899228811264,
      0.0031335807871073484,
      -0.03309549763798714,
      0.06799774616956711,
      0.05833187699317932,
      0.04218455031514168,
      0.02375985123217106,
      0.00886196456849575,
      -0.04206930473446846,
      -0.04554763063788414,
      -0.036328546702861786,
      0.0006444266764447093,
      0.06162237375974655,
      0.0034889697562903166,
      0.009404201991856098,
      -0.012713095173239708,
      -0.09461569041013718,
      -0.05393088236451149,
      -0.06316570192575455,
      0.038223251700401306,
      0.09767814725637436,
      -0.11393658816814423,
      -0.14957208931446075,
      -0.024903755635023117,
      -0.08191045373678207,
      -0.011317696422338486,
      0.009317383170127869,
      0.06594940274953842,
      0.030329622328281403,
      -0.03670307621359825,
      -0.054254837334156036,
      -0.014657563529908657,
      0.07811834663152695,
      0.041633110493421555,
      -0.02306082472205162,
      -0.043640345335006714,
      0.049178581684827805,
      0.0033573347609490156,
      0.15952672064304352,
      -0.057719551026821136,
      0.0002827054704539478,
      0.03870999813079834,
      -0.04016932472586632,
      -0.06632095575332642,
      -0.07115112990140915,
      0.014136823825538158,
      0.0048440005630254745,
      -0.06528407335281372,
      -0.02070542797446251,
      0.1521569788455963,
      -5.217951097690993e-33,
      -0.04311566427350044,
      -0.019304923713207245,
      -0.00923242513090372,
      0.05153012275695801,
      0.026049423962831497,
      -0.013788928277790546,
      0.015106120146811008,
      0.009995457716286182,
      0.06562398374080658,
      0.022119058296084404,
      0.026392044499516487,
      -0.031043488532304764,
      -0.022862376645207405,
      -0.04652242362499237,
      -0.02192932739853859,
      -0.04882483929395676,
      -0.04051080718636513,
      -0.021300017833709717,
      0.04732421040534973,
      0.07654630392789841,
      0.09868621081113815,
      0.05752871558070183,
      0.06773608922958374,
      0.02093549817800522,
      -0.10177605599164963,
      -0.016854919493198395,
      -0.007349549792706966,
      -0.06042187288403511,
      -0.0018356330692768097,
      0.024210087954998016,
      0.07064278423786163,
      0.030911901965737343,
      -0.03413330763578415,
      -0.07995467633008957,
      -0.03021310269832611,
      -0.050025634467601776,
      0.04911031201481819,
      0.15427753329277039,
      -0.018482979387044907,
      -0.021646518260240555,
      0.0724814385175705,
      0.04154008999466896,
      -0.05537748709321022,
      -0.0864342674612999,
      0.041241757571697235,
      -0.037991538643836975,
      0.009360447525978088,
      0.01411985233426094,
      0.010123109444975853,
      -0.07388542592525482,
      -0.02513621188700199,
      -0.08198834210634232,
      0.10845427960157394,
      0.050145626068115234,
      -0.04328995943069458,
      0.06035269796848297,
      0.06388431042432785,
      0.01721968688070774,
      0.06158745661377907,
      -0.01823047362267971,
      0.00526270130649209,
      0.06624045968055725,
      -0.009004333056509495,
      0.07647764682769775,
      0.029883744195103645,
      -0.02920454554259777,
      -0.030702194198966026,
      0.026320749893784523,
      0.08981616795063019,
      0.013482495211064816,
      -0.04093930870294571,
      0.03360837325453758,
      0.021486714482307434,
      0.01745363511145115,
      0.10888795554637909,
      0.003472529584541917,
      -0.01103274617344141,
      -0.06996449828147888,
      0.01688077114522457,
      0.0015902904560789466,
      -0.01751585863530636,
      0.043624091893434525,
      0.008896186016499996,
      0.034285351634025574,
      0.03042672574520111,
      0.029350297525525093,
      0.06072280555963516,
      -0.03723864629864693,
      0.012488803826272488,
      0.02021980844438076,
      -0.04534614086151123,
      0.019296031445264816,
      -0.07863152772188187,
      -0.02038079872727394,
      -0.08102839440107346,
      -6.103680050273397e-08,
      -0.012655803002417088,
      -0.02347094565629959,
      -0.04797202721238136,
      -0.0159329604357481,
      0.015437368303537369,
      -0.005756465718150139,
      0.04976383596658707,
      -0.09824676811695099,
      -0.03982061892747879,
      0.014698481187224388,
      -0.0349319651722908,
      -0.06729215383529663,
      -0.004434355068951845,
      -0.07070094347000122,
      -0.015275674872100353,
      -0.04517980292439461,
      0.0034475973807275295,
      -0.03302956745028496,
      -0.13969121873378754,
      0.02771925739943981,
      -0.03366078808903694,
      0.08879945427179337,
      0.00603688508272171,
      0.008768443949520588,
      0.01059128250926733,
      0.0031650180462747812,
      0.10662303119897842,
      0.05606600642204285,
      0.04546825587749481,
      0.027046019211411476,
      -0.012018042616546154,
      0.06316392123699188,
      -0.029645903035998344,
      -0.027603957802057266,
      -0.08028455823659897,
      0.016119269654154778,
      0.027406329289078712,
      0.009361028671264648,
      0.03607913851737976,
      0.04949168488383293,
      -0.06025601923465729,
      0.02220812812447548,
      -0.04636821523308754,
      -0.03302306681871414,
      0.05868763104081154,
      0.007425694726407528,
      -0.05921488255262375,
      -0.01193813793361187,
      0.02131565660238266,
      0.007361941039562225,
      -0.02287493273615837,
      0.03355223312973976,
      -0.04759526625275612,
      0.02479594200849533,
      -0.06557497382164001,
      -0.022482724860310555,
      0.017580078914761543,
      0.024808423593640327,
      0.06459158658981323,
      -0.07171037793159485,
      0.1065656989812851,
      -0.022230252623558044,
      0.10252798348665237,
      -0.0331578403711319
    ],
    [
      -0.027765575796365738,
      -0.013062424957752228,
      -0.026112155988812447,
      -0.013835501857101917,
      0.03887033462524414,
      0.01728852652013302,
      -0.004660504870116711,
      -0.03092229552567005,
      -0.007704169023782015,
      -0.003293392714112997,
      0.029917147010564804,
      -0.008592968806624413,
      0.07541099935770035,
      0.08706445246934891,
      -0.018651651218533516,
      0.035639192909002304,
      0.03628004342317581,
      -0.011584588326513767,
      0.05825905501842499,
      0.08255500346422195,
      0.050850581377744675,
      0.060246583074331284,
      0.007244884967803955,
      0.02355012483894825,
      -0.11168082803487778,
      -0.09043581038713455,
      0.011915711686015129,
      0.05113206058740616,
      -0.006961843930184841,
      -0.05682772025465965,
      0.045613572001457214,
      0.07340674102306366,
      -0.03559980168938637,
      0.014628845266997814,
      0.09211248904466629,
      -0.0057455142959952354,
      0.04763789474964142,
      0.05053827539086342,
      0.03666479513049126,
      -0.04072077199816704,
      0.04056312516331673,
      -0.09570866823196411,
      0.09661798924207687,
      -0.053562261164188385,
      0.04998728260397911,
      0.04954659938812256,
      -0.00019950552086811513,
      -0.040859024971723557,
      -0.012839201837778091,
      0.001440002117305994,
      0.1083792895078659,
      0.0789203941822052,
      0.004198169801384211,
      0.06880119442939758,
      0.0183239858597517,
      0.02017071284353733,
      -0.1014505997300148,
      -0.03762247413396835,
      0.014680992811918259,
      0.0458214096724987,
      0.043116021901369095,
      0.040275875478982925,
      0.0028543348889797926,
      0.004776384681463242,
      -0.018955271691083908,
      0.04740561172366142,
      -0.0747792050242424,
      -0.07135891169309616,
      -0.07285760343074799,
      -0.01905597746372223,
      -0.020107094198465347,
      -0.016941603273153305,
      -0.02500326931476593,
      0.08885259181261063,
      0.021389193832874298,
      0.1181313544511795,
      -0.01415793877094984,
      -0.036540936678647995,
      0.02741168439388275,
      -0.04608315974473953,
      -0.04204949364066124,
      -0.0031135352328419685,
      0.0427379235625267,
      0.005318507552146912,
      -0.007226099725812674,
      0.04303911328315735,
      -0.059766221791505814,
      -0.01578213833272457,
      -0.019180994480848312,
      0.05104031413793564,
      0.13555879890918732,
      0.03219258040189743,
      -0.02878098003566265,
      0.022508712485432625,
      0.10444372147321701,
      -0.03528664633631706,
      0.03272143751382828,
      -0.06384874135255814,
      0.040777552872896194,
      0.071769580245018,
      0.005003532860428095,
      -0.05072082579135895,
      -0.036650627851486206,
      -0.021458828821778297,
      0.07962998002767563,
      0.023218948394060135,
      0.05533580482006073,
      -0.017245544120669365,
      0.0037839096039533615,
      0.005468456074595451,
      0.036573898047208786,
      -0.061306219547986984,
      0.006881215143948793,
      -0.024748656898736954,
      -0.060798391699790955,
      0.05517639219760895,
      -0.05140594393014908,
      -0.012963631190359592,
      -0.05699336156249046,
      -0.035687390714883804,
      -0.09153202921152115,
      0.00513076176866889,
      0.006659653503447771,
      -0.045911822468042374,
      0.0005927509046159685,
      -0.10222633183002472,
      0.01853547990322113,
      9.322096318722913e-33,
      0.021780693903565407,
      0.030329011380672455,
      0.021287906914949417,
      0.024935981258749962,
      -0.036294836550951004,
      -0.013130484148859978,
      0.02768813818693161,
      0.027593441307544708,
      0.00617675157263875,
      0.006355359219014645,
      0.013922248035669327,
      -0.07483745366334915,
      0.018598787486553192,
      -0.050895046442747116,
      -0.04677942767739296,
      0.034577626734972,
      0.005444693844765425,
      0.004841363988816738,
      0.040341176092624664,
      0.06469431519508362,
      0.021459929645061493,
      -0.016954205930233,
      0.04518107697367668,
      -0.06548741459846497,
      -0.013912894763052464,
      0.03595396876335144,
      0.003527783090248704,
      0.03733290359377861,
      0.002365044318139553,
      -0.01655423268675804,
      -0.07455416023731232,
      -0.02044173702597618,
      0.004368439316749573,
      0.004516104701906443,
      0.009765835478901863,
      0.023353269323706627,
      -0.04749267175793648,
      -0.0386611744761467,
      -0.10019797086715698,
      0.03870066627860069,
      0.01938186213374138,
      0.02910309098660946,
      -0.0441274493932724,
      0.01665554940700531,
      0.08101160824298859,
      0.026918374001979828,
      -0.020098451524972916,
      0.05455654487013817,
      0.04126003012061119,
      0.08376816660165787,
      0.01873733289539814,
      0.026847444474697113,
      -0.06802225112915039,
      -0.016909481957554817,
      -0.05821599066257477,
      -0.007119377609342337,
      0.025888575240969658,
      0.0343967042863369,
      0.017163019627332687,
      0.0923638716340065,
      -0.002848261035978794,
      -0.026972239837050438,
      -0.09949427843093872,
      0.007128160446882248,
      -0.030832838267087936,
      0.005801795516163111,
      -0.013545529916882515,
      -0.09851555526256561,
      -0.04042019695043564,
      -0.07924824208021164,
      0.01275948528200388,
      -0.04391635209321976,
      0.00238029845058918,
      0.0728568360209465,
      0.00338384578935802,
      -0.04507937282323837,
      -0.03734302520751953,
      0.041475310921669006,
      -0.0003680049267131835,
      -0.048448510468006134,
      0.018241221085190773,
      0.05734218284487724,
      -0.04130793735384941,
      0.13078081607818604,
      -0.053313300013542175,
      -0.08460676670074463,
      -0.034525223076343536,
      -0.027353566139936447,
      0.038286272436380386,
      -0.046460073441267014,
      0.05485227331519127,
      -0.023501332849264145,
      0.007987291552126408,
      0.01915176399052143,
      0.08435522764921188,
      -7.344667232142183e-33,
      0.006952976807951927,
      -0.011845857836306095,
      -0.04841417074203491,
      0.05694061145186424,
      -0.06644560396671295,
      -0.06157269701361656,
      0.11560262739658356,
      0.014982183463871479,
      -0.04426098242402077,
      -0.06691766530275345,
      0.03863563388586044,
      -0.035004667937755585,
      0.01493119727820158,
      -0.037804778665304184,
      -0.09907009452581406,
      -0.02732124924659729,
      -0.15902698040008545,
      -0.05018589645624161,
      0.04633396491408348,
      0.07580490410327911,
      0.036667656153440475,
      0.025241656228899956,
      -0.013193159364163876,
      -0.05134345963597298,
      -0.013798837549984455,
      0.10067837685346603,
      -0.01798739656805992,
      0.022332198917865753,
      0.05632944777607918,
      0.053592290729284286,
      -0.02459091879427433,
      0.0794433131814003,
      0.007741476874798536,
      0.02206156961619854,
      -0.006725725252181292,
      -0.01931804232299328,
      0.018355119973421097,
      -0.002193562453612685,
      0.05834176018834114,
      0.040236879140138626,
      0.06856382638216019,
      0.07657293230295181,
      -0.06878100335597992,
      -0.047756973654031754,
      -0.004602597560733557,
      0.05619091913104057,
      0.024595653638243675,
      -0.07170962542295456,
      0.03694526478648186,
      -0.06673402339220047,
      -0.0018005776219069958,
      -0.0035530882887542248,
      0.0380888357758522,
      0.04213842377066612,
      -0.005972352344542742,
      0.06518072634935379,
      -0.0174189992249012,
      0.013896830379962921,
      0.015405724756419659,
      0.048249416053295135,
      0.014894634485244751,
      -0.041433874517679214,
      0.02123258449137211,
      0.12155789881944656,
      -0.0027684641536325216,
      0.002823042916134,
      -0.0461898148059845,
      -0.05260502174496651,
      0.017206452786922455,
      -0.03472721949219704,
      0.0213969387114048,
      -0.07728654891252518,
      0.030333099886775017,
      0.0067503973841667175,
      0.04038738086819649,
      -0.08653762936592102,
      0.1306958645582199,
      -0.008458748459815979,
      0.019081098958849907,
      0.030051428824663162,
      -0.09445430338382721,
      0.029481150209903717,
      -0.0554887093603611,
      0.043636683374643326,
      -0.012887395918369293,
      0.12840884923934937,
      0.027389612048864365,
      0.01613331399857998,
      -0.019275493919849396,
      -0.004865444265305996,
      -0.02401864156126976,
      0.061144933104515076,
      -0.0030144720803946257,
      -0.03139170631766319,
      -0.07307639718055725,
      -6.609833747006633e-08,
      -0.0763932466506958,
      -0.07145900279283524,
      -0.02295771986246109,
      -0.0020605430472642183,
      -0.013424602337181568,
      0.04518146067857742,
      0.02336624637246132,
      -0.1936500072479248,
      0.030440380796790123,
      0.025844702497124672,
      -0.026689767837524414,
      0.026705240830779076,
      -0.1321052461862564,
      -0.06762520968914032,
      0.014649533666670322,
      0.037004947662353516,
      0.001185556990094483,
      -0.04033375158905983,
      -0.04469776526093483,
      0.039052851498126984,
      -0.05684510990977287,
      -0.01621769741177559,
      -0.019898302853107452,
      -0.014197601936757565,
      -0.01315843965858221,
      0.002544240327551961,
      0.036740563809871674,
      0.08707448840141296,
      -0.0019403878832235932,
      0.06920839846134186,
      0.044873714447021484,
      0.01807337999343872,
      -0.013642043806612492,
      -0.06652738898992538,
      0.0005553518421947956,
      0.13077691197395325,
      -0.060845647007226944,
      -0.008433409035205841,
      0.0657743513584137,
      0.04652813449501991,
      -0.05676037073135376,
      0.0660485029220581,
      -0.052610844373703,
      -0.0936814621090889,
      0.07588262110948563,
      -0.07426033169031143,
      -0.06619592010974884,
      0.055593907833099365,
      -0.04659121483564377,
      -0.07589484006166458,
      -0.10021951794624329,
      -0.038516316562891006,
      -0.03160320222377777,
      -0.022130712866783142,
      -0.011172780767083168,
      0.01633497327566147,
      -0.03427501395344734,
      -0.001371428370475769,
      0.01077308226376772,
      0.0234933253377676,
      0.10807886719703674,
      0.009031599387526512,
      0.08678922057151794,
      -0.07079985737800598
    ],
    [
      -0.08680664747953415,
      -0.03901469334959984,
      -0.05731396749615669,
      0.026122666895389557,
      0.027241811156272888,
      -0.027849160134792328,
      0.019242651760578156,
      0.022293124347925186,
      -0.032718658447265625,
      0.01789529249072075,
      0.07215011119842529,
      -0.01732405461370945,
      0.017880115658044815,
      -0.032118141651153564,
      -0.040888071060180664,
      0.007157979067414999,
      -0.028144093230366707,
      -0.0712316557765007,
      0.04390086233615875,
      0.050518378615379333,
      0.019873401150107384,
      -0.07637887448072433,
      -0.07910436391830444,
      0.027943730354309082,
      -0.06485868245363235,
      -0.005207418464124203,
      0.07940148562192917,
      0.06730245798826218,
      -0.04166681692004204,
      -0.009255548939108849,
      0.0819304808974266,
      0.02483600378036499,
      -0.0726589560508728,
      -0.003482743864879012,
      -0.0015399291878566146,
      -0.038934510201215744,
      0.11821994930505753,
      -0.011231828480958939,
      -0.06501318514347076,
      -0.002911199349910021,
      0.05516473203897476,
      -0.08936344087123871,
      0.006841515190899372,
      -0.04977812618017197,
      -0.01141444593667984,
      0.022002151235938072,
      0.021424375474452972,
      -0.006185121368616819,
      -0.06050925701856613,
      -0.012118017300963402,
      0.025934142991900444,
      0.005816266871988773,
      -0.015225907787680626,
      0.10926462709903717,
      -0.015039126388728619,
      0.008046434260904789,
      -0.0025558839552104473,
      -0.06143925338983536,
      -0.03189545124769211,
      -0.00020919734379276633,
      -0.0014864607946947217,
      -0.0020252279937267303,
      -0.07973555475473404,
      0.05327088385820389,
      -0.015488485805690289,
      0.04153814911842346,
      0.050489865243434906,
      0.07373002916574478,
      0.010630430653691292,
      -0.08188667893409729,
      -0.07223869860172272,
      -0.030582260340452194,
      -0.02402495965361595,
      -0.004686213564127684,
      0.06285685300827026,
      0.11984825879335403,
      0.03905803710222244,
      -0.011635021306574345,
      -0.011493843980133533,
      -0.12897422909736633,
      0.028814738616347313,
      0.0679662898182869,
      -0.0072917090728878975,
      0.031548649072647095,
      -0.010627866722643375,
      0.06693548709154129,
      0.045224253088235855,
      0.015449301339685917,
      -0.041031308472156525,
      -0.010325265116989613,
      0.1591564267873764,
      -0.0022456806618720293,
      -0.04363749548792839,
      0.009851181879639626,
      0.1135331392288208,
      0.09393846243619919,
      -0.005278310738503933,
      -0.049898095428943634,
      0.10228335112333298,
      0.016858696937561035,
      0.015343516133725643,
      -0.012931919656693935,
      0.028527071699500084,
      0.008685220032930374,
      0.015525245107710361,
      0.03441736474633217,
      -0.007208690512925386,
      -0.04759495332837105,
      0.07082974910736084,
      -0.007593083661049604,
      -0.00533042848110199,
      -0.0016736815450713038,
      -0.011167633347213268,
      -0.04266306385397911,
      -0.03746380656957626,
      -0.0132784778252244,
      -0.09705241769552231,
      0.006515449844300747,
      0.00147095019929111,
      0.010065357200801373,
      0.018515750765800476,
      0.046499691903591156,
      -0.04497283324599266,
      0.009855263866484165,
      0.0720185711979866,
      0.012460529804229736,
      -0.0952313020825386,
      4.046654731069079e-33,
      -0.030404750257730484,
      -0.002029786352068186,
      -0.0008113475050777197,
      0.042949382215738297,
      -0.013743055053055286,
      0.014678234234452248,
      0.07225366681814194,
      0.07685968279838562,
      -0.03560850769281387,
      0.09474162012338638,
      -0.021860396489501,
      0.026728469878435135,
      -0.032536644488573074,
      0.02520972676575184,
      -0.05648494139313698,
      -0.02646300196647644,
      -0.010697375051677227,
      -0.047528207302093506,
      0.051566231995821,
      0.0972638875246048,
      0.03601286932826042,
      -0.06971946358680725,
      0.06911352276802063,
      -0.13238580524921417,
      0.06680770218372345,
      0.03649712726473808,
      -0.012020917609333992,
      0.04254436865448952,
      -0.029842041432857513,
      -0.01236761175096035,
      -0.0714368000626564,
      -0.03335640951991081,
      0.03532933443784714,
      0.09455369412899017,
      0.005368986167013645,
      0.026633456349372864,
      -0.022087683901190758,
      -0.12104611098766327,
      -0.04983965680003166,
      -0.022193383425474167,
      0.008821003139019012,
      -0.006853498984128237,
      -0.09719260782003403,
      0.01771017536520958,
      -0.004048169124871492,
      -0.0037466329522430897,
      0.02930140309035778,
      -0.001716220984235406,
      0.06088443845510483,
      0.0163048654794693,
      -0.029282893985509872,
      -0.017607305198907852,
      -0.050828419625759125,
      -0.07096070796251297,
      -0.020622817799448967,
      -0.06410246342420578,
      -0.07290752977132797,
      -0.03311628848314285,
      0.012756502255797386,
      0.1175263524055481,
      -0.09071183204650879,
      -0.0632316917181015,
      -0.09588940441608429,
      0.043192990124225616,
      -0.06539801508188248,
      0.07852930575609207,
      -0.09583064913749695,
      -0.139853373169899,
      0.010801713913679123,
      -0.03652571514248848,
      0.0040101404301822186,
      0.027337605133652687,
      0.0040145982056856155,
      0.05742292478680611,
      0.08193547278642654,
      0.025088373571634293,
      -0.03380890563130379,
      0.05969248712062836,
      0.010250965133309364,
      0.01193530298769474,
      -0.053338080644607544,
      -0.00696762278676033,
      0.01776179112493992,
      0.13721732795238495,
      -0.002670048736035824,
      -0.037977185100317,
      0.009140508249402046,
      -0.0501895397901535,
      -0.01642586663365364,
      -0.1000797376036644,
      0.03794312849640846,
      0.002036189427599311,
      0.016481606289744377,
      0.021150339394807816,
      0.12152276188135147,
      -5.681042239985218e-33,
      -0.05938224494457245,
      0.014674180187284946,
      -0.008737458847463131,
      -0.0037820946890860796,
      0.04327651858329773,
      0.013029791414737701,
      0.010205601342022419,
      0.06552078574895859,
      0.03798263892531395,
      0.011191965080797672,
      0.017356283962726593,
      -0.026514975354075432,
      -0.0358215756714344,
      -0.11575687676668167,
      -0.033755555748939514,
      -0.027652736753225327,
      -0.029275579378008842,
      -0.09053679555654526,
      0.06319088488817215,
      -0.003299885196611285,
      0.027074549347162247,
      0.10587535798549652,
      -0.019486520439386368,
      -0.0719757229089737,
      -0.020403603091835976,
      -0.017033634707331657,
      0.004120763391256332,
      -0.04847925901412964,
      0.010219618678092957,
      0.08941364288330078,
      0.006712471134960651,
      -0.019482048228383064,
      0.0330950990319252,
      0.05745162442326546,
      -0.018516840413212776,
      0.017892707139253616,
      0.05867033451795578,
      0.06069374084472656,
      0.04532875120639801,
      0.009062541648745537,
      0.06285477429628372,
      0.038056377321481705,
      -0.030861549079418182,
      -0.09425894170999527,
      0.0029884346295148134,
      0.0664469301700592,
      -0.08440801501274109,
      0.026772111654281616,
      0.01778281107544899,
      0.008884266018867493,
      0.008496935479342937,
      0.036270540207624435,
      0.038008030503988266,
      0.02888556569814682,
      -0.06725765019655228,
      0.047387558966875076,
      0.11719505488872528,
      0.032057132571935654,
      -0.01579643040895462,
      -0.003325787140056491,
      -0.0006163096986711025,
      -0.035836201161146164,
      0.007073164451867342,
      0.1037089005112648,
      0.022802073508501053,
      -0.044013358652591705,
      0.0604897104203701,
      -0.09643222391605377,
      -0.0027977158315479755,
      0.00022144033573567867,
      -0.048016246408224106,
      -0.0299729835242033,
      -0.02587430737912655,
      -0.06604722887277603,
      0.08955502510070801,
      -0.05723271146416664,
      -0.029315078631043434,
      -0.08771765232086182,
      0.017813002690672874,
      0.03422119840979576,
      -0.013015382923185825,
      0.012728696689009666,
      -0.0016304441960528493,
      0.0361962728202343,
      0.01156721543520689,
      0.06813927739858627,
      0.09413817524909973,
      -0.04934446141123772,
      -0.00483884708955884,
      -0.03903166204690933,
      -0.05272383615374565,
      -0.0030086368788033724,
      -0.046695586293935776,
      0.0030351297464221716,
      -0.006789212580770254,
      -6.053046064380396e-08,
      -0.04980268329381943,
      -0.08693192899227142,
      -0.028998184949159622,
      0.02733715809881687,
      -0.0033842434640973806,
      -0.009528949856758118,
      -0.014833829365670681,
      0.041709259152412415,
      -0.023478003218770027,
      0.08165484666824341,
      0.030660558491945267,
      0.05898940935730934,
      -0.05874338001012802,
      -0.015678593888878822,
      0.02054871991276741,
      -0.012431027367711067,
      0.014729738235473633,
      -0.032249316573143005,
      -0.06703552603721619,
      0.006678889971226454,
      -0.03686745464801788,
      0.039771463721990585,
      -0.0319615937769413,
      -0.0007089630234986544,
      0.009997699409723282,
      0.0014318410539999604,
      0.10577628016471863,
      0.11612094193696976,
      -0.0240012239664793,
      -0.026500279083848,
      0.04152562469244003,
      -0.02725350297987461,
      -0.044043682515621185,
      -0.019559567794203758,
      -0.07396531105041504,
      0.060096338391304016,
      -0.03460105136036873,
      0.03872410207986832,
      0.02402476593852043,
      0.06638676673173904,
      -0.03676418587565422,
      0.04149492457509041,
      0.009576798416674137,
      -0.022307179868221283,
      0.06422372162342072,
      -0.07399451732635498,
      -0.16587424278259277,
      -0.011285459622740746,
      -0.02133864164352417,
      -0.04225245490670204,
      0.029694918543100357,
      0.015610476024448872,
      0.012275773100554943,
      -0.05552659183740616,
      0.00926382839679718,
      -0.06156804785132408,
      -0.005589550826698542,
      0.04335575923323631,
      -0.0131580401211977,
      0.02134045772254467,
      0.09841174632310867,
      0.015122785232961178,
      0.022578537464141846,
      -0.060354992747306824
    ],
    [
      -0.01982257142663002,
      -0.01295051071792841,
      -0.07268277555704117,
      0.019641708582639694,
      0.01292443461716175,
      -0.08775434643030167,
      -0.02586512453854084,
      0.026081664487719536,
      -0.0557449534535408,
      -0.009463277645409107,
      0.08130372315645218,
      -0.09252278506755829,
      0.012937840074300766,
      -0.09091655164957047,
      0.0497739277780056,
      0.01578730158507824,
      0.011228772811591625,
      -0.04910680279135704,
      0.024386955425143242,
      -0.059165772050619125,
      0.04747636243700981,
      -0.06938137114048004,
      -0.04972381889820099,
      0.012681097723543644,
      -0.06585804373025894,
      -0.022881431505084038,
      0.01697602868080139,
      0.051083583384752274,
      -0.05237969756126404,
      -0.020935405045747757,
      0.09641671180725098,
      -0.048515684902668,
      -0.11461775749921799,
      0.0007088687270879745,
      -0.032928887754678726,
      0.018139274790883064,
      0.029269998893141747,
      -0.028071362525224686,
      -0.03502800315618515,
      -0.06032794713973999,
      0.04250062629580498,
      -0.06499563902616501,
      -0.03882255777716637,
      -0.04666053503751755,
      -0.023447653278708458,
      -0.009654393419623375,
      0.05610010400414467,
      0.025265680626034737,
      -0.028604606166481972,
      -0.06767374277114868,
      0.0183551162481308,
      -0.07079073786735535,
      -0.013469441793859005,
      0.07849754393100739,
      -0.029542166739702225,
      0.012468341737985611,
      0.04563406482338905,
      -0.07415516674518585,
      -0.043022479861974716,
      -0.006042314227670431,
      0.013893297873437405,
      0.02962467446923256,
      -0.05955648049712181,
      0.06245419755578041,
      -0.05691515654325485,
      0.0052644978277385235,
      0.09900067001581192,
      0.08650334179401398,
      0.015833958983421326,
      -0.02464095503091812,
      -0.008324999362230301,
      -0.04541940614581108,
      -0.006929123308509588,
      -0.0029144580475986004,
      0.023183176293969154,
      0.06556565314531326,
      0.030603058636188507,
      0.013124513439834118,
      -0.03745826333761215,
      -0.09323015809059143,
      0.05661294609308243,
      0.03449581190943718,
      -0.016733558848500252,
      0.019824285060167313,
      -0.008152760565280914,
      0.012642418034374714,
      0.04914199560880661,
      0.09476353973150253,
      0.002541289431974292,
      0.0405985489487648,
      0.1216515377163887,
      0.04322395473718643,
      -0.050748225301504135,
      0.006679054815322161,
      0.12996715307235718,
      0.11602933704853058,
      0.033494140952825546,
      -0.05296356603503227,
      0.06961391866207123,
      0.0340922549366951,
      0.03453202545642853,
      -0.0047683632001280785,
      -0.04809544235467911,
      -0.0400717556476593,
      -0.01827155239880085,
      0.04170558229088783,
      -0.007296224590390921,
      -0.0475182831287384,
      0.041520122438669205,
      0.0436091385781765,
      0.01829828880727291,
      -0.040769871324300766,
      -0.038904350250959396,
      -0.014589193277060986,
      -0.033278688788414,
      0.10938551276922226,
      -0.0020260035526007414,
      0.004193725995719433,
      0.10103192925453186,
      0.010772176086902618,
      0.03312774747610092,
      0.046289846301078796,
      -0.003676550230011344,
      0.01508686039596796,
      0.09039126336574554,
      0.06536857038736343,
      -0.005019029602408409,
      5.211536204613365e-33,
      -0.07238887250423431,
      0.009589103050529957,
      -0.08099929243326187,
      0.0710240826010704,
      0.017807304859161377,
      0.04076460376381874,
      0.07087492942810059,
      0.0492330901324749,
      -0.0045972829684615135,
      0.06599940359592438,
      -0.05250292271375656,
      -0.021648278459906578,
      0.013635747134685516,
      0.0035978464875370264,
      -0.07973474264144897,
      -0.09724408388137817,
      0.019088272005319595,
      -0.02826669067144394,
      0.02316456474363804,
      0.06172039732336998,
      0.02116045542061329,
      -0.13609421253204346,
      0.03887062892317772,
      -0.06594067811965942,
      0.03428775444626808,
      -0.016136711463332176,
      0.006151674780994654,
      -0.029697632417082787,
      0.012697658501565456,
      0.0167723149061203,
      -0.04126717150211334,
      -0.005603975150734186,
      -0.0014179993886500597,
      0.09925380349159241,
      -0.007348991930484772,
      -0.03231645002961159,
      -0.06534474343061447,
      -0.1113535463809967,
      0.02050831913948059,
      -0.02788165584206581,
      -0.05812612175941467,
      -0.04883392155170441,
      -0.12591023743152618,
      0.0017473949119448662,
      -0.06439926475286484,
      0.009989125654101372,
      -0.04474172741174698,
      0.01999332197010517,
      0.079165980219841,
      -0.018606238067150116,
      0.01910790428519249,
      -0.0030520737636834383,
      0.0025072325952351093,
      -0.1327609419822693,
      0.05642637982964516,
      0.021681876853108406,
      -0.049224741756916046,
      -0.019176973029971123,
      0.0007380919414572418,
      0.06011572852730751,
      -0.04697974771261215,
      -0.009555162861943245,
      -0.07216194272041321,
      0.04699841886758804,
      -0.019642867147922516,
      0.06657272577285767,
      -0.1490580290555954,
      -0.10852719843387604,
      -0.0031033854465931654,
      -0.05982732027769089,
      0.005356248933821917,
      -0.0264152679592371,
      0.014453900046646595,
      0.027534229680895805,
      0.03424401953816414,
      0.02171211875975132,
      -0.002145987469702959,
      0.05447213351726532,
      -0.0032737362198531628,
      0.02225634641945362,
      -0.007051900960505009,
      0.013460980728268623,
      -0.020951272919774055,
      0.051415957510471344,
      0.06072062626481056,
      -0.04739340767264366,
      -0.05238395556807518,
      -0.0076975408010184765,
      -0.018453851342201233,
      -0.05619880557060242,
      0.052493564784526825,
      0.015501025132834911,
      0.07007063180208206,
      0.04318762570619583,
      0.09421799331903458,
      -6.363969927666411e-33,
      -0.018875455483794212,
      0.03327970206737518,
      -0.009620570577681065,
      0.05778951570391655,
      0.07593536376953125,
      -0.02480180189013481,
      -0.057283975183963776,
      0.11127299070358276,
      0.025283750146627426,
      0.07101579010486603,
      -0.0665329322218895,
      0.008093159645795822,
      -0.037755340337753296,
      -0.0900762602686882,
      -0.00041537859942764044,
      -0.048552826046943665,
      0.05909236893057823,
      -0.030083753168582916,
      0.0756601020693779,
      0.0038236859254539013,
      0.031710054725408554,
      0.05543048307299614,
      -0.01618008501827717,
      -0.04443562030792236,
      -0.060878850519657135,
      -0.014467229135334492,
      0.01159375999122858,
      -0.01683087646961212,
      -0.013944859616458416,
      0.048350222408771515,
      -0.03602033853530884,
      -0.03513416275382042,
      0.06012081354856491,
      0.0770651325583458,
      -0.03401515260338783,
      0.07267105579376221,
      0.0859481692314148,
      0.06192607432603836,
      0.061742499470710754,
      0.024835949763655663,
      0.050027936697006226,
      -0.03250532224774361,
      -0.06505903601646423,
      -0.08477236330509186,
      -0.010342493653297424,
      0.108341746032238,
      -0.06478313356637955,
      0.009523482993245125,
      -0.04050412029027939,
      0.007352310232818127,
      -0.03104555793106556,
      0.03559814766049385,
      0.007480713538825512,
      0.006067217327654362,
      0.007020534016191959,
      -0.052078939974308014,
      0.05444279685616493,
      -0.025866791605949402,
      -0.03483699634671211,
      -0.031567782163619995,
      -0.013128098100423813,
      -0.04017318785190582,
      0.028310591354966164,
      0.08362716436386108,
      -0.002535640960559249,
      -0.05686876177787781,
      -0.006605514325201511,
      -0.10193561762571335,
      -0.04947139322757721,
      0.05194547399878502,
      -0.059398576617240906,
      0.03525598719716072,
      -0.0747680515050888,
      -0.035634588450193405,
      0.04646877199411392,
      -0.0597713366150856,
      -0.022187236696481705,
      -0.13420554995536804,
      0.012501592747867107,
      -0.00026466112467460334,
      0.016543880105018616,
      0.029976846650242805,
      -0.0414847731590271,
      0.007230089977383614,
      -0.021373743191361427,
      0.08858302980661392,
      0.06598786264657974,
      0.00804129708558321,
      0.05701690539717674,
      -0.04039449244737625,
      0.008456776849925518,
      0.043165743350982666,
      0.03354457765817642,
      0.012767979875206947,
      0.047837961465120316,
      -6.423250908937916e-08,
      0.03299954906105995,
      -0.012994893826544285,
      0.03911396861076355,
      0.018939845263957977,
      -0.0348086804151535,
      0.047437336295843124,
      0.01110260933637619,
      0.026566598564386368,
      0.050690535455942154,
      0.033900994807481766,
      -0.04541141912341118,
      0.049444716423749924,
      0.058382440358400345,
      0.029870323836803436,
      -0.08241773396730423,
      0.0009048730134963989,
      0.049230027943849564,
      -0.012204229831695557,
      -0.04498845338821411,
      -0.038439515978097916,
      -0.013135071843862534,
      0.0141117163002491,
      0.005161243490874767,
      0.054306261241436005,
      0.0021287696436047554,
      0.03203362599015236,
      0.11719508469104767,
      0.04953880235552788,
      -0.008763467893004417,
      -0.06873486936092377,
      -0.03163827955722809,
      -0.01999976858496666,
      -0.051352646201848984,
      0.05008770897984505,
      -0.08477851003408432,
      0.04742345213890076,
      -0.01203802227973938,
      0.016863390803337097,
      0.04152052849531174,
      0.025352250784635544,
      -0.05229191109538078,
      0.04133989289402962,
      0.02265256829559803,
      -0.04661290720105171,
      0.06204540655016899,
      -0.06414605677127838,
      -0.16949380934238434,
      -0.03338159993290901,
      -0.0014459454687312245,
      -0.03145350515842438,
      0.07008666545152664,
      -0.023755226284265518,
      0.01307168323546648,
      0.0364222414791584,
      0.053147606551647186,
      -0.07107760012149811,
      -0.03661373630166054,
      0.020776160061359406,
      0.06584666669368744,
      0.016751229763031006,
      0.07681949436664581,
      0.025913096964359283,
      -0.027330102398991585,
      -0.09519226849079132
    ],
    [
      -0.046201907098293304,
      0.03126516193151474,
      -0.15091897547245026,
      -0.005248721223324537,
      0.08951440453529358,
      -0.058832038193941116,
      0.00029614573577418923,
      -0.034139394760131836,
      0.004676079377532005,
      0.007551669143140316,
      0.10102443397045135,
      -0.01933326944708824,
      0.022550666704773903,
      -0.06640409678220749,
      -0.03156587481498718,
      -0.020451687276363373,
      0.05344259366393089,
      -0.02721123956143856,
      0.031449608504772186,
      0.028489911928772926,
      -0.03267105668783188,
      0.023390844464302063,
      -0.03862135857343674,
      0.05483809486031532,
      -0.04512365907430649,
      -0.01713138073682785,
      0.026595376431941986,
      0.0316002331674099,
      -0.015409566462039948,
      -0.06497099995613098,
      0.1456519514322281,
      0.06488002091646194,
      -0.0746922641992569,
      0.04841213673353195,
      -0.05137649178504944,
      0.0037334347143769264,
      -0.020072009414434433,
      -0.029298085719347,
      -0.00675817858427763,
      -0.07035864889621735,
      0.01165829785168171,
      -0.017215000465512276,
      -0.01289578527212143,
      0.04988657683134079,
      -0.04697256162762642,
      0.029364969581365585,
      0.04579012840986252,
      -0.04797101020812988,
      -0.035625159740448,
      -0.03832332789897919,
      0.05630367249250412,
      0.10395590215921402,
      -0.03015049733221531,
      0.10934317111968994,
      0.009107042104005814,
      -0.011701881885528564,
      -0.07901785522699356,
      -0.10285608470439911,
      -0.03733118250966072,
      0.08721684664487839,
      -0.014174436219036579,
      0.025940921157598495,
      -0.01130519900470972,
      -0.005132689606398344,
      -0.016186317428946495,
      -0.025642499327659607,
      0.07431196421384811,
      0.022759506478905678,
      0.04918880760669708,
      -0.13565443456172943,
      0.004893103614449501,
      -0.015538131818175316,
      -0.02369152382016182,
      0.027275560423731804,
      0.028540732339024544,
      0.0325089655816555,
      -0.053167980164289474,
      0.0028091161511838436,
      0.009684640914201736,
      -0.04757655784487724,
      -0.020388761535286903,
      -0.03635212779045105,
      0.060409754514694214,
      -0.029943829402327538,
      0.040747854858636856,
      0.008250449784100056,
      -0.0075969635508954525,
      0.03560248762369156,
      0.011193147860467434,
      0.10862631350755692,
      0.059813302010297775,
      0.04427283629775047,
      -0.055902086198329926,
      0.022640712559223175,
      0.07120576500892639,
      0.009831198491156101,
      0.053338244557380676,
      -0.028303109109401703,
      0.1236344650387764,
      0.08098867535591125,
      0.031744662672281265,
      0.12803952395915985,
      -0.01202230341732502,
      -0.0007482742075808346,
      -0.0765085369348526,
      -0.03091716766357422,
      0.0014086461160331964,
      -0.004008040763437748,
      0.0013261561980471015,
      0.023040486499667168,
      0.023685190826654434,
      0.011115873232483864,
      -0.051646627485752106,
      -0.10063451528549194,
      -0.05314627289772034,
      0.05054064467549324,
      -0.1013464704155922,
      0.0016031668055802584,
      -0.0026415162719786167,
      0.018581392243504524,
      -0.039595045149326324,
      0.028669195249676704,
      -0.0010251107160001993,
      0.06285656988620758,
      0.00723668560385704,
      0.013561926782131195,
      -0.04017724096775055,
      5.558719563154681e-33,
      -0.008982080034911633,
      -0.03672104701399803,
      0.002233378356322646,
      0.015675006434321404,
      -0.0021163467317819595,
      0.08401449769735336,
      0.03795897588133812,
      0.016159141436219215,
      0.03061365708708763,
      0.005289615131914616,
      -0.08859269320964813,
      -0.0005738332984037697,
      0.03348049893975258,
      -0.0031311241909861565,
      -0.044460006058216095,
      -0.04927965626120567,
      -0.026733767241239548,
      -0.019632330164313316,
      -0.011896312236785889,
      -0.0006328928284347057,
      0.05657419562339783,
      -0.0005050163599662483,
      0.07900655269622803,
      -0.12250599265098572,
      0.02383403666317463,
      0.05071843042969704,
      0.012021795846521854,
      0.002751135267317295,
      0.04814162105321884,
      0.04481884092092514,
      -0.06785639375448227,
      0.01750270463526249,
      -0.013413348235189915,
      0.04756017029285431,
      0.09547661989927292,
      0.05217846482992172,
      -0.08401558548212051,
      -0.10139232128858566,
      -0.10566972941160202,
      -0.012454213574528694,
      0.07744551450014114,
      -0.03257539123296738,
      -0.052258171141147614,
      -0.011906392872333527,
      -0.12304079532623291,
      -0.015179930254817009,
      -0.07914797216653824,
      0.014552502892911434,
      0.0508757010102272,
      0.04005058854818344,
      0.045655135065317154,
      -0.019032327458262444,
      0.03133908286690712,
      -0.12232484668493271,
      0.019813835620880127,
      -0.0005954290390945971,
      -0.023811014369130135,
      -0.04823914170265198,
      0.016588974744081497,
      0.13490533828735352,
      -0.06775251030921936,
      0.06489771604537964,
      -0.023599863052368164,
      0.03425506502389908,
      -0.04563663899898529,
      0.029257846996188164,
      -0.08785850554704666,
      -0.07749699056148529,
      0.007526305038481951,
      0.007209065370261669,
      -0.03496352955698967,
      0.05217090994119644,
      0.07551305741071701,
      0.023990090936422348,
      0.05209432542324066,
      0.030895715579390526,
      -0.035017017275094986,
      -0.028929278254508972,
      0.041397593915462494,
      -0.05267082899808884,
      -0.0035225353203713894,
      -0.036886509507894516,
      0.034533608704805374,
      0.015160069800913334,
      -0.030809268355369568,
      0.005773717071861029,
      -0.12382777780294418,
      -0.05421704426407814,
      0.024557629600167274,
      -0.09482432156801224,
      0.04068024829030037,
      -0.023412441834807396,
      0.003678989363834262,
      -0.005228313151746988,
      0.028686467558145523,
      -7.512206768545038e-33,
      -0.01888933964073658,
      -0.008224232122302055,
      -0.037155598402023315,
      0.04107687622308731,
      0.03317979350686073,
      -0.00647525442764163,
      0.029044555500149727,
      0.012421620078384876,
      -0.03614656254649162,
      0.00015662000805605203,
      -0.024954568594694138,
      -0.05981096625328064,
      -0.01684139110147953,
      -0.09890356659889221,
      0.07829712331295013,
      -0.019264506176114082,
      -0.012938153930008411,
      -0.06247553601861,
      0.0052520050667226315,
      0.04951636493206024,
      -0.06291904300451279,
      0.045324016362428665,
      0.024960381910204887,
      -0.009984740056097507,
      -0.030971381813287735,
      0.016833798959851265,
      0.0509917326271534,
      -0.014194021001458168,
      0.0526546984910965,
      0.019837919622659683,
      0.016413439065217972,
      -0.029081841930747032,
      0.014740144833922386,
      -0.00348779559135437,
      -0.07468121498823166,
      -0.008906083181500435,
      0.10439764708280563,
      0.07766420394182205,
      -0.0010099542560055852,
      -0.014635664410889149,
      0.04825563356280327,
      0.0969313234090805,
      -0.05423009768128395,
      -0.01707156002521515,
      -0.0023634228855371475,
      0.06350982934236526,
      -0.04492320865392685,
      0.08922354876995087,
      0.11404819041490555,
      -0.022810326889157295,
      0.03579853102564812,
      -0.05037422478199005,
      0.027587175369262695,
      0.040881477296352386,
      0.028795640915632248,
      0.008931973949074745,
      0.023671699687838554,
      -0.019126811996102333,
      -0.02388252690434456,
      -0.027835922315716743,
      -0.002383629558607936,
      -0.0309719480574131,
      -0.0001594057393958792,
      0.06957318633794785,
      0.08598633110523224,
      -0.03985566273331642,
      0.03836709260940552,
      -0.04655084013938904,
      -0.11453671753406525,
      0.02145043946802616,
      0.07265926152467728,
      -0.04170367866754532,
      -0.06644266098737717,
      -0.02318359538912773,
      0.13941262662410736,
      -0.03087194822728634,
      0.013714603148400784,
      -0.08248970657587051,
      -0.013924538157880306,
      0.01365869864821434,
      0.03386802226305008,
      -0.00998286996036768,
      0.0244126133620739,
      0.08195922523736954,
      0.0634867325425148,
      -0.011056650429964066,
      0.008426187559962273,
      0.0056763035245239735,
      0.0459052249789238,
      -0.08327369391918182,
      -0.03030412644147873,
      0.04078550264239311,
      -0.07167798280715942,
      -0.0028900953475385904,
      0.04099398851394653,
      -6.684935982548268e-08,
      -0.07965642958879471,
      -0.07650607824325562,
      -0.07258842140436172,
      0.04076983034610748,
      0.05591993406414986,
      0.0041277590207755566,
      -0.015335693955421448,
      0.004951319191604853,
      0.010247536934912205,
      -0.04178940877318382,
      -0.04441213980317116,
      0.016612399369478226,
      -0.04944070428609848,
      -0.10449669510126114,
      0.05269169807434082,
      -0.004426374100148678,
      0.04793848842382431,
      -0.025882016867399216,
      -0.051090747117996216,
      -0.05365806072950363,
      -0.04873175173997879,
      -0.02116583287715912,
      0.00406570453196764,
      -0.027466323226690292,
      0.04497545212507248,
      0.026061926037073135,
      0.05255082622170448,
      0.1645728349685669,
      0.023613080382347107,
      -0.05926850065588951,
      -0.016719555482268333,
      -0.030894674360752106,
      0.005689113866537809,
      -0.018261147662997246,
      -0.06808505207300186,
      0.061254385858774185,
      0.0203723032027483,
      -0.012542126700282097,
      0.014572328887879848,
      0.009619568474590778,
      -0.06170731037855148,
      -0.012428986839950085,
      0.0005978087428957224,
      -0.003942999988794327,
      -0.0009041373268701136,
      0.0073953852988779545,
      -0.0989050418138504,
      0.02749587595462799,
      -0.038118936121463776,
      -0.027032695710659027,
      -0.026347100734710693,
      -0.039440952241420746,
      0.04622342810034752,
      0.07787575572729111,
      -0.009326396510004997,
      -0.0150719890370965,
      -0.04962489381432533,
      -0.059144068509340286,
      0.071849524974823,
      -0.044859930872917175,
      0.12941545248031616,
      -0.05742023512721062,
      -0.0006158190662972629,
      0.005935034714639187
    ],
    [
      -0.08333681523799896,
      -0.04433629661798477,
      -0.05588393285870552,
      0.041265085339546204,
      0.06097831204533577,
      0.04329647123813629,
      -0.06924187391996384,
      0.12835991382598877,
      -0.07997692376375198,
      0.03232549503445625,
      -0.03724019601941109,
      -0.07025130093097687,
      -0.028838859871029854,
      -0.00030025248997844756,
      0.03821443393826485,
      -0.001681039109826088,
      0.016635935753583908,
      -0.07961024343967438,
      0.1235283687710762,
      0.03098358027637005,
      -0.03661418706178665,
      -0.01732018031179905,
      0.003700433298945427,
      0.014662965200841427,
      -0.022402197122573853,
      -0.029511544853448868,
      -0.07129617035388947,
      -0.026783626526594162,
      -0.04113556444644928,
      0.010295359417796135,
      0.10719034820795059,
      0.05176512897014618,
      -0.00319040403701365,
      0.023757899180054665,
      0.0045392271131277084,
      0.06878633797168732,
      0.011161153204739094,
      0.02352575771510601,
      -0.008586782962083817,
      -0.04771122336387634,
      0.04620622098445892,
      -0.03624805808067322,
      0.04851517453789711,
      -0.09564359486103058,
      0.018807949498295784,
      -0.0456458181142807,
      0.04203285276889801,
      -0.03583517298102379,
      -0.011384506709873676,
      -0.010287855751812458,
      0.009377987124025822,
      0.008318864740431309,
      -0.013966207392513752,
      -0.0744640901684761,
      0.013174372725188732,
      -0.06449917703866959,
      0.05190647020936012,
      0.010364006273448467,
      0.013940377160906792,
      0.046031270176172256,
      0.006087696645408869,
      0.021192165091633797,
      0.0017251241952180862,
      -0.019072681665420532,
      0.011802120134234428,
      0.036842674016952515,
      -0.00013997749192640185,
      0.14533761143684387,
      0.047358013689517975,
      -0.023364907130599022,
      0.004414491821080446,
      0.015814702957868576,
      0.013748308643698692,
      -0.0019228397868573666,
      0.042075853794813156,
      -0.010889790952205658,
      -0.027713777497410774,
      0.06799914687871933,
      -0.007492384407669306,
      -0.06324386596679688,
      -0.07573770731687546,
      -0.0033374938648194075,
      0.036250948905944824,
      0.005796931218355894,
      -0.0363224595785141,
      0.07287323474884033,
      0.04332245886325836,
      -0.0049899304285645485,
      0.04472993314266205,
      0.04725111648440361,
      0.09018217772245407,
      0.01601589098572731,
      -0.09466887265443802,
      0.02135622315108776,
      0.0793289765715599,
      -0.04314030334353447,
      -0.057194460183382034,
      0.014824067242443562,
      0.02199428901076317,
      0.049831513315439224,
      -0.05412405729293823,
      -0.03113555908203125,
      0.05180864781141281,
      -0.003010784275829792,
      0.0053555830381810665,
      0.013761918991804123,
      0.04925002157688141,
      -0.02998790703713894,
      -0.020110243931412697,
      -0.04498666524887085,
      0.05311260744929314,
      0.022744005545973778,
      0.018116729333996773,
      -0.09986505657434464,
      -0.035750892013311386,
      0.03544279560446739,
      -0.03058266080915928,
      -0.05531670153141022,
      -0.0009101470350287855,
      0.03300749883055687,
      0.03665994852781296,
      -0.04565151035785675,
      0.0005920625408180058,
      0.04846295341849327,
      0.028139131143689156,
      -0.025777453556656837,
      0.01802721992135048,
      8.06331525440899e-33,
      0.00598942069336772,
      0.004108231980353594,
      -0.01732943207025528,
      0.13569390773773193,
      0.07301313430070877,
      0.003822054946795106,
      0.0928155779838562,
      0.03812494874000549,
      -0.09493444859981537,
      0.0863507091999054,
      0.03152903541922569,
      -0.015583283267915249,
      -0.07435473054647446,
      0.022492047399282455,
      -0.07797832787036896,
      -0.11912695318460464,
      -0.017091605812311172,
      -0.0827852189540863,
      0.005122729577124119,
      -0.05954434722661972,
      0.03337846323847771,
      -0.020238207653164864,
      -0.03628816828131676,
      -0.03367037698626518,
      0.003526281099766493,
      0.023007944226264954,
      0.06407374143600464,
      0.019306423142552376,
      -0.037913598120212555,
      -0.015437036752700806,
      0.07088560611009598,
      -0.07385482639074326,
      -0.025084130465984344,
      0.06425226479768753,
      0.032120268791913986,
      -0.05991952121257782,
      -0.027051977813243866,
      0.04618921875953674,
      -0.11814732104539871,
      0.03997732326388359,
      0.06438355147838593,
      -0.03087894804775715,
      -0.08310078084468842,
      0.010573218576610088,
      0.11729105561971664,
      -0.033826492726802826,
      0.007037936244159937,
      0.029635021463036537,
      0.09626827389001846,
      -0.032965291291475296,
      0.03801211342215538,
      -0.019658464938402176,
      -0.04910317808389664,
      -0.0029412293806672096,
      0.03764943778514862,
      -0.012045535258948803,
      -0.049528542906045914,
      -0.02048664167523384,
      0.06881697475910187,
      0.04164014011621475,
      -0.02837960794568062,
      -0.0803394690155983,
      -0.06967217475175858,
      -0.033598195761442184,
      -0.010053467936813831,
      -0.02063552662730217,
      -0.06932581961154938,
      -0.09943605959415436,
      0.05528341606259346,
      0.0018658237531781197,
      0.04441540315747261,
      -0.012683941051363945,
      -0.029678793624043465,
      0.1326635181903839,
      0.05880262330174446,
      0.0009299303055740893,
      -0.03248278796672821,
      0.07190253585577011,
      -0.011382977478206158,
      -0.05109284073114395,
      -0.05686116963624954,
      -0.004150743596255779,
      -0.009917959570884705,
      0.0836230218410492,
      0.03840265050530434,
      -0.07713725417852402,
      -0.009570234455168247,
      -0.027412226423621178,
      0.04177279397845268,
      -0.08728337287902832,
      -0.014959602616727352,
      -0.05043044686317444,
      0.05187799781560898,
      -0.06695927679538727,
      0.03380146622657776,
      -8.141697952405789e-33,
      -0.05586246773600578,
      0.001323316479101777,
      -0.09014767408370972,
      0.027625566348433495,
      0.031802769750356674,
      -0.027367139235138893,
      0.06999202072620392,
      0.06234043464064598,
      -0.014769348315894604,
      0.041944924741983414,
      0.0010163948172703385,
      -0.05977131798863411,
      0.02999880723655224,
      -0.02707710862159729,
      -0.08165843039751053,
      0.05511949211359024,
      -0.1217740997672081,
      -0.06548358500003815,
      0.045033447444438934,
      0.03788495808839798,
      -0.032361727207899094,
      -0.014949724078178406,
      0.13890822231769562,
      0.012855342589318752,
      -0.06564319878816605,
      0.05426190420985222,
      -0.012088104151189327,
      0.07283881306648254,
      0.02367638796567917,
      0.07134262472391129,
      0.0014554999070242047,
      0.029548171907663345,
      -0.04951569065451622,
      0.06462247669696808,
      -0.015101922675967216,
      -0.007904784753918648,
      0.07534781098365784,
      0.09971439093351364,
      -0.05658688396215439,
      -0.011440299451351166,
      0.041872330009937286,
      -0.02649706043303013,
      -0.07797037810087204,
      -0.026490341871976852,
      -0.049059074372053146,
      0.03281722217798233,
      0.00981578603386879,
      -0.018793966621160507,
      0.01791839301586151,
      -0.0525810569524765,
      0.02471345104277134,
      -0.0655621886253357,
      0.040363479405641556,
      -0.039396174252033234,
      -0.043178390711545944,
      -0.015869315713644028,
      0.1401187926530838,
      -0.06156155467033386,
      -0.061247244477272034,
      0.07020053267478943,
      0.0870598629117012,
      -0.10754315555095673,
      0.0630447193980217,
      -0.03186464309692383,
      0.04505892097949982,
      -0.05633540451526642,
      -0.05233663693070412,
      0.02556947059929371,
      -0.06904657185077667,
      0.04750578850507736,
      -0.048319388180971146,
      -0.055531758815050125,
      -0.01725570112466812,
      -0.006579425185918808,
      0.0685005709528923,
      -0.045339468866586685,
      0.055177684873342514,
      -0.001589341671206057,
      0.07583776116371155,
      0.038923539221286774,
      -0.013366419821977615,
      -0.044243406504392624,
      -0.027359986677765846,
      -0.04918495565652847,
      -0.03830113634467125,
      0.02711193449795246,
      0.12291375547647476,
      0.04392334818840027,
      0.0244528129696846,
      0.008305351249873638,
      -0.05701206997036934,
      0.044687412679195404,
      -0.013459283858537674,
      0.016005270183086395,
      0.010017108172178268,
      -6.424480147870781e-08,
      -0.04223809391260147,
      -0.06455647200345993,
      -0.06445647776126862,
      -0.029057879000902176,
      -0.019814008846879005,
      -0.01674065738916397,
      0.04121707007288933,
      -0.07561478763818741,
      -0.08776383101940155,
      -0.03351230174303055,
      -0.08081309497356415,
      0.031898386776447296,
      -0.006778114475309849,
      0.00022691546473652124,
      0.08506971597671509,
      -0.053208716213703156,
      -0.013188100419938564,
      0.10117930918931961,
      -0.08930657804012299,
      0.0028512156568467617,
      -0.016637256368994713,
      0.03676231950521469,
      0.006259163375943899,
      -0.07121101766824722,
      0.03005889058113098,
      0.049366146326065063,
      0.003936173394322395,
      -0.016721084713935852,
      0.03134428337216377,
      0.07224249094724655,
      0.04366028308868408,
      0.009462659247219563,
      -0.050352223217487335,
      -0.03564558923244476,
      -0.046602506190538406,
      0.06363409757614136,
      0.015615957789123058,
      -0.02988240495324135,
      0.029308926314115524,
      0.015070803463459015,
      -0.06139035522937775,
      0.09157166630029678,
      -0.03227869048714638,
      -0.04222792387008667,
      -0.012252137064933777,
      -0.0720803290605545,
      -0.057478904724121094,
      0.05070200935006142,
      -0.007154166232794523,
      0.06349470466375351,
      0.013716762885451317,
      0.006864710710942745,
      -0.03149012476205826,
      -0.03211354464292526,
      -0.05937967449426651,
      0.018319204449653625,
      -0.032473061233758926,
      0.050988320261240005,
      0.022865327075123787,
      -0.02245628833770752,
      -0.016250452026724815,
      -0.03399534150958061,
      0.07516449689865112,
      -0.0396420992910862
    ],
    [
      -0.0023530111648142338,
      0.015966640785336494,
      -0.06267084181308746,
      -0.07542119175195694,
      -0.03672438859939575,
      -0.02387862652540207,
      0.006861494388431311,
      0.0024828368332237005,
      0.008496277965605259,
      0.012941519729793072,
      0.019697638228535652,
      -0.05670290067791939,
      0.04596126824617386,
      0.034823548048734665,
      0.01854296587407589,
      -0.010192647576332092,
      -0.0012497409479692578,
      -0.010307016782462597,
      0.04413638263940811,
      0.10536486655473709,
      0.016284961253404617,
      0.02382335625588894,
      0.006764921825379133,
      0.0766349509358406,
      -0.04845315217971802,
      -0.08221068978309631,
      0.06474869698286057,
      -0.00028414130792953074,
      -0.006876741070300341,
      -0.06281168758869171,
      0.06808722764253616,
      0.0556873083114624,
      -0.02894940972328186,
      -0.005061849486082792,
      0.061554860323667526,
      0.03789898008108139,
      0.06317002326250076,
      0.02964542619884014,
      -0.046976491808891296,
      -0.09210630506277084,
      0.12831448018550873,
      -0.012878027744591236,
      -0.0007000348414294422,
      -0.10044710338115692,
      -0.07576435804367065,
      -0.012731507420539856,
      0.01243608444929123,
      0.005413400009274483,
      -0.05973806977272034,
      -0.011878467164933681,
      0.058454688638448715,
      -0.023083120584487915,
      0.007866322062909603,
      0.09652929753065109,
      -0.0015501222806051373,
      0.007864460349082947,
      -0.0036925231106579304,
      -0.06215095892548561,
      -0.017262810841202736,
      -0.06489931792020798,
      -0.039679575711488724,
      0.09810695797204971,
      -0.01578599028289318,
      -0.02619844861328602,
      0.01167245116084814,
      0.05872688814997673,
      -0.02973639778792858,
      0.007437413092702627,
      -0.09427649527788162,
      -0.014981142245233059,
      -0.09013347327709198,
      -0.03653448447585106,
      -0.02156086452305317,
      0.03505225479602814,
      0.03856527805328369,
      0.04493344947695732,
      -0.027403829619288445,
      -0.037016987800598145,
      -0.042373333126306534,
      -0.0782395526766777,
      -0.07739997655153275,
      -0.046277791261672974,
      0.037673190236091614,
      0.017093801870942116,
      0.07825889438390732,
      0.006930121220648289,
      0.011808316223323345,
      0.030474822968244553,
      0.001261517172679305,
      -0.028539419174194336,
      0.08621540665626526,
      0.049159880727529526,
      -0.025909462943673134,
      -0.056794945150613785,
      0.18563339114189148,
      -0.016590144485235214,
      0.005606281105428934,
      -0.015440309420228004,
      0.07907682657241821,
      0.07920128107070923,
      0.06982256472110748,
      0.03791726753115654,
      -0.002964311745017767,
      -0.008818400092422962,
      0.02170352078974247,
      0.053271256387233734,
      0.012967907823622227,
      -0.031677961349487305,
      0.03469076007604599,
      -0.016845671460032463,
      0.020888321101665497,
      -0.07621889561414719,
      -0.023151526227593422,
      -0.035880379378795624,
      -0.04787283018231392,
      0.08840770274400711,
      -0.056562285870313644,
      -0.01833045482635498,
      -0.03159723058342934,
      -0.13194821774959564,
      -0.037762973457574844,
      0.05284032225608826,
      -0.05588013306260109,
      -0.04523322731256485,
      0.043420370668172836,
      -0.028935031965374947,
      0.027050146833062172,
      5.0396587267139915e-33,
      -0.019735848531126976,
      -0.027189534157514572,
      0.0035514638293534517,
      -0.04774497076869011,
      0.007841312326490879,
      0.06487838923931122,
      0.03460482135415077,
      -0.009793154895305634,
      0.007184533402323723,
      -0.0018900939030572772,
      -0.030583802610635757,
      -0.03803769871592522,
      0.00783469993621111,
      -0.053814418613910675,
      -0.034196075052022934,
      0.04121332988142967,
      -0.02037760429084301,
      0.05725087597966194,
      0.08321170508861542,
      0.15047518908977509,
      0.03117838315665722,
      -0.03444579616189003,
      0.03169950470328331,
      -0.06295786052942276,
      -0.035915810614824295,
      0.013992048799991608,
      -0.02140972949564457,
      -0.06462343782186508,
      -0.0076834368519485,
      -0.024464379996061325,
      0.04728536680340767,
      -0.0017269402742385864,
      0.03553389757871628,
      0.10348085314035416,
      -0.03474269434809685,
      0.0027360303793102503,
      0.010701210238039494,
      -0.04561595246195793,
      -0.04008851572871208,
      -0.02022397331893444,
      0.040575504302978516,
      0.0008591122459620237,
      -0.027858274057507515,
      0.04925479367375374,
      -0.06640882045030594,
      0.028891000896692276,
      -0.02833024226129055,
      0.011922881938517094,
      0.08635921776294708,
      0.03264950215816498,
      0.04610719904303551,
      -0.014227064326405525,
      -0.028627146035432816,
      -0.13093915581703186,
      -0.019965631887316704,
      -0.06581766903400421,
      0.020517120137810707,
      0.00530299823731184,
      -0.016067402437329292,
      0.03685172274708748,
      -0.022980818524956703,
      -0.027104565873742104,
      -0.02481420524418354,
      0.010786942206323147,
      -0.02277097851037979,
      0.052832819521427155,
      -0.08097900450229645,
      -0.10477128624916077,
      -0.0008195049013011158,
      -0.05020076036453247,
      -0.03182707354426384,
      0.021212782710790634,
      0.07450275868177414,
      0.05753285065293312,
      0.044172998517751694,
      -0.010056770406663418,
      -0.0053163436241447926,
      -0.011083139106631279,
      0.08890361338853836,
      0.018229225650429726,
      -0.047394923865795135,
      0.051012974232435226,
      -0.08409848809242249,
      0.09138022363185883,
      -0.04229575768113136,
      0.016414865851402283,
      -0.03234952688217163,
      -0.08113692700862885,
      0.0019966813270002604,
      -0.06590744107961655,
      0.006779308896511793,
      -0.07686799019575119,
      -0.015777360647916794,
      -0.0037474106065928936,
      0.11175477504730225,
      -7.40414798097776e-33,
      0.0011570281349122524,
      0.01944551430642605,
      -0.01941494271159172,
      0.08424633741378784,
      -0.04802693799138069,
      -0.014027697034180164,
      0.07278409600257874,
      0.06401432305574417,
      0.042169682681560516,
      0.035645365715026855,
      0.039375122636556625,
      -0.00032903256942518055,
      0.04084508866071701,
      0.0007923957891762257,
      0.04612476006150246,
      -0.04079350456595421,
      -0.04963070526719093,
      0.024577176198363304,
      0.0408690981566906,
      -0.009041671641170979,
      0.042704757302999496,
      0.08125381916761398,
      0.0030028405599296093,
      0.032019004225730896,
      0.005926791578531265,
      0.04986416548490524,
      -0.003578661475330591,
      0.04109136387705803,
      0.002326304791495204,
      -0.05317075178027153,
      -0.013389636762440205,
      0.06353069096803665,
      -0.037777774035930634,
      -0.04608972743153572,
      -0.07050371915102005,
      -0.01601339317858219,
      -0.02036042883992195,
      0.051151957362890244,
      0.0017297293525189161,
      0.026033911854028702,
      0.03225480392575264,
      0.0002511273487471044,
      -0.08919759839773178,
      -0.016698893159627914,
      0.0012064368929713964,
      -0.023447802290320396,
      -0.013369649648666382,
      -0.0013693537330254912,
      0.07244164496660233,
      -0.051584117114543915,
      -0.03320636600255966,
      0.007024896796792746,
      0.04643872752785683,
      -0.010206995531916618,
      -0.07730656117200851,
      0.12513209879398346,
      0.01182879600673914,
      -0.014067274518311024,
      -0.04100095108151436,
      -0.0696449875831604,
      -0.06366509944200516,
      0.06914728879928589,
      0.04969465360045433,
      0.09966524690389633,
      -0.008120939135551453,
      -0.030112091451883316,
      -0.027643781155347824,
      -0.08044010400772095,
      0.0731903463602066,
      -0.03485925868153572,
      -0.03778254613280296,
      0.025092003867030144,
      -0.018439624458551407,
      0.02721124328672886,
      0.1365094631910324,
      -0.002228071680292487,
      0.03227025270462036,
      -0.09772831946611404,
      0.068278968334198,
      0.03386562317609787,
      -0.048690300434827805,
      0.023274311795830727,
      0.019863739609718323,
      -0.01906287483870983,
      0.09294120222330093,
      -0.018212387338280678,
      0.028827667236328125,
      0.03707602992653847,
      -0.008062041364610195,
      7.785992056597024e-05,
      -0.04603622108697891,
      0.050872158259153366,
      -0.007683234289288521,
      -0.013560266233980656,
      -0.04755982384085655,
      -6.1308718102282e-08,
      -0.09914844483137131,
      -0.04641551151871681,
      -0.043068744242191315,
      0.01917000114917755,
      -0.026291869580745697,
      0.01095136534422636,
      -0.01355228666216135,
      -0.13398106396198273,
      0.0018081924645230174,
      -0.012455683201551437,
      -0.07293769717216492,
      -0.01359383761882782,
      -0.03940228745341301,
      -0.07477055490016937,
      -0.03760313242673874,
      0.02196541614830494,
      0.013009858317673206,
      -0.06336133927106857,
      -0.10396796464920044,
      -0.047833655029535294,
      -0.09573059529066086,
      -0.011913872323930264,
      -0.010176480747759342,
      -0.04218549281358719,
      -0.03601166605949402,
      0.02904205210506916,
      0.08279308676719666,
      0.08087675273418427,
      -0.01640056073665619,
      0.01492245588451624,
      0.012929383665323257,
      0.07152779400348663,
      0.007388216443359852,
      -0.04166581854224205,
      0.002403015037998557,
      0.04736427217721939,
      0.07186005264520645,
      0.05861227586865425,
      0.07742166519165039,
      0.017099114134907722,
      -0.05047117546200752,
      -0.016554228961467743,
      -0.12861722707748413,
      -0.0450783297419548,
      0.06792261451482773,
      -0.037112679332494736,
      -0.1329558938741684,
      0.04738234728574753,
      -0.00837695226073265,
      -0.009153812192380428,
      0.014374129474163055,
      -0.007653879001736641,
      0.017851615324616432,
      -0.030687913298606873,
      0.02611982263624668,
      -0.06313551217317581,
      -0.03936748579144478,
      -0.07511269301176071,
      0.05547768250107765,
      0.008101385086774826,
      0.12192746251821518,
      -0.026052571833133698,
      0.11914439499378204,
      -0.08086831867694855
    ],
    [
      -0.0010721326107159257,
      0.03115152195096016,
      -0.05172603577375412,
      -0.07925643771886826,
      -0.0709361657500267,
      -0.08252948522567749,
      0.04198446124792099,
      0.043011292815208435,
      0.04152620956301689,
      0.0269642174243927,
      0.049071479588747025,
      0.027153944596648216,
      0.09188701957464218,
      0.01186504028737545,
      -0.017998281866312027,
      -0.009656473994255066,
      -0.016799282282590866,
      0.04193827509880066,
      0.029610509052872658,
      0.1269424855709076,
      0.06979143619537354,
      0.038558561354875565,
      0.004889939911663532,
      0.10238077491521835,
      -0.036641981452703476,
      -0.03841505944728851,
      0.017322435975074768,
      0.01772368885576725,
      -0.015418277122080326,
      -0.054714810103178024,
      0.051691219210624695,
      0.08208280056715012,
      0.0401136539876461,
      -0.027992356568574905,
      0.03242314234375954,
      0.05601024627685547,
      0.06062028929591179,
      -0.013371724635362625,
      -0.0025434272829443216,
      -0.10407911986112595,
      0.045400939881801605,
      0.04201078787446022,
      0.056314632296562195,
      -0.039436958730220795,
      -0.04846787080168724,
      0.017456870526075363,
      -0.05686577036976814,
      -0.01359482016414404,
      -0.020333196967840195,
      0.022909920662641525,
      0.019303442910313606,
      0.000994358561001718,
      0.0044287750497460365,
      0.11280126124620438,
      0.010149704292416573,
      0.041222818195819855,
      0.010689479298889637,
      -0.0844460129737854,
      -0.06388750672340393,
      -0.06798683106899261,
      0.03947451338171959,
      0.06557975709438324,
      -0.0008696069708094001,
      -0.04270028695464134,
      0.017431292682886124,
      0.004305847454816103,
      -0.0011554969241842628,
      -0.03903362900018692,
      -0.0736507698893547,
      0.052261874079704285,
      -0.07825524359941483,
      -0.0723782628774643,
      -0.06300414353609085,
      0.03401760384440422,
      0.034190159291028976,
      0.009373999200761318,
      0.016818063333630562,
      -0.03888775780797005,
      -0.05216421186923981,
      -0.06443996727466583,
      -0.07927626371383667,
      -0.06427690386772156,
      0.0157703198492527,
      0.011605906300246716,
      0.02058112621307373,
      -0.03191959485411644,
      -0.03848309814929962,
      0.010201201774179935,
      0.0578511543571949,
      -0.008399146609008312,
      0.06893239915370941,
      0.1098695695400238,
      -0.03252674266695976,
      -0.06851193308830261,
      0.105179063975811,
      -0.0097045311704278,
      -0.012957979924976826,
      0.018036695197224617,
      -0.005578626412898302,
      0.09187635034322739,
      0.062465351074934006,
      0.04209914803504944,
      -0.027872513979673386,
      0.024270597845315933,
      0.05415971949696541,
      0.003720289096236229,
      0.011764545924961567,
      -0.04078749567270279,
      -0.030347077175974846,
      -0.024451175704598427,
      -0.00015428719052579254,
      -0.017794206738471985,
      0.04348326101899147,
      -0.016418922692537308,
      -0.014568899758160114,
      0.13273262977600098,
      0.034536123275756836,
      0.016284020617604256,
      -0.07860065996646881,
      -0.08377447724342346,
      0.034695446491241455,
      0.08263787627220154,
      -0.034586045891046524,
      -0.016584908589720726,
      0.03423794358968735,
      -0.014885194599628448,
      -0.015694988891482353,
      1.011801527847003e-33,
      -0.05252388119697571,
      -0.10575520992279053,
      0.039390627294778824,
      -0.04413233697414398,
      -0.003249031724408269,
      -0.008357290178537369,
      -0.029108993709087372,
      -0.019218161702156067,
      -0.04115370288491249,
      0.02438581921160221,
      -0.008588344790041447,
      -0.017831582576036453,
      -0.01867847889661789,
      -0.053348176181316376,
      -0.045803703367710114,
      -0.022145796567201614,
      -0.005170405376702547,
      0.084062360227108,
      0.09884510934352875,
      0.03201578930020332,
      -0.01008287351578474,
      -0.09328258782625198,
      0.0016878127353265882,
      -0.022042402997612953,
      -0.011652693152427673,
      0.04064870625734329,
      -0.09021621942520142,
      -0.05196665599942207,
      -0.020276544615626335,
      -0.036741893738508224,
      0.03828060254454613,
      0.026609208434820175,
      -0.03402680531144142,
      -0.019382521510124207,
      -0.024508094415068626,
      0.03132656589150429,
      -0.01575998030602932,
      -0.02107982151210308,
      -0.01610715687274933,
      -0.016150683164596558,
      -0.046846117824316025,
      0.05483909696340561,
      -0.054796747863292694,
      0.005754025187343359,
      -0.036002881824970245,
      0.007855978794395924,
      0.007049323059618473,
      0.031023133546113968,
      0.06931506097316742,
      0.09558798372745514,
      0.07179825752973557,
      -0.061939891427755356,
      -0.004487487953156233,
      -0.05612390115857124,
      -0.07486402988433838,
      -0.04525831341743469,
      0.014740843325853348,
      0.010894730687141418,
      -0.02455594576895237,
      0.09343084692955017,
      -0.000844316731672734,
      -0.05295366048812866,
      -0.06421269476413727,
      0.029463017359375954,
      0.033002935349941254,
      0.02914411760866642,
      -0.007156283129006624,
      -0.08527902513742447,
      -0.0669366642832756,
      0.06412475556135178,
      -0.04446917399764061,
      -0.0034478334710001945,
      0.04373066499829292,
      0.08292873203754425,
      0.03936906158924103,
      -0.0645814836025238,
      -0.03371197730302811,
      0.0061646453104913235,
      0.06612817943096161,
      -0.015123579651117325,
      -0.028377611190080643,
      0.08070777356624603,
      -0.05790333077311516,
      -0.005945596378296614,
      -0.03761204332113266,
      0.03347906097769737,
      0.030426353216171265,
      -0.06131701171398163,
      -0.021368304267525673,
      -0.05455845594406128,
      -0.009090293198823929,
      -0.07522231340408325,
      -0.018867865204811096,
      0.0643182024359703,
      0.06900232285261154,
      -4.198192850621365e-33,
      0.024750493466854095,
      -0.005984411109238863,
      -0.08461473882198334,
      0.04917866736650467,
      -0.09075987339019775,
      -0.006174720358103514,
      0.10704852640628815,
      0.03241991251707077,
      0.00043716724030673504,
      -0.02592911757528782,
      0.10740219801664352,
      -0.01844475045800209,
      -0.0063068196177482605,
      0.053154632449150085,
      0.0694206953048706,
      -0.028903713449835777,
      0.026914328336715698,
      -0.021453378722071648,
      -0.006461920216679573,
      0.024390513077378273,
      0.028980204835534096,
      0.09803902357816696,
      -0.046864014118909836,
      0.0057450938038527966,
      -0.047813691198825836,
      0.0038253210950642824,
      0.006059217732399702,
      0.06382029503583908,
      0.01100018061697483,
      -0.1190306767821312,
      -0.03538148105144501,
      0.02955687791109085,
      -0.00672937510535121,
      0.00029814703157171607,
      0.014617856591939926,
      -0.05269064009189606,
      -0.054408490657806396,
      0.019008690491318703,
      -0.0002520077396184206,
      0.03635932505130768,
      0.10950005054473877,
      0.0615837424993515,
      -0.03229004889726639,
      -0.0021722111850976944,
      0.03074348345398903,
      -0.05035917088389397,
      -0.03463238850235939,
      0.027151484042406082,
      0.06275974214076996,
      0.0030454264488071203,
      -0.054514724761247635,
      -0.0756097137928009,
      0.07189273089170456,
      0.09894904494285583,
      -0.012380186468362808,
      0.11480578780174255,
      0.05272738263010979,
      -0.04535252973437309,
      -0.019901873543858528,
      -0.02768911048769951,
      -0.050604939460754395,
      0.054828133434057236,
      -0.014248737134039402,
      0.04026017338037491,
      0.0027059384156018496,
      -0.016537070274353027,
      -0.10095631331205368,
      -0.04777349904179573,
      0.09220860153436661,
      0.01008193101733923,
      0.023382747545838356,
      0.03750656545162201,
      0.02722705714404583,
      -0.029372800141572952,
      0.08659111708402634,
      -0.009362655691802502,
      0.015950215980410576,
      -0.04343964159488678,
      0.03203680366277695,
      -0.025420991703867912,
      -0.09039172530174255,
      0.08830953389406204,
      0.039547398686409,
      0.016091596335172653,
      -0.007537152152508497,
      -0.001784770400263369,
      -0.045970089733600616,
      0.04629065841436386,
      0.01103315781801939,
      0.03204590827226639,
      -0.052664343267679214,
      0.004298271145671606,
      0.04019424691796303,
      -0.07659178227186203,
      -0.11658992618322372,
      -5.625524579500052e-08,
      -0.14586025476455688,
      -0.06647281348705292,
      -0.014036943204700947,
      0.00330740655772388,
      0.03314030542969704,
      0.06795236468315125,
      0.02018251270055771,
      -0.06514282524585724,
      0.0084299361333251,
      0.01595853827893734,
      -0.010809357278048992,
      0.04978925362229347,
      -0.0397438146173954,
      -0.08019234240055084,
      -0.05096668004989624,
      0.012603566981852055,
      0.007825684733688831,
      -0.08004261553287506,
      -0.06320244073867798,
      -0.0765882357954979,
      -0.09736018627882004,
      -0.03481867536902428,
      0.0002951659553218633,
      -0.05279746651649475,
      0.0006614337908104062,
      0.02173936553299427,
      0.10270516574382782,
      0.09559226036071777,
      -0.030079172924160957,
      -0.041688308119773865,
      0.029163025319576263,
      0.026591092348098755,
      0.04016183689236641,
      -0.05696063116192818,
      -0.020366696640849113,
      0.04497337341308594,
      0.04367567226290703,
      0.03336174786090851,
      0.1028037890791893,
      0.020437607541680336,
      -0.09035847336053848,
      -0.0020662606693804264,
      -0.10840755701065063,
      -0.033135294914245605,
      0.07940179109573364,
      -0.008706160821020603,
      -0.11926762014627457,
      0.0458727702498436,
      0.014859292656183243,
      -0.08956044912338257,
      0.0010156469652429223,
      -0.0386771522462368,
      0.045223116874694824,
      -0.0035847912076860666,
      0.011990375816822052,
      -0.021007336676120758,
      -0.0058705792762339115,
      -0.02594619244337082,
      0.005858179647475481,
      -0.010123806074261665,
      0.12744350731372833,
      -0.01397034153342247,
      0.052912019193172455,
      -0.0677018016576767
    ],
    [
      -0.09709221869707108,
      0.06853894889354706,
      -0.06193550303578377,
      0.038956932723522186,
      -0.0733005702495575,
      -0.04494813084602356,
      -0.04293207451701164,
      -0.008576037362217903,
      -0.02379232831299305,
      -0.025814423337578773,
      -0.027995947748422623,
      -0.06975027173757553,
      0.05058491975069046,
      -0.01538318581879139,
      0.07011106610298157,
      0.06489955633878708,
      0.06057048588991165,
      0.009441799484193325,
      -0.03984162583947182,
      -0.06752587854862213,
      0.07236485928297043,
      0.016637608408927917,
      -0.04243573546409607,
      -0.050001103430986404,
      0.011379482224583626,
      -0.016802040860056877,
      -0.032316673547029495,
      0.027720516547560692,
      -0.0004289071075618267,
      -0.05521100014448166,
      0.03414857015013695,
      -0.032495178282260895,
      -0.1298539787530899,
      0.014291571453213692,
      0.06489667296409607,
      0.02712622657418251,
      0.043551016598939896,
      -0.043151531368494034,
      0.05151108652353287,
      -0.0328955315053463,
      0.0544746108353138,
      0.03092249296605587,
      -0.06267017871141434,
      -0.07839592546224594,
      0.015718193724751472,
      -0.09407752007246017,
      0.01629837229847908,
      0.022565050050616264,
      -0.08367165923118591,
      -0.029978033155202866,
      -0.10416656732559204,
      -0.07497811317443848,
      -0.021845517680048943,
      0.009033522568643093,
      0.03698303550481796,
      -0.01607624813914299,
      -0.07817214727401733,
      0.05552860349416733,
      -0.004779379349201918,
      -0.012599335983395576,
      0.035577066242694855,
      -0.03681420534849167,
      0.073299840092659,
      -0.013680612668395042,
      -0.06490124017000198,
      -0.00579374423250556,
      -0.02352016791701317,
      0.00445705046877265,
      0.016815517097711563,
      -0.09619718790054321,
      -0.03070862591266632,
      -0.020403673872351646,
      -0.09680534899234772,
      0.0065703196451067924,
      0.014376695267856121,
      0.055651016533374786,
      -0.07309137284755707,
      0.026737598702311516,
      -0.06644012778997421,
      -0.039393309503793716,
      0.05029825493693352,
      -0.08562276512384415,
      -0.03664712980389595,
      0.06083493307232857,
      -0.03288564831018448,
      0.013591784052550793,
      -0.011324932798743248,
      0.02611674554646015,
      -0.011276124976575375,
      0.024025721475481987,
      -0.036091163754463196,
      -0.06582365930080414,
      -0.017465824261307716,
      0.019861241802573204,
      0.027292508631944656,
      0.056322693824768066,
      0.00743784848600626,
      -0.03626147285103798,
      0.07139970362186432,
      0.07506275177001953,
      0.04899557679891586,
      -0.03418596088886261,
      0.06433460861444473,
      -0.021373484283685684,
      0.027236001566052437,
      -0.03127247840166092,
      0.04772545397281647,
      0.08741462230682373,
      0.08141855895519257,
      0.036185313016176224,
      -0.011333497241139412,
      0.10034989565610886,
      -0.06348866969347,
      -0.09491580724716187,
      -0.013951300643384457,
      0.01894385553896427,
      0.06395751982927322,
      0.03715966269373894,
      -0.05033145099878311,
      -0.022464165464043617,
      0.10086914151906967,
      0.010913379490375519,
      -0.013308628462255001,
      0.0037792588118463755,
      0.05112261325120926,
      -0.016079479828476906,
      0.011760790832340717,
      1.1259531414068822e-33,
      0.07191961258649826,
      0.010443281382322311,
      0.052243273705244064,
      0.015183784067630768,
      0.05591098219156265,
      -0.031200643628835678,
      0.08019733428955078,
      0.019764242693781853,
      0.013597778044641018,
      -0.06308746337890625,
      -0.07260578125715256,
      0.003975552041083574,
      0.008780627511441708,
      -0.06470239162445068,
      -0.04025258496403694,
      -0.008623653091490269,
      -0.010583067312836647,
      -0.014457467012107372,
      0.11226730793714523,
      0.06574321538209915,
      0.07158563286066055,
      -0.027750439941883087,
      0.0028665815480053425,
      0.057999204844236374,
      0.037544600665569305,
      -0.06732090562582016,
      -0.028813030570745468,
      0.07446587830781937,
      -0.1228763684630394,
      -0.007578947115689516,
      0.0754120871424675,
      -0.01973680406808853,
      -0.05006658285856247,
      0.038960762321949005,
      0.07023948431015015,
      -0.03285728394985199,
      0.03240230306982994,
      0.0042472765780985355,
      -0.08618110418319702,
      -0.043676212430000305,
      0.0670364648103714,
      -0.04732638970017433,
      -0.07835943251848221,
      0.06223723292350769,
      -0.03344302996993065,
      -0.09700579941272736,
      -0.09985272586345673,
      -0.06029186025261879,
      0.027326785027980804,
      -0.11498045921325684,
      -0.04996159300208092,
      0.04845578968524933,
      0.030369238927960396,
      -0.03907249495387077,
      0.05302516371011734,
      -0.008300683461129665,
      0.048267435282468796,
      0.025888917967677116,
      -0.0005554394447244704,
      0.10120580345392227,
      -0.04308087378740311,
      0.042525626718997955,
      -0.056376416236162186,
      0.003005709731951356,
      0.013286572881042957,
      0.01138326432555914,
      -0.05369610711932182,
      -0.046903692185878754,
      -0.008161615580320358,
      -0.006280300207436085,
      0.01640850491821766,
      -0.01243531797081232,
      0.0029159216210246086,
      0.06871063262224197,
      -0.012388605624437332,
      -0.06564990431070328,
      -0.06617576628923416,
      0.059849388897418976,
      0.0668724998831749,
      -0.023329369723796844,
      0.01438644528388977,
      0.005288670305162668,
      -0.04457634687423706,
      0.0744081512093544,
      -0.046711862087249756,
      -0.0074934340082108974,
      -0.05757584795355797,
      -0.057564202696084976,
      -0.057631511241197586,
      -0.03580453619360924,
      -0.0026010279543697834,
      0.059308670461177826,
      -0.03774480149149895,
      -0.089055635035038,
      0.0636841207742691,
      -4.832075607908391e-33,
      -0.007014630362391472,
      -0.011754654347896576,
      0.008564924821257591,
      0.08600172400474548,
      0.0030180006287992,
      -0.06976398080587387,
      0.07895741611719131,
      0.027547692880034447,
      0.037695229053497314,
      0.10957539081573486,
      0.005866358056664467,
      -0.06835613399744034,
      -0.007072914857417345,
      -0.07443048804998398,
      -0.04647238552570343,
      0.025571955367922783,
      -0.0640045702457428,
      -0.08975445479154587,
      0.011955708265304565,
      0.04323410242795944,
      -0.023436598479747772,
      0.09819803386926651,
      0.039900295436382294,
      -0.010395655408501625,
      -0.06229446083307266,
      -0.01129195187240839,
      0.034058645367622375,
      -0.029549075290560722,
      -0.06444746255874634,
      0.02107660286128521,
      -0.01641486957669258,
      0.029988078400492668,
      -0.013325586915016174,
      -0.014276242814958096,
      -0.05698456987738609,
      -0.035192783921957016,
      0.0517389178276062,
      0.10003604739904404,
      0.04288953170180321,
      0.0742528885602951,
      0.038161925971508026,
      0.00527636194601655,
      -0.042244940996170044,
      0.09050591289997101,
      0.048682164400815964,
      0.003047328907996416,
      -0.029436476528644562,
      0.03429634869098663,
      -0.0548432320356369,
      -0.014983703382313251,
      0.01156799215823412,
      0.05993616580963135,
      -0.03706891089677811,
      0.027356520295143127,
      -0.009413450956344604,
      -0.04170830175280571,
      -0.03430557996034622,
      -0.011606884188950062,
      -0.02735050581395626,
      0.018132280558347702,
      -0.014485826715826988,
      -0.04239523038268089,
      0.012205510400235653,
      0.07073656469583511,
      0.07297540456056595,
      -0.05676380917429924,
      -0.004302408080548048,
      -0.012561140581965446,
      -0.012554279528558254,
      -0.06826360523700714,
      -0.02615189738571644,
      -0.06762547791004181,
      0.054675448685884476,
      0.03769538924098015,
      0.15470562875270844,
      -0.12605814635753632,
      -0.06135619059205055,
      -0.00448253471404314,
      0.04800749942660332,
      0.034366998821496964,
      -0.05083394795656204,
      0.0016921774949878454,
      0.02290436625480652,
      0.011435510590672493,
      0.05996598303318024,
      -0.0327884666621685,
      -0.03199462965130806,
      0.08923158049583435,
      -0.01722574792802334,
      -0.03716396540403366,
      -0.021846704185009003,
      0.008520775474607944,
      -0.07084836810827255,
      -0.0447956807911396,
      0.018994862213730812,
      -5.5162161061161896e-08,
      -0.10622929036617279,
      -0.0360504649579525,
      -0.07963664084672928,
      0.08821405470371246,
      -0.02522667869925499,
      0.047357749193906784,
      -0.07995914667844772,
      -0.01070898026227951,
      0.0830126702785492,
      -0.024289840832352638,
      -0.06571587175130844,
      0.08432742208242416,
      -0.011147556826472282,
      -0.037906892597675323,
      -0.08094771951436996,
      -0.008970051072537899,
      0.011243266053497791,
      0.005512576550245285,
      0.02424526959657669,
      -0.026667172089219093,
      0.053964804857969284,
      -0.019920924678444862,
      0.010968804359436035,
      -0.0318601094186306,
      0.15571221709251404,
      -0.024474643170833588,
      -0.026620903983712196,
      -0.0023733372800052166,
      -0.02604549750685692,
      -0.004250944592058659,
      -0.010896102525293827,
      -0.0376739427447319,
      -0.005142322275787592,
      -0.013592112809419632,
      0.007794430013746023,
      -0.05174463614821434,
      0.049956753849983215,
      -0.006506904028356075,
      -0.021652404218912125,
      0.014896746724843979,
      0.02276138961315155,
      0.07859952002763748,
      -0.0917317345738411,
      0.030505623668432236,
      0.05720854178071022,
      -0.007395721506327391,
      -0.015760306268930435,
      0.057794246822595596,
      0.0190927404910326,
      -0.06832539290189743,
      0.04748598858714104,
      -0.08984685689210892,
      0.034291479736566544,
      -0.018887357786297798,
      -0.08079136162996292,
      0.00436699204146862,
      0.0004345631168689579,
      -0.047510869801044464,
      0.013869178481400013,
      0.02524559386074543,
      0.10629912465810776,
      0.013581594452261925,
      0.013767815195024014,
      -0.03156745806336403
    ],
    [
      -0.028103573247790337,
      -0.00877098087221384,
      -0.013409487903118134,
      -0.01805979572236538,
      0.008590823970735073,
      -0.08500798046588898,
      0.048216547816991806,
      0.012921031564474106,
      0.09319095313549042,
      -0.0650528147816658,
      0.14932531118392944,
      -0.02981366589665413,
      0.06036997213959694,
      0.023349078372120857,
      -0.024710027500987053,
      -0.09061580151319504,
      0.050750311464071274,
      -0.03288085386157036,
      -0.011548859067261219,
      0.00011019249359378591,
      -0.03930876404047012,
      0.05099133774638176,
      -0.027768900617957115,
      0.11157098412513733,
      -0.052268240600824356,
      -0.002542360220104456,
      -0.12204714119434357,
      -0.04652227461338043,
      -0.041474055498838425,
      -0.007260181475430727,
      0.04009556025266647,
      -0.017888126894831657,
      -0.07119306921958923,
      0.043882302939891815,
      0.030345944687724113,
      0.03260976821184158,
      0.019154120236635208,
      -0.018381468951702118,
      -0.01419044565409422,
      -0.08353570103645325,
      0.009676415473222733,
      -0.05604999139904976,
      -0.012483426369726658,
      0.004638085141777992,
      -0.015753917396068573,
      -0.0396491102874279,
      -0.038483187556266785,
      -0.03343605622649193,
      -0.06368277221918106,
      0.015285972505807877,
      -0.016234450042247772,
      0.022961657494306564,
      0.08005546033382416,
      0.1015520915389061,
      -0.013761572539806366,
      0.01727251708507538,
      0.0008808621787466109,
      -0.06363866478204727,
      -0.02258487232029438,
      -0.026129774749279022,
      -0.006836318876594305,
      0.061908334493637085,
      0.007270608097314835,
      -0.011858348734676838,
      0.007797240745276213,
      0.031171215698122978,
      -0.09370717406272888,
      -0.04245273023843765,
      -0.003650250844657421,
      0.04169081896543503,
      0.03588911518454552,
      -0.016314204782247543,
      -0.006373433396220207,
      0.05676839500665665,
      0.011631452478468418,
      -0.012328652665019035,
      0.08325906842947006,
      0.01974094659090042,
      -0.09738791733980179,
      -0.042302362620830536,
      -0.07850855588912964,
      -0.041114144027233124,
      -0.010653038509190083,
      -0.057038307189941406,
      0.01108616217970848,
      -0.014484130777418613,
      0.0118410037830472,
      0.058823443949222565,
      -0.0118954973295331,
      -0.016412895172834396,
      0.06944557279348373,
      0.02855648845434189,
      -0.00038774049608036876,
      -0.03142464533448219,
      0.05843884497880936,
      -0.0933389812707901,
      0.040077995508909225,
      -0.023427078500390053,
      0.03587595745921135,
      -0.009808744303882122,
      0.03404122591018677,
      -0.03670056536793709,
      -0.05836401879787445,
      -0.04160883277654648,
      -0.012244868092238903,
      -0.028538547456264496,
      -0.01638408750295639,
      -0.0001998215157072991,
      0.004885269794613123,
      -0.04333297535777092,
      -0.09625841677188873,
      -0.08047450333833694,
      0.0535789430141449,
      0.01224224828183651,
      -0.017551621422171593,
      0.06391321867704391,
      -0.04456140100955963,
      0.014206296764314175,
      0.0034141328651458025,
      -0.08071617782115936,
      -0.017532091587781906,
      0.010122663341462612,
      0.08395249396562576,
      -0.012231416068971157,
      0.024744315072894096,
      -0.11827458441257477,
      0.024831000715494156,
      7.89458975440875e-34,
      0.02374596707522869,
      -0.05199321359395981,
      -0.0912991389632225,
      -0.0020379468332976103,
      -0.015030968934297562,
      0.05815693363547325,
      0.028597654774785042,
      -0.09419573843479156,
      0.05899485573172569,
      -0.041393086314201355,
      -0.058974068611860275,
      -0.07079485803842545,
      -0.0021942704916000366,
      -0.012227519415318966,
      -0.037358418107032776,
      0.061340659856796265,
      0.04215085506439209,
      0.02294320985674858,
      0.0009517084690742195,
      0.09842482954263687,
      -0.02760314755141735,
      0.010716553777456284,
      0.019238334149122238,
      0.010628481395542622,
      -0.04211318865418434,
      0.08353978395462036,
      -0.08428271114826202,
      -0.014923064969480038,
      -0.037659186869859695,
      0.026838034391403198,
      0.025793692097067833,
      0.012675884179770947,
      0.06463273614645004,
      0.10188360512256622,
      0.0393831767141819,
      0.09743131697177887,
      -0.07252226024866104,
      -0.06068636104464531,
      0.007224460132420063,
      0.013382458128035069,
      -0.0643855631351471,
      -0.01511295698583126,
      -0.08130524307489395,
      -0.031060578301548958,
      0.013655012473464012,
      -0.013433661311864853,
      -0.033353593200445175,
      -0.014376010745763779,
      0.014442404732108116,
      -0.017249606549739838,
      0.06099242717027664,
      0.05068495124578476,
      0.04703700914978981,
      -0.06186515837907791,
      0.047082480043172836,
      -0.025610657408833504,
      -0.02582661621272564,
      0.054486922919750214,
      0.033425163477659225,
      0.0372554287314415,
      0.017912259325385094,
      -0.03688674792647362,
      -0.0972573533654213,
      -0.07135201245546341,
      -0.04710482060909271,
      0.024084344506263733,
      0.014277063310146332,
      -0.07152698189020157,
      -0.07432454824447632,
      -0.009436655789613724,
      -0.03776716813445091,
      -0.006016195751726627,
      0.06574086099863052,
      0.08206626772880554,
      0.11501527577638626,
      -0.06422462314367294,
      -0.006611401680856943,
      -0.01927122473716736,
      0.038866136223077774,
      -0.005450339987874031,
      -0.03382772207260132,
      -0.07147187739610672,
      -0.07450645416975021,
      -0.017728134989738464,
      0.009477011859416962,
      0.17320020496845245,
      0.052581336349248886,
      -0.020214056596159935,
      -0.09319084137678146,
      0.015229261480271816,
      -0.0397932305932045,
      -0.08742605894804001,
      -0.021885942667722702,
      -0.03115883655846119,
      0.1471167355775833,
      -4.821316161178521e-33,
      -0.004228115081787109,
      0.00162229232955724,
      -0.01369163952767849,
      -0.016487009823322296,
      -0.0916193500161171,
      -0.004869752563536167,
      -0.04598307982087135,
      -0.06851376593112946,
      0.033228132873773575,
      0.011123575270175934,
      0.015955304726958275,
      -0.048134058713912964,
      -0.026103125885128975,
      0.018554944545030594,
      -0.09739497303962708,
      -0.03482897952198982,
      -0.007770475000143051,
      -0.06733561307191849,
      0.045465096831321716,
      0.02539530023932457,
      -0.013264546170830727,
      0.00333710596896708,
      0.0016198789235204458,
      0.06430751085281372,
      -0.018112780526280403,
      0.09039642661809921,
      -0.0485781766474247,
      0.016232240945100784,
      0.012198108248412609,
      -0.115725077688694,
      0.048543740063905716,
      0.011011242866516113,
      -0.010852993465960026,
      0.042457956820726395,
      0.08269050717353821,
      -0.03238365054130554,
      -0.038730863481760025,
      0.030130119994282722,
      0.005328346509486437,
      0.014149854891002178,
      0.07504543662071228,
      0.007124077528715134,
      0.00513695552945137,
      0.01443268172442913,
      -0.07069573551416397,
      0.04921545833349228,
      0.029767628759145737,
      0.006154546979814768,
      0.010357051156461239,
      0.0427197627723217,
      0.023873938247561455,
      0.05194871872663498,
      0.04001973941922188,
      0.06309209764003754,
      0.014467469416558743,
      0.09915363043546677,
      0.010992803610861301,
      0.017209313809871674,
      -0.05536467209458351,
      -0.05979010462760925,
      -0.06253595650196075,
      0.006330119911581278,
      0.03430986404418945,
      0.05375492200255394,
      0.025569863617420197,
      -0.0623464472591877,
      0.015066267922520638,
      0.01388475764542818,
      0.12526966631412506,
      -0.02825319953262806,
      0.04012494906783104,
      0.022708794102072716,
      -0.061336830258369446,
      -0.06392265856266022,
      0.070518858730793,
      0.04417705535888672,
      -0.05907401442527771,
      -0.11282642930746078,
      0.06695114076137543,
      0.010232728905975819,
      -0.07286633551120758,
      0.05650455877184868,
      0.08529451489448547,
      -0.0348772369325161,
      0.08211927115917206,
      0.050799980759620667,
      -0.03604219853878021,
      0.07317888736724854,
      0.04587126523256302,
      -0.09437724947929382,
      0.03938307985663414,
      0.035010095685720444,
      0.037543196231126785,
      -0.022225579246878624,
      -0.022854940965771675,
      -5.5905047702253796e-08,
      -0.0011964852456003428,
      -0.02425495535135269,
      -0.04143647849559784,
      -0.07620656490325928,
      0.036018405109643936,
      0.0014951092889532447,
      0.06139574199914932,
      -0.061302103102207184,
      -0.05583369359374046,
      0.014184044674038887,
      -0.027411267161369324,
      -0.007594214752316475,
      -0.10187587141990662,
      -0.08335117995738983,
      0.0012297964422032237,
      -0.01813354901969433,
      0.05682053789496422,
      -0.006576762534677982,
      -0.013040212914347649,
      -0.033252641558647156,
      -0.022040341049432755,
      -0.07244088500738144,
      0.02125517837703228,
      -0.005005223210901022,
      -0.06840292364358902,
      0.014759043231606483,
      0.08801630139350891,
      0.09424052387475967,
      -0.07026176154613495,
      -0.03968871012330055,
      0.026354018598794937,
      -0.09164919704198837,
      0.08642013370990753,
      -0.00429424736648798,
      0.08450865000486374,
      0.05205816030502319,
      -0.012441068887710571,
      -0.03800979629158974,
      0.0076307207345962524,
      -0.013731109909713268,
      0.004588331561535597,
      0.038073886185884476,
      0.04551325738430023,
      0.0738661140203476,
      0.038783639669418335,
      0.021453620865941048,
      -0.030557462945580482,
      -0.08884286880493164,
      -0.02586985006928444,
      -0.042281374335289,
      -0.07141036540269852,
      -0.01196718867868185,
      0.06047562509775162,
      0.044471822679042816,
      -0.0018681369256228209,
      0.007037284318357706,
      0.0824916809797287,
      -0.04818747565150261,
      0.05810314044356346,
      -0.017171574756503105,
      0.04340607300400734,
      -0.0226138923317194,
      0.09027345478534698,
      -0.011803791858255863
    ],
    [
      -0.01472567580640316,
      0.01199063379317522,
      -0.03627494350075722,
      -0.04565593972802162,
      -0.07393258064985275,
      -0.03359166905283928,
      0.031021127477288246,
      0.06190730258822441,
      0.09374618530273438,
      -0.05255087465047836,
      0.05905293673276901,
      0.007820107974112034,
      0.030317721888422966,
      -0.030046097934246063,
      -0.04785727709531784,
      -0.04503647983074188,
      -0.007509023882448673,
      -0.05337286368012428,
      0.035054538398981094,
      0.11078169196844101,
      0.11808587610721588,
      -0.010769819840788841,
      -0.02871669828891754,
      0.024788010865449905,
      -0.007525290362536907,
      0.03414180874824524,
      -0.044286999851465225,
      -0.03249052166938782,
      0.02725192904472351,
      -0.05392540991306305,
      0.028070513159036636,
      0.13167299330234528,
      0.04949288070201874,
      -0.056932613253593445,
      0.04829180985689163,
      0.061467625200748444,
      0.042039111256599426,
      0.012585723772644997,
      0.004946487955749035,
      0.007238732650876045,
      0.04281027987599373,
      0.03383659943938255,
      -0.015491641126573086,
      0.010596330277621746,
      -0.025245271623134613,
      0.0564841590821743,
      -0.006751826032996178,
      -0.016591275110840797,
      -0.08149752020835876,
      0.0011341484496369958,
      0.05437176674604416,
      0.05071919783949852,
      0.005906212609261274,
      0.09623535722494125,
      -0.037080228328704834,
      -0.04881807416677475,
      -0.027730027213692665,
      0.002211020328104496,
      -0.06352201104164124,
      -0.020539216697216034,
      -0.05840613320469856,
      0.0626237690448761,
      -0.00792862381786108,
      -0.04943171143531799,
      -0.004123146645724773,
      0.002880150219425559,
      -0.08805736899375916,
      -0.06357201933860779,
      -0.056435707956552505,
      -0.0008677234291099012,
      -0.08596210926771164,
      -0.02854827232658863,
      0.011707763187587261,
      0.032085906714200974,
      0.006201968993991613,
      0.01794029027223587,
      -0.0018713335739448667,
      0.03209669515490532,
      -0.003987084608525038,
      -0.10927450656890869,
      -0.06656406819820404,
      -0.06274562329053879,
      0.07259593158960342,
      0.020575009286403656,
      0.07067732512950897,
      0.024330398067831993,
      0.01688709482550621,
      0.05794763192534447,
      0.04056917503476143,
      0.06625763326883316,
      0.016376465559005737,
      0.024872412905097008,
      0.026087842881679535,
      -0.08089588582515717,
      0.14723043143749237,
      -0.011036353185772896,
      0.01161529403179884,
      -0.00018031559011433274,
      0.028184177353978157,
      -0.0180947445333004,
      0.08713474124670029,
      0.09903457760810852,
      0.008666502311825752,
      0.007448401302099228,
      0.01929636113345623,
      -0.0005050058243796229,
      -0.03513914346694946,
      0.03988383710384369,
      0.05824009329080582,
      -0.0634019747376442,
      -0.11924292147159576,
      -0.0544792115688324,
      -0.0025009445380419493,
      -0.0022902730852365494,
      -0.007641572970896959,
      0.022702818736433983,
      -0.12824647128582,
      -0.05720027908682823,
      -0.008374334312975407,
      -0.05424709990620613,
      0.02890659123659134,
      0.07743141800165176,
      -0.07728976011276245,
      0.041269417852163315,
      -0.0479399636387825,
      -0.07864666730165482,
      0.007679909933358431,
      4.780406386376013e-33,
      0.017455071210861206,
      0.04098434001207352,
      -0.0827222689986229,
      -0.035659242421388626,
      -0.08362218737602234,
      0.030779317021369934,
      -0.0028341885190457106,
      0.06817323714494705,
      -0.04666607454419136,
      -0.00809620600193739,
      -0.0031743799336254597,
      0.02989688329398632,
      0.008067580871284008,
      0.04354078695178032,
      -0.022415345534682274,
      0.05018886178731918,
      -0.06334555894136429,
      0.08587278425693512,
      0.0863029882311821,
      0.0003862837911583483,
      -0.0067139859311282635,
      0.03205643221735954,
      0.023192845284938812,
      0.0019655320793390274,
      -0.016770245507359505,
      0.0003791314084082842,
      -0.10041996091604233,
      -0.05315501242876053,
      -0.0413697175681591,
      -0.004652121104300022,
      -0.04236548766493797,
      0.0032611058559268713,
      0.060664255172014236,
      0.021552270278334618,
      0.00013508739357348531,
      -0.0033664144575595856,
      -0.014723775908350945,
      -0.1174965649843216,
      0.003980775363743305,
      0.018425336107611656,
      0.010421662591397762,
      0.009213374927639961,
      0.004185701720416546,
      0.012892387807369232,
      -0.008917832747101784,
      -0.019982391968369484,
      -0.05143917724490166,
      0.0146781662479043,
      -0.0070725386030972,
      0.03104676492512226,
      0.00635931920260191,
      0.023836752399802208,
      -0.009916218928992748,
      -0.02997078001499176,
      -0.004266823176294565,
      -0.05793679878115654,
      0.007705401629209518,
      -0.0035514067858457565,
      -0.03232463821768761,
      0.08513191342353821,
      0.018099242821335793,
      0.02860875241458416,
      -0.021986790001392365,
      0.00514909066259861,
      0.023138416931033134,
      0.03023449331521988,
      -0.06685298681259155,
      -0.050474606454372406,
      -0.043093014508485794,
      0.055671270936727524,
      -0.021273097023367882,
      0.005883254110813141,
      0.059107474982738495,
      0.051093701273202896,
      0.047181300818920135,
      -0.0897132009267807,
      -0.01894080825150013,
      -0.013585884124040604,
      -0.0063484059646725655,
      0.02796988934278488,
      -0.04773174598813057,
      0.0666382685303688,
      -0.03706241399049759,
      0.008953413926064968,
      -0.04290119558572769,
      0.0748421847820282,
      0.09690728783607483,
      -0.061066947877407074,
      -0.07188960164785385,
      -0.08039020746946335,
      0.05398370325565338,
      -0.11554417759180069,
      -0.031228724867105484,
      -0.058562446385622025,
      0.15541116893291473,
      -7.184913141761619e-33,
      -0.008256769739091396,
      0.003109794110059738,
      -0.01008528284728527,
      0.13699454069137573,
      -0.08340982347726822,
      0.005584608763456345,
      -0.012469899840652943,
      0.035322077572345734,
      0.09082268923521042,
      0.007932998239994049,
      0.010426653549075127,
      0.006598542910069227,
      0.04864039644598961,
      -0.015956923365592957,
      0.016264241188764572,
      -0.019920576363801956,
      -0.08752838522195816,
      -0.007220235653221607,
      0.021679731085896492,
      -0.029056712985038757,
      0.058050621300935745,
      0.0193354319781065,
      0.0789354220032692,
      0.06495041400194168,
      0.013260647654533386,
      0.004294604063034058,
      -0.03918923810124397,
      -0.05888066813349724,
      0.011004862375557423,
      -0.0904703140258789,
      -0.041228286921978,
      0.016576355323195457,
      0.022006245329976082,
      -0.04574684053659439,
      0.02979513630270958,
      -0.03776518628001213,
      -0.03012828156352043,
      0.04758144170045853,
      0.04103590548038483,
      -0.027812793850898743,
      0.06979327648878098,
      -0.051382698118686676,
      0.019846400246024132,
      -0.052257806062698364,
      0.054345760494470596,
      -0.04750034958124161,
      -0.06913326680660248,
      0.01728815585374832,
      0.12592220306396484,
      -0.06058462709188461,
      -0.038021914660930634,
      -0.0052380794659256935,
      -0.014938767068088055,
      -0.016321895644068718,
      -0.03878237307071686,
      0.06527943909168243,
      -0.008846374228596687,
      0.03318057209253311,
      0.057348061352968216,
      -0.05400034040212631,
      -0.008572363294661045,
      0.06675639003515244,
      0.039123259484767914,
      0.09080718457698822,
      -0.021825142204761505,
      -0.06906180828809738,
      -0.004502004943788052,
      -0.07296497374773026,
      0.011063252575695515,
      -0.033086810261011124,
      0.00981829036027193,
      -0.017896125093102455,
      -0.0070304544642567635,
      -0.009526249021291733,
      0.018585121259093285,
      0.011288718320429325,
      0.05829465761780739,
      -0.061070553958415985,
      0.05725392326712608,
      -0.0007909272680990398,
      -0.048182595521211624,
      0.09356129169464111,
      0.07215621322393417,
      0.012032111175358295,
      0.04328979179263115,
      -0.04087413102388382,
      -0.03900527581572533,
      0.07824088633060455,
      -0.0411488302052021,
      -0.00520797586068511,
      -0.024637266993522644,
      0.036012597382068634,
      0.05897993966937065,
      0.007593296933919191,
      -0.012786597944796085,
      -6.061620183572813e-08,
      -0.046582285314798355,
      -0.027562901377677917,
      -0.030010582879185677,
      0.06470725685358047,
      0.07294841855764389,
      -0.006905862595885992,
      -0.0715370625257492,
      -0.014107122085988522,
      -0.017581766471266747,
      -0.015242182649672031,
      0.09007598459720612,
      -0.0039336117915809155,
      -0.11597918719053268,
      -0.08860582113265991,
      -0.03317263722419739,
      0.06366284936666489,
      0.007438617758452892,
      -0.09413159638643265,
      -0.010082066990435123,
      -0.021986182779073715,
      -0.07097169756889343,
      -0.07149888575077057,
      -0.030698351562023163,
      -0.08285696059465408,
      -0.016834113746881485,
      -0.05095754936337471,
      0.11978171020746231,
      0.15107713639736176,
      -0.027771972119808197,
      -0.052571892738342285,
      0.04615261033177376,
      0.014988278038799763,
      0.033370278775691986,
      -0.08039597421884537,
      0.004937933757901192,
      -0.013945617713034153,
      0.004699964541941881,
      0.004352700896561146,
      0.047955308109521866,
      -0.010473246686160564,
      0.009582489728927612,
      -0.0030359725933521986,
      -0.052603770047426224,
      -0.010622999630868435,
      0.062407609075307846,
      0.045336801558732986,
      -0.05173403024673462,
      -0.0850372239947319,
      -0.04949431121349335,
      -0.05247225984930992,
      -0.01193611603230238,
      0.05571877583861351,
      0.1049821525812149,
      -0.02210051566362381,
      -0.014572177082300186,
      0.011099441908299923,
      0.009461842477321625,
      -0.11402764171361923,
      0.0856044664978981,
      -0.0431678369641304,
      0.03115229308605194,
      0.06864263117313385,
      0.0893559381365776,
      -0.04655885696411133
    ],
    [
      0.0034478120505809784,
      0.018466467037796974,
      -0.048702988773584366,
      -0.02815927006304264,
      0.00704104034230113,
      -0.0033599436283111572,
      0.005866864696145058,
      -0.035866305232048035,
      0.012347918003797531,
      -0.006922550965100527,
      0.07399345934391022,
      -0.08224963396787643,
      -0.010789619758725166,
      -0.0955159068107605,
      -0.005818538833409548,
      -0.0031983882654458284,
      -0.013443530537188053,
      -0.10302471369504929,
      -0.04460640251636505,
      0.014322808012366295,
      0.01751658320426941,
      0.002853238955140114,
      -0.03193570300936699,
      0.024132927879691124,
      -0.05124567076563835,
      0.011283813044428825,
      0.01937149092555046,
      0.07753879576921463,
      -0.010782700031995773,
      -0.06595807522535324,
      0.05054263770580292,
      0.0407760925590992,
      -0.11345159262418747,
      0.012604475021362305,
      0.06936062127351761,
      0.028786901384592056,
      -0.02225273661315441,
      -0.09730765968561172,
      -0.029509317129850388,
      -0.06464012712240219,
      0.060663506388664246,
      -0.08812135457992554,
      -0.0562557689845562,
      -0.03789832815527916,
      0.028434475883841515,
      -0.06604862213134766,
      -0.04461655020713806,
      -0.05937883257865906,
      -0.04608060047030449,
      0.0013992657186463475,
      -0.043108947575092316,
      0.030927564948797226,
      0.0006523117772303522,
      0.06147677078843117,
      0.041035592555999756,
      0.033874884247779846,
      -0.0013013494899496436,
      -0.01831156760454178,
      -0.037949975579977036,
      -0.03741294518113136,
      -0.047938957810401917,
      0.08737432211637497,
      -0.04936869442462921,
      0.023453883826732635,
      -0.0785839781165123,
      0.054954517632722855,
      0.013475180603563786,
      0.03757023438811302,
      -0.029781540855765343,
      -0.08388065546751022,
      -0.09535464644432068,
      -0.022177329286932945,
      -0.1113528162240982,
      0.027950428426265717,
      -0.02053280547261238,
      0.0022188012953847647,
      0.007812749594449997,
      -0.03953738883137703,
      -0.06244911625981331,
      -0.05656121298670769,
      -0.006562521681189537,
      -0.0651710033416748,
      -0.004380499944090843,
      -0.05445342883467674,
      0.011970346793532372,
      0.020635079592466354,
      -0.03782043233513832,
      0.028907792642712593,
      0.019786955788731575,
      0.002492255996912718,
      8.106940367724746e-05,
      -0.06322384625673294,
      -0.0003371387138031423,
      0.048541538417339325,
      0.08472906798124313,
      0.0902637466788292,
      -0.0017842689994722605,
      -0.030801795423030853,
      0.06941446661949158,
      0.05049016699194908,
      0.024300839751958847,
      0.05671219900250435,
      -0.05847107246518135,
      0.05753743648529053,
      -0.052818890661001205,
      -0.05813064053654671,
      0.03352690860629082,
      -0.002155711641535163,
      -0.04514097422361374,
      -0.057365283370018005,
      0.016619376838207245,
      0.08598899841308594,
      0.0013284269953146577,
      -0.13112524151802063,
      -0.02522983029484749,
      0.09247488528490067,
      -0.06430889666080475,
      -0.0007503697415813804,
      -0.02296867035329342,
      -0.035587068647146225,
      -0.011010765098035336,
      0.004323187749832869,
      -0.018988950178027153,
      0.07939925044775009,
      -0.05022614449262619,
      -0.07302264124155045,
      0.03719374164938927,
      1.9738206862656897e-33,
      -0.09628515690565109,
      -0.12137946486473083,
      -0.04200194031000137,
      -0.026684073731303215,
      0.10780256241559982,
      0.044612105935811996,
      0.010046926327049732,
      -0.037100840359926224,
      -0.014119205996394157,
      -0.054958269000053406,
      -0.06547030806541443,
      -0.050845131278038025,
      0.004017270170152187,
      -0.034212712198495865,
      -0.05751395970582962,
      -0.04632478579878807,
      -0.036489564925432205,
      0.051749084144830704,
      0.030994800850749016,
      0.029841339215636253,
      0.04562043771147728,
      -0.010166513733565807,
      0.033834218978881836,
      -0.05544189736247063,
      -0.007057638838887215,
      0.07940388470888138,
      -0.07497087866067886,
      -0.028062783181667328,
      0.014539568684995174,
      0.009557453915476799,
      -0.0015687319682911038,
      -0.01565592736005783,
      0.005567882210016251,
      -0.00010958206257782876,
      0.01083479356020689,
      0.05533988028764725,
      -0.07120484113693237,
      -0.11592327058315277,
      -0.057809848338365555,
      -0.04591382294893265,
      -0.024235619232058525,
      -0.027098122984170914,
      -0.06011572107672691,
      -0.053090885281562805,
      -0.1181960254907608,
      -0.030473295599222183,
      -0.06899470090866089,
      -0.021841686218976974,
      0.10652324557304382,
      -0.04353997856378555,
      0.004545134957879782,
      0.017365435138344765,
      0.02331032231450081,
      -0.15413977205753326,
      0.0636657327413559,
      0.011897505261003971,
      0.020854933187365532,
      0.037633735686540604,
      0.014890666119754314,
      0.10267356783151627,
      0.005857225973159075,
      0.02596212364733219,
      -0.010548047721385956,
      -0.03099360503256321,
      0.011702405288815498,
      0.03654731810092926,
      -0.010983784683048725,
      -0.09804458916187286,
      -0.010751663707196712,
      -0.044301364570856094,
      -0.035568755120038986,
      0.021163897588849068,
      0.05525241419672966,
      -0.005586959421634674,
      0.05777626857161522,
      0.00846106093376875,
      -0.054500166326761246,
      -0.06055915355682373,
      0.029943009838461876,
      -0.018404576927423477,
      0.00013693935761693865,
      -0.021499786525964737,
      0.0026258400175720453,
      0.004470835439860821,
      -0.001465154578909278,
      0.007664862554520369,
      -0.06797651946544647,
      -0.006740186363458633,
      -0.005458605010062456,
      -0.016192680224776268,
      0.05726391449570656,
      -0.007532504387199879,
      -0.038855649530887604,
      -0.023941433057188988,
      0.014196278527379036,
      -1.0407887960949983e-32,
      -0.005078375805169344,
      0.05356113240122795,
      -0.015834467485547066,
      -0.0010736922267824411,
      -0.03150385245680809,
      0.043767575174570084,
      0.022363604977726936,
      0.0033455435186624527,
      -0.003314515808597207,
      0.0843772441148758,
      0.018945809453725815,
      0.038128338754177094,
      -0.05409165844321251,
      -0.091068796813488,
      0.04134039580821991,
      -0.003113072831183672,
      0.00870114378631115,
      -0.040680643171072006,
      0.031287144869565964,
      0.05045947805047035,
      -0.025543803349137306,
      0.13189902901649475,
      -0.03981590270996094,
      0.035131968557834625,
      -0.0762471929192543,
      -0.057974208146333694,
      0.09750306606292725,
      0.01458340510725975,
      -0.05981430411338806,
      -0.07535610347986221,
      -0.01822424866259098,
      -0.024915333837270737,
      -0.09395676106214523,
      0.042796362191438675,
      0.03821185231208801,
      -0.04138072580099106,
      0.14521026611328125,
      0.06261299550533295,
      0.032686635851860046,
      0.043923355638980865,
      0.050084877759218216,
      0.0684971734881401,
      -0.10270843654870987,
      -0.03127016872167587,
      0.015364175662398338,
      0.05073348805308342,
      -0.05354846641421318,
      0.0016106966650113463,
      0.13480550050735474,
      -0.01639806665480137,
      -0.0036269091069698334,
      -0.023670855909585953,
      0.04475023224949837,
      0.046980615705251694,
      -0.035127904266119,
      0.02843470126390457,
      0.03055778332054615,
      -0.056762516498565674,
      0.0027967537753283978,
      -0.12128699570894241,
      -0.05891192704439163,
      -0.025054803118109703,
      0.006404932588338852,
      0.014649813063442707,
      0.06959083676338196,
      0.0019084950909018517,
      -0.031206723302602768,
      -0.05033722519874573,
      -0.01799759641289711,
      -0.09130927920341492,
      0.004260472021996975,
      -0.025681789964437485,
      -0.05085594207048416,
      -0.05237298086285591,
      0.07387688755989075,
      0.014308295212686062,
      -0.0760880783200264,
      -0.09663375467061996,
      0.013108350336551666,
      0.004344412125647068,
      0.009618583135306835,
      0.014094513840973377,
      0.037468135356903076,
      -0.023929037153720856,
      -0.023055240511894226,
      -0.06134888157248497,
      0.00685919588431716,
      0.054872944951057434,
      0.017828937619924545,
      -0.04213275760412216,
      -0.051726337522268295,
      -0.05556298792362213,
      0.0017930855974555016,
      0.030993150547146797,
      -0.02489659935235977,
      -6.441707967042021e-08,
      -0.10972780734300613,
      -0.029300520196557045,
      -0.05762360617518425,
      0.007789716590195894,
      0.03757459670305252,
      0.05345436558127403,
      0.01143835298717022,
      -0.06657786667346954,
      0.05540283024311066,
      -0.000925710890442133,
      -0.031955376267433167,
      -0.050084277987480164,
      -0.027068685740232468,
      -0.0060048759914934635,
      -0.04106695577502251,
      -0.009870491921901703,
      -0.0316094346344471,
      -0.009924591518938541,
      -0.014373713172972202,
      -0.08798827975988388,
      0.05291992425918579,
      0.03047349490225315,
      0.05930487439036369,
      0.009788455441594124,
      0.035169169306755066,
      0.036132365465164185,
      0.04446206986904144,
      0.09859103709459305,
      0.021620461717247963,
      -0.0829714760184288,
      0.0051349252462387085,
      0.03705970197916031,
      -0.029540451243519783,
      -0.030141543596982956,
      -0.09130078554153442,
      0.06545337289571762,
      0.07329660654067993,
      0.047386087477207184,
      0.06465639173984528,
      -0.009885274805128574,
      -0.02039019949734211,
      -0.04380204156041145,
      -0.0756608322262764,
      0.04389789700508118,
      0.09078335762023926,
      0.08818884938955307,
      -0.11056560277938843,
      -0.059128034859895706,
      0.026337426155805588,
      -0.09810132533311844,
      0.03947841376066208,
      -0.049919020384550095,
      0.05055278539657593,
      0.039925917983055115,
      -0.04457347095012665,
      -0.024720657616853714,
      -0.006449996959418058,
      0.008609623648226261,
      0.09921871870756149,
      -0.04571754112839699,
      0.09340489655733109,
      0.017110440880060196,
      0.030042370781302452,
      -0.01173471100628376
    ],
    [
      0.001590171828866005,
      -0.0039484440349042416,
      0.028318345546722412,
      -0.07061122357845306,
      -0.06823398172855377,
      -0.03703835606575012,
      -0.07420918345451355,
      -0.041837941855192184,
      0.014590198174118996,
      -0.04392116516828537,
      -0.028353234753012657,
      0.031079528853297234,
      0.05734192207455635,
      -0.025536028668284416,
      0.007868115790188313,
      -0.008988014422357082,
      -0.013534409925341606,
      -0.02840288355946541,
      0.011123753152787685,
      0.08954497426748276,
      0.04762324318289757,
      0.04727184399962425,
      -0.04770699888467789,
      -0.03536265343427658,
      -0.04853792116045952,
      -0.045213211327791214,
      0.11025959998369217,
      0.08956518769264221,
      0.034988511353731155,
      -0.12490445375442505,
      -0.00978402141481638,
      0.05608899146318436,
      0.024054232984781265,
      -0.03740173205733299,
      0.019534949213266373,
      0.04665055871009827,
      -0.008820408955216408,
      0.02445315755903721,
      0.04580617696046829,
      -0.046736590564250946,
      -0.01221938244998455,
      -0.03446974605321884,
      0.005992833990603685,
      -0.028597116470336914,
      -0.044481270015239716,
      0.029007812961935997,
      -0.03976007178425789,
      0.013891512528061867,
      -0.006620426662266254,
      -0.09166618436574936,
      0.08502011001110077,
      0.0347759835422039,
      -0.019934650510549545,
      0.07486283034086227,
      0.0529661700129509,
      -0.009482799097895622,
      -0.13182726502418518,
      0.017820283770561218,
      0.03339709714055061,
      -0.036060530692338943,
      -0.045760542154312134,
      0.007906496524810791,
      0.017574332654476166,
      -0.05794825404882431,
      0.04065543785691261,
      -0.024456458166241646,
      -0.06295491009950638,
      -0.07442239671945572,
      -0.08910118043422699,
      -0.012692856602370739,
      -0.06728488206863403,
      -0.06092420592904091,
      -0.05348450317978859,
      0.13263638317584991,
      -0.017435681074857712,
      0.016999581828713417,
      -0.04202350229024887,
      -0.07490991801023483,
      -0.01900913007557392,
      0.03810598701238632,
      -0.08876743912696838,
      -0.050969164818525314,
      -0.0532149076461792,
      -0.011698128655552864,
      -0.008787425234913826,
      -0.014599219895899296,
      -0.08483146131038666,
      -0.028908047825098038,
      0.04091097041964531,
      0.0013209230965003371,
      0.04703138396143913,
      -0.0478038415312767,
      -0.03352979198098183,
      -0.060881875455379486,
      0.08116234093904495,
      -0.025266967713832855,
      0.04326489195227623,
      0.07251589000225067,
      -0.043430715799331665,
      0.05572380870580673,
      0.08212596923112869,
      0.04767331853508949,
      0.005321596283465624,
      0.00044005949166603386,
      0.0767156109213829,
      0.05143074318766594,
      -0.03339771926403046,
      -4.766123674926348e-05,
      -0.057704851031303406,
      -0.0332179069519043,
      0.015659185126423836,
      -0.04577036574482918,
      -0.10728466510772705,
      -0.14824704825878143,
      -0.08793047815561295,
      -0.016684383153915405,
      -0.03731999918818474,
      -0.009144247509539127,
      -0.02454121969640255,
      -0.06654363870620728,
      0.0037071446422487497,
      0.034268997609615326,
      -0.010632984340190887,
      -0.04305484518408775,
      -0.14365392923355103,
      -0.08431758731603622,
      0.0036453690845519304,
      8.045334598945224e-33,
      -0.03370371833443642,
      0.003937993664294481,
      0.025733577087521553,
      -0.02614927478134632,
      -0.028300506994128227,
      -0.005329829175025225,
      -0.09528566151857376,
      0.03652890771627426,
      -0.03919653967022896,
      0.03752417117357254,
      0.026056434959173203,
      -0.03350240737199783,
      0.11073948442935944,
      0.013836446218192577,
      -0.0634746327996254,
      0.1089407429099083,
      0.09178201109170914,
      -0.02650865539908409,
      0.0026609310880303383,
      0.030705377459526062,
      0.03514650836586952,
      0.08626099675893784,
      -0.018477007746696472,
      0.03360734134912491,
      0.010026481933891773,
      0.040534086525440216,
      0.034655213356018066,
      -0.024772001430392265,
      0.001455761375837028,
      -0.01575854979455471,
      -0.0022319983690977097,
      0.00444258376955986,
      0.00035568480961956084,
      -0.0659724548459053,
      0.07113414257764816,
      0.024139901623129845,
      0.004464790225028992,
      -0.034556783735752106,
      0.00918938685208559,
      -0.10483173280954361,
      0.073439821600914,
      0.009650721214711666,
      -0.036515142768621445,
      0.013326561078429222,
      -0.013471346348524094,
      0.0757981464266777,
      -0.0704566016793251,
      0.0020297029986977577,
      0.08465632051229477,
      0.06962597370147705,
      0.04387855902314186,
      -0.01740102842450142,
      -0.07366184890270233,
      0.059226807206869125,
      -0.001889968290925026,
      -0.03166605159640312,
      -0.0007379429880529642,
      -0.0002447507285978645,
      0.028116652742028236,
      0.12972164154052734,
      -0.07106555253267288,
      0.07881276309490204,
      -0.04199501872062683,
      0.05145815387368202,
      -0.03407445549964905,
      0.008738587610423565,
      0.01955280266702175,
      0.013176385313272476,
      -0.025831427425146103,
      0.05376489832997322,
      -0.00989643856883049,
      0.025760319083929062,
      0.03143559768795967,
      0.08078037947416306,
      -0.07847006618976593,
      -0.057118162512779236,
      -0.023071959614753723,
      -0.038886748254299164,
      -0.010159757919609547,
      -0.013854926452040672,
      -0.026055730879306793,
      0.05623937398195267,
      -0.0709182545542717,
      0.0817977786064148,
      -0.1088927835226059,
      -0.004326396621763706,
      -0.0617184042930603,
      -0.06874939054250717,
      -0.03475191071629524,
      -0.05232202261686325,
      0.01803758181631565,
      -0.05888041481375694,
      -0.07720781862735748,
      -0.00015807921590749174,
      -0.04982149600982666,
      -1.4965322905442178e-32,
      0.03833590820431709,
      0.008112303912639618,
      -0.06539680808782578,
      -0.00480208033695817,
      -0.10483113676309586,
      -0.01668667234480381,
      0.12943914532661438,
      -0.05521035194396973,
      -0.02011403813958168,
      0.0047203670255839825,
      -0.010369371622800827,
      0.049139440059661865,
      0.028003625571727753,
      0.022872919216752052,
      0.03616722673177719,
      0.048801079392433167,
      -0.10220558196306229,
      0.0005956330569460988,
      -0.06933534145355225,
      0.03291952610015869,
      -0.057727716863155365,
      0.025487393140792847,
      -0.022984856739640236,
      0.018084801733493805,
      -0.009073208086192608,
      0.020982665941119194,
      -0.03215300291776657,
      0.021514231339097023,
      0.014044470153748989,
      -0.012885645031929016,
      -0.01453507412225008,
      0.020298372954130173,
      0.012092996388673782,
      0.05885806307196617,
      -0.08022543042898178,
      -0.040974244475364685,
      0.00762619124725461,
      0.07371646165847778,
      0.07595200836658478,
      0.020401837304234505,
      -0.015478446148335934,
      0.05658276006579399,
      0.036593224853277206,
      0.04522990807890892,
      -0.021463464945554733,
      -0.006799233146011829,
      0.019684012979269028,
      -0.03614163026213646,
      0.013186490163207054,
      -0.10313910990953445,
      -0.01439819298684597,
      -0.005871168337762356,
      0.020740337669849396,
      0.025244297459721565,
      -0.00997307151556015,
      0.05527222156524658,
      -0.0554179847240448,
      -0.013612393289804459,
      -0.023697271943092346,
      -0.004488872829824686,
      0.030366703867912292,
      -0.0777839794754982,
      0.03954266011714935,
      0.08077430725097656,
      -0.041584622114896774,
      -0.035500723868608475,
      -0.10276268422603607,
      -0.09782280772924423,
      0.00039850620669312775,
      -0.07087337970733643,
      -0.08302735537290573,
      -0.03473503142595291,
      0.022851772606372833,
      -0.022482162341475487,
      0.04895086586475372,
      -0.017744245007634163,
      0.09908543527126312,
      0.06647839397192001,
      0.011556694284081459,
      0.02618749812245369,
      -0.02659221552312374,
      0.006467315834015608,
      -0.11624561995267868,
      -0.004368542693555355,
      0.00868897419422865,
      -0.008600135333836079,
      -0.0020167971961200237,
      -0.03178318962454796,
      -0.06789176166057587,
      0.0016695383237674832,
      -0.05802738666534424,
      0.08362005650997162,
      -0.002194561529904604,
      0.010859615169465542,
      -0.06039893254637718,
      -6.37333528175077e-08,
      -0.042115695774555206,
      -0.0057946983724832535,
      0.021290116012096405,
      -0.03200315311551094,
      0.045941613614559174,
      0.019805675372481346,
      0.04284018278121948,
      -0.11962325870990753,
      -0.013376856222748756,
      0.037917088717222214,
      -0.04597438499331474,
      0.01579766534268856,
      -0.10482336580753326,
      -0.10973784327507019,
      0.0004092231683898717,
      0.0933731347322464,
      -0.05900927633047104,
      -0.050923701375722885,
      -0.031670283526182175,
      0.019209876656532288,
      -0.01803688518702984,
      -0.03763299062848091,
      -0.08088639378547668,
      -0.05973369628190994,
      -0.06386472284793854,
      0.024774903431534767,
      0.04712926968932152,
      0.0597490519285202,
      -0.03290499374270439,
      0.05241953954100609,
      0.07047966122627258,
      0.07541818171739578,
      -0.005933910608291626,
      -0.05366408824920654,
      -0.014739539474248886,
      0.054498277604579926,
      0.000346854270901531,
      0.03750604763627052,
      0.033224791288375854,
      0.04686995968222618,
      -0.04792162775993347,
      -0.01381684374064207,
      -0.06471074372529984,
      -0.0009271372109651566,
      -0.014740120619535446,
      0.012265274301171303,
      -0.020065201446413994,
      0.05125771462917328,
      0.008072501979768276,
      -0.0017886266577988863,
      -0.025466572493314743,
      0.034113749861717224,
      -0.03600238263607025,
      0.003947680816054344,
      -0.018397316336631775,
      0.05068820342421532,
      -0.08830912411212921,
      -0.05363265052437782,
      0.009440703317523003,
      -0.018128573894500732,
      0.12002559006214142,
      -0.011547266505658627,
      0.047861047089099884,
      0.022245431318879128
    ],
    [
      -0.03258460760116577,
      -0.01760975643992424,
      0.05192384123802185,
      -0.040570229291915894,
      0.004376275930553675,
      -0.11532483994960785,
      -0.05114111676812172,
      0.02945058047771454,
      0.15378300845623016,
      -0.029530461877584457,
      0.06053432077169418,
      -0.0604686513543129,
      0.01575980708003044,
      -0.011159198358654976,
      -0.020094169303774834,
      -0.018856599926948547,
      0.00969680119305849,
      -0.0684269443154335,
      -0.013351806439459324,
      -0.04446003958582878,
      -0.008903334848582745,
      0.006650351919233799,
      0.02991469018161297,
      0.03314807265996933,
      -0.040239617228507996,
      -0.0386236235499382,
      -0.06034483760595322,
      -0.08813189715147018,
      0.011652586981654167,
      -0.04916571080684662,
      0.013825575821101665,
      0.021242648363113403,
      0.027401842176914215,
      0.0072874813340604305,
      -0.003553007962182164,
      0.020895978435873985,
      0.036828819662332535,
      0.02628813311457634,
      0.10674656927585602,
      -0.04690799489617348,
      -0.00020591210341081023,
      -0.051773518323898315,
      0.023150868713855743,
      0.015278666280210018,
      -0.05838317051529884,
      0.027474286034703255,
      -0.05083765089511871,
      0.000808704411610961,
      -0.07935468852519989,
      0.029682135209441185,
      0.04645783454179764,
      -0.03371357545256615,
      0.051640015095472336,
      -0.017509127035737038,
      -0.017886988818645477,
      -0.009849310852587223,
      -0.04306795075535774,
      -0.03991604968905449,
      0.028980126604437828,
      0.04604767635464668,
      -0.015687596052885056,
      0.06053720787167549,
      -0.053106989711523056,
      0.022585919126868248,
      0.09709945321083069,
      0.061140310019254684,
      -0.04564282298088074,
      -0.005317043513059616,
      -0.036312706768512726,
      0.07031171768903732,
      0.045747384428977966,
      0.021520502865314484,
      0.033643562346696854,
      0.054164301604032516,
      -0.06286435574293137,
      -0.057676903903484344,
      -0.00710760522633791,
      0.06260799616575241,
      -0.09196478128433228,
      -0.053875379264354706,
      -0.09673498570919037,
      0.01972202956676483,
      -0.003118372056633234,
      -0.07161715626716614,
      -0.0001764005282893777,
      -0.07008584588766098,
      0.03529052436351776,
      0.10733628273010254,
      -0.0339055098593235,
      0.023102223873138428,
      0.0251433327794075,
      -0.00313703715801239,
      -0.03009878098964691,
      0.0012916922569274902,
      0.03973500803112984,
      0.041507020592689514,
      -0.012040047906339169,
      0.005121555645018816,
      0.03219284862279892,
      0.0009006873588077724,
      -0.006428483407944441,
      -0.00577933294698596,
      -0.029809897765517235,
      -0.06933695822954178,
      0.024944232776761055,
      -0.015546977519989014,
      -0.04499467834830284,
      0.04206601902842522,
      0.015789687633514404,
      -0.012679985724389553,
      -0.052737824618816376,
      -0.11330277472734451,
      0.06821324676275253,
      -0.03881072998046875,
      -0.020389750599861145,
      0.05253084376454353,
      -0.04783226177096367,
      0.022021543234586716,
      0.0571187324821949,
      -0.04281596466898918,
      0.07025650143623352,
      0.050187934190034866,
      0.0498763769865036,
      -0.09249664843082428,
      0.015047282911837101,
      -0.0002268033567816019,
      0.11279051750898361,
      5.1341434932651485e-33,
      -0.05413493141531944,
      -0.04445906728506088,
      -0.04759244620800018,
      -0.0465727299451828,
      -0.021736206486821175,
      0.030668087303638458,
      0.0042263478972017765,
      -0.03990355506539345,
      0.0002175123372580856,
      0.044528622180223465,
      -0.07051033526659012,
      -0.049414727836847305,
      -0.034673918038606644,
      -0.032626863569021225,
      -0.07057217508554459,
      -0.022116966545581818,
      0.07891040295362473,
      0.050580158829689026,
      -0.02065834403038025,
      0.00027391358162276447,
      0.004467286169528961,
      -0.03515183925628662,
      0.03421095386147499,
      -0.018568983301520348,
      0.06257021427154541,
      -0.008926862850785255,
      0.005850739311426878,
      0.06345520913600922,
      -0.06112419068813324,
      -0.02201499417424202,
      -0.009664253331720829,
      0.052558306604623795,
      0.024268334731459618,
      0.056756142526865005,
      -0.04878217726945877,
      0.15029457211494446,
      0.02813771180808544,
      -0.08401242643594742,
      0.013003168627619743,
      -0.03415374457836151,
      0.013710441999137402,
      0.006542249117046595,
      -0.08179228752851486,
      0.026710599660873413,
      -0.006598238833248615,
      -0.042131029069423676,
      -0.019609345123171806,
      -0.06443767994642258,
      -0.10065465420484543,
      0.05362803861498833,
      0.06268341094255447,
      0.07585885375738144,
      0.017677314579486847,
      -0.09379394352436066,
      0.0224155280739069,
      -0.04035799950361252,
      0.013774130493402481,
      0.05018556863069534,
      -0.035229556262493134,
      0.12696579098701477,
      0.07158932834863663,
      -0.028742749243974686,
      -0.06318211555480957,
      -0.09710339456796646,
      -0.058005642145872116,
      0.06981398165225983,
      -0.022038962692022324,
      0.012435953132808208,
      0.007051218766719103,
      0.046677492558956146,
      0.026525096967816353,
      -0.0745905265212059,
      0.01986195519566536,
      0.00583866098895669,
      0.08703380823135376,
      -0.06506549566984177,
      -0.04339804872870445,
      -0.011746794916689396,
      0.030689166858792305,
      0.005334120709449053,
      0.036253802478313446,
      0.017540333792567253,
      -0.08984724432229996,
      0.049796830862760544,
      0.013036039657890797,
      0.03006238304078579,
      0.07869213074445724,
      0.039265550673007965,
      -0.1322265863418579,
      0.03942257910966873,
      -0.1437152624130249,
      -0.06100854650139809,
      0.10065368562936783,
      0.03652317821979523,
      0.12051910161972046,
      -7.904426621744218e-33,
      0.025159357115626335,
      -0.014834168367087841,
      0.011770058423280716,
      0.07672426104545593,
      -0.008935092948377132,
      -0.010783945210278034,
      -0.030522266402840614,
      0.0614655464887619,
      -0.050735775381326675,
      0.028819426894187927,
      0.05707370862364769,
      -0.0006530334358103573,
      0.02333463542163372,
      0.03219755366444588,
      -0.0791042298078537,
      0.036614447832107544,
      0.08667215704917908,
      -0.0711914524435997,
      0.09003206342458725,
      -0.054593756794929504,
      -0.01885276287794113,
      0.025949601083993912,
      -0.06703769415616989,
      0.057718124240636826,
      0.03974704071879387,
      0.06693758815526962,
      -0.059880878776311874,
      -0.02753172069787979,
      0.0009095016284845769,
      -0.08771459758281708,
      -0.05758822709321976,
      -0.080600306391716,
      -0.01731969229876995,
      0.006579096894711256,
      -0.017897628247737885,
      0.0017930450849235058,
      0.008850647136569023,
      0.029406411573290825,
      0.017951855435967445,
      -0.009908400475978851,
      0.006206817924976349,
      -0.030439114198088646,
      -0.04079075902700424,
      -0.07794994860887527,
      -0.06227557361125946,
      0.035107411444187164,
      0.06005092337727547,
      0.006592264398932457,
      -0.020403634756803513,
      -0.00959061924368143,
      0.004496761132031679,
      0.08678431808948517,
      0.05238575115799904,
      -0.014409943483769894,
      0.012648540548980236,
      0.016699695959687233,
      -0.07056046277284622,
      -0.02707633376121521,
      0.07955454289913177,
      -0.027271727100014687,
      -0.056969281286001205,
      0.03591788932681084,
      0.0614357627928257,
      0.04606768488883972,
      0.017360864207148552,
      -0.08386144042015076,
      0.00760053563863039,
      0.029943367466330528,
      0.03870366886258125,
      -0.05099422112107277,
      0.03433698043227196,
      0.06535367667675018,
      -0.11603138595819473,
      0.0007556479540653527,
      0.029603419825434685,
      0.007358310278505087,
      0.04997611790895462,
      -0.11422266066074371,
      0.062302518635988235,
      0.010344871319830418,
      -0.05616620555520058,
      0.03863845393061638,
      0.01018602680414915,
      0.04384889081120491,
      -0.01722079887986183,
      0.021929703652858734,
      -0.013385777361690998,
      0.03055146150290966,
      0.06852282583713531,
      0.020151587203145027,
      0.03068760223686695,
      -0.007048073224723339,
      0.0224952083081007,
      -0.02545897662639618,
      -0.07804227620363235,
      -5.3016197654187636e-08,
      0.023352578282356262,
      -0.07762312889099121,
      0.03403531387448311,
      -0.10039994865655899,
      0.11620701104402542,
      -0.0011909474851563573,
      0.029138321056962013,
      -0.013673077337443829,
      -0.03172314539551735,
      -0.10452385991811752,
      0.06558729708194733,
      0.02034045197069645,
      -0.08142504841089249,
      -0.10360822826623917,
      -0.03388046845793724,
      -0.0022541959770023823,
      0.004159028176218271,
      -0.011240256018936634,
      0.011039253324270248,
      -0.008833817206323147,
      -0.01872153766453266,
      0.003931235522031784,
      -0.07248405367136002,
      -0.08644785732030869,
      -0.016538260504603386,
      0.005641896743327379,
      0.08838850259780884,
      0.08475156128406525,
      -0.11017177253961563,
      0.005778889171779156,
      0.00421401159837842,
      -0.03476537764072418,
      -0.010308144614100456,
      -0.05443989112973213,
      0.05593354254961014,
      0.05144941434264183,
      -0.009018871933221817,
      -0.046459052711725235,
      0.04311024770140648,
      0.015125620178878307,
      -0.025826992467045784,
      -0.03908004239201546,
      -0.019810467958450317,
      0.019328264519572258,
      -0.07247651368379593,
      -0.032202307134866714,
      -0.026678338646888733,
      0.010986115783452988,
      -0.048142313957214355,
      -0.06095975264906883,
      -0.02528129331767559,
      -0.058290187269449234,
      0.07047945261001587,
      -0.014622367918491364,
      0.06344695389270782,
      0.007864429615437984,
      0.04108276590704918,
      -0.06220196560025215,
      -0.014350883662700653,
      0.014627069234848022,
      0.11352597922086716,
      -0.020884061232209206,
      0.0627702996134758,
      -0.025511709973216057
    ],
    [
      -0.038789693266153336,
      0.04085797816514969,
      -0.010385154746472836,
      -0.029178211465477943,
      0.01569991558790207,
      -0.06358571350574493,
      0.03302913159132004,
      0.0057645319029688835,
      0.004816500470042229,
      -0.03764711320400238,
      0.031208978965878487,
      -0.07807107269763947,
      0.12506955862045288,
      0.018205922096967697,
      0.00664961664006114,
      0.038042403757572174,
      -0.020625490695238113,
      -0.021311789751052856,
      0.022016221657395363,
      0.0673903077840805,
      0.04062790796160698,
      0.05629692226648331,
      -0.020660093054175377,
      0.041759178042411804,
      -0.0842432826757431,
      -0.005097548943012953,
      0.0014676445862278342,
      0.05880976468324661,
      -0.03852523863315582,
      -0.039558298885822296,
      0.03261146321892738,
      0.020350715145468712,
      -0.07252650707960129,
      0.0410941019654274,
      0.1495513916015625,
      0.08345860987901688,
      0.03207382559776306,
      0.023335091769695282,
      0.019298195838928223,
      -0.04365971311926842,
      0.06265319138765335,
      -0.04636562243103981,
      0.053852763026952744,
      -0.06959089636802673,
      -0.012146537192165852,
      -0.04596045985817909,
      -0.02469651773571968,
      -0.012763499282300472,
      -0.037596121430397034,
      -0.025149505585432053,
      -0.027923883870244026,
      0.030919356271624565,
      -0.030501164495944977,
      0.03482004627585411,
      0.03690341114997864,
      0.031248804181814194,
      -0.0699891671538353,
      -0.01387581042945385,
      -0.051207952201366425,
      -0.056119922548532486,
      0.0377211831510067,
      0.038618333637714386,
      0.08159326761960983,
      -0.007381875533610582,
      -0.05235036462545395,
      0.030090954154729843,
      -0.1215391680598259,
      0.04305289685726166,
      -0.06422028690576553,
      -0.008443458937108517,
      -0.09568909555673599,
      -0.0247128177434206,
      -0.07821768522262573,
      0.09128326922655106,
      0.031056107953190804,
      0.061836134642362595,
      -0.04624371603131294,
      -0.07722960412502289,
      0.04031398892402649,
      -0.0806812271475792,
      -0.05216418206691742,
      -0.08218349516391754,
      -0.04974285885691643,
      0.03145821765065193,
      -0.030641106888651848,
      0.0050530037842690945,
      0.012627753429114819,
      0.01251839380711317,
      -0.014785083010792732,
      0.007639699149876833,
      0.0724882036447525,
      -0.06033211573958397,
      -0.04179447144269943,
      -7.009929686319083e-05,
      0.14539554715156555,
      -0.017021456733345985,
      -0.05310147628188133,
      -0.0076064434833824635,
      -0.0039639403112232685,
      0.06655552238225937,
      0.037929270416498184,
      -0.0016272685024887323,
      -0.018278805539011955,
      -0.02708788961172104,
      -0.005658977665007114,
      0.004574790131300688,
      0.07538876682519913,
      -0.020891545340418816,
      -0.012952124699950218,
      -0.032594285905361176,
      -0.003548713866621256,
      -0.016472890973091125,
      -0.004986499436199665,
      -0.06101498380303383,
      -0.026275472715497017,
      0.04108772054314613,
      0.017255958169698715,
      -0.03044293075799942,
      -0.11610477417707443,
      -0.07165859639644623,
      -0.03706599026918411,
      -0.023323582485318184,
      0.041918035596609116,
      -0.01774260215461254,
      0.04171748459339142,
      -0.08849398791790009,
      0.02334565483033657,
      2.3386067053685854e-33,
      -0.057510390877723694,
      0.02481556124985218,
      0.06174047291278839,
      -0.01406179554760456,
      -0.04141048341989517,
      0.0008668475202284753,
      0.03964316472411156,
      0.014765067957341671,
      -0.033454179763793945,
      0.03491019457578659,
      -0.04509276896715164,
      -0.0145949712023139,
      0.02256123721599579,
      -0.04722141847014427,
      -0.0130327008664608,
      0.0445220023393631,
      0.01678960770368576,
      0.02574649080634117,
      0.014427918009459972,
      0.08275915682315826,
      0.06037990748882294,
      -0.06006554141640663,
      -0.004237968008965254,
      -0.02593863569200039,
      0.029199963435530663,
      -0.022479817271232605,
      -0.046845488250255585,
      -0.013863817788660526,
      0.005058877170085907,
      -0.0386388897895813,
      0.038777612149715424,
      -0.023450205102562904,
      -0.00036853583878837526,
      0.025595512241125107,
      0.07164457440376282,
      0.01735420525074005,
      0.02422853372991085,
      -0.07014469802379608,
      -0.053522106260061264,
      -0.0026264507323503494,
      0.02496725134551525,
      -0.031064147129654884,
      0.0359635166823864,
      0.05670953169465065,
      0.014978923834860325,
      -0.01181921735405922,
      -0.08357217162847519,
      0.0015687078703194857,
      0.0542786605656147,
      0.005817166529595852,
      0.028790421783924103,
      0.03306092694401741,
      -0.04557610675692558,
      -0.06132351607084274,
      0.017360329627990723,
      -0.06068447604775429,
      -0.08432286977767944,
      0.09969483315944672,
      0.008281194604933262,
      0.09325648844242096,
      -0.026316910982131958,
      -0.016990646719932556,
      -0.06838902086019516,
      -0.028307706117630005,
      0.0033510266803205013,
      0.014662457630038261,
      0.031077850610017776,
      -0.019432174041867256,
      -0.039092037826776505,
      0.00630921870470047,
      0.018177900463342667,
      -0.06269765645265579,
      0.024870285764336586,
      0.05270469933748245,
      0.0131348492577672,
      -0.040303729474544525,
      -0.07263752073049545,
      0.020792825147509575,
      0.028526028618216515,
      -0.06219363957643509,
      -0.0005647764191962779,
      0.001489791669882834,
      -0.07823479920625687,
      0.09813186526298523,
      -0.09809140861034393,
      -0.004889473784714937,
      -0.03085925616323948,
      -0.06378164887428284,
      0.044822514057159424,
      -0.05215051770210266,
      0.003422145964577794,
      -0.07115243375301361,
      -0.10339958220720291,
      -0.07312498241662979,
      -0.010216642171144485,
      -6.793036385976085e-33,
      0.08284750580787659,
      0.010949041694402695,
      0.029087457805871964,
      -0.029035646468400955,
      -0.05119678005576134,
      -0.030683664605021477,
      0.1043052226305008,
      0.06030457466840744,
      0.013443812727928162,
      0.030952870845794678,
      0.01438205223530531,
      0.016913196071982384,
      0.03047395683825016,
      -0.03231361508369446,
      -0.040381304919719696,
      0.03854406625032425,
      -0.15100662410259247,
      -0.05403279513120651,
      0.016195572912693024,
      0.05563407018780708,
      -0.029272262006998062,
      0.08479828387498856,
      0.011368569917976856,
      0.06440676003694534,
      -0.04299844056367874,
      0.09469585120677948,
      0.03096706233918667,
      0.053893331438302994,
      -0.00740089500322938,
      -0.04639272764325142,
      -0.016466466709971428,
      0.10589957237243652,
      -0.04632812365889549,
      0.004720128607004881,
      -0.08697664737701416,
      -0.025780271738767624,
      0.058835580945014954,
      0.06794840097427368,
      0.04053175449371338,
      0.07241730391979218,
      0.07586726546287537,
      0.033217038959264755,
      -0.08716356009244919,
      -0.025528766214847565,
      -0.016727697104215622,
      -0.02688620053231716,
      0.0006291716708801687,
      0.002056684112176299,
      0.026787983253598213,
      -0.04877886921167374,
      -0.029661064967513084,
      -0.03428894281387329,
      0.03413064405322075,
      0.02455049194395542,
      -0.02216419391334057,
      0.07997376471757889,
      -0.06638156622648239,
      -0.004312329459935427,
      -0.015222339890897274,
      -0.03202914446592331,
      -0.030994044616818428,
      0.018484853208065033,
      0.03484966233372688,
      0.09882666170597076,
      -0.00878981314599514,
      -0.08076240867376328,
      -0.08803559094667435,
      -0.09123411029577255,
      0.020635977387428284,
      -0.09989660978317261,
      0.03568311035633087,
      -0.04337099567055702,
      0.0031512747518718243,
      0.002156606176868081,
      0.1064322367310524,
      -0.0015028670895844698,
      0.013431131839752197,
      -0.026005713269114494,
      0.0503636971116066,
      0.056929223239421844,
      -0.04311433434486389,
      0.01470777578651905,
      0.015662413090467453,
      0.04755416512489319,
      -0.01569463685154915,
      -0.008081907406449318,
      -0.03060709871351719,
      0.08181541413068771,
      -0.07786468416452408,
      -0.011723893694579601,
      -0.022836722433567047,
      0.01351171638816595,
      0.027765752747654915,
      -0.03796686232089996,
      -0.0609234981238842,
      -5.631788013715777e-08,
      -0.06711705774068832,
      -0.061008818447589874,
      -0.03045656345784664,
      -0.019294748082756996,
      -0.08382881432771683,
      0.08424042165279388,
      -0.05264892801642418,
      -0.15421739220619202,
      0.037113629281520844,
      0.019941704347729683,
      -0.012351037934422493,
      -0.03186090663075447,
      -0.10306810587644577,
      -0.06545019149780273,
      -0.0419393926858902,
      0.017582569271326065,
      -0.00012061841698596254,
      -0.04770867899060249,
      -0.031107138842344284,
      -0.013411288149654865,
      0.0033763176761567593,
      0.017501946538686752,
      0.020860524848103523,
      -2.9979817554703914e-05,
      0.05510982125997543,
      0.02257177047431469,
      -0.00010476004536030814,
      0.010545056313276291,
      -0.04519037902355194,
      0.048585355281829834,
      0.08390597254037857,
      0.03168980032205582,
      0.014607200399041176,
      -0.09274470061063766,
      0.01969103142619133,
      0.1389821618795395,
      0.027961503714323044,
      -0.009879812598228455,
      0.04412734881043434,
      0.01323922909796238,
      -0.05680552124977112,
      0.06571084260940552,
      -0.13346172869205475,
      -0.045339927077293396,
      0.1286548227071762,
      -0.07924821972846985,
      -0.049871642142534256,
      0.013411234132945538,
      0.030217254534363747,
      -0.08845469355583191,
      -0.047685518860816956,
      -0.02684829570353031,
      -0.0051316204480826855,
      -0.017643282189965248,
      -0.04514105245471001,
      -0.012731499969959259,
      -0.0654798299074173,
      -0.014677610248327255,
      0.05568326264619827,
      0.02542971633374691,
      0.08112630248069763,
      -0.0192970372736454,
      0.12872295081615448,
      -0.03847251832485199
    ],
    [
      -0.04836611822247505,
      0.058378297835588455,
      -0.024409960955381393,
      -0.015282901003956795,
      0.024845320731401443,
      -0.049495551735162735,
      0.03274538367986679,
      0.0032588921021670103,
      0.05421781167387962,
      0.029397794976830482,
      0.06985802203416824,
      -0.05144503712654114,
      0.025410320609807968,
      -0.030060352757573128,
      -0.051565781235694885,
      -0.07967375963926315,
      -0.0017574718222022057,
      -0.06758750975131989,
      0.05022700875997543,
      0.07560041546821594,
      0.03331732377409935,
      0.06859864294528961,
      -0.019924046471714973,
      0.07778191566467285,
      -0.022557560354471207,
      -0.016338400542736053,
      0.002599217463284731,
      -0.04690864682197571,
      -0.04264066368341446,
      -0.021714167669415474,
      0.014925717376172543,
      0.10150100290775299,
      -0.018381334841251373,
      0.00011368814011802897,
      0.10618803650140762,
      0.04889371618628502,
      0.0005276533775031567,
      0.002187803154811263,
      -0.02307252772152424,
      -0.06766972690820694,
      0.048688679933547974,
      0.003347706748172641,
      0.0109164509922266,
      -0.0507044680416584,
      -0.057901181280612946,
      -0.03205760195851326,
      -0.034928906708955765,
      -0.0042483871802687645,
      -0.08430015295743942,
      -0.014768483117222786,
      -0.02490472048521042,
      -0.03681822121143341,
      0.014004663564264774,
      0.06775277853012085,
      0.025582585483789444,
      -0.011844693683087826,
      0.03637334704399109,
      -0.06026417389512062,
      -0.07884778082370758,
      -0.06651781499385834,
      -0.014917008578777313,
      0.04996449127793312,
      -0.03541214391589165,
      -0.052183590829372406,
      0.04826275631785393,
      0.05290158465504646,
      -0.039079442620277405,
      -0.04164164140820503,
      0.020059796050190926,
      0.04601123556494713,
      -0.007868892513215542,
      -0.05446390435099602,
      -0.047580040991306305,
      0.0043318928219377995,
      0.046243466436862946,
      0.034051015973091125,
      0.026000915095210075,
      -0.0070771886967122555,
      0.028675252571702003,
      -0.0795314833521843,
      -0.12132267653942108,
      -0.11126179248094559,
      0.0041116513311862946,
      -0.00015997453010641038,
      0.0350436307489872,
      -0.038450200110673904,
      -0.012440701015293598,
      0.07247689366340637,
      0.08177610486745834,
      -0.055255454033613205,
      0.07517711073160172,
      0.04175098240375519,
      -0.07749633491039276,
      -0.0412418469786644,
      0.15010952949523926,
      -0.02636743150651455,
      -0.018047071993350983,
      -0.033640291541814804,
      0.023705020546913147,
      0.06803745031356812,
      0.055106714367866516,
      0.045989248901605606,
      -0.07317802309989929,
      -0.05454963445663452,
      0.06436862051486969,
      0.024937115609645844,
      0.04982778802514076,
      -0.01684696413576603,
      -0.022467944771051407,
      -0.043510738760232925,
      -0.0660182312130928,
      -0.05755409225821495,
      0.07601146399974823,
      -0.013534346595406532,
      0.01141989417374134,
      0.06003551185131073,
      -0.043190259486436844,
      -0.025946419686079025,
      -0.039795272052288055,
      -0.09919655323028564,
      0.014956561848521233,
      0.059670887887477875,
      -0.013883044943213463,
      -0.04760216921567917,
      0.019950853660702705,
      -0.0015256257029250264,
      0.008219677954912186,
      4.843872795744847e-33,
      0.0048609147779643536,
      -0.07968772947788239,
      -0.046961307525634766,
      -0.055791907012462616,
      -0.014801064506173134,
      0.01686289720237255,
      0.05145403370261192,
      -0.0018300018273293972,
      0.001503170933574438,
      0.02492525242269039,
      0.005208159796893597,
      -0.05087361857295036,
      -0.0378200002014637,
      -0.09408167004585266,
      -0.07154913991689682,
      0.01821814849972725,
      0.015114249661564827,
      0.1008588969707489,
      0.08752062171697617,
      0.08245466649532318,
      0.058668870478868484,
      -0.13363775610923767,
      0.01265297643840313,
      -0.0743570327758789,
      -0.0033846497535705566,
      -0.026116475462913513,
      -0.10331983119249344,
      -0.059402547776699066,
      0.01106752548366785,
      -0.01417678501456976,
      0.023311175405979156,
      0.04981972649693489,
      0.09486640244722366,
      0.06322944909334183,
      -0.026963768526911736,
      0.04436463862657547,
      -0.03212643414735794,
      -0.0672789067029953,
      0.008461054414510727,
      -0.004577745217829943,
      0.0009636871982365847,
      -0.00789178628474474,
      -0.03081434592604637,
      0.004525535274296999,
      -0.0457567535340786,
      -0.02688247710466385,
      -0.046389736235141754,
      -0.0012256602058187127,
      0.030077699571847916,
      0.062371280044317245,
      0.044715411961078644,
      0.04944900423288345,
      -0.007305617909878492,
      -0.11622540652751923,
      -0.033400364220142365,
      -0.05446481332182884,
      0.016158992424607277,
      0.03639335185289383,
      -0.00722799776121974,
      0.04247742146253586,
      0.05114871263504028,
      -0.04242384061217308,
      -0.05562707409262657,
      -0.05568685382604599,
      -0.0067693633027374744,
      0.08250869065523148,
      -0.053232040256261826,
      -0.07170858234167099,
      -0.0254496019333601,
      0.03131452202796936,
      -0.022719452157616615,
      -0.06083186715841293,
      0.11136116832494736,
      0.011054961010813713,
      0.0515548512339592,
      -0.07695767283439636,
      -0.0006196609465405345,
      0.018362266942858696,
      0.06010686233639717,
      -0.06099395453929901,
      0.04023772478103638,
      0.010623479261994362,
      -0.030995380133390427,
      0.06542378664016724,
      -0.021105753257870674,
      0.014388008043169975,
      0.039541494101285934,
      -0.049415867775678635,
      -0.07180692255496979,
      -0.08513617515563965,
      -0.06863098591566086,
      -0.09177232533693314,
      -0.03390412777662277,
      0.013494419865310192,
      0.12480689585208893,
      -6.854973918004881e-33,
      0.035697467625141144,
      -0.009017893113195896,
      0.0278248842805624,
      0.03505349159240723,
      0.02127266675233841,
      -0.03154424950480461,
      -0.029388297349214554,
      0.01777401939034462,
      0.08146443217992783,
      0.028987295925617218,
      0.09135563671588898,
      -0.024245034903287888,
      0.01581433415412903,
      0.001654439722187817,
      -0.023793503642082214,
      0.03179832920432091,
      0.017156561836600304,
      -0.031298164278268814,
      0.04809758812189102,
      0.02450552023947239,
      0.03836158290505409,
      -0.006882038898766041,
      -0.028838559985160828,
      0.054261840879917145,
      -0.014978238381445408,
      0.04807769134640694,
      -0.025227023288607597,
      -0.0006676566554233432,
      -0.03090347908437252,
      -0.08189114928245544,
      -0.019916614517569542,
      -0.011226454749703407,
      -0.05640554800629616,
      -0.05713912472128868,
      0.03680732101202011,
      -0.04794981703162193,
      -0.014367220923304558,
      0.08180394023656845,
      -0.0013389026280492544,
      0.041941188275814056,
      0.1285530924797058,
      0.03309403732419014,
      -0.06701768934726715,
      -0.0354645811021328,
      0.013871538452804089,
      -0.022384917363524437,
      0.03184015303850174,
      0.023997699841856956,
      0.06452217698097229,
      -0.028563398867845535,
      -0.009415826760232449,
      -0.045384958386421204,
      0.11250992119312286,
      0.07707322388887405,
      -0.03596153110265732,
      0.14821909368038177,
      0.05153350904583931,
      -0.005927675403654575,
      0.033090703189373016,
      -0.046000659465789795,
      -0.05205360800027847,
      0.08552034944295883,
      0.002980046672746539,
      0.07673272490501404,
      0.042525243014097214,
      -0.03388117253780365,
      -0.02437165565788746,
      -0.01743643544614315,
      0.09063562005758286,
      -0.011897548101842403,
      0.05056009069085121,
      0.09366452693939209,
      -0.005700693465769291,
      0.009229150600731373,
      0.10489237308502197,
      0.07629553228616714,
      -0.029683738946914673,
      -0.10801845788955688,
      0.017840806394815445,
      0.028497766703367233,
      -0.008066512644290924,
      0.07661122828722,
      0.040113914757966995,
      -0.00514369597658515,
      0.029874300584197044,
      0.011967187747359276,
      -0.04442838579416275,
      0.025386273860931396,
      0.0030980214942246675,
      -0.00911940261721611,
      -0.06444071233272552,
      -0.045871347188949585,
      0.022637750953435898,
      -0.028818050399422646,
      -0.07079004496335983,
      -6.419018916403729e-08,
      -0.08299114555120468,
      -0.037096019834280014,
      -0.03219074755907059,
      -0.03758664429187775,
      0.08166351914405823,
      0.000521192152518779,
      0.03535036742687225,
      -0.10948976874351501,
      -0.014873555861413479,
      0.00889299251139164,
      0.016679886728525162,
      -0.025915034115314484,
      -0.06779614835977554,
      -0.05775550752878189,
      -0.05006532743573189,
      -0.039844464510679245,
      -0.032059911638498306,
      -0.05294444039463997,
      -0.07752445340156555,
      -0.05314178019762039,
      -0.055754560977220535,
      -0.0320521742105484,
      0.01845793053507805,
      -0.055353570729494095,
      0.009444435127079487,
      0.005547480657696724,
      0.09316778182983398,
      0.10193399339914322,
      -0.025929460301995277,
      0.001440774998627603,
      -0.029150284826755524,
      0.04488060995936394,
      0.09042773395776749,
      -0.05663254112005234,
      -0.004328713286668062,
      0.05673966556787491,
      0.041063252836465836,
      0.004212492145597935,
      -6.701279926346615e-05,
      0.032323114573955536,
      -0.030884062871336937,
      0.030202802270650864,
      -0.06384123861789703,
      -0.015310801565647125,
      0.12481390684843063,
      -0.02561081387102604,
      -0.08579757064580917,
      -0.011206798255443573,
      -0.023737521842122078,
      -0.075391486287117,
      -0.009184650145471096,
      -0.009700554423034191,
      0.03770958632230759,
      0.0075454008765518665,
      0.005715197883546352,
      -0.0256162378937006,
      0.01682230643928051,
      -0.026259813457727432,
      0.03669735789299011,
      -0.059998661279678345,
      0.09339451789855957,
      -0.018036140128970146,
      0.09200653433799744,
      -0.022706521674990654
    ],
    [
      -0.03167281299829483,
      0.003973730839788914,
      -0.08763770759105682,
      -0.04088343307375908,
      0.06959053874015808,
      0.013452387414872646,
      0.04084483161568642,
      -0.05324280261993408,
      0.05838261917233467,
      0.03621966019272804,
      -0.02097761072218418,
      0.06157473474740982,
      0.008251907303929329,
      -0.05200039595365524,
      -0.046983592212200165,
      -0.005000995006412268,
      -0.08376239240169525,
      -0.05082566291093826,
      0.02433774061501026,
      -0.0009255610639229417,
      0.09761271625757217,
      0.05646929144859314,
      0.017802879214286804,
      -0.042836230248212814,
      -0.04439523443579674,
      0.0033001606352627277,
      0.04195946827530861,
      0.14476768672466278,
      -0.01598978042602539,
      -0.050959739834070206,
      0.045787326991558075,
      -0.006137209478765726,
      0.046158500015735626,
      0.010648553259670734,
      0.0662507712841034,
      0.03485601022839546,
      0.019498562440276146,
      0.028811847791075706,
      -0.022888831794261932,
      -0.037951093167066574,
      -0.00032872369047254324,
      -0.029288137331604958,
      0.016834404319524765,
      -0.03703105077147484,
      0.014251609332859516,
      0.10360980033874512,
      -0.07412245869636536,
      0.04704628139734268,
      -0.09574960917234421,
      -0.10143139213323593,
      0.01952848583459854,
      0.10365469753742218,
      -0.027868373319506645,
      0.0678262710571289,
      0.005893312394618988,
      0.0162221547216177,
      -0.049867019057273865,
      0.039777252823114395,
      0.028038252145051956,
      0.016967400908470154,
      -0.05146799981594086,
      0.0641464963555336,
      -0.003614897606894374,
      0.0028637144714593887,
      0.05059747025370598,
      0.054567523300647736,
      -0.08431676775217056,
      -0.07536934316158295,
      -0.03489631786942482,
      -0.061523277312517166,
      -0.09491310268640518,
      -0.023585490882396698,
      -0.004571967758238316,
      0.09825659543275833,
      0.01590019464492798,
      0.0762394592165947,
      -0.05044497549533844,
      -0.03504709526896477,
      -0.059391941875219345,
      -0.0747750997543335,
      -0.05019715428352356,
      -0.11131836473941803,
      0.0031073282007128,
      0.125044584274292,
      0.012939590960741043,
      0.04706032574176788,
      -0.05103049427270889,
      0.0156515222042799,
      0.039813313633203506,
      0.025884373113512993,
      0.014930504374206066,
      -0.030405204743146896,
      0.03820204734802246,
      -0.0015702570090070367,
      0.08345898240804672,
      0.04066750034689903,
      0.03636956214904785,
      0.048780497163534164,
      -0.021153103560209274,
      0.04393530264496803,
      0.055211808532476425,
      0.015114829875528812,
      0.022505613043904305,
      -0.1013970673084259,
      0.07688939571380615,
      0.040675170719623566,
      0.03581731766462326,
      0.060325853526592255,
      0.025289924815297127,
      -0.03630463406443596,
      -0.015879109501838684,
      0.02960480935871601,
      -0.02679653838276863,
      -0.07521401345729828,
      -0.008379277773201466,
      0.01145786140114069,
      0.03136388212442398,
      0.0276215560734272,
      -0.01202599611133337,
      0.016413094475865364,
      0.019074276089668274,
      0.008918159641325474,
      -0.06035197153687477,
      -0.07642249017953873,
      -0.06491413712501526,
      -0.06461942195892334,
      -0.029133275151252747,
      1.0212426760295253e-32,
      -0.006574081722646952,
      -0.020404841750860214,
      -0.03256892412900925,
      0.012401076033711433,
      -0.04311314597725868,
      0.019905103370547295,
      -0.006983683444559574,
      0.03753367438912392,
      -0.0767320990562439,
      0.12003955990076065,
      -0.030853932723402977,
      -0.056133948266506195,
      0.06257129460573196,
      0.019008541479706764,
      -0.051633208990097046,
      -0.024910258129239082,
      0.07652629166841507,
      0.0713503286242485,
      0.016613319516181946,
      0.05947929248213768,
      0.032532792538404465,
      0.024430396035313606,
      0.018825119361281395,
      -0.012467808090150356,
      0.06778369098901749,
      0.053560201078653336,
      -0.04810558632016182,
      -0.05864571034908295,
      -0.020609954372048378,
      -0.00974133051931858,
      -0.07301522046327591,
      0.033374737948179245,
      -0.05316714569926262,
      -0.0663832277059555,
      -0.006855296436697245,
      -0.08035355806350708,
      -0.03404277563095093,
      -0.07154586911201477,
      -0.06091538444161415,
      -0.021213358268141747,
      0.011568734422326088,
      -0.07747583836317062,
      -0.04281080141663551,
      -0.016147393733263016,
      -0.049159690737724304,
      0.0345117524266243,
      -0.10346899181604385,
      0.05728112906217575,
      0.0982472375035286,
      0.06566128879785538,
      0.030688859522342682,
      0.07251054793596268,
      -0.060283761471509933,
      -0.0331120491027832,
      -0.006308295764029026,
      -0.03932114318013191,
      0.0626678392291069,
      0.00895511545240879,
      0.09075506031513214,
      0.0599941723048687,
      -0.015674907714128494,
      0.02872140146791935,
      -0.0050404807552695274,
      -0.0012780732940882444,
      0.01683821529150009,
      -0.05881385877728462,
      0.05257174000144005,
      -0.03358552232384682,
      -0.0386233776807785,
      0.08125785738229752,
      -0.06192532181739807,
      -0.007482331711798906,
      0.08560580015182495,
      0.05843060836195946,
      -0.04700499027967453,
      -0.01827564835548401,
      -0.04536587372422218,
      -0.002023739041760564,
      0.02784332074224949,
      0.021365411579608917,
      0.0961206704378128,
      0.04548707604408264,
      -0.050591520965099335,
      0.01897631585597992,
      -0.08245877176523209,
      -0.027567246928811073,
      -0.0731697529554367,
      -0.12043724209070206,
      0.0006709177978336811,
      -0.006153498776257038,
      0.08285297453403473,
      -0.12250804156064987,
      -0.03846505656838417,
      -0.08091659843921661,
      -0.02195616438984871,
      -1.1633658939840909e-32,
      -0.012542884796857834,
      0.010670347139239311,
      -0.10400670021772385,
      -0.027107983827590942,
      -0.07288739830255508,
      -0.058875542134046555,
      0.021939842030405998,
      -0.018230315297842026,
      -0.027744993567466736,
      -0.05041243135929108,
      0.025687946006655693,
      0.011139626614749432,
      0.015432599931955338,
      -0.008770093321800232,
      0.03018357791006565,
      0.001307014375925064,
      -0.0387733057141304,
      0.0509246289730072,
      0.006640835665166378,
      0.03435499966144562,
      -0.026898343116044998,
      0.08341740816831589,
      -0.006977217271924019,
      0.04331836849451065,
      0.014378589577972889,
      0.0691436380147934,
      -0.0033801516983658075,
      0.08879352360963821,
      0.02724464051425457,
      0.06262849271297455,
      -0.04995425418019295,
      0.04790316894650459,
      -0.040660299360752106,
      0.03247539699077606,
      -0.019903168082237244,
      -0.03735123202204704,
      -0.04132230952382088,
      0.03770158439874649,
      0.05099911615252495,
      0.028221692889928818,
      0.05600835382938385,
      0.027823634445667267,
      -0.025125697255134583,
      0.01441286876797676,
      -0.010109390132129192,
      0.011428656987845898,
      0.00268560997210443,
      0.02436102367937565,
      -0.023484772071242332,
      -0.05855267122387886,
      0.01647518016397953,
      0.01598791591823101,
      0.019135473296046257,
      -0.013313098810613155,
      0.055110830813646317,
      0.049086861312389374,
      -0.09092693775892258,
      -0.05148565024137497,
      0.004178051836788654,
      -0.0037407565396279097,
      0.004331451840698719,
      -0.11412914097309113,
      0.034643515944480896,
      0.11533024162054062,
      0.016671430319547653,
      -0.04891118034720421,
      -0.091121606528759,
      -0.1209603101015091,
      -0.04928143694996834,
      -0.06560424715280533,
      0.07010731846094131,
      -0.10986670851707458,
      0.03796115517616272,
      0.09478583931922913,
      -0.03840017318725586,
      -0.047294192016124725,
      0.06224553659558296,
      0.04632090404629707,
      -0.041729122400283813,
      0.05816861242055893,
      -0.025229990482330322,
      -0.003465809393674135,
      -0.05916279926896095,
      0.012910256162285805,
      -0.03209814429283142,
      0.008288132026791573,
      -0.023120401427149773,
      0.046157222241163254,
      -0.04961252585053444,
      -0.05900346487760544,
      -0.04965754970908165,
      0.08047525584697723,
      -0.049341831356287,
      0.04034203663468361,
      -0.027598248794674873,
      -6.469129232300475e-08,
      0.0005287243402563035,
      -0.09681311249732971,
      -0.010109963826835155,
      0.03515473008155823,
      -0.014772829599678516,
      0.06084004044532776,
      -0.008029899559915066,
      -0.08483117818832397,
      -0.015711050480604172,
      0.006791562773287296,
      0.040785595774650574,
      -0.001324717653915286,
      -0.054974962025880814,
      -0.07489052414894104,
      0.0021542711183428764,
      0.07807884365320206,
      -0.06920419633388519,
      -0.03860379755496979,
      -0.03560104966163635,
      -0.033124301582574844,
      0.004413587041199207,
      -0.0022028961684554815,
      -0.012918489053845406,
      -0.015603695996105671,
      -0.05245080962777138,
      -0.007683190517127514,
      0.05167355015873909,
      0.08192276209592819,
      0.0239727683365345,
      0.03237340971827507,
      0.026774445548653603,
      0.010026331059634686,
      0.008088072761893272,
      -0.031109651550650597,
      -0.0099975960329175,
      0.13400878012180328,
      -0.022575272247195244,
      0.02039298042654991,
      0.04536430910229683,
      0.01117278728634119,
      -0.031257372349500656,
      -0.04901416227221489,
      -0.107396200299263,
      0.03644632175564766,
      -0.0063062021508812904,
      -0.01240268163383007,
      -0.03277178853750229,
      0.07602689415216446,
      -0.026737790554761887,
      -0.09476417303085327,
      -0.039987340569496155,
      0.01653117500245571,
      -0.004710535518825054,
      0.017776506021618843,
      -0.03717830404639244,
      0.061893031001091,
      -0.03176462650299072,
      -0.045194342732429504,
      0.09712911397218704,
      0.05215077847242355,
      -0.011659374460577965,
      0.028149981051683426,
      0.059672966599464417,
      -0.062226418405771255
    ],
    [
      -0.05431672930717468,
      0.03816836327314377,
      -0.04455399140715599,
      0.03422671929001808,
      0.01683576963841915,
      -0.0918378233909607,
      -0.007706854492425919,
      0.024296045303344727,
      0.03962523490190506,
      0.018862474709749222,
      0.05132584646344185,
      -0.10187727212905884,
      0.01166943833231926,
      -0.026744268834590912,
      -0.013409428298473358,
      -0.02415616251528263,
      -0.011948459781706333,
      -0.06465250998735428,
      -0.01993672363460064,
      -0.05768823251128197,
      0.041415393352508545,
      0.011466262862086296,
      0.0010711743962019682,
      0.062370698899030685,
      0.011454030871391296,
      -0.04086323082447052,
      -0.08674498647451401,
      -0.029100103303790092,
      0.01948557421565056,
      -0.02557438425719738,
      0.01372592244297266,
      0.061314743012189865,
      -0.058512330055236816,
      0.008378082886338234,
      0.09174168109893799,
      0.024310290813446045,
      0.026029763743281364,
      -0.00727468216791749,
      0.025076569989323616,
      -0.008422098122537136,
      0.056206509470939636,
      -0.049261316657066345,
      -0.021189535036683083,
      -0.03285248205065727,
      0.027083301916718483,
      -0.03898666054010391,
      -0.04078738018870354,
      0.01833629235625267,
      -0.03033447451889515,
      0.05996086075901985,
      -0.01778334192931652,
      -0.0023116539232432842,
      0.008671758696436882,
      -0.00560951791703701,
      0.04584040492773056,
      -0.01961202546954155,
      -0.013676511123776436,
      -0.07450539618730545,
      -0.009713494218885899,
      -0.01783822849392891,
      -0.05957876145839691,
      0.006895097903907299,
      0.009806510992348194,
      -0.03669028356671333,
      0.03284035995602608,
      0.024281935766339302,
      -0.14219586551189423,
      0.03027436137199402,
      -0.027358848601579666,
      0.02878628298640251,
      -0.02499651163816452,
      0.0022374214604496956,
      0.01769224926829338,
      0.021701663732528687,
      0.0014768874971196055,
      -0.019372524693608284,
      -0.015456571243703365,
      0.007580132689327002,
      0.017414458096027374,
      -0.10421795397996902,
      -0.0690016821026802,
      -0.11583283543586731,
      -0.07752308994531631,
      -0.03972845524549484,
      0.015519149601459503,
      -0.0194246768951416,
      0.09917893260717392,
      0.09388545900583267,
      -0.0010475803865119815,
      -0.03947792574763298,
      0.06672213971614838,
      0.054230816662311554,
      -0.08962106704711914,
      0.03861280530691147,
      0.020817888900637627,
      0.034736067056655884,
      -0.02584131248295307,
      -0.019804561510682106,
      0.018601305782794952,
      0.09096342325210571,
      0.026540858671069145,
      0.015169983729720116,
      -0.04496796056628227,
      -0.008991026319563389,
      -0.024703631177544594,
      -0.08747421205043793,
      0.0416472963988781,
      0.07643422484397888,
      -0.0021793204359710217,
      -0.01888052001595497,
      0.01173737645149231,
      -0.01810511201620102,
      0.052978359162807465,
      -0.037608738988637924,
      0.006633610464632511,
      0.009418399073183537,
      -0.01432921551167965,
      -0.0581599697470665,
      -0.03065415285527706,
      -0.054494891315698624,
      0.0536910817027092,
      0.02742684818804264,
      0.038408730179071426,
      -0.04057001322507858,
      0.006315744016319513,
      -0.053190868347883224,
      0.0676916167140007,
      2.2655616700794807e-33,
      -0.0641390010714531,
      -0.06664469838142395,
      -0.0021402761340141296,
      -0.03578517213463783,
      0.01250009797513485,
      0.030068783089518547,
      0.043508872389793396,
      -0.028380675241351128,
      0.006402305327355862,
      0.010509824380278587,
      -0.06871367990970612,
      -0.07275395840406418,
      -0.05427571386098862,
      -0.06788938492536545,
      -0.0805092453956604,
      -0.05958491563796997,
      0.04404425993561745,
      0.07366316765546799,
      -0.0037433586549013853,
      0.06188654899597168,
      0.05182982608675957,
      -0.09129941463470459,
      -0.04272358492016792,
      -0.024837840348482132,
      0.05937458202242851,
      0.0023750336840748787,
      -0.060481615364551544,
      -0.04117914289236069,
      -0.030690016224980354,
      0.005251288879662752,
      0.06157607585191727,
      0.08531076461076736,
      -0.0126166557893157,
      0.01955130323767662,
      0.020279761403799057,
      0.03869374468922615,
      0.0034535794984549284,
      -0.07194217294454575,
      -0.014609448611736298,
      0.02746816724538803,
      -0.03878248110413551,
      0.0014346424723044038,
      -0.02194623090326786,
      -0.041869644075632095,
      -0.09868885576725006,
      -0.08646468073129654,
      -0.053113002330064774,
      -0.040479548275470734,
      -0.02799016237258911,
      -0.029637467116117477,
      0.03693808987736702,
      0.07323948293924332,
      -0.03410305455327034,
      -0.10998157411813736,
      0.03794591873884201,
      -0.05852365121245384,
      -0.026543572545051575,
      0.06122374162077904,
      0.03409123793244362,
      0.09993800520896912,
      0.009548366069793701,
      0.011838448233902454,
      -0.08136171102523804,
      -0.03991616144776344,
      -0.07448805123567581,
      0.06862721592187881,
      0.004737782757729292,
      -0.036466822028160095,
      -0.013379018753767014,
      0.056807782500982285,
      0.031961437314748764,
      -0.1028953269124031,
      0.08379828184843063,
      -0.008030418306589127,
      0.07682305574417114,
      -0.06833502650260925,
      -0.013781205751001835,
      0.002777307527139783,
      -0.04566381499171257,
      -0.046319931745529175,
      0.12562161684036255,
      -0.011800926178693771,
      -0.09966443479061127,
      0.004510257393121719,
      0.0061643426306545734,
      0.01749066822230816,
      0.02854742482304573,
      -0.016550667583942413,
      -0.0817626342177391,
      -0.044411346316337585,
      -0.12135863304138184,
      -0.08989743888378143,
      -0.010861455462872982,
      -0.06051260232925415,
      0.00778698455542326,
      -6.473071966470043e-33,
      0.03670022636651993,
      0.04965462535619736,
      0.04462980106472969,
      0.024828273802995682,
      -0.012551859952509403,
      -0.055892542004585266,
      0.02546539530158043,
      0.04143694415688515,
      0.016821742057800293,
      0.03222369775176048,
      0.07957334816455841,
      -0.011320688761770725,
      -0.045984819531440735,
      0.020460575819015503,
      -0.06550832092761993,
      0.05626588314771652,
      -0.02455044537782669,
      -0.07642240822315216,
      0.030220963060855865,
      0.011268445290625095,
      -0.0598863884806633,
      0.036710046231746674,
      -0.017077583819627762,
      0.1071888655424118,
      -0.05431988090276718,
      0.069458968937397,
      -0.011056249961256981,
      0.06517726182937622,
      0.036787837743759155,
      -0.1449739933013916,
      -0.10520149022340775,
      -0.0319446437060833,
      -0.08236159384250641,
      -0.011945946142077446,
      -0.0034512525890022516,
      -0.0396210253238678,
      0.08671147376298904,
      0.058350201696157455,
      0.029997505247592926,
      0.06941594183444977,
      0.11963091045618057,
      0.011642455123364925,
      -0.06262420862913132,
      -0.040782470256090164,
      0.023821646347641945,
      0.003637498477473855,
      0.05173557996749878,
      -0.0008349785348400474,
      0.03591874986886978,
      -0.026455281302332878,
      0.013918687589466572,
      0.016920369118452072,
      0.022631151601672173,
      0.09602030366659164,
      -0.043527256697416306,
      0.05159541219472885,
      -0.0677277222275734,
      0.005524033680558205,
      -0.03732237219810486,
      -0.024554157629609108,
      -0.0635041743516922,
      0.011470386758446693,
      0.05761696398258209,
      0.048669639974832535,
      0.04705214500427246,
      -0.04083693400025368,
      -0.0366114042699337,
      -0.0721525028347969,
      0.05249185115098953,
      -0.018736105412244797,
      0.033029790967702866,
      0.09616738557815552,
      -0.019953211769461632,
      0.0179070346057415,
      0.04998497664928436,
      0.0032195912208408117,
      -0.015270662494003773,
      -0.06495119631290436,
      0.08689504116773605,
      0.08698153495788574,
      -0.07437150925397873,
      0.046067722141742706,
      0.044669926166534424,
      -0.020235484465956688,
      0.01205497793853283,
      -0.007889868691563606,
      -0.014408953487873077,
      0.05030079931020737,
      0.026287276297807693,
      -0.03859875723719597,
      -0.06732459366321564,
      -0.033333178609609604,
      0.01730147749185562,
      -0.047308772802352905,
      -0.06513459980487823,
      -5.5889980643542e-08,
      -0.03577972203493118,
      -0.10633906722068787,
      0.001678506494499743,
      -0.04534553363919258,
      0.02423892170190811,
      0.04640495032072067,
      -0.023875996470451355,
      -0.12467718869447708,
      0.01630711369216442,
      -0.09391235560178757,
      0.08642131090164185,
      -0.0023026566486805677,
      -0.05347149446606636,
      -0.06734679639339447,
      -0.05229766294360161,
      -0.0037898600567132235,
      -0.009737862274050713,
      -0.037030577659606934,
      0.008136761374771595,
      -0.0784703940153122,
      -0.0020997559186071157,
      0.024090977385640144,
      0.06710364669561386,
      0.021176740527153015,
      0.013857518322765827,
      0.005468611605465412,
      0.07114662230014801,
      0.06349930912256241,
      -0.044939085841178894,
      -0.015194951556622982,
      0.02215120568871498,
      -0.005396260414272547,
      0.0564991757273674,
      -0.07003603130578995,
      0.050192177295684814,
      0.048916615545749664,
      -0.002066578483209014,
      0.005188715178519487,
      0.07990159094333649,
      0.05367296561598778,
      -0.03421635925769806,
      0.002929483540356159,
      -0.08219806849956512,
      0.002856541657820344,
      0.09700188040733337,
      -0.04845650494098663,
      -0.10638409852981567,
      -0.03439187631011009,
      -0.03330696001648903,
      -0.13371603190898895,
      0.021486366167664528,
      -0.051459189504384995,
      0.05657876655459404,
      -0.02100287564098835,
      0.03684578463435173,
      -0.03782866522669792,
      0.01776779256761074,
      -0.05651943013072014,
      -0.0003661299415398389,
      0.03817075490951538,
      0.09741976857185364,
      -0.0664251372218132,
      0.08720222860574722,
      -0.03090800903737545
    ],
    [
      -0.1058727353811264,
      0.010507586412131786,
      -0.11655290424823761,
      0.05998545140028,
      0.03240898996591568,
      -0.0011096391826868057,
      0.020759766921401024,
      0.08372469991445541,
      0.0035602219868451357,
      0.006293898448348045,
      -0.02485540881752968,
      -0.10920440405607224,
      -0.004907508846372366,
      -0.031064987182617188,
      0.005068835336714983,
      0.0046174610033631325,
      0.06307301670312881,
      -0.15693187713623047,
      -0.019666975364089012,
      0.06521747261285782,
      0.011989264748990536,
      -0.012886585667729378,
      -0.011674540117383003,
      -0.05579477548599243,
      -0.05731669440865517,
      -0.07106588035821915,
      0.004969805013388395,
      -0.01567688025534153,
      -0.020794689655303955,
      -0.019972559064626694,
      0.06649348139762878,
      0.07384473085403442,
      -0.09398803859949112,
      -0.015995057299733162,
      -0.009337250143289566,
      0.045987047255039215,
      0.01327007170766592,
      -0.043965425342321396,
      -0.030166270211338997,
      -0.017951130867004395,
      -0.016724903136491776,
      -0.008626212365925312,
      0.03462781012058258,
      -0.06376171857118607,
      0.08769062161445618,
      -0.017320381477475166,
      -0.024566570296883583,
      0.044161539524793625,
      -0.02520751766860485,
      -0.017172837629914284,
      0.04895804822444916,
      0.054636627435684204,
      0.006971202325075865,
      0.142539381980896,
      0.09071990847587585,
      0.012173252180218697,
      -0.028280077502131462,
      -0.022618576884269714,
      0.021263016387820244,
      0.05515815317630768,
      -0.05379648134112358,
      0.036480676382780075,
      -0.014393833465874195,
      0.025892145931720734,
      -0.05081219598650932,
      0.035387035459280014,
      -0.022444909438490868,
      0.01997974142432213,
      -0.011764856986701488,
      -0.09788558632135391,
      -0.07261070609092712,
      0.024647366255521774,
      -0.04439583420753479,
      -0.016412703320384026,
      0.15151019394397736,
      -0.017327547073364258,
      -0.06850305944681168,
      0.04684002697467804,
      0.014861091040074825,
      -0.11879973858594894,
      0.023969348520040512,
      0.008516762405633926,
      0.014756976626813412,
      0.008906693197786808,
      0.006120557431131601,
      -0.002660109894350171,
      -0.020085306838154793,
      -0.010487514548003674,
      0.02084250934422016,
      0.07773513346910477,
      0.11058946698904037,
      0.04236045479774475,
      -0.15126705169677734,
      0.02492314949631691,
      -0.009140616282820702,
      0.044974204152822495,
      0.010377119295299053,
      -0.05836351960897446,
      0.0002221259055659175,
      0.03965180367231369,
      -0.06852278858423233,
      -0.07860197126865387,
      0.04729350283741951,
      0.07281612604856491,
      0.017992986366152763,
      -0.03260962292551994,
      0.030677294358611107,
      0.03730233013629913,
      0.004825810436159372,
      -0.007821697741746902,
      -0.007738030981272459,
      -0.017315305769443512,
      -0.001746464055031538,
      -0.06669406592845917,
      -0.013243620283901691,
      0.08003654330968857,
      0.04127250611782074,
      -0.04528764262795448,
      0.02468201145529747,
      -0.0370355099439621,
      0.019980743527412415,
      0.05095632001757622,
      -0.038848597556352615,
      0.037999093532562256,
      0.028854845091700554,
      -0.03456752747297287,
      -0.006275794468820095,
      9.893007476294405e-33,
      0.06930911540985107,
      -0.013484664261341095,
      0.010112474672496319,
      0.0031053463462740183,
      -0.02754974365234375,
      -0.04169906675815582,
      0.10781454294919968,
      0.0649605318903923,
      -0.009834928438067436,
      0.006879724562168121,
      0.0010075748432427645,
      0.1076001524925232,
      0.0009190725977532566,
      -0.011196942068636417,
      -0.05278788134455681,
      -0.0419626422226429,
      0.018653422594070435,
      0.021448271349072456,
      0.03845084458589554,
      -0.028869744390249252,
      0.033107317984104156,
      0.013560385443270206,
      0.004877243656665087,
      -0.02783035673201084,
      0.027215205132961273,
      0.1227058470249176,
      0.010222107172012329,
      0.07262032479047775,
      -0.01956488937139511,
      0.025437599048018456,
      0.03456679731607437,
      -0.032873667776584625,
      0.006520530674606562,
      0.01574569381773472,
      -0.0011763464426621795,
      -0.0649021565914154,
      -0.033310145139694214,
      0.005704680923372507,
      -0.14053428173065186,
      -0.01916997693479061,
      0.0008314068545587361,
      0.007862994447350502,
      -0.07190771400928497,
      -0.022916384041309357,
      -0.006181061267852783,
      -0.05376875773072243,
      0.01820305921137333,
      0.03144664317369461,
      0.07738234847784042,
      0.0026996585074812174,
      -0.0038946589920669794,
      0.008712027221918106,
      0.0005867554573342204,
      0.009411540813744068,
      0.0582735575735569,
      -0.015804454684257507,
      -0.06126290559768677,
      -0.0062239202670753,
      -0.023457106202840805,
      0.07083362340927124,
      -0.02876029722392559,
      -0.08085806667804718,
      -0.0682457759976387,
      0.02538919262588024,
      -0.0796511098742485,
      0.024602718651294708,
      -0.03882084786891937,
      -0.013977723196148872,
      0.005414994899183512,
      -0.038579732179641724,
      -0.058109067380428314,
      0.02739228866994381,
      0.06493240594863892,
      0.041454706341028214,
      0.05433179810643196,
      0.021227426826953888,
      -0.013561548665165901,
      -0.0010433458955958486,
      -0.014888898469507694,
      -0.06775762140750885,
      -0.008630846627056599,
      -0.0174235999584198,
      0.002061564475297928,
      0.08399827778339386,
      -0.011087577790021896,
      -0.07160957902669907,
      -0.02019890397787094,
      -0.04458148032426834,
      0.018433790653944016,
      -0.04475266858935356,
      -0.06990034878253937,
      0.03135873004794121,
      0.03758438304066658,
      -0.025376034900546074,
      0.033066436648368835,
      -1.1280383214484471e-32,
      0.039444126188755035,
      -0.012617765925824642,
      -0.028507303446531296,
      -0.014937764964997768,
      0.03864236921072006,
      0.03135237470269203,
      0.06882476806640625,
      0.006651791278272867,
      0.06925022602081299,
      0.016934074461460114,
      -0.033151961863040924,
      0.0091068921610713,
      0.0048510488122701645,
      -0.05172424763441086,
      -0.060749027878046036,
      0.03866438940167427,
      -0.15281662344932556,
      -0.09484770894050598,
      0.02271888218820095,
      0.028159447014331818,
      -0.04630790650844574,
      0.040256157517433167,
      0.015950264409184456,
      -0.07559151202440262,
      -0.0548764169216156,
      0.05103785917162895,
      -0.0342852845788002,
      0.03628368675708771,
      -0.0320819728076458,
      0.09189675748348236,
      -0.025225425139069557,
      -0.025261707603931427,
      -0.07870582491159439,
      0.03494628891348839,
      -0.016566142439842224,
      -0.022718755528330803,
      0.018520018085837364,
      0.03024732507765293,
      -0.0853811651468277,
      0.0300484299659729,
      0.0864592120051384,
      0.07277089357376099,
      -0.0482100248336792,
      0.02542877569794655,
      0.006740617100149393,
      0.025639895349740982,
      -0.04993691295385361,
      -0.05335148051381111,
      0.01733214780688286,
      -0.056957535445690155,
      -0.04758145660161972,
      0.0033988661598414183,
      -0.005563258193433285,
      0.047334011644124985,
      -0.12211282551288605,
      0.04686800763010979,
      0.094881072640419,
      0.04840932786464691,
      0.034988850355148315,
      0.029665077105164528,
      0.09530429542064667,
      -0.08882566541433334,
      -0.014863105490803719,
      0.016507476568222046,
      0.06389255821704865,
      0.026627641171216965,
      0.04840603470802307,
      0.0068490169942379,
      0.037960514426231384,
      0.030747229233384132,
      0.1020553708076477,
      -0.12338503450155258,
      0.03731965646147728,
      -0.0021601468324661255,
      0.06231556460261345,
      0.06761348992586136,
      0.09258528053760529,
      -0.10618849843740463,
      -0.01115355733782053,
      0.149782195687294,
      -0.002663687104359269,
      -0.009297084994614124,
      0.029168561100959778,
      -0.013231282122433186,
      -0.07808838784694672,
      0.009096951223909855,
      0.020340874791145325,
      0.024220556020736694,
      -0.05841531977057457,
      -0.02772500179708004,
      -0.10239526629447937,
      0.006415081676095724,
      -0.0019143213285133243,
      0.0982147827744484,
      0.023127052932977676,
      -6.4194594528999e-08,
      -0.059428516775369644,
      -0.02469765581190586,
      -0.07033509761095047,
      0.00965573638677597,
      -0.004496695473790169,
      0.00961629580706358,
      -0.014691801741719246,
      -0.06420789659023285,
      -0.08424245566129684,
      -0.035328470170497894,
      -0.013409602455794811,
      0.03554607927799225,
      0.019869154319167137,
      -0.02677982673048973,
      0.049594953656196594,
      -0.10478102415800095,
      0.010184401646256447,
      -0.049663349986076355,
      -0.0978182852268219,
      -0.05776795372366905,
      -0.016304852440953255,
      0.03774415701627731,
      -0.034203726798295975,
      -0.07677365094423294,
      0.021666059270501137,
      -0.022494610399007797,
      0.042770739644765854,
      0.04945988953113556,
      -0.020374709740281105,
      0.07209047675132751,
      -0.029468661174178123,
      0.03804608806967735,
      -0.014638581313192844,
      -0.047125194221735,
      -0.08085038512945175,
      0.132859468460083,
      -0.04044729471206665,
      -0.005244065076112747,
      0.053181834518909454,
      0.027739208191633224,
      0.02241607941687107,
      0.06001969799399376,
      -0.09813005477190018,
      -0.06297056376934052,
      0.06297901272773743,
      -0.009625563398003578,
      -0.001429159427061677,
      0.0074917105957865715,
      0.019936248660087585,
      0.006780507508665323,
      -0.08104356378316879,
      -0.0481686070561409,
      -0.05475278198719025,
      0.010333668440580368,
      -0.0012836146634072065,
      0.014090034179389477,
      -0.07981138676404953,
      0.037530332803726196,
      0.0033008430618792772,
      -0.04996316507458687,
      0.023067202419042587,
      -0.03553256019949913,
      0.0278629157692194,
      0.031208381056785583
    ],
    [
      -0.11805164813995361,
      -0.0250133965164423,
      -0.05884242057800293,
      -0.010812482796609402,
      0.0981670469045639,
      -0.03833527863025665,
      0.07045159488916397,
      0.030682306736707687,
      0.008606771007180214,
      0.05553781986236572,
      0.01850707083940506,
      -0.11674518883228302,
      0.00936869252473116,
      0.07460969686508179,
      -0.003494558623060584,
      -0.032034628093242645,
      0.02534467913210392,
      -0.041722413152456284,
      0.02599150873720646,
      0.03473910689353943,
      0.03777887299656868,
      0.012344294227659702,
      0.025112563744187355,
      0.035041920840740204,
      -0.0684288814663887,
      -0.06021251529455185,
      -0.006375119090080261,
      -0.023649444803595543,
      0.009701350703835487,
      -0.05011472478508949,
      0.0637742131948471,
      0.06947985291481018,
      -0.07397215068340302,
      -0.04396922141313553,
      0.007149177603423595,
      0.04202742129564285,
      0.02879122644662857,
      -0.0703820064663887,
      0.009948918595910072,
      -0.029234860092401505,
      -0.04988298565149307,
      -0.03812651336193085,
      -0.004758318420499563,
      -0.05761630833148956,
      0.017772728577256203,
      0.028115766122937202,
      0.0473683699965477,
      0.02116224728524685,
      -0.00766740133985877,
      0.022598452866077423,
      0.059739191085100174,
      0.05098237469792366,
      -0.03941527009010315,
      0.036005083471536636,
      0.04369480907917023,
      -0.010540653951466084,
      0.01527385227382183,
      -0.03725020959973335,
      0.0028406037017703056,
      0.082051582634449,
      0.05227501317858696,
      0.007741736248135567,
      0.00015414056542795151,
      -0.026120562106370926,
      -0.01991073042154312,
      0.07084398716688156,
      -0.035920169204473495,
      0.024806015193462372,
      0.008594939485192299,
      -0.038253385573625565,
      -0.021210117265582085,
      0.005347469821572304,
      -0.015028444118797779,
      -0.00538294855505228,
      0.06664169579744339,
      0.0030941178556531668,
      -0.07179474830627441,
      -0.03340987116098404,
      -0.025765197351574898,
      -0.09999648481607437,
      -0.04997751861810684,
      -0.008118593133985996,
      -0.013238929212093353,
      -0.01751093938946724,
      0.020195022225379944,
      -0.016231993213295937,
      0.00711012864485383,
      -0.03794790804386139,
      0.034046720713377,
      0.059118498116731644,
      0.1303510069847107,
      0.05374780297279358,
      -0.09260018169879913,
      0.021356020122766495,
      0.010471777990460396,
      -0.03794354945421219,
      -0.012257326394319534,
      -0.040443599224090576,
      0.02015991322696209,
      0.08860789984464645,
      -0.07035470008850098,
      0.0018186402739956975,
      0.005218931473791599,
      -0.04728603735566139,
      0.07060766965150833,
      0.028012346476316452,
      0.06128573417663574,
      0.03559717535972595,
      0.0013348310021683574,
      0.022918114438652992,
      0.03158935531973839,
      -0.029926933348178864,
      0.033846113830804825,
      -0.03719652071595192,
      -0.031429123133420944,
      0.093231201171875,
      0.04173034057021141,
      -0.0020403224043548107,
      -0.04194214195013046,
      -0.0647551566362381,
      0.009245500899851322,
      0.06581472605466843,
      0.015565377660095692,
      0.02264196053147316,
      0.06592019647359848,
      -0.04546569287776947,
      0.04745890200138092,
      8.879451431293303e-33,
      0.03864355757832527,
      0.040598563849925995,
      -0.004694316070526838,
      0.025755731388926506,
      -0.03136245533823967,
      -0.011602605693042278,
      0.056669414043426514,
      0.025918735191226006,
      -0.033401504158973694,
      0.008207765407860279,
      0.011352099478244781,
      0.08716285228729248,
      -0.024628765881061554,
      -0.029500843957066536,
      -0.013914737850427628,
      -0.02973499521613121,
      0.03988781198859215,
      0.005194457247853279,
      -0.01227013859897852,
      0.03448059409856796,
      0.06963476538658142,
      -0.11870403587818146,
      -0.007740809582173824,
      -0.010433747433125973,
      0.0338112898170948,
      0.024744980037212372,
      0.029444273561239243,
      0.09520594775676727,
      0.00680186040699482,
      -0.013906817883253098,
      0.0051957485266029835,
      -0.04815997555851936,
      0.02280246652662754,
      0.03193167597055435,
      0.060097768902778625,
      -0.00985030923038721,
      0.040291085839271545,
      -0.06070765107870102,
      -0.1172715499997139,
      -0.071168914437294,
      -0.03102146089076996,
      0.005140462890267372,
      -0.07098057866096497,
      -0.007399185094982386,
      0.0864669531583786,
      -0.04385821521282196,
      -0.06698465347290039,
      0.06351786851882935,
      0.10193387418985367,
      0.00040680545498616993,
      0.05576073378324509,
      0.04085071384906769,
      0.0063424198888242245,
      -0.05705731734633446,
      -0.03473568707704544,
      -0.023113902658224106,
      -0.09792269766330719,
      0.057072144001722336,
      0.014717764221131802,
      0.10698553919792175,
      0.007426409050822258,
      -0.05627749487757683,
      -0.08381327986717224,
      -0.03402523323893547,
      -0.16241596639156342,
      0.07665379345417023,
      -0.10879916697740555,
      0.014564060606062412,
      0.0750712901353836,
      -0.017499292269349098,
      -0.08651990443468094,
      0.023850668221712112,
      0.03239239752292633,
      0.07805821299552917,
      0.030920717865228653,
      -0.023702874779701233,
      -0.06877575069665909,
      -0.004576393403112888,
      0.008292891085147858,
      -0.09054724872112274,
      0.010671336203813553,
      0.029049670323729515,
      -0.02115449495613575,
      0.09383831173181534,
      0.012300333008170128,
      -0.0748739093542099,
      -0.009784962981939316,
      -0.03365011140704155,
      -0.014578832313418388,
      -0.03410281985998154,
      -0.055214282125234604,
      0.027431108057498932,
      0.036356061697006226,
      0.0008853228646330535,
      0.01024372223764658,
      -1.048253993375086e-32,
      0.00023260073794517666,
      -0.03813217207789421,
      -0.06352656334638596,
      0.006451341323554516,
      -0.01997200772166252,
      -0.0041361283510923386,
      0.07958357036113739,
      0.02570328861474991,
      -0.013360793702304363,
      -0.0108401570469141,
      0.012296898290514946,
      -0.06164384260773659,
      0.02006312645971775,
      -0.03607291728258133,
      -0.08867798745632172,
      -0.04763418808579445,
      -0.10789874941110611,
      -0.08131766319274902,
      -0.0028221341781318188,
      0.09428267925977707,
      0.00902019813656807,
      0.11549153178930283,
      0.028234053403139114,
      -0.031124766916036606,
      -0.03787561506032944,
      0.09421318024396896,
      -0.03698668256402016,
      0.03368910402059555,
      0.017896365374326706,
      0.08379657566547394,
      0.03210218623280525,
      0.011514335870742798,
      -0.08840446174144745,
      -0.027594849467277527,
      0.035414919257164,
      -0.041560616344213486,
      0.08586770296096802,
      0.04274449869990349,
      -0.0376933254301548,
      0.04446610063314438,
      0.07710843533277512,
      0.015969332307577133,
      -0.023068729788064957,
      -0.021451788023114204,
      -0.04867257922887802,
      -0.00555365439504385,
      0.007349591702222824,
      -0.0017768926918506622,
      0.006647328846156597,
      -0.07756315916776657,
      0.019872505217790604,
      -0.011850857175886631,
      -0.005403080955147743,
      0.06239168718457222,
      -0.041023291647434235,
      0.02241714857518673,
      0.018931599333882332,
      0.009784679859876633,
      -0.02383311837911606,
      0.077240951359272,
      0.016188831999897957,
      -0.03711068630218506,
      0.01366870105266571,
      0.027800319716334343,
      0.0674608126282692,
      -0.06709305942058563,
      0.010455421172082424,
      -0.01872417703270912,
      0.14195972681045532,
      -0.02613087370991707,
      0.10647645592689514,
      -0.08628129959106445,
      -0.02413293533027172,
      -0.017729144543409348,
      0.10574659705162048,
      0.02627752721309662,
      0.08232180029153824,
      -0.06594423204660416,
      -0.02168221026659012,
      0.11476738005876541,
      -0.00828236248344183,
      -0.0574672631919384,
      0.055547285825014114,
      0.029330261051654816,
      -0.06189357116818428,
      -0.024150630459189415,
      -0.0034880354069173336,
      0.00412859907373786,
      -0.06935655325651169,
      0.05067384988069534,
      -0.1002146303653717,
      -0.023032432422041893,
      -0.030119171366095543,
      0.002522736554965377,
      0.013513585552573204,
      -6.151532261355896e-08,
      -0.056510478258132935,
      0.004140403587371111,
      0.01320436131209135,
      -0.04687812179327011,
      -0.02556907758116722,
      0.01005573570728302,
      -0.047061365097761154,
      -0.14579828083515167,
      -0.06947527825832367,
      -0.13603575527668,
      -0.02154027484357357,
      0.018707821145653725,
      -0.06652601063251495,
      -0.09002231806516647,
      0.04037895426154137,
      -0.11535493284463882,
      -0.03618048131465912,
      -0.028553448617458344,
      -0.09819209575653076,
      -0.022635752335190773,
      -0.035240210592746735,
      -0.032876767218112946,
      -0.06366293132305145,
      -0.047816965728998184,
      0.005395245738327503,
      -0.013043060898780823,
      0.005103131290525198,
      0.057997927069664,
      -0.013681715354323387,
      0.04325166717171669,
      0.010218330658972263,
      -0.04116818308830261,
      0.032680314034223557,
      -0.059343501925468445,
      0.016529353335499763,
      0.12954460084438324,
      0.010662849992513657,
      0.031318675726652145,
      0.034632619470357895,
      0.036915138363838196,
      -0.03497328236699104,
      0.021646922454237938,
      -0.05526229366660118,
      -0.018576359376311302,
      0.07102858275175095,
      -0.003498134668916464,
      -0.005894571542739868,
      0.003728806972503662,
      -0.004910175688564777,
      -0.06051906570792198,
      -0.06072795391082764,
      -0.08211636543273926,
      -0.0051261549815535545,
      0.06812506169080734,
      -0.07954344898462296,
      0.04241007938981056,
      -0.0600021667778492,
      0.007335699629038572,
      -0.012093206867575645,
      -0.00045094164670445025,
      0.07500754296779633,
      0.007102127652615309,
      0.09381040185689926,
      -0.015983982011675835
    ],
    [
      -0.09016340970993042,
      0.05244091525673866,
      0.009007696062326431,
      0.038630519062280655,
      0.04083281382918358,
      -0.04652046412229538,
      0.08854539692401886,
      -0.021710500121116638,
      0.07506156712770462,
      -0.009230333380401134,
      0.041712190955877304,
      -0.023053137585520744,
      0.06503147631883621,
      -0.036503709852695465,
      -0.019548648968338966,
      0.056621454656124115,
      0.02961770072579384,
      -0.06028178334236145,
      -0.015203634276986122,
      0.014782063663005829,
      0.013835925608873367,
      -0.012757128104567528,
      -0.03226231411099434,
      0.041041821241378784,
      -0.06818559765815735,
      -0.035495538264513016,
      0.026751156896352768,
      0.03827150911092758,
      -0.017687944695353508,
      -0.026106014847755432,
      0.07183530181646347,
      0.048317309468984604,
      -0.13238881528377533,
      -0.010966707952320576,
      0.0650157481431961,
      -6.20454375166446e-05,
      -0.031285110861063004,
      -0.058027639985084534,
      -0.005120860878378153,
      -0.030127370730042458,
      0.03596842661499977,
      -0.05998919904232025,
      -0.012040448375046253,
      -0.0027806709986180067,
      0.02301044389605522,
      -0.00366075336933136,
      0.05309010669589043,
      -0.08222785592079163,
      -0.09235385060310364,
      0.009911933913826942,
      0.0014044297859072685,
      0.049222398549318314,
      0.013049597851932049,
      0.05051136761903763,
      0.09526537358760834,
      -0.035220321267843246,
      -0.03738942742347717,
      -0.05610315129160881,
      0.059266671538352966,
      0.013865109533071518,
      0.05551715940237045,
      0.05545038357377052,
      -0.05049929767847061,
      -0.01960034854710102,
      -0.07879894226789474,
      0.03840550035238266,
      0.04577661678195,
      0.018068863078951836,
      -0.0006700477097183466,
      0.02978075109422207,
      -0.034551799297332764,
      0.0015517742140218616,
      -0.06969837844371796,
      0.11443144083023071,
      0.045653339475393295,
      -0.003928851336240768,
      -0.008304390124976635,
      -0.031667619943618774,
      -0.08562176674604416,
      -0.10014659911394119,
      -0.04999202862381935,
      -0.0060825957916677,
      0.024762848392128944,
      -0.049373481422662735,
      0.045428089797496796,
      0.010741349309682846,
      -0.004817144013941288,
      0.03285609558224678,
      0.06264956295490265,
      0.007904118858277798,
      0.035711925476789474,
      -0.011805744841694832,
      -0.03966332599520683,
      0.06729196012020111,
      0.10446679592132568,
      -0.0018738183425739408,
      0.01479053869843483,
      -0.025274287909269333,
      0.028229910880327225,
      0.05777820199728012,
      0.004372208844870329,
      0.04282283037900925,
      -0.09596794843673706,
      0.034855954349040985,
      -0.037981271743774414,
      -0.0566612109541893,
      0.03435812518000603,
      0.005935823544859886,
      -0.05875658616423607,
      -0.013297099620103836,
      0.03498918190598488,
      0.005025957711040974,
      0.05245319381356239,
      -0.10787056386470795,
      -0.04585254192352295,
      0.06736329942941666,
      -0.009561751037836075,
      0.009696274995803833,
      0.021433111280202866,
      -0.04734135419130325,
      0.03042675368487835,
      0.011955237947404385,
      0.020846812054514885,
      0.06709680706262589,
      0.010584206320345402,
      -0.02237730659544468,
      0.07574737817049026,
      5.2990543304259764e-33,
      -0.013547269627451897,
      0.036833565682172775,
      -0.12258527427911758,
      0.00321614695712924,
      0.01163498405367136,
      0.057362090796232224,
      0.009535444900393486,
      -0.06792443245649338,
      -0.046644583344459534,
      -0.022490987554192543,
      -0.02903084270656109,
      -0.04045948386192322,
      0.05988997220993042,
      -0.07478789985179901,
      -0.04515668377280235,
      0.005560690071433783,
      0.013733462430536747,
      0.012012389488518238,
      0.031105201691389084,
      0.015123111195862293,
      0.05330752953886986,
      -0.06267257034778595,
      0.05158611387014389,
      -0.06801459193229675,
      -0.06183043494820595,
      0.02016805298626423,
      -0.04578318074345589,
      -0.011441552080214024,
      0.029703861102461815,
      0.0411982499063015,
      -0.022451622411608696,
      -0.014459913596510887,
      0.0674014762043953,
      0.058271825313568115,
      0.054443009197711945,
      0.04291149228811264,
      -0.05402369797229767,
      -0.1028057411313057,
      -0.05714363232254982,
      -0.07946164906024933,
      -0.020934389904141426,
      0.03881043940782547,
      -0.12382914125919342,
      0.04248780757188797,
      -0.02774495631456375,
      -0.052618201822042465,
      0.015869012102484703,
      -0.049970462918281555,
      0.07509615272283554,
      -0.05503296107053757,
      0.0014001282397657633,
      0.0636889785528183,
      0.04143200442194939,
      -0.1041167601943016,
      0.01773112267255783,
      -0.02148633822798729,
      -0.008260798640549183,
      0.03164179250597954,
      0.045191507786512375,
      0.0362284816801548,
      0.02810169756412506,
      0.00861252099275589,
      -0.051901575177907944,
      -0.06709327548742294,
      0.03665773198008537,
      0.030927766114473343,
      -0.00439428212121129,
      -0.057122234255075455,
      -0.04329890385270119,
      -0.08121682703495026,
      -0.012643689289689064,
      -0.034554727375507355,
      0.0009721834794618189,
      0.06038475036621094,
      0.031243542209267616,
      -0.09313726425170898,
      0.011684965342283249,
      0.0801578015089035,
      -0.0040624188259243965,
      -0.049807943403720856,
      -0.06090503931045532,
      -0.09643029421567917,
      -0.01128785964101553,
      0.02673307992517948,
      0.02157687582075596,
      0.015887875109910965,
      -0.06031356379389763,
      0.013061640784144402,
      -0.10416758805513382,
      0.035828784108161926,
      0.022953368723392487,
      -0.014834722504019737,
      -0.020608961582183838,
      0.05419640615582466,
      0.054517000913619995,
      -7.525385529585694e-33,
      -0.05251653864979744,
      0.04698549583554268,
      -0.04630419611930847,
      0.02428591251373291,
      -0.06858475506305695,
      0.018869323655962944,
      0.04552289471030235,
      -0.009928255341947079,
      -0.010683678090572357,
      0.029534099623560905,
      0.052409544587135315,
      -0.02760377526283264,
      -0.024736907333135605,
      -0.03270144388079643,
      0.002396686002612114,
      -0.04574986919760704,
      -0.04123705253005028,
      -0.04996132105588913,
      -0.02213425189256668,
      0.057649463415145874,
      0.05897693708539009,
      0.11617294698953629,
      -0.05452694743871689,
      0.07842256873846054,
      -0.06907246261835098,
      0.06993585079908371,
      0.0055651539005339146,
      0.04741507023572922,
      -0.036894965916872025,
      -0.0552649088203907,
      -0.0042710802517831326,
      -0.03700597211718559,
      -0.07705613970756531,
      -0.002343995263800025,
      0.027709871530532837,
      -0.062070876359939575,
      0.05112329125404358,
      0.13678163290023804,
      -0.06004191190004349,
      0.06875714659690857,
      0.05069687217473984,
      0.0774124264717102,
      -0.02384943515062332,
      0.015284838154911995,
      -0.00467619439586997,
      0.03140559047460556,
      0.03645338863134384,
      0.002102023223415017,
      0.12427075952291489,
      0.005618767347186804,
      -0.024033693596720695,
      -0.004816754721105099,
      0.07669509202241898,
      0.0473627969622612,
      0.03627035766839981,
      -0.013543973676860332,
      0.07301221787929535,
      -0.026250483468174934,
      0.06220347061753273,
      -0.0578073114156723,
      -0.022232936695218086,
      -0.0020197120029479265,
      0.08550671488046646,
      -0.006084995344281197,
      0.0919572114944458,
      0.04516024515032768,
      0.0040662894025444984,
      -0.030097493901848793,
      0.09118010848760605,
      -0.005168778356164694,
      0.08000367879867554,
      -0.0028131736908107996,
      -0.06847193092107773,
      -0.09313584119081497,
      0.06494080275297165,
      0.0277145653963089,
      -0.017518525943160057,
      -0.07827386260032654,
      -0.04442416876554489,
      0.04932984337210655,
      -0.008033833466470242,
      0.004057346377521753,
      0.07581881433725357,
      0.008484438993036747,
      0.023940512910485268,
      -0.03525319695472717,
      -0.007120067719370127,
      0.025387853384017944,
      0.03254084661602974,
      -0.03825546056032181,
      0.008681900799274445,
      -0.03790814056992531,
      -0.04586136341094971,
      -0.02638767845928669,
      -0.02728864923119545,
      -6.697503351915657e-08,
      -0.10408731549978256,
      -0.026193156838417053,
      -0.09560132771730423,
      -0.06969442963600159,
      0.05558939278125763,
      0.008032656274735928,
      -0.011200793087482452,
      -0.10576287657022476,
      -0.03298967704176903,
      -0.06278832256793976,
      0.02179775759577751,
      0.001592374173924327,
      -0.0361805334687233,
      -0.0446263812482357,
      0.011083793826401234,
      -0.11669006198644638,
      -0.05613720789551735,
      -0.028005613014101982,
      -0.07670983672142029,
      -0.01504441536962986,
      0.009922496974468231,
      -0.015990380197763443,
      -0.014670011587440968,
      0.0322972871363163,
      0.03230791538953781,
      0.007489826064556837,
      0.09057039022445679,
      0.018659958615899086,
      0.016258753836154938,
      -0.0717388466000557,
      -0.03700816631317139,
      -0.009870539419353008,
      0.022064831107854843,
      0.015024641528725624,
      -0.10947422683238983,
      0.12246084958314896,
      0.04754076898097992,
      0.023445269092917442,
      0.029725732281804085,
      -0.04574854299426079,
      0.007149726152420044,
      -0.04701430723071098,
      -0.012874579057097435,
      0.041636303067207336,
      0.001749579911120236,
      0.1256132423877716,
      -0.07161933928728104,
      -0.06313908100128174,
      0.011277518235147,
      -0.02974543534219265,
      0.03479023650288582,
      -0.0880013182759285,
      0.04788755252957344,
      0.1287582367658615,
      -0.06603259593248367,
      -0.061026737093925476,
      0.00014948715397622436,
      -0.06736855208873749,
      0.07839568704366684,
      -0.048298295587301254,
      0.11574122309684753,
      -0.018399756401777267,
      0.007876322604715824,
      -0.0008809869759716094
    ],
    [
      -0.06465539336204529,
      0.010918964631855488,
      -0.03669040650129318,
      0.00498056598007679,
      -0.01126435212790966,
      -0.018864640966057777,
      0.08835375308990479,
      0.0068138958886265755,
      0.06667937338352203,
      0.0165431909263134,
      0.051778651773929596,
      -0.050782330334186554,
      0.002215776825323701,
      0.052427828311920166,
      0.01074695959687233,
      0.03389166668057442,
      0.050877224653959274,
      -0.047943759709596634,
      0.024516932666301727,
      0.07658779621124268,
      -0.004359034355729818,
      -0.028754470869898796,
      -0.023297477513551712,
      0.05294780433177948,
      -0.024226801469922066,
      -0.08297757059335709,
      0.04968612641096115,
      -0.017285436391830444,
      0.023463672026991844,
      -0.00210428680293262,
      0.08104363083839417,
      0.12767371535301208,
      -0.08903420716524124,
      -0.04625358060002327,
      0.03728174418210983,
      -0.04493669793009758,
      0.017245305702090263,
      0.007206944283097982,
      -0.04222501069307327,
      -0.037186216562986374,
      0.0778130516409874,
      -0.058677781373262405,
      -0.029836993664503098,
      -0.060407862067222595,
      -0.00790459755808115,
      0.008650797419250011,
      0.0035117934457957745,
      0.024243170395493507,
      -0.11526792496442795,
      0.021090511232614517,
      0.03330288827419281,
      -0.011473887600004673,
      0.005810508970171213,
      0.09767273813486099,
      0.04214956983923912,
      -0.004072115290910006,
      0.03486550971865654,
      -0.078439861536026,
      0.055166881531476974,
      0.01227115560323,
      0.061636704951524734,
      0.06881571561098099,
      -0.04424266889691353,
      -7.657740206923336e-05,
      -0.02104981802403927,
      0.031163102015852928,
      -0.015109685249626637,
      0.00533643551170826,
      -0.06293226778507233,
      -0.029823357239365578,
      0.0062621827237308025,
      -0.04971642419695854,
      -0.00446202652528882,
      0.010513611137866974,
      0.05253013223409653,
      0.0033565780613571405,
      -0.00389768835157156,
      -0.006220937706530094,
      -0.09621913731098175,
      -0.09646376967430115,
      -0.006336664780974388,
      0.05347498133778572,
      0.049690570682287216,
      -0.04159173741936684,
      0.04781775549054146,
      0.008365826681256294,
      0.03336062654852867,
      0.010874842293560505,
      0.026247186586260796,
      0.003659728681668639,
      0.06699465960264206,
      0.012019735760986805,
      -0.019359853118658066,
      -0.10321810841560364,
      0.16545015573501587,
      -0.04426812753081322,
      0.01651395484805107,
      -0.059176888316869736,
      0.05904558673501015,
      0.04153130203485489,
      0.027822177857160568,
      0.04511256143450737,
      -0.04169958829879761,
      0.03556643798947334,
      -0.01957317255437374,
      0.021985985338687897,
      -0.021448221057653427,
      -0.002306779380887747,
      0.047834612429142,
      0.019257597625255585,
      -8.403426909353584e-05,
      -0.022333825007081032,
      0.01707674004137516,
      -0.03519570454955101,
      -0.07418173551559448,
      0.06360773742198944,
      -0.06155555695295334,
      -0.00963953323662281,
      0.09862398356199265,
      -0.09037694334983826,
      0.0002270865225000307,
      0.057984109967947006,
      -0.03897397965192795,
      -0.0021749900188297033,
      -0.0032222408335655928,
      0.012060509994626045,
      0.033663783222436905,
      4.087782339668474e-33,
      0.04999621957540512,
      0.02907158061861992,
      -0.0808376893401146,
      -0.07102762162685394,
      -0.006848315242677927,
      -0.015298296697437763,
      0.03767799958586693,
      -0.02508613094687462,
      -0.019627127796411514,
      0.0038714513648301363,
      -0.03306452929973602,
      -0.025886310264468193,
      0.03644115850329399,
      -0.011377724818885326,
      -0.0057510086335241795,
      0.03805575892329216,
      -0.0803602784872055,
      0.014603203162550926,
      0.08536170423030853,
      0.11878550797700882,
      0.050196725875139236,
      -0.024698952212929726,
      0.04123668372631073,
      -0.07534007728099823,
      -0.06852924823760986,
      0.013122346252202988,
      -0.004513849504292011,
      -0.05592598766088486,
      -0.020917775109410286,
      0.012325898744165897,
      0.034205880016088486,
      -0.031561292707920074,
      0.0677129477262497,
      0.09561354666948318,
      -0.013834165409207344,
      0.0029937243089079857,
      -0.017871985211968422,
      -0.06972775608301163,
      -0.08519945293664932,
      -0.05298590287566185,
      0.02486470527946949,
      0.02578742615878582,
      -0.06566841900348663,
      0.05068761110305786,
      -0.02252606302499771,
      -0.0028690584003925323,
      -0.0001998154621105641,
      0.010647541843354702,
      0.06580252200365067,
      -0.020089395344257355,
      0.020337281748652458,
      0.023469043895602226,
      -0.012220239266753197,
      -0.09520222991704941,
      0.020553432404994965,
      -0.05500408262014389,
      0.007506959140300751,
      0.0019109179265797138,
      -0.03691493347287178,
      0.038726624101400375,
      -0.019168872386217117,
      -0.06255210191011429,
      -0.06148488074541092,
      0.0033571161329746246,
      -0.06049825996160507,
      0.08413386344909668,
      -0.08453087508678436,
      -0.08749799430370331,
      0.0009516851860098541,
      -0.10263065248727798,
      -0.044586505740880966,
      0.03195105865597725,
      0.08891817182302475,
      0.058475155383348465,
      0.0052391779609024525,
      -0.034016698598861694,
      0.04881425201892853,
      0.04549431428313255,
      0.018659017980098724,
      0.004347913898527622,
      -0.12387441098690033,
      0.0009432540973648429,
      -0.009264488704502583,
      0.09810422360897064,
      -0.022122718393802643,
      0.01935959793627262,
      -0.04746733978390694,
      -0.03601240739226341,
      -0.05218947306275368,
      -0.038163408637046814,
      0.020429886877536774,
      -0.05174034461379051,
      -0.008342111483216286,
      0.02586236596107483,
      0.11940888315439224,
      -6.598254033308955e-33,
      -0.06929180026054382,
      0.016602329909801483,
      -0.047173384577035904,
      0.03373023122549057,
      -0.030814658850431442,
      -0.006294833030551672,
      0.013022002764046192,
      0.046985022723674774,
      0.031687065958976746,
      0.009725261479616165,
      -0.050530824810266495,
      0.003440538188442588,
      0.04216628894209862,
      0.046851590275764465,
      0.059418268501758575,
      -0.09055537730455399,
      -0.07519502937793732,
      -0.006926806177943945,
      0.018970543518662453,
      0.053123921155929565,
      0.06657589226961136,
      0.10536766797304153,
      -0.004239541012793779,
      0.05343419685959816,
      0.01401508878916502,
      0.061388105154037476,
      -0.010716973803937435,
      0.03941415995359421,
      -0.028230853378772736,
      -0.029097503051161766,
      0.038546349853277206,
      0.017540300264954567,
      -0.06070539355278015,
      -0.03733953461050987,
      -0.019060486927628517,
      -0.029778674244880676,
      -0.029193798080086708,
      0.0751965120434761,
      -0.03888498246669769,
      0.025977283716201782,
      -0.006987891159951687,
      0.01025497354567051,
      -0.054198287427425385,
      0.010753585956990719,
      -0.0025633303448557854,
      -0.02380000427365303,
      -0.012654225341975689,
      0.013344967737793922,
      0.09697642177343369,
      -0.0702047199010849,
      -0.03014415316283703,
      0.029424626380205154,
      0.06460773944854736,
      -0.011903077363967896,
      -0.08221235871315002,
      0.06880856305360794,
      0.10937538743019104,
      -0.03771468251943588,
      0.06754329055547714,
      -0.04110676050186157,
      0.00542451161891222,
      0.01572861522436142,
      0.08634676039218903,
      0.056359220296144485,
      0.02552381530404091,
      0.003636557376012206,
      -0.004862227477133274,
      -0.02955724485218525,
      0.08606825023889542,
      -0.042964689433574677,
      0.0032295226119458675,
      0.0013840838801115751,
      -0.03804725408554077,
      0.005530820228159428,
      0.11658600717782974,
      0.017124604433774948,
      0.023188430815935135,
      -0.1461174190044403,
      0.01894214004278183,
      0.02348514087498188,
      -0.07052245736122131,
      0.03885699063539505,
      0.07974090427160263,
      -0.035292286425828934,
      0.0476866252720356,
      -0.054668277502059937,
      0.00687976973131299,
      -0.02888409048318863,
      0.014044776558876038,
      -0.02166871726512909,
      -0.018247956410050392,
      0.0377962663769722,
      -0.06692223995923996,
      -0.02403605729341507,
      -0.02781801111996174,
      -6.586564893495961e-08,
      -0.024072373285889626,
      -0.05127718672156334,
      -0.08664487302303314,
      0.008143661543726921,
      0.01588716357946396,
      -0.03389127925038338,
      0.005925259552896023,
      -0.07960166037082672,
      -0.04608636349439621,
      -0.061387669295072556,
      -0.05095256492495537,
      5.9318124840501696e-05,
      -0.021632304415106773,
      -0.061276618391275406,
      0.018344081938266754,
      -0.04010458663105965,
      -0.003441360779106617,
      -0.06613636016845703,
      -0.15573066473007202,
      -0.021381016820669174,
      -0.049927257001399994,
      0.0036284050438553095,
      -0.013779166154563427,
      -0.07837270945310593,
      -0.06650816649198532,
      -0.04098786413669586,
      0.13643506169319153,
      0.09661926329135895,
      0.0381377711892128,
      -0.024751294404268265,
      -0.05190305784344673,
      0.06933099031448364,
      -0.010521067306399345,
      0.005288127344101667,
      -0.00865178368985653,
      0.09707188606262207,
      0.10729463398456573,
      0.023560205474495888,
      0.016404209658503532,
      -0.005274068098515272,
      -0.026394806802272797,
      -0.055560942739248276,
      -0.08900324255228043,
      0.0008319582557305694,
      0.02553296834230423,
      0.03250245749950409,
      -0.13147981464862823,
      -0.006858422886580229,
      0.03914714977145195,
      0.03946449235081673,
      -0.0016927323304116726,
      -0.07283373922109604,
      0.01693197339773178,
      0.02086499333381653,
      -0.004785156808793545,
      -0.05265972390770912,
      -0.047705017030239105,
      -0.08111950755119324,
      0.0699291080236435,
      -0.029477069154381752,
      0.11603178828954697,
      0.003220341866835952,
      0.12140225619077682,
      -0.048131924122571945
    ],
    [
      0.01983756758272648,
      -0.04665181785821915,
      -0.09402827173471451,
      0.038319770246744156,
      0.10047054290771484,
      -0.053205493837594986,
      -0.08511752635240555,
      0.0014171244110912085,
      0.04447877034544945,
      -0.03246893361210823,
      0.08012747019529343,
      -0.037758469581604004,
      -0.047259412705898285,
      0.01040728110820055,
      0.16855429112911224,
      0.08550222218036652,
      0.01003913301974535,
      0.0059391409158706665,
      0.028191491961479187,
      0.02643471024930477,
      0.027695296332240105,
      0.08511245995759964,
      0.011789382435381413,
      -0.023805173113942146,
      -0.04807836934924126,
      -0.005331116262823343,
      -0.04153618589043617,
      0.02778790518641472,
      -0.029092557728290558,
      -0.0372045673429966,
      0.004134495742619038,
      -0.004386445507407188,
      -0.004415486939251423,
      0.030675124377012253,
      0.09088940173387527,
      0.05257192254066467,
      0.01148397009819746,
      -0.10232305526733398,
      -0.05656983703374863,
      -0.029423866420984268,
      0.0035880955401808023,
      0.03334742784500122,
      -0.07832133769989014,
      -0.03662204369902611,
      -0.08723680675029755,
      -0.05486954748630524,
      -0.049191854894161224,
      -0.03239302337169647,
      0.04467131569981575,
      0.021210437640547752,
      -0.04751376435160637,
      -0.11820966750383377,
      0.00716975424438715,
      -0.004750227555632591,
      -0.002719618147239089,
      0.016603611409664154,
      -0.08516078442335129,
      -0.012819761410355568,
      -0.03531765565276146,
      0.058514274656772614,
      0.039293322712183,
      0.016181819140911102,
      0.004657437559217215,
      -0.01261521689593792,
      -0.042263761162757874,
      0.020638693124055862,
      -0.06700970232486725,
      -0.03353654965758324,
      -0.008746672421693802,
      -0.09635095298290253,
      -0.006001078058034182,
      -0.005492202937602997,
      0.06870374828577042,
      -0.00448229443281889,
      -0.0170002318918705,
      0.01516167726367712,
      -0.002825842471793294,
      0.020603572949767113,
      -0.0011377912014722824,
      -0.01698221266269684,
      -0.022236116230487823,
      0.01635589636862278,
      -0.023082107305526733,
      0.05287635326385498,
      0.030424019321799278,
      0.0807097777724266,
      0.046635951846838,
      0.06451257318258286,
      0.0028367217164486647,
      -0.014648239128291607,
      0.03992125019431114,
      0.010643839836120605,
      -0.02936544455587864,
      -0.01721889339387417,
      0.018656842410564423,
      -0.04068172350525856,
      -0.06795021891593933,
      0.028596878051757812,
      -0.034629937261343,
      0.04222454875707626,
      0.009582413360476494,
      -0.008140106685459614,
      0.008735736832022667,
      0.02363135665655136,
      -0.05088968202471733,
      -0.02012092061340809,
      0.0583684965968132,
      0.0027309097349643707,
      -0.08116494119167328,
      0.05318354815244675,
      0.034940920770168304,
      -0.029882710427045822,
      0.03956064581871033,
      -0.034002576023340225,
      -0.044977325946092606,
      0.060245584696531296,
      -0.0801435187458992,
      0.006822510156780481,
      -0.053464025259017944,
      -0.04451913759112358,
      0.012516920454800129,
      -0.048619017004966736,
      0.042399488389492035,
      -0.032094232738018036,
      0.008403702639043331,
      0.004473521839827299,
      0.03778746724128723,
      2.257231088551997e-33,
      0.049162719398736954,
      -0.012048869393765926,
      -0.005390916019678116,
      0.0025636206846684217,
      0.03439963608980179,
      -0.07154490798711777,
      0.04266338422894478,
      -0.03179389238357544,
      -0.02691156417131424,
      -0.04522349685430527,
      -0.03430873155593872,
      0.08044164627790451,
      -0.08497771620750427,
      -0.013604598119854927,
      0.009527095593512058,
      0.0007358044967986643,
      -0.0260605588555336,
      0.018322914838790894,
      0.11669376492500305,
      0.004265941679477692,
      0.03498435020446777,
      -0.043398674577474594,
      0.03378307819366455,
      0.04875211790204048,
      -0.08074633777141571,
      0.11763608455657959,
      -0.006546934600919485,
      -0.09186027199029922,
      0.06425829976797104,
      0.03173429146409035,
      0.10162656754255295,
      0.03480345010757446,
      -0.026104804128408432,
      -0.00750381126999855,
      0.04154029116034508,
      -0.02991523966193199,
      -0.017566243186593056,
      0.023863643407821655,
      -0.10031118243932724,
      0.032833050936460495,
      -0.03837365284562111,
      0.027279166504740715,
      0.04687659442424774,
      0.006850474048405886,
      -0.0004073944000992924,
      -0.044141899794340134,
      0.05112965404987335,
      0.03799910843372345,
      0.1125207468867302,
      -0.03989759832620621,
      -0.02995149977505207,
      -0.07609136402606964,
      -0.014986484311521053,
      -0.024374278262257576,
      0.04840210825204849,
      -0.03685992956161499,
      -0.015585245564579964,
      -0.010500089265406132,
      -0.026758454740047455,
      -0.017054282128810883,
      -0.05907682329416275,
      -0.034822944551706314,
      0.05214342474937439,
      -0.043189313262701035,
      0.00838038232177496,
      0.0586475245654583,
      -0.017174910753965378,
      -0.04782499372959137,
      0.004639657214283943,
      0.03468102589249611,
      0.027196459472179413,
      -0.034384872764348984,
      -0.022385384887456894,
      0.10004933178424835,
      -0.016054989770054817,
      -0.047220490872859955,
      0.07039013504981995,
      0.006123077590018511,
      0.03427652642130852,
      -0.009138105437159538,
      -0.011603088118135929,
      -0.04496743157505989,
      -0.054933834820985794,
      0.05991046130657196,
      0.002150389365851879,
      -0.009566474705934525,
      0.06484877318143845,
      0.02130192518234253,
      -0.048375435173511505,
      0.09649264812469482,
      -0.037619248032569885,
      0.027259262278676033,
      -0.07439247518777847,
      -0.05034657195210457,
      -0.028982648625969887,
      -2.7142750470952107e-33,
      0.03575468063354492,
      -0.08142363280057907,
      -0.0016950060380622745,
      -0.04427236691117287,
      -0.02149214595556259,
      -0.009753609076142311,
      0.0019559587817639112,
      0.09600307047367096,
      0.014722435735166073,
      0.07190432399511337,
      -0.0053534493781626225,
      0.008004205301404,
      0.1131376251578331,
      -0.017171887680888176,
      -0.04476248472929001,
      0.007664080709218979,
      -0.04498201608657837,
      -6.181034405017272e-05,
      -0.05454150587320328,
      0.011309484019875526,
      -0.059755194932222366,
      0.027917103841900826,
      0.07656265795230865,
      -0.035465169697999954,
      0.08815562725067139,
      0.03552413359284401,
      0.0742657408118248,
      0.017790649086236954,
      -0.06067304313182831,
      -0.0749179795384407,
      -0.020542556419968605,
      0.01761668734252453,
      -0.07117770612239838,
      0.014318953268229961,
      -0.02090788632631302,
      0.073733389377594,
      0.0028387848287820816,
      0.03049182891845703,
      -0.028706612065434456,
      0.004326905123889446,
      0.0026874046307057142,
      -0.052383508533239365,
      -0.12603719532489777,
      -0.0682285726070404,
      -0.0515810064971447,
      1.5396257367683575e-05,
      -0.037644773721694946,
      0.05888863652944565,
      -0.08675727993249893,
      -0.052926626056432724,
      0.06811222434043884,
      0.0013343258760869503,
      -0.0015863684238865972,
      -0.016236403957009315,
      0.03854170814156532,
      0.10410565882921219,
      0.08791790157556534,
      -0.08264622837305069,
      -0.059994325041770935,
      -0.06943581998348236,
      0.008753713220357895,
      -0.08255960047245026,
      -0.038640979677438736,
      0.06926325708627701,
      0.028183192014694214,
      -0.03268222138285637,
      0.05011778697371483,
      0.03141172230243683,
      -0.05465534329414368,
      -0.0016155131161212921,
      -0.05201615020632744,
      -0.08497510850429535,
      0.011082458309829235,
      -0.0009647415718063712,
      0.03402240574359894,
      -0.017733508720993996,
      -0.10433027893304825,
      0.05714486166834831,
      0.07276754081249237,
      -0.002245094394311309,
      -0.03658345714211464,
      0.0001840784534579143,
      0.04575392231345177,
      -0.0312196034938097,
      0.14007288217544556,
      0.03056109882891178,
      0.10704345256090164,
      0.055888425558805466,
      0.05792107805609703,
      0.133815735578537,
      -0.03049475885927677,
      0.08818824589252472,
      -0.0010396598372608423,
      0.023047417402267456,
      0.037563543766736984,
      -3.012792859635738e-08,
      -0.0029231549706310034,
      -0.07210671156644821,
      -6.543339986819774e-05,
      0.00224324781447649,
      -0.03001129999756813,
      0.023974310606718063,
      0.03417879715561867,
      -0.00421785656362772,
      -0.01383593212813139,
      0.10770802199840546,
      -0.005036120302975178,
      0.12039869278669357,
      -0.06368540972471237,
      0.03331424295902252,
      -0.10692126303911209,
      0.06266467273235321,
      0.05082983151078224,
      0.10677216202020645,
      0.04511628672480583,
      -0.04276912659406662,
      -0.013913335278630257,
      0.01641075499355793,
      0.070189468562603,
      -0.032883625477552414,
      0.015605244785547256,
      0.020587801933288574,
      -0.026715412735939026,
      0.024053888395428658,
      -0.04157136008143425,
      -0.08444052934646606,
      0.04485371708869934,
      -0.07907696068286896,
      0.06390680372714996,
      -0.14743104577064514,
      -0.03940032050013542,
      0.04722180962562561,
      0.02703997492790222,
      -0.04105054587125778,
      -0.04580273479223251,
      -0.06684998422861099,
      0.005081204231828451,
      0.01242965366691351,
      -0.0569375641644001,
      -0.05560677498579025,
      0.012712700292468071,
      0.047033730894327164,
      -0.042294692248106,
      0.08102639019489288,
      0.011516742408275604,
      0.08665468543767929,
      -0.05447109416127205,
      -0.09561844915151596,
      0.01765405386686325,
      -0.017761273309588432,
      -0.06418004631996155,
      -0.02390715852379799,
      -0.02155875787138939,
      -0.05562282353639603,
      -0.07250726968050003,
      -0.015128233470022678,
      0.01954123191535473,
      0.060261908918619156,
      0.04753032326698303,
      -0.027072496712207794
    ],
    [
      -0.13564039766788483,
      0.006835940759629011,
      -0.027937505394220352,
      0.07890579849481583,
      0.05609078332781792,
      -0.015991827473044395,
      0.11344397068023682,
      0.011558209545910358,
      0.07417802512645721,
      0.03611598536372185,
      0.05084947869181633,
      -0.02116706781089306,
      0.0027409035246819258,
      -0.028132371604442596,
      -0.03298783302307129,
      -0.007989461533725262,
      0.04426335170865059,
      -0.08058017492294312,
      0.026598801836371422,
      0.10937204957008362,
      0.02375170774757862,
      -0.017843101173639297,
      -0.042610470205545425,
      0.06557270884513855,
      0.006184094585478306,
      -0.01549498364329338,
      -0.0018808093154802918,
      0.0029385245870798826,
      -0.012021895498037338,
      -0.017348799854516983,
      0.05880384519696236,
      0.12822288274765015,
      -0.03877004235982895,
      -0.03632497414946556,
      0.09822647273540497,
      -0.014769761823117733,
      0.024161241948604584,
      0.01543074008077383,
      -0.013803964480757713,
      -0.019634835422039032,
      0.0027141093742102385,
      -0.07382863759994507,
      0.009140418842434883,
      -0.03263658657670021,
      0.00315448478795588,
      -0.008527503348886967,
      0.03638612478971481,
      -0.045709166675806046,
      -0.09802339971065521,
      0.0007900180062279105,
      -0.024533584713935852,
      0.009627182967960835,
      -0.031022431328892708,
      0.05898395925760269,
      0.02357579581439495,
      -0.02261991985142231,
      0.05524769425392151,
      -0.10318206250667572,
      0.0076988195069134235,
      0.024552596732974052,
      0.020455529913306236,
      0.012820733711123466,
      -0.04878072440624237,
      -0.0038746388163417578,
      -0.00252317707054317,
      0.06683401763439178,
      0.012630097568035126,
      -0.028119118884205818,
      0.0366489551961422,
      0.021782739087939262,
      0.05025710538029671,
      0.014001958072185516,
      -0.015896087512373924,
      0.02639804221689701,
      0.08897940814495087,
      0.03827476128935814,
      -0.016614513471722603,
      0.012287318706512451,
      -0.016222108155488968,
      -0.12799333035945892,
      -0.09415531903505325,
      -0.01680806837975979,
      0.007718926761299372,
      -0.026524348184466362,
      0.007883498445153236,
      -0.029704131186008453,
      0.042668674141168594,
      0.046844616532325745,
      0.07811266928911209,
      -0.007953652180731297,
      0.0813291072845459,
      0.05028994381427765,
      -0.04917118325829506,
      0.03772953525185585,
      0.08180949836969376,
      -0.015464767813682556,
      0.025985008105635643,
      -0.06636692583560944,
      0.018518665805459023,
      0.05308360233902931,
      0.0352625846862793,
      0.016195708885788918,
      -0.08444663137197495,
      -0.000979654025286436,
      0.042878422886133194,
      -0.030651215463876724,
      0.02031802386045456,
      -0.03263528645038605,
      -0.027290448546409607,
      -0.01304341945797205,
      -0.006829174235463142,
      -0.031142862513661385,
      0.06730876117944717,
      -0.05788690596818924,
      -0.06321552395820618,
      0.08432643115520477,
      -0.05979178845882416,
      -0.02442282997071743,
      0.052220918238162994,
      -0.09512826055288315,
      0.05619659274816513,
      0.05695782229304314,
      -0.03367381915450096,
      -0.016046414151787758,
      0.04072055593132973,
      -0.03637673333287239,
      0.015429077669978142,
      7.176901413076796e-33,
      0.045985035598278046,
      0.017318520694971085,
      -0.10169290751218796,
      -0.013497838750481606,
      -0.004659262951463461,
      -0.03642529621720314,
      0.027046147733926773,
      -0.02799152210354805,
      -0.039735179394483566,
      0.08118907362222672,
      0.0630810558795929,
      -0.02265700325369835,
      0.023074863478541374,
      -0.07928145676851273,
      -0.09413257986307144,
      -0.026740599423646927,
      0.05605344474315643,
      0.05548173189163208,
      0.042645812034606934,
      0.0662493035197258,
      0.07372303307056427,
      -0.12770238518714905,
      0.003064196789637208,
      -0.06435676664113998,
      -0.013850528746843338,
      0.035796426236629486,
      -0.01445993036031723,
      0.026753216981887817,
      0.01585770770907402,
      0.030790235847234726,
      0.0015757401706650853,
      0.024061068892478943,
      0.09305451810359955,
      0.07667873799800873,
      0.014456567354500294,
      -0.02415556088089943,
      -0.07975858449935913,
      -0.0858447477221489,
      -0.03963547945022583,
      -0.02192728780210018,
      -0.014654175378382206,
      0.035379305481910706,
      -0.09480421245098114,
      0.007383967749774456,
      0.03549296781420708,
      -0.06966609507799149,
      -0.023285700008273125,
      0.014145273715257645,
      0.06480766832828522,
      -0.02393588423728943,
      0.006863251328468323,
      0.0839158147573471,
      0.020232101902365685,
      -0.026104852557182312,
      -0.024285053834319115,
      -0.05248690024018288,
      -0.010151727125048637,
      0.027549125254154205,
      -0.012150544673204422,
      0.03936632722616196,
      0.0430452786386013,
      -0.037846073508262634,
      -0.08994118124246597,
      -0.06296318024396896,
      -0.06484977900981903,
      0.07299845665693283,
      -0.05690900981426239,
      -0.05779558792710304,
      -0.01584607921540737,
      -0.028584100306034088,
      -0.0309678353369236,
      -0.004591961856931448,
      0.06512046605348587,
      0.054902318865060806,
      0.008029143325984478,
      -0.10255944728851318,
      0.08895799517631531,
      0.09159649908542633,
      0.021670028567314148,
      -0.09633614122867584,
      -0.017039751634001732,
      -0.04704086482524872,
      -0.031739242374897,
      0.08480808138847351,
      -0.07593147456645966,
      -0.024951916188001633,
      -0.0212445966899395,
      0.017401933670043945,
      -0.1335323005914688,
      -0.07772170007228851,
      -0.03399411961436272,
      -0.07629063725471497,
      -0.010207016952335835,
      -0.003916929010301828,
      0.0316368043422699,
      -8.174503061001362e-33,
      -0.039814695715904236,
      -0.02085738256573677,
      -0.0868956446647644,
      0.027482256293296814,
      0.03956032916903496,
      0.037662506103515625,
      -0.0033362489193677902,
      0.06794148683547974,
      0.03829304873943329,
      -0.00911544356495142,
      0.032159049063920975,
      -0.014897358603775501,
      -0.02031102403998375,
      -0.014857213012874126,
      -0.013447340577840805,
      -0.05654590576887131,
      -0.013921977020800114,
      -0.07658060640096664,
      0.008711744099855423,
      0.08002910763025284,
      0.04896530881524086,
      0.05735306814312935,
      -0.02771879732608795,
      0.05062031373381615,
      -0.0391673818230629,
      0.06784454733133316,
      -0.06333174556493759,
      0.034137044101953506,
      -0.05266758054494858,
      0.03601788729429245,
      0.0015688694547861814,
      -0.013444758951663971,
      -0.07408508658409119,
      -0.03453127294778824,
      0.058707159012556076,
      -0.09216800332069397,
      0.00862694438546896,
      0.057481616735458374,
      -0.05491568148136139,
      0.06119382381439209,
      0.09684861451387405,
      0.03460008278489113,
      0.012717233039438725,
      0.005731324665248394,
      -0.0030841734260320663,
      0.009912649169564247,
      0.02073363959789276,
      -0.04628583416342735,
      0.07601455599069595,
      -0.03239739313721657,
      -0.02436591312289238,
      -0.034163203090429306,
      0.07736864686012268,
      0.061072614043951035,
      -0.03273647278547287,
      0.0647171139717102,
      0.06709552556276321,
      -0.027744729071855545,
      0.05632023140788078,
      0.013512271456420422,
      0.02041601948440075,
      0.03515328839421272,
      0.06624781340360641,
      0.03306309133768082,
      0.07714897394180298,
      0.029638811945915222,
      -0.04816015809774399,
      -0.025892741978168488,
      0.11304423213005066,
      0.019480053335428238,
      0.13028369843959808,
      0.01263356115669012,
      -0.036157675087451935,
      -0.006400736514478922,
      0.09540656208992004,
      0.04995662346482277,
      0.007723632268607616,
      -0.08101459592580795,
      -0.025600554421544075,
      0.07389942556619644,
      -0.0022588171996176243,
      0.03405965492129326,
      0.015336902812123299,
      0.020907768979668617,
      -0.0033904158044606447,
      0.0059939296916127205,
      -0.03542995825409889,
      -0.03016679547727108,
      0.008121210150420666,
      -0.04741279408335686,
      -0.026415254920721054,
      -0.014675467275083065,
      -0.06568845361471176,
      0.00923142023384571,
      -0.06397345662117004,
      -6.891043824452936e-08,
      -0.0519966296851635,
      -0.03402679041028023,
      -0.033533401787281036,
      -0.019141612574458122,
      0.0712735578417778,
      -0.02282426692545414,
      0.04648955911397934,
      -0.13650642335414886,
      -0.0772654265165329,
      -0.04146189987659454,
      0.03191201016306877,
      0.003351509803906083,
      -0.014025426469743252,
      -0.07850868999958038,
      -0.005692473612725735,
      -0.11099129170179367,
      -0.07684644311666489,
      -0.019658856093883514,
      -0.13101503252983093,
      -0.027572527527809143,
      -0.017950743436813354,
      0.004288934636861086,
      0.006824691779911518,
      -0.09372688829898834,
      -0.0004832875856664032,
      -0.001571938511915505,
      0.1182449534535408,
      0.07750283181667328,
      0.047610245645046234,
      -0.010929277166724205,
      -0.038303595036268234,
      0.014510305598378181,
      0.07683081179857254,
      -0.021745072677731514,
      -0.04897555708885193,
      0.09003060311079025,
      0.009971794672310352,
      0.010528513230383396,
      0.049612533301115036,
      0.03939124569296837,
      -0.028926411643624306,
      -0.009130237624049187,
      -0.024401115253567696,
      0.019933806732296944,
      0.021652616560459137,
      -0.013701285235583782,
      -0.13707023859024048,
      -0.03239068388938904,
      0.009582427330315113,
      -0.024020995944738388,
      -0.037385355681180954,
      -0.03389540687203407,
      -0.04419645294547081,
      0.06521175056695938,
      -0.027457861229777336,
      -0.022399790585041046,
      -0.007586099673062563,
      -0.028345869854092598,
      0.01264985278248787,
      -0.06825655698776245,
      0.08033209294080734,
      -0.037266384810209274,
      0.03421228006482124,
      0.02310699038207531
    ],
    [
      -0.10862870514392853,
      -0.02296582981944084,
      -0.016406532377004623,
      0.047217562794685364,
      0.014639710076153278,
      -0.015600072219967842,
      0.15893647074699402,
      0.04140450432896614,
      0.09563745558261871,
      0.009838621132075787,
      0.052183810621500015,
      -0.0031842077150940895,
      0.031446538865566254,
      0.023700976744294167,
      -0.02312539517879486,
      0.0059322514571249485,
      0.016053009778261185,
      -0.00823427364230156,
      0.0065038567408919334,
      0.1417027860879898,
      0.02152065373957157,
      -0.02107030525803566,
      -0.02790972590446472,
      0.0693410262465477,
      -0.0045031532645225525,
      0.014435878023505211,
      0.03867334872484207,
      -0.0074885147623717785,
      0.011501687578856945,
      -0.04751351848244667,
      0.08904650807380676,
      0.150837704539299,
      0.013101951219141483,
      -0.03602170571684837,
      0.046523239463567734,
      -0.027229996398091316,
      0.05873686820268631,
      -0.004772701300680637,
      0.016285615041851997,
      -0.05805642902851105,
      0.020813601091504097,
      -0.03031834587454796,
      0.022141436114907265,
      -0.034258030354976654,
      0.043994296342134476,
      0.058257244527339935,
      -0.018196959048509598,
      -0.05214206129312515,
      -0.06424898654222488,
      0.030493471771478653,
      0.007806602865457535,
      0.012813224457204342,
      -0.01804829016327858,
      0.09814492613077164,
      0.01506152842193842,
      -0.05115935206413269,
      0.05409903824329376,
      -0.06804601103067398,
      0.015040961094200611,
      0.07085350155830383,
      0.09962056577205658,
      0.032085709273815155,
      0.006927442271262407,
      -0.019859466701745987,
      -0.010179520584642887,
      0.041833922266960144,
      0.004493681248277426,
      -0.01680305041372776,
      -0.0100267194211483,
      0.03150596097111702,
      0.023917514830827713,
      -0.030402284115552902,
      -0.04849330708384514,
      -0.012490455061197281,
      0.06693340837955475,
      0.007834828458726406,
      -0.00877248402684927,
      -0.011955623514950275,
      -0.05096486210823059,
      -0.11393905431032181,
      -0.058911360800266266,
      -0.0036390582099556923,
      0.01892288774251938,
      -0.016062520444393158,
      -0.008237150497734547,
      -0.034517399966716766,
      0.004268110729753971,
      -0.058344319462776184,
      0.06862986832857132,
      0.038719892501831055,
      0.048700444400310516,
      0.02293964847922325,
      0.022007064893841743,
      0.00241421558894217,
      0.07843944430351257,
      -0.00045269684051163495,
      0.015115826390683651,
      -0.03830098733305931,
      0.020045753568410873,
      0.06654486805200577,
      0.0003584213263820857,
      0.05299367010593414,
      -0.07892723381519318,
      0.05253169313073158,
      0.0544680692255497,
      -0.04968361184000969,
      0.0014864359982311726,
      -0.054637663066387177,
      0.007323342841118574,
      0.016570929437875748,
      0.03448204696178436,
      0.010392654687166214,
      0.05900891497731209,
      -0.02767711877822876,
      -0.061193935573101044,
      0.1225593090057373,
      -0.016173990443348885,
      0.02130555361509323,
      0.006188215687870979,
      -0.041820913553237915,
      0.06459212303161621,
      0.055556416511535645,
      -0.09560821205377579,
      0.01750502735376358,
      0.0056432802230119705,
      -0.011098931543529034,
      -0.0051775407046079636,
      6.092467834166911e-33,
      0.011920948512852192,
      0.006274056620895863,
      -0.08112706989049911,
      0.003753115888684988,
      -0.016888786107301712,
      -0.0822875052690506,
      -0.05945664271712303,
      -0.035495974123477936,
      -0.08867072314023972,
      0.09080193936824799,
      0.061882998794317245,
      0.04180748015642166,
      0.031919557601213455,
      0.009799930267035961,
      -0.03406355530023575,
      -0.0367506742477417,
      -0.026555217802524567,
      0.05527479574084282,
      0.07348247617483139,
      -0.004736521281301975,
      0.02234632708132267,
      -0.12623557448387146,
      0.006357931531965733,
      -0.02980227582156658,
      -0.03556196019053459,
      0.06965327262878418,
      -0.03885188326239586,
      0.006335104815661907,
      -0.013569509610533714,
      -0.004178520292043686,
      0.01140248030424118,
      0.026436839252710342,
      0.016958685591816902,
      -0.00013189493620302528,
      0.016046933829784393,
      0.001689524040557444,
      -0.06845389306545258,
      -0.057020675390958786,
      -0.10158389061689377,
      0.028400013223290443,
      -0.04611250385642052,
      0.050204310566186905,
      -0.14349345862865448,
      0.0012975218705832958,
      0.07706515491008759,
      -0.021183835342526436,
      -0.018733933568000793,
      0.025022447109222412,
      0.07514273375272751,
      -0.024561621248722076,
      0.009439868852496147,
      0.024896936491131783,
      0.014366405084729195,
      0.042409513145685196,
      -0.022760292515158653,
      0.004020124673843384,
      -0.01574634574353695,
      -0.005660242401063442,
      0.0031474244315177202,
      0.07873812317848206,
      0.016823260113596916,
      -0.02954951301217079,
      -0.08417552709579468,
      0.038202304393053055,
      -0.03620242699980736,
      0.03239823505282402,
      -0.03131552040576935,
      -0.05732998251914978,
      -0.08248636871576309,
      -0.034612301737070084,
      -0.018890338018536568,
      -0.0009122260380536318,
      -0.007228573318570852,
      0.07359309494495392,
      -0.01649804413318634,
      -0.09463927149772644,
      0.044701557606458664,
      0.11918026953935623,
      0.023592477664351463,
      -0.05886096507310867,
      -0.04669429734349251,
      -0.00182328128721565,
      0.03991863876581192,
      0.035490892827510834,
      -0.08511412143707275,
      -0.020657820627093315,
      -0.0559498555958271,
      -0.030063172802329063,
      -0.11898599565029144,
      -0.01863994635641575,
      -0.0003678968932945281,
      -0.03695444017648697,
      -0.05148277431726456,
      0.0681806430220604,
      0.01325242966413498,
      -7.371907844354551e-33,
      -0.06534925848245621,
      -0.02712433412671089,
      -0.15948611497879028,
      0.004126753658056259,
      -0.062306132167577744,
      0.04703110456466675,
      0.0640876516699791,
      0.058385152369737625,
      -0.021713053807616234,
      -0.012169892899692059,
      0.02234611287713051,
      -0.020218586549162865,
      0.0007016366580501199,
      0.0214985478669405,
      0.021224405616521835,
      -0.09186389297246933,
      0.021846041083335876,
      -0.021917080506682396,
      -0.05268269032239914,
      0.06367463618516922,
      0.044020138680934906,
      0.10371824353933334,
      -0.03117229789495468,
      0.004475138150155544,
      -0.043553389608860016,
      0.05796726420521736,
      0.021437399089336395,
      0.047115668654441833,
      -0.03478618338704109,
      0.03430493548512459,
      0.0011944673024117947,
      0.04613110050559044,
      -0.046928521245718,
      -0.028063694015145302,
      0.02905002050101757,
      -0.08916490525007248,
      -0.035573676228523254,
      0.018956726416945457,
      -0.05483109876513481,
      0.02907264232635498,
      0.031683240085840225,
      0.07753680646419525,
      0.02960706502199173,
      -0.0020709806121885777,
      0.01292491890490055,
      -0.02938547171652317,
      -0.02512970194220543,
      -0.016880420967936516,
      0.10660015046596527,
      0.005580366123467684,
      -0.0035948422737419605,
      -0.02309739775955677,
      0.03257615864276886,
      0.0707685798406601,
      -0.05380896478891373,
      0.06505755335092545,
      0.05927146226167679,
      -0.04408575966954231,
      0.04744398593902588,
      0.029961880296468735,
      0.030323220416903496,
      0.03891698643565178,
      0.03173072636127472,
      -0.0003271406458225101,
      0.04878811910748482,
      0.024547282606363297,
      -0.05688057094812393,
      -0.035474132746458054,
      0.14540988206863403,
      -0.014951327815651894,
      0.13861201703548431,
      -0.05165950953960419,
      -0.005811179056763649,
      -0.04488325119018555,
      0.05273575335741043,
      0.0011246114736422896,
      -0.007061109412461519,
      -0.04924982786178589,
      -0.021033959463238716,
      -0.034775685518980026,
      -0.03906530514359474,
      0.041636742651462555,
      0.06904957443475723,
      0.017886314541101456,
      -0.06510640680789948,
      -0.025812311097979546,
      -0.08444487303495407,
      -0.012300840578973293,
      0.029294276610016823,
      -0.003892401931807399,
      0.006208915263414383,
      -0.00788540206849575,
      -0.04951368272304535,
      -0.05546026676893234,
      -0.08180858939886093,
      -6.61324790485196e-08,
      -0.07247814536094666,
      -0.07177412509918213,
      -0.03730595111846924,
      -0.002005487447604537,
      0.04332955554127693,
      -0.003994226921349764,
      0.026210656389594078,
      -0.062225036323070526,
      -0.05014970153570175,
      -0.005949678830802441,
      -0.0051432885229587555,
      0.02582579292356968,
      -0.05557096749544144,
      -0.06669662147760391,
      -0.007999015972018242,
      -0.0383199006319046,
      -0.05176674574613571,
      -0.04894391447305679,
      -0.11762042343616486,
      -0.008608780801296234,
      -0.03549777716398239,
      0.006405205931514502,
      0.023213688284158707,
      -0.10789211094379425,
      -0.024421928450465202,
      -0.05235890671610832,
      0.14075955748558044,
      0.10424656420946121,
      0.03902832046151161,
      -0.07597456127405167,
      -0.03887547552585602,
      0.015905186533927917,
      0.024600541219115257,
      -0.01300038956105709,
      -0.05003460869193077,
      0.09863104671239853,
      0.04035307839512825,
      -0.027018718421459198,
      0.07630480080842972,
      0.04161037877202034,
      -0.09730851650238037,
      -0.027358215302228928,
      -0.0296948179602623,
      0.009972397238016129,
      -2.6618947231327184e-05,
      0.031885042786598206,
      -0.1383158266544342,
      0.00537758506834507,
      0.08316980302333832,
      -0.019569456577301025,
      -0.031172772869467735,
      -0.083800308406353,
      -0.008058124221861362,
      0.06926912814378738,
      -0.048950836062431335,
      0.037134021520614624,
      0.00012195624003652483,
      -0.012106180191040039,
      0.019399195909500122,
      -0.02885521948337555,
      0.09644605964422226,
      -0.05148561671376228,
      0.01970587484538555,
      -0.045774515718221664
    ],
    [
      -0.07537376880645752,
      -0.010190966539084911,
      -0.10908118635416031,
      0.07688680291175842,
      0.06721822172403336,
      -0.03310162201523781,
      0.057012878358364105,
      0.08281192928552628,
      0.019934507086873055,
      0.05050318315625191,
      -0.03880839794874191,
      -0.09147016704082489,
      -0.0034405242186039686,
      -0.00824971403926611,
      -0.058066900819540024,
      -0.011184112168848515,
      0.03999210149049759,
      -0.07543518394231796,
      -0.014900051057338715,
      0.05100412666797638,
      0.03413577377796173,
      0.054372794926166534,
      0.012753278017044067,
      -0.03484131023287773,
      -0.006535617634654045,
      -0.08721614629030228,
      -0.024058781564235687,
      -0.029981713742017746,
      -0.012171934358775616,
      -0.036069341003894806,
      0.10246378928422928,
      0.056864265352487564,
      -0.12277606874704361,
      -0.0017030145972967148,
      0.05605044588446617,
      -0.006568678189069033,
      0.018437013030052185,
      -0.03755801171064377,
      0.00795381236821413,
      0.03436801955103874,
      -0.03945591673254967,
      0.03688365966081619,
      -0.03442743793129921,
      -0.0033967525232583284,
      0.033412158489227295,
      -0.00998422596603632,
      0.017785124480724335,
      -0.008546970784664154,
      -0.028467314317822456,
      0.023842960596084595,
      0.023309320211410522,
      0.034119199961423874,
      -0.05047428607940674,
      0.06857334077358246,
      0.0921439602971077,
      -0.06888772547245026,
      -0.00020599027629941702,
      -0.020917989313602448,
      0.012515051290392876,
      0.09600677341222763,
      -0.026875240728259087,
      -0.03411184251308441,
      -0.018399473279714584,
      -0.0023247557692229748,
      -0.08785978704690933,
      0.05555105209350586,
      0.0016142179956659675,
      -0.010873104445636272,
      0.020640499889850616,
      -0.135939359664917,
      -0.04861286282539368,
      0.0809914693236351,
      -0.07398922741413116,
      -0.04485171660780907,
      0.1013680174946785,
      0.07701044529676437,
      -0.051203180104494095,
      0.047094158828258514,
      0.01946917176246643,
      -0.12577973306179047,
      -0.0002460828982293606,
      -0.022798536345362663,
      0.04383550584316254,
      0.03788292407989502,
      0.07363137602806091,
      -0.013763207010924816,
      0.018595127388834953,
      -0.023085283115506172,
      0.0878991186618805,
      0.0660741925239563,
      0.075522780418396,
      0.06399061530828476,
      -0.1538589745759964,
      0.0014675197890028358,
      -0.016236795112490654,
      0.037231843918561935,
      -0.018090594559907913,
      -0.06400094926357269,
      -0.013256040401756763,
      0.03423122316598892,
      -0.050962500274181366,
      -0.015942847356200218,
      0.00038629918708465993,
      0.03534451872110367,
      0.0629512220621109,
      -0.03194890171289444,
      0.06623370945453644,
      0.09009341895580292,
      0.02078097313642502,
      0.03857821226119995,
      -0.0192546509206295,
      -0.011063439771533012,
      -0.004018991254270077,
      -0.08419220894575119,
      -0.031564317643642426,
      0.06316808611154556,
      0.011010249145328999,
      -0.021175576373934746,
      0.009089736267924309,
      -0.04258709400892258,
      0.02346242405474186,
      0.04041129723191261,
      -0.052548233419656754,
      -0.017780069261789322,
      0.03290572762489319,
      -0.042120397090911865,
      -0.0008338143234141171,
      1.1413739375165413e-32,
      0.020281432196497917,
      0.015877943485975266,
      0.004187794867902994,
      0.010151204653084278,
      -0.03688431531190872,
      -0.02203541062772274,
      0.0856727883219719,
      0.09770581871271133,
      -0.004344368353486061,
      -0.02388317883014679,
      -0.0012825424782931805,
      0.04289662092924118,
      -0.021251164376735687,
      -0.0850902572274208,
      -0.01927640475332737,
      -0.04610277712345123,
      -0.011938330717384815,
      0.018866900354623795,
      0.047621436417102814,
      -0.0016987068811431527,
      0.035301145166158676,
      -0.02203652262687683,
      0.03534470126032829,
      -0.05479520559310913,
      0.02443242259323597,
      0.04870728775858879,
      0.015509363263845444,
      0.028948437422513962,
      -0.014947505667805672,
      0.0072828722186386585,
      0.0066146994940936565,
      -0.025676721706986427,
      -0.0043223039247095585,
      0.012059075757861137,
      0.019529150798916817,
      -0.08250775188207626,
      0.01679285056889057,
      -0.002170858671888709,
      -0.13389497995376587,
      0.04705977067351341,
      0.02234039641916752,
      0.01660189777612686,
      -0.07679886370897293,
      -0.030720598995685577,
      -0.040465738624334335,
      -0.12279090285301208,
      -0.024003664031624794,
      -0.06786931306123734,
      0.08536665141582489,
      -0.03391975164413452,
      -0.03471514582633972,
      0.030069654807448387,
      0.07030820101499557,
      -0.00660438509657979,
      0.030812818557024002,
      -0.06769517809152603,
      -0.06109946593642235,
      -0.01693948544561863,
      -0.0199833232909441,
      0.06499359756708145,
      0.02544238418340683,
      -0.08297150582075119,
      -0.02756926231086254,
      0.009524242021143436,
      -0.047651126980781555,
      -0.02368173748254776,
      0.00739227794110775,
      -0.02447652630507946,
      0.006675746291875839,
      -0.031665269285440445,
      -0.022027550265192986,
      0.013836934231221676,
      0.0694558396935463,
      0.011343630030751228,
      -0.00998128205537796,
      -0.01789965108036995,
      -0.012054510414600372,
      0.04114038124680519,
      0.03863824903964996,
      -0.065461665391922,
      0.00564711494371295,
      -0.032236166298389435,
      0.02982434257864952,
      0.09254124760627747,
      0.041736457496881485,
      -0.054338034242391586,
      -0.0082470728084445,
      -0.051642727106809616,
      -0.022798342630267143,
      -0.07691337168216705,
      -0.005522962659597397,
      -0.012284855358302593,
      -0.04527446627616882,
      -0.07102303951978683,
      0.015066615305840969,
      -1.0470206793958826e-32,
      -0.02159411646425724,
      -0.004259150940924883,
      -0.0441475510597229,
      -0.022763725370168686,
      0.03733448311686516,
      0.011395339854061604,
      0.015249917283654213,
      0.03375735506415367,
      0.07440058141946793,
      0.01612616889178753,
      -0.043027035892009735,
      -0.05500286817550659,
      0.015703110024333,
      -0.05515502393245697,
      -0.059398580342531204,
      -0.031224515289068222,
      -0.1602545529603958,
      -0.12751933932304382,
      0.00010793813999043778,
      0.06891095638275146,
      -0.07544597238302231,
      0.08389929682016373,
      0.07812763005495071,
      -0.0376097708940506,
      -0.051358483731746674,
      0.07469317317008972,
      -0.04298144578933716,
      0.043938472867012024,
      -0.007418742403388023,
      0.06280969083309174,
      0.0002463103737682104,
      -0.02963043563067913,
      -0.09806657582521439,
      0.008609777316451073,
      -0.03878402337431908,
      -0.027532443404197693,
      0.0658256933093071,
      0.12202970683574677,
      -0.057989686727523804,
      0.12687033414840698,
      0.06738777458667755,
      0.06508834660053253,
      -0.02999681979417801,
      -0.003826563246548176,
      0.025815341621637344,
      0.038456983864307404,
      -0.03869524598121643,
      -0.07388006895780563,
      0.07336623966693878,
      -0.049363333731889725,
      -0.01990332640707493,
      0.0030891872011125088,
      -0.04178977757692337,
      0.06282296776771545,
      -0.09785236418247223,
      0.002232437487691641,
      0.07277122139930725,
      0.0564567856490612,
      0.020136915147304535,
      0.05609980970621109,
      0.10052503645420074,
      -0.034215010702610016,
      0.011309878900647163,
      -0.007587083615362644,
      0.06606318056583405,
      0.06319794803857803,
      0.04551560431718826,
      -0.014416883699595928,
      0.03096853569149971,
      0.0319867767393589,
      0.06253212690353394,
      -0.10664933919906616,
      -0.004317388404160738,
      0.037041813135147095,
      0.09707217663526535,
      0.06693004816770554,
      0.09316260367631912,
      -0.08230714499950409,
      0.0026683122850954533,
      0.13805434107780457,
      0.037601929157972336,
      -0.020317044109106064,
      -0.014879019930958748,
      0.03353441134095192,
      -0.05521507188677788,
      -0.054838377982378006,
      0.018341517075896263,
      0.02530101127922535,
      -0.05054353550076485,
      -0.025086333975195885,
      -0.08424706012010574,
      -0.03891563415527344,
      0.023303436115384102,
      0.0854530856013298,
      -0.0195119921118021,
      -6.630573068377998e-08,
      -0.05432554706931114,
      -0.0067834812216460705,
      -0.02573760226368904,
      0.0480385385453701,
      0.028809187933802605,
      0.01917995885014534,
      -0.03047693893313408,
      -0.026159821078181267,
      -0.08185015618801117,
      -0.06732921302318573,
      -0.001635724795050919,
      0.015995588153600693,
      0.0403347872197628,
      -0.01976201683282852,
      0.013907749205827713,
      -0.10264478623867035,
      -0.004319008905440569,
      0.017417632043361664,
      -0.06615648418664932,
      -0.037751033902168274,
      -0.04766635596752167,
      0.05291629582643509,
      -0.05860830843448639,
      -0.08869116008281708,
      0.05487591773271561,
      -0.020094167441129684,
      0.0754609927535057,
      0.048366446048021317,
      0.025467807427048683,
      0.02050045132637024,
      0.004385384265333414,
      0.019349662587046623,
      0.025046132504940033,
      -0.026572413742542267,
      -0.09929493069648743,
      0.09153138846158981,
      -0.06443651765584946,
      0.0173136405646801,
      0.0368988960981369,
      0.056739144027233124,
      0.02237548865377903,
      0.07916729897260666,
      -0.04143024981021881,
      -0.004444590769708157,
      0.04591851681470871,
      0.029505595564842224,
      -0.025296008214354515,
      0.03903144598007202,
      0.03304747864603996,
      -0.04593919217586517,
      -0.0037358764093369246,
      -0.0067735156044363976,
      -0.007617296185344458,
      0.03536045923829079,
      -0.02808888629078865,
      -0.003980838693678379,
      -0.04480135068297386,
      0.019114375114440918,
      -0.01743325963616371,
      -0.0152980862185359,
      0.04804842174053192,
      -0.05550317466259003,
      0.003772949567064643,
      0.0023343064822256565
    ],
    [
      -0.1178411915898323,
      0.017689358443021774,
      -0.016756754368543625,
      0.06885115802288055,
      0.020379139110445976,
      -0.04651150852441788,
      0.08783208578824997,
      0.026692645624279976,
      0.056521251797676086,
      0.010133068077266216,
      0.0015499378787353635,
      -0.061932653188705444,
      0.039527617394924164,
      -0.043216656893491745,
      0.0001228715991601348,
      0.043871328234672546,
      0.04608370363712311,
      -0.07680358737707138,
      -0.025041434913873672,
      0.0008732824353501201,
      0.006653567310422659,
      -0.05054271221160889,
      -0.015466677956283092,
      0.0027879381086677313,
      0.013372252695262432,
      -0.03544169291853905,
      -0.11049807071685791,
      -0.02150706760585308,
      0.053284794092178345,
      -0.013920566067099571,
      0.04607485979795456,
      0.07549706101417542,
      -0.03263973444700241,
      -0.026378856971859932,
      0.049046825617551804,
      -0.02872415818274021,
      0.03781532123684883,
      -0.03209252655506134,
      0.007696701213717461,
      0.02943333424627781,
      0.027743689715862274,
      -0.007593345828354359,
      -0.061611417680978775,
      -0.03311096131801605,
      0.02937641739845276,
      0.03396438807249069,
      -0.006506594829261303,
      -0.00893740076571703,
      -0.0961717963218689,
      0.08150475472211838,
      -0.013889852911233902,
      0.020539551973342896,
      0.0033729698043316603,
      -0.02464560605585575,
      0.0875646322965622,
      -0.06127758324146271,
      -0.015005646273493767,
      -0.06515803188085556,
      0.03488127514719963,
      0.07571607828140259,
      -0.008647383190691471,
      -0.04290999844670296,
      -0.027748186141252518,
      -0.022564513608813286,
      0.07014361023902893,
      0.010096034035086632,
      -0.09272195398807526,
      -0.018069101497530937,
      0.021435661241412163,
      -0.016073571518063545,
      0.003619307419285178,
      0.001514504081569612,
      0.018043888732790947,
      0.06924410909414291,
      0.06051165983080864,
      -0.013140005990862846,
      0.002717579947784543,
      0.06326250731945038,
      -0.01671818643808365,
      -0.1741616278886795,
      -0.08556997030973434,
      -0.036777351051568985,
      -0.06268332153558731,
      -0.07607080787420273,
      0.01787087507545948,
      -0.018976178020238876,
      0.07582880556583405,
      0.05415545403957367,
      0.017704399302601814,
      0.011951674707233906,
      0.1090879812836647,
      0.02715923823416233,
      -0.08670171350240707,
      0.1006232276558876,
      0.04204997420310974,
      0.0028899512253701687,
      -0.016304844990372658,
      -0.009104986675083637,
      -0.05917799472808838,
      0.0845603421330452,
      -0.00034001516178250313,
      -0.004047350492328405,
      -0.072007916867733,
      0.009853717871010303,
      -0.012540945783257484,
      -0.09263568371534348,
      0.006741426419466734,
      0.06764531135559082,
      -0.024218369275331497,
      0.0019236939260736108,
      -0.0079971794039011,
      -0.03296399861574173,
      0.07596281170845032,
      -0.04538364335894585,
      -0.035735271871089935,
      -0.019389856606721878,
      0.009448470547795296,
      -0.043549615889787674,
      0.0771450325846672,
      -0.08289049565792084,
      0.06672609597444534,
      0.030451646074652672,
      0.04469885304570198,
      -0.059654854238033295,
      0.014252625405788422,
      0.020802365615963936,
      0.03322426602244377,
      4.74560514143595e-33,
      0.04255129024386406,
      0.023548636585474014,
      -0.016344182193279266,
      -0.026677897199988365,
      0.03851933404803276,
      -0.023179560899734497,
      0.01586962677538395,
      -0.030536232516169548,
      0.02183750830590725,
      0.09168331325054169,
      0.0029149316251277924,
      -0.06351727992296219,
      0.01945754513144493,
      -0.07482865452766418,
      -0.07969723641872406,
      -0.04051274061203003,
      0.07407251745462418,
      0.03747527301311493,
      -0.06848931312561035,
      0.03188769891858101,
      0.04778706654906273,
      -0.026437822729349136,
      -0.018777301535010338,
      -0.01950063183903694,
      0.026032784953713417,
      0.019207235425710678,
      0.016649339348077774,
      0.006053350865840912,
      -0.03219856694340706,
      0.058586589992046356,
      -0.003984012641012669,
      0.012413968332111835,
      0.03689290210604668,
      0.009983593598008156,
      0.051080480217933655,
      0.031657300889492035,
      -0.0012888772180303931,
      -0.08453967422246933,
      -0.026516802608966827,
      -0.06929225474596024,
      -0.059145987033843994,
      -0.012286057695746422,
      -0.07668370753526688,
      -0.020201627165079117,
      -0.05833512172102928,
      -0.12072817981243134,
      0.02121852897107601,
      -0.057442955672740936,
      -0.02626413106918335,
      -0.09745059907436371,
      0.02657185308635235,
      0.09085424244403839,
      -0.022873979061841965,
      -0.02959781512618065,
      0.02944464236497879,
      -0.06146988645195961,
      -0.007470426149666309,
      0.06637586653232574,
      0.03775516524910927,
      0.057903654873371124,
      0.020669983699917793,
      -0.01611543446779251,
      -0.0709080919623375,
      -0.06954709440469742,
      -0.05885840952396393,
      0.11288070678710938,
      -0.013605772517621517,
      -0.05480299890041351,
      -0.019571682438254356,
      -0.021099228411912918,
      0.049051858484745026,
      -0.0029324335046112537,
      0.07438601553440094,
      0.039851292967796326,
      0.07704589515924454,
      -0.09044235199689865,
      0.05969885364174843,
      0.03356323391199112,
      -0.05155201256275177,
      -0.03743773698806763,
      0.0710226520895958,
      0.010355271399021149,
      -0.06503385305404663,
      0.021761184558272362,
      -0.03599041327834129,
      -0.02565867453813553,
      0.04685259982943535,
      0.01043112576007843,
      -0.12741555273532867,
      -0.03419927880167961,
      -0.08701596409082413,
      -0.09166266769170761,
      0.026329563930630684,
      0.015577688813209534,
      -0.0014372816076502204,
      -4.645494899732139e-33,
      -0.03748474642634392,
      0.021764663979411125,
      -0.020251508802175522,
      -0.03044503554701805,
      -0.028277065604925156,
      -0.013021011836826801,
      0.01430472917854786,
      0.07713836431503296,
      -0.030773494392633438,
      0.008340765722095966,
      0.0677570030093193,
      0.02539847418665886,
      -0.04270048439502716,
      0.013098705559968948,
      -0.04790006950497627,
      0.00543571962043643,
      0.0024031447246670723,
      -0.08703385293483734,
      -0.01023577619343996,
      0.009081680327653885,
      0.009864212945103645,
      0.07564668357372284,
      -0.06281939893960953,
      0.12825332581996918,
      -0.07743603736162186,
      0.08963007479906082,
      0.0007019180920906365,
      0.07881219685077667,
      0.06853820383548737,
      -0.0592942014336586,
      -0.029671162366867065,
      -0.033064935356378555,
      -0.13416731357574463,
      -0.04158785194158554,
      0.058853622525930405,
      -0.08889064192771912,
      0.03492918238043785,
      0.056658145040273666,
      -0.07797209173440933,
      0.06180262193083763,
      0.05307390168309212,
      0.017801256850361824,
      0.026836654171347618,
      -0.023986216634511948,
      0.0333876796066761,
      -0.012876416556537151,
      0.05562334880232811,
      -0.03975795954465866,
      0.049654778093099594,
      -0.016477201133966446,
      0.04117290675640106,
      0.017278652638196945,
      0.04663284868001938,
      0.15318511426448822,
      -0.003888576291501522,
      0.01794898509979248,
      -0.033916838467121124,
      0.008932546712458134,
      0.0573849231004715,
      0.017500095069408417,
      -0.0116740046069026,
      -0.02443312294781208,
      0.07906445860862732,
      0.005536889657378197,
      0.10383525490760803,
      0.048518985509872437,
      -0.009287015534937382,
      -0.018059857189655304,
      0.10861922800540924,
      -0.008291454054415226,
      0.06681980937719345,
      0.06016573682427406,
      0.014096593484282494,
      -0.0032593412324786186,
      0.03561832010746002,
      0.02011943608522415,
      0.07369983941316605,
      -0.06692636758089066,
      0.024308321997523308,
      0.10649000853300095,
      -0.034889645874500275,
      0.03840694576501846,
      0.05183003470301628,
      -0.01834583468735218,
      0.049830321222543716,
      -0.027099760249257088,
      -0.02332714945077896,
      0.01245846040546894,
      0.004987403284758329,
      -0.057059284299612045,
      -0.05742700770497322,
      -0.03636128082871437,
      -0.01889365166425705,
      -0.017627455294132233,
      -0.06292805820703506,
      -6.182163048151779e-08,
      -0.038657039403915405,
      -0.06943251937627792,
      -0.005285813473165035,
      -0.0710158720612526,
      0.0593094564974308,
      0.04856880009174347,
      -0.023739367723464966,
      -0.10793478786945343,
      -0.046991679817438126,
      -0.08144904673099518,
      0.0830494835972786,
      0.011359619908034801,
      -0.03001670353114605,
      -0.06925612688064575,
      0.013340449891984463,
      -0.07357322424650192,
      -0.05815695971250534,
      -0.004179748706519604,
      -0.03612540289759636,
      -0.06303583085536957,
      0.02149617113173008,
      0.028661761432886124,
      0.044047266244888306,
      -0.015012411400675774,
      -0.019302595406770706,
      -0.022922873497009277,
      0.09938284009695053,
      0.06815843284130096,
      -0.02207409404218197,
      -0.0052402145229279995,
      -0.056461770087480545,
      -0.0028186652343720198,
      0.08698821812868118,
      -0.03222578391432762,
      0.025213535875082016,
      0.0662810206413269,
      -0.01515173353254795,
      0.030680431053042412,
      0.07590664178133011,
      0.04973425343632698,
      0.035247404128313065,
      -0.04415883868932724,
      -0.029931241646409035,
      0.032645825296640396,
      0.049004003405570984,
      0.007030458189547062,
      -0.0970911905169487,
      -0.015401475131511688,
      -0.02128801867365837,
      -0.04135166481137276,
      0.023972246795892715,
      -0.04392263665795326,
      0.06403657793998718,
      0.05959630385041237,
      -0.02657531015574932,
      -0.05496961250901222,
      -0.0010225089499726892,
      -0.04552936553955078,
      0.017303869128227234,
      0.035195186734199524,
      0.07447053492069244,
      -0.04792996123433113,
      0.03098197653889656,
      0.06012454256415367
    ],
    [
      -0.04148803651332855,
      -0.020150545984506607,
      -0.126377135515213,
      0.05555088818073273,
      0.03629046306014061,
      -0.040380869060754776,
      -0.011162597686052322,
      0.045683473348617554,
      -0.0406256802380085,
      0.007394381333142519,
      0.04861895740032196,
      -0.057024288922548294,
      -0.03595063462853432,
      -0.02714405581355095,
      0.004195195622742176,
      -0.013837307691574097,
      -0.06022271141409874,
      -0.08306000381708145,
      -0.02665790542960167,
      0.004883954301476479,
      0.0713018998503685,
      -0.02204347401857376,
      -0.06795958429574966,
      -0.04922347888350487,
      -0.03762645274400711,
      -0.009047050029039383,
      -0.04436473920941353,
      -0.018039118498563766,
      -0.02405703440308571,
      0.017460117116570473,
      0.05222894251346588,
      0.10831468552350998,
      -0.08141841739416122,
      0.003944416996091604,
      -0.0002264412905788049,
      0.0344376303255558,
      0.0029791940469294786,
      -0.033272914588451385,
      0.0009027770720422268,
      -0.045579779893159866,
      -0.027981603518128395,
      -0.012918086722493172,
      0.06952456384897232,
      -0.024842537939548492,
      0.07806530594825745,
      0.03646603226661682,
      -0.04964694008231163,
      0.03772609308362007,
      -0.013541009277105331,
      -0.019247859716415405,
      0.058394573628902435,
      0.05824170634150505,
      -0.02586980164051056,
      0.07037638872861862,
      0.0982225313782692,
      0.09163227677345276,
      -0.0467333160340786,
      -0.05929473415017128,
      0.011536257341504097,
      0.017215954139828682,
      -0.008389739319682121,
      0.050195783376693726,
      -0.024132082238793373,
      -0.03367215767502785,
      -0.015917707234621048,
      -0.011452280916273594,
      0.022067492827773094,
      -0.011562933214008808,
      0.031135736033320427,
      -0.0828457921743393,
      -0.07299602776765823,
      0.017392288893461227,
      0.009204165078699589,
      -0.04907901957631111,
      0.06867972016334534,
      0.03481002524495125,
      -0.024651285260915756,
      -0.014657853171229362,
      -0.008647743612527847,
      -0.11137515306472778,
      0.07028653472661972,
      0.06886657327413559,
      0.07317540794610977,
      -0.0125954644754529,
      -0.007397207897156477,
      -0.01561869215220213,
      0.03739127516746521,
      -0.061725955456495285,
      0.06672558933496475,
      0.07307354360818863,
      0.09693643450737,
      -0.007979603484272957,
      -0.14404362440109253,
      -0.022011876106262207,
      -0.003913722932338715,
      0.04670630395412445,
      0.005486257839947939,
      -0.017790891230106354,
      -0.016820937395095825,
      0.030379466712474823,
      -0.07270514219999313,
      -0.08544422686100006,
      0.0923384502530098,
      0.06525003165006638,
      -0.0309271402657032,
      -0.06839586049318314,
      -0.0032300048042088747,
      0.1196025162935257,
      -0.02992272563278675,
      -0.009561199694871902,
      -0.013538028113543987,
      0.03077639639377594,
      0.0469399057328701,
      -0.10858925431966782,
      -0.0006273799808695912,
      0.026905199512839317,
      0.005568135064095259,
      -0.03783175349235535,
      0.053828973323106766,
      0.031839966773986816,
      0.028932206332683563,
      0.069545678794384,
      0.01955333538353443,
      0.07134005427360535,
      -0.005812960211187601,
      0.028504785150289536,
      -0.011295164003968239,
      1.0056498904026615e-32,
      -0.001208760659210384,
      -0.009754336439073086,
      -0.002669675275683403,
      0.034171003848314285,
      -0.00851245503872633,
      -0.014141511172056198,
      0.06092216074466705,
      0.029904071241617203,
      0.03248979523777962,
      0.022228294983506203,
      0.015751589089632034,
      0.11561316251754761,
      -0.08480075746774673,
      0.007731543853878975,
      -0.021640408784151077,
      -0.14382237195968628,
      0.030723752453923225,
      0.04501211643218994,
      0.05860516056418419,
      -0.08424390852451324,
      0.03759927675127983,
      0.035691965371370316,
      -0.013342056423425674,
      -0.017055433243513107,
      0.09497356414794922,
      0.09878145903348923,
      0.012693198397755623,
      0.030878562480211258,
      -0.048514388501644135,
      0.024324459955096245,
      0.054702188819646835,
      -0.02948831580579281,
      0.04018925502896309,
      -0.0360461100935936,
      0.038404352962970734,
      -0.037294115871191025,
      -0.045802854001522064,
      0.0034985339734703302,
      -0.09699787199497223,
      -0.0271576140075922,
      -0.012714546173810959,
      0.0013068371918052435,
      -0.05230657383799553,
      -0.014412670396268368,
      -0.023335585370659828,
      -0.0019836900755763054,
      0.03145487233996391,
      0.03758474439382553,
      0.08853967487812042,
      -0.07272108644247055,
      0.018497195094823837,
      0.006842970848083496,
      -0.025328222662210464,
      0.015923188999295235,
      0.0614318810403347,
      -0.06167653203010559,
      -0.0642935037612915,
      -0.05142200365662575,
      -0.013851769268512726,
      0.03641548380255699,
      -0.019783949479460716,
      -0.05292753130197525,
      -0.10847878456115723,
      0.007539148908108473,
      -0.059964925050735474,
      -0.005379051901400089,
      -0.02511194534599781,
      -0.011315256357192993,
      0.022679435089230537,
      -0.005896812304854393,
      -0.06274429708719254,
      -0.008587131276726723,
      0.02177128940820694,
      0.040307220071554184,
      0.03211646154522896,
      -0.011427134275436401,
      -0.008027711883187294,
      -0.013800726272165775,
      -0.07958664745092392,
      -0.14087419211864471,
      -0.05060015246272087,
      0.0592728890478611,
      0.024556072428822517,
      0.1020575538277626,
      0.05794743821024895,
      -0.10210181772708893,
      -0.026226917281746864,
      0.008555229753255844,
      -0.00010034874867415056,
      -0.1029253676533699,
      -0.0545491985976696,
      -0.013438071124255657,
      0.06721580773591995,
      -0.009205838665366173,
      0.02391044981777668,
      -1.1823881843794787e-32,
      0.021352248266339302,
      -0.0468849278986454,
      -0.014119352214038372,
      -0.023708850145339966,
      0.028019040822982788,
      0.04190533980727196,
      0.02148985117673874,
      -0.007592064328491688,
      0.053257398307323456,
      -0.05171681568026543,
      -0.026887264102697372,
      0.042525820434093475,
      -0.018797922879457474,
      -0.034335628151893616,
      -0.06565956026315689,
      0.03722076117992401,
      -0.1288827508687973,
      -0.09620148688554764,
      -0.005355576053261757,
      0.05408027395606041,
      -0.0443236418068409,
      -0.009903415106236935,
      0.018859824165701866,
      -0.005944384727627039,
      -0.06328262388706207,
      0.032508883625268936,
      -0.0034831634256988764,
      0.006425582338124514,
      -0.03071277029812336,
      0.06290335208177567,
      -0.03507659584283829,
      -0.034957464784383774,
      -0.03681459277868271,
      0.06808207184076309,
      -0.05233895778656006,
      -0.0479055717587471,
      0.030183520168066025,
      0.007300585974007845,
      -0.1041821539402008,
      0.06556084752082825,
      0.08865503966808319,
      0.06775805354118347,
      -0.059369705617427826,
      -0.0023289744276553392,
      -0.0013050795532763004,
      0.03682298958301544,
      0.029251467436552048,
      -0.05970289930701256,
      0.06300286203622818,
      -0.06761252135038376,
      -0.005691865459084511,
      -0.04499521851539612,
      -0.03884061053395271,
      0.002861837623640895,
      -0.11394500732421875,
      0.006443494465202093,
      0.07429686933755875,
      -0.012146171182394028,
      0.033323775976896286,
      0.039042528718709946,
      0.06766945123672485,
      -0.09330803155899048,
      0.027933267876505852,
      0.01798207312822342,
      0.028885550796985626,
      0.004244404844939709,
      0.03693843260407448,
      0.01153084821999073,
      -0.002707208739593625,
      0.013067440129816532,
      0.11181027442216873,
      -0.13209141790866852,
      0.01942715235054493,
      -0.014965211972594261,
      0.012909320183098316,
      0.03335035219788551,
      0.11669272929430008,
      -0.016827723011374474,
      0.011845888569951057,
      0.09702682495117188,
      0.010141942650079727,
      -0.008395813405513763,
      -0.0013748717028647661,
      0.027148207649588585,
      -0.09573289752006531,
      -0.016759736463427544,
      0.06784505397081375,
      0.02306562289595604,
      -0.0636373832821846,
      0.016329970210790634,
      -0.12030872702598572,
      0.0011461185058578849,
      0.01269129291176796,
      0.04064423218369484,
      -0.02245182916522026,
      -5.905310729303892e-08,
      -0.06388277560472488,
      -0.04102427139878273,
      -0.0218865517526865,
      -0.013405057601630688,
      -0.004630522336810827,
      0.04511100426316261,
      0.04001186788082123,
      0.010824368335306644,
      -0.012389830313622952,
      -0.04603508114814758,
      0.04296150431036949,
      0.06296929717063904,
      -0.0075720068998634815,
      -0.008024893701076508,
      0.037709351629018784,
      -0.1014358252286911,
      -0.0744924247264862,
      0.0527375191450119,
      -0.0833713635802269,
      -0.023939894512295723,
      -0.05824650451540947,
      0.05429449677467346,
      -0.0062324958853423595,
      -0.08136062324047089,
      0.04014119878411293,
      -0.07073971629142761,
      0.06220777705311775,
      0.058013856410980225,
      0.005569742526859045,
      0.11582572758197784,
      -0.010828585363924503,
      0.04457530379295349,
      0.0187600776553154,
      -0.02545906789600849,
      -0.06328148394823074,
      0.12628746032714844,
      -0.009884083643555641,
      0.0032523120753467083,
      0.035960908979177475,
      0.016224240884184837,
      0.001059476868249476,
      0.03932296857237816,
      -0.058552343398332596,
      -0.0341806560754776,
      0.08005441725254059,
      -0.025570031255483627,
      0.028666967526078224,
      0.04167584329843521,
      0.030594393610954285,
      -0.014062566682696342,
      -0.06665688753128052,
      0.008584129624068737,
      -0.08511769771575928,
      0.0320713147521019,
      -0.009556454606354237,
      -0.015471949242055416,
      -0.08832739293575287,
      0.062004655599594116,
      0.03251668065786362,
      -0.03710739687085152,
      -0.03311147540807724,
      -0.06541647762060165,
      0.004285603761672974,
      0.036470379680395126
    ],
    [
      -0.10517749190330505,
      0.02943701483309269,
      -0.018452277407050133,
      -0.010013277642428875,
      0.024762026965618134,
      -0.016245437785983086,
      0.03931128978729248,
      0.0217704176902771,
      0.03427921608090401,
      -0.01578100584447384,
      0.057876914739608765,
      -0.041837822645902634,
      0.09650874882936478,
      0.008713115006685257,
      -0.009508701972663403,
      0.10793163627386093,
      0.004360335413366556,
      -0.02458636648952961,
      -0.005719010718166828,
      0.07262643426656723,
      0.02749917469918728,
      0.04146670177578926,
      -0.020794082432985306,
      0.018637726083397865,
      -0.045283157378435135,
      -0.03680773824453354,
      0.00858345441520214,
      0.06200604885816574,
      0.01846517063677311,
      -0.07186392694711685,
      0.08510132879018784,
      0.08196023851633072,
      -0.04087261110544205,
      -0.06957370042800903,
      0.13919013738632202,
      0.029637057334184647,
      0.01918737217783928,
      0.031266048550605774,
      0.005222394596785307,
      -0.020878419280052185,
      0.05234627425670624,
      -0.04520624876022339,
      0.035542264580726624,
      -0.028834186494350433,
      -0.019195089116692543,
      0.026323478668928146,
      0.0008743704529479146,
      -0.026804553344845772,
      -0.06697255373001099,
      0.0327361635863781,
      0.03193395957350731,
      0.030262671411037445,
      0.015499942936003208,
      0.06447473913431168,
      0.02085651084780693,
      0.0047464314848184586,
      -0.0795673280954361,
      -0.05265355110168457,
      0.0055081164464354515,
      0.035763930529356,
      0.07135487347841263,
      0.05328688025474548,
      0.014224473387002945,
      -0.0006867728661745787,
      0.0014183534076437354,
      0.049772679805755615,
      0.006603557616472244,
      -0.04744701832532883,
      -0.09374970197677612,
      -0.0020158595871180296,
      -0.01103527657687664,
      -0.0572858601808548,
      -0.059112947434186935,
      0.08016879111528397,
      0.06166543811559677,
      0.06590951979160309,
      -0.05963714420795441,
      -0.07557236403226852,
      0.04841535910964012,
      -0.119341641664505,
      -0.0743098333477974,
      0.03569909185171127,
      0.01424406748265028,
      -0.028145018965005875,
      0.02001071162521839,
      0.032495807856321335,
      0.017784368246793747,
      0.0013569979928433895,
      0.02315332554280758,
      0.06581272929906845,
      0.11720693111419678,
      -0.054015323519706726,
      -0.012694180011749268,
      0.03506235033273697,
      0.1524338573217392,
      -0.009945681318640709,
      -0.028684968128800392,
      0.02358674630522728,
      0.004463575314730406,
      0.07165958732366562,
      0.0013878770405426621,
      0.04608381539583206,
      -0.11534330248832703,
      0.019325315952301025,
      0.03857296705245972,
      -0.024480000138282776,
      0.06689725071191788,
      0.02373523637652397,
      -0.024315716698765755,
      0.0154556380584836,
      0.02689594030380249,
      -0.04350763559341431,
      0.024887273088097572,
      -0.07169093936681747,
      -0.030060110613703728,
      0.06057277321815491,
      -0.0231236070394516,
      -0.008522644639015198,
      0.007713319268077612,
      -0.12768179178237915,
      -0.020903481170535088,
      -0.004662671126425266,
      -0.018302803859114647,
      0.03970837965607643,
      -0.017336290329694748,
      -0.08134632557630539,
      0.02813006192445755,
      5.875288273354785e-33,
      0.017314957454800606,
      0.08568823337554932,
      0.015014574863016605,
      0.0029381182976067066,
      -0.06113043427467346,
      -0.005935978144407272,
      -0.039178960025310516,
      -0.011430546641349792,
      -0.07087291032075882,
      0.06636262685060501,
      -0.007320880424231291,
      0.021008402109146118,
      0.026514170691370964,
      -0.07431600242853165,
      -0.026103252544999123,
      0.04932452365756035,
      0.023272760212421417,
      0.06852056831121445,
      0.018068237230181694,
      0.04154037684202194,
      0.0932556688785553,
      -0.09069054573774338,
      -0.0054961941204965115,
      -0.07646625488996506,
      -0.023797517642378807,
      0.08566273748874664,
      0.0228393767029047,
      0.034024860709905624,
      0.01928018033504486,
      0.015337515622377396,
      0.015988754108548164,
      -0.03426552563905716,
      0.04760412499308586,
      0.0029649159405380487,
      0.07461820542812347,
      0.018723268061876297,
      -0.04957941547036171,
      -0.029347291216254234,
      -0.10316143929958344,
      -0.00782347284257412,
      0.05371416360139847,
      0.07091231644153595,
      -0.014286911115050316,
      0.032186225056648254,
      -0.006526308134198189,
      -0.06873653829097748,
      -0.034484561532735825,
      0.008111261762678623,
      0.07571166753768921,
      0.013920924626290798,
      -0.03028090111911297,
      0.050887927412986755,
      -0.01839742809534073,
      0.0038825697265565395,
      -0.006251893006265163,
      -0.03129076585173607,
      -0.08334197849035263,
      0.07557264715433121,
      -0.022157497704029083,
      0.09562822431325912,
      -0.01852523535490036,
      0.037161942571401596,
      -0.08019384741783142,
      -0.003111581550911069,
      0.003408529330044985,
      0.019661303609609604,
      -0.02416003867983818,
      -0.07541822642087936,
      -0.010109040886163712,
      -0.0763779953122139,
      0.005311071872711182,
      -0.03822515904903412,
      -0.015437246300280094,
      0.05406744405627251,
      0.005127673503011465,
      -0.12586869299411774,
      -0.05322885513305664,
      0.048238180577754974,
      -0.020068803802132607,
      -0.0789918527007103,
      -0.08424559980630875,
      0.013500608503818512,
      -0.03641818091273308,
      0.12000937759876251,
      -0.038649093359708786,
      -0.057797353714704514,
      -0.051842544227838516,
      -0.020327895879745483,
      -0.060074977576732635,
      0.009479405358433723,
      0.01405485812574625,
      -0.06392426043748856,
      -0.0804460197687149,
      0.02177238091826439,
      0.0015377210220322013,
      -7.082736968736238e-33,
      -0.01755930855870247,
      0.0016452238196507096,
      -0.022937485948204994,
      -0.024787768721580505,
      -0.02681180275976658,
      -0.016940439119935036,
      0.08949503302574158,
      0.09296417981386185,
      0.0086660860106349,
      0.0019187607103958726,
      0.02883225865662098,
      0.02642345242202282,
      0.023398382589221,
      -0.005641992203891277,
      0.010984830558300018,
      -0.005671333521604538,
      -0.13247011601924896,
      -0.06912858784198761,
      -0.007533093448728323,
      0.044394854456186295,
      0.0342818982899189,
      0.08942852914333344,
      -0.04566529393196106,
      0.0612112358212471,
      -0.030371129512786865,
      0.09713288396596909,
      -0.004916479345411062,
      0.048343200236558914,
      -0.013448186218738556,
      -0.014995161443948746,
      0.006736611481755972,
      0.08279954642057419,
      -0.11064648628234863,
      0.032577622681856155,
      -0.06517492979764938,
      -0.09012353420257568,
      -0.02049466222524643,
      0.03342248499393463,
      -0.025479914620518684,
      0.05542457848787308,
      0.023467395454645157,
      0.07878190279006958,
      -0.040856897830963135,
      -0.033073049038648605,
      -0.007300021126866341,
      -0.051319222897291183,
      0.00911598838865757,
      -0.041378747671842575,
      0.1054786965250969,
      -0.08682053536176682,
      -0.022454045712947845,
      -0.0505787692964077,
      0.0575798936188221,
      0.033241305500268936,
      -0.01852148398756981,
      0.07128094881772995,
      -0.029510490596294403,
      0.04613552987575531,
      0.000646915112156421,
      -0.007062205579131842,
      0.023678060621023178,
      0.06110966578125954,
      0.07262939214706421,
      0.03843025118112564,
      0.017588723450899124,
      -0.0415603406727314,
      -0.06146308034658432,
      -0.08081276714801788,
      0.07299245148897171,
      -0.08513572812080383,
      0.057110704481601715,
      -0.049713488668203354,
      -0.03037731908261776,
      -0.040239255875349045,
      0.0728670284152031,
      -0.03848668187856674,
      0.08397550135850906,
      -0.03068999946117401,
      0.012405919842422009,
      0.038632966578006744,
      -0.03330070897936821,
      0.04953107610344887,
      0.031495776027441025,
      0.07982990145683289,
      -0.0032474605832248926,
      -0.018825795501470566,
      0.02140159159898758,
      0.0008997760014608502,
      -0.06107330322265625,
      0.02174564264714718,
      -0.010251580737531185,
      0.04350363835692406,
      -0.07446448504924774,
      0.010131306014955044,
      -0.09506261348724365,
      -6.335907443144606e-08,
      -0.05672261118888855,
      -0.028906334191560745,
      -0.06364084780216217,
      -0.031121326610445976,
      0.0011018140939995646,
      0.010563438758254051,
      -0.009823386557400227,
      -0.13636191189289093,
      -0.02664588764309883,
      -0.006967923603951931,
      0.024882882833480835,
      -0.028227319940924644,
      -0.07115045189857483,
      -0.06566424667835236,
      -0.022974781692028046,
      -0.053435131907463074,
      -0.02084273099899292,
      0.0014067143201828003,
      -0.09910421073436737,
      0.00225939997471869,
      -0.05990998074412346,
      0.02485322766005993,
      -0.027611030265688896,
      -0.061362575739622116,
      -0.006696210242807865,
      -0.008443628437817097,
      0.06301332265138626,
      -0.012855193577706814,
      0.011158149689435959,
      0.05290856212377548,
      0.05122653767466545,
      0.07999227941036224,
      0.005266418214887381,
      -0.06746561080217361,
      -0.04115749150514603,
      0.11621623486280441,
      0.024699479341506958,
      0.008360341191291809,
      0.04724924638867378,
      0.06007900834083557,
      -0.0295915137976408,
      0.05532573163509369,
      -0.07528287172317505,
      -0.010437164455652237,
      0.07878963649272919,
      -0.016759615391492844,
      -0.08154357969760895,
      0.014788617379963398,
      0.0008476116345264018,
      -0.0027745834086090326,
      -0.05589338019490242,
      -0.05530650541186333,
      -0.051087506115436554,
      -0.007323830854147673,
      -0.026005437597632408,
      -0.046581707894802094,
      -0.07484077662229538,
      -0.03753763809800148,
      0.018063172698020935,
      -0.008196822367608547,
      0.10794591903686523,
      -0.04314177855849266,
      0.08930732309818268,
      -0.023943191394209862
    ]
  ]
}